#![doc = "Peripheral access API for GD32F10X_HD microcontrollers (generated using svd2rust v0.33.5 ( ))\n\nYou can find an overview of the generated API [here].\n\nAPI features to be included in the [next]
svd2rust release can be generated by cloning the svd2rust [repository], checking out the above commit, and running `cargo doc --open`.\n\n[here]: https://docs.rs/svd2rust/0.33.5/svd2rust/#peripheral-api\n[next]: https://github.com/rust-embedded/svd2rust/blob/master/CHANGELOG.md#unreleased\n[repository]: https://github.com/rust-embedded/svd2rust"]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![no_std]
use core::marker::PhantomData;
use core::ops::Deref;
#[doc = r"Number available in the NVIC for configuring priority"]
pub const NVIC_PRIO_BITS: u8 = 4;
pub use cortex_m::peripheral::Peripherals as CorePeripherals;
pub use cortex_m::peripheral::{CBP, CPUID, DCB, DWT, FPB, ITM, MPU, NVIC, SCB, SYST, TPIU};
#[allow(unused_imports)]
use generic::*;
#[doc = r"Common register and bit access and modify traits"]
pub mod generic {
    use core::marker;
    #[doc = " Raw register type (`u8`, `u16`, `u32`, ...)"]
    pub trait RawReg:
        Copy
        + Default
        + From<bool>
        + core::ops::BitOr<Output = Self>
        + core::ops::BitAnd<Output = Self>
        + core::ops::BitOrAssign
        + core::ops::BitAndAssign
        + core::ops::Not<Output = Self>
        + core::ops::Shl<u8, Output = Self>
    {
        #[doc = " Mask for bits of width `WI`"]
        fn mask<const WI: u8>() -> Self;
        #[doc = " Mask for bits of width 1"]
        fn one() -> Self;
    }
    macro_rules! raw_reg {
        ($ U : ty , $ size : literal , $ mask : ident) => {
            impl RawReg for $U {
                #[inline(always)]
                fn mask<const WI: u8>() -> Self {
                    $mask::<WI>()
                }
                #[inline(always)]
                fn one() -> Self {
                    1
                }
            }
            const fn $mask<const WI: u8>() -> $U {
                <$U>::MAX >> ($size - WI)
            }
            impl FieldSpec for $U {
                type Ux = $U;
            }
        };
    }
    raw_reg!(u8, 8, mask_u8);
    raw_reg!(u16, 16, mask_u16);
    raw_reg!(u32, 32, mask_u32);
    raw_reg!(u64, 64, mask_u64);
    #[doc = " Raw register type"]
    pub trait RegisterSpec {
        #[doc = " Raw register type (`u8`, `u16`, `u32`, ...)."]
        type Ux: RawReg;
    }
    #[doc = " Raw field type"]
    pub trait FieldSpec: Sized {
        #[doc = " Raw field type (`u8`, `u16`, `u32`, ...)."]
        type Ux: Copy + core::fmt::Debug + PartialEq + From<Self>;
    }
    #[doc = " Marker for fields with fixed values"]
    pub trait IsEnum: FieldSpec {}
    #[doc = " Trait implemented by readable registers to enable the `read` method."]
    #[doc = ""]
    #[doc = " Registers marked with `Writable` can be also be `modify`'ed."]
    pub trait Readable: RegisterSpec {}
    #[doc = " Trait implemented by writeable registers."]
    #[doc = ""]
    #[doc = " This enables the  `write`, `write_with_zero` and `reset` methods."]
    #[doc = ""]
    #[doc = " Registers marked with `Readable` can be also be `modify`'ed."]
    pub trait Writable: RegisterSpec {
        #[doc = " Is it safe to write any bits to register"]
        type Safety;
        #[doc = " Specifies the register bits that are not changed if you pass `1` and are changed if you pass `0`"]
        const ZERO_TO_MODIFY_FIELDS_BITMAP: Self::Ux;
        #[doc = " Specifies the register bits that are not changed if you pass `0` and are changed if you pass `1`"]
        const ONE_TO_MODIFY_FIELDS_BITMAP: Self::Ux;
    }
    #[doc = " Reset value of the register."]
    #[doc = ""]
    #[doc = " This value is the initial value for the `write` method. It can also be directly written to the"]
    #[doc = " register by using the `reset` method."]
    pub trait Resettable: RegisterSpec {
        #[doc = " Reset value of the register."]
        const RESET_VALUE: Self::Ux;
        #[doc = " Reset value of the register."]
        #[inline(always)]
        fn reset_value() -> Self::Ux {
            Self::RESET_VALUE
        }
    }
    #[doc(hidden)]
    pub mod raw {
        use super::{marker, BitM, FieldSpec, RegisterSpec, Unsafe, Writable};
        pub struct R<REG: RegisterSpec> {
            pub(crate) bits: REG::Ux,
            pub(super) _reg: marker::PhantomData<REG>,
        }
        pub struct W<REG: RegisterSpec> {
            #[doc = "Writable bits"]
            pub(crate) bits: REG::Ux,
            pub(super) _reg: marker::PhantomData<REG>,
        }
        pub struct FieldReader<FI = u8>
        where
            FI: FieldSpec,
        {
            pub(crate) bits: FI::Ux,
            _reg: marker::PhantomData<FI>,
        }
        impl<FI: FieldSpec> FieldReader<FI> {
            #[doc = " Creates a new instance of the reader."]
            #[allow(unused)]
            #[inline(always)]
            pub(crate) const fn new(bits: FI::Ux) -> Self {
                Self {
                    bits,
                    _reg: marker::PhantomData,
                }
            }
        }
        pub struct BitReader<FI = bool> {
            pub(crate) bits: bool,
            _reg: marker::PhantomData<FI>,
        }
        impl<FI> BitReader<FI> {
            #[doc = " Creates a new instance of the reader."]
            #[allow(unused)]
            #[inline(always)]
            pub(crate) const fn new(bits: bool) -> Self {
                Self {
                    bits,
                    _reg: marker::PhantomData,
                }
            }
        }
        pub struct FieldWriter<'a, REG, const WI: u8, FI = u8, Safety = Unsafe>
        where
            REG: Writable + RegisterSpec,
            FI: FieldSpec,
        {
            pub(crate) w: &'a mut W<REG>,
            pub(crate) o: u8,
            _field: marker::PhantomData<(FI, Safety)>,
        }
        impl<'a, REG, const WI: u8, FI, Safety> FieldWriter<'a, REG, WI, FI, Safety>
        where
            REG: Writable + RegisterSpec,
            FI: FieldSpec,
        {
            #[doc = " Creates a new instance of the writer"]
            #[allow(unused)]
            #[inline(always)]
            pub(crate) fn new(w: &'a mut W<REG>, o: u8) -> Self {
                Self {
                    w,
                    o,
                    _field: marker::PhantomData,
                }
            }
        }
        pub struct BitWriter<'a, REG, FI = bool, M = BitM>
        where
            REG: Writable + RegisterSpec,
            bool: From<FI>,
        {
            pub(crate) w: &'a mut W<REG>,
            pub(crate) o: u8,
            _field: marker::PhantomData<(FI, M)>,
        }
        impl<'a, REG, FI, M> BitWriter<'a, REG, FI, M>
        where
            REG: Writable + RegisterSpec,
            bool: From<FI>,
        {
            #[doc = " Creates a new instance of the writer"]
            #[allow(unused)]
            #[inline(always)]
            pub(crate) fn new(w: &'a mut W<REG>, o: u8) -> Self {
                Self {
                    w,
                    o,
                    _field: marker::PhantomData,
                }
            }
        }
    }
    #[doc = " Register reader."]
    #[doc = ""]
    #[doc = " Result of the `read` methods of registers. Also used as a closure argument in the `modify`"]
    #[doc = " method."]
    pub type R<REG> = raw::R<REG>;
    impl<REG: RegisterSpec> R<REG> {
        #[doc = " Reads raw bits from register."]
        #[inline(always)]
        pub const fn bits(&self) -> REG::Ux {
            self.bits
        }
    }
    impl<REG: RegisterSpec, FI> PartialEq<FI> for R<REG>
    where
        REG::Ux: PartialEq,
        FI: Copy,
        REG::Ux: From<FI>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&REG::Ux::from(*other))
        }
    }
    #[doc = " Register writer."]
    #[doc = ""]
    #[doc = " Used as an argument to the closures in the `write` and `modify` methods of the register."]
    pub type W<REG> = raw::W<REG>;
    impl<REG: Writable> W<REG> {
        #[doc = " Writes raw bits to the register."]
        #[doc = ""]
        #[doc = " # Safety"]
        #[doc = ""]
        #[doc = " Passing incorrect value can cause undefined behaviour. See reference manual"]
        #[inline(always)]
        pub unsafe fn bits(&mut self, bits: REG::Ux) -> &mut Self {
            self.bits = bits;
            self
        }
    }
    impl<REG> W<REG>
    where
        REG: Writable<Safety = Safe>,
    {
        #[doc = " Writes raw bits to the register."]
        #[inline(always)]
        pub fn set(&mut self, bits: REG::Ux) -> &mut Self {
            self.bits = bits;
            self
        }
    }
    #[doc = " Field reader."]
    #[doc = ""]
    #[doc = " Result of the `read` methods of fields."]
    pub type FieldReader<FI = u8> = raw::FieldReader<FI>;
    #[doc = " Bit-wise field reader"]
    pub type BitReader<FI = bool> = raw::BitReader<FI>;
    impl<FI: FieldSpec> FieldReader<FI> {
        #[doc = " Reads raw bits from field."]
        #[inline(always)]
        pub const fn bits(&self) -> FI::Ux {
            self.bits
        }
    }
    impl<FI: FieldSpec> core::fmt::Debug for FieldReader<FI> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            core::fmt::Debug::fmt(&self.bits, f)
        }
    }
    impl<FI> PartialEq<FI> for FieldReader<FI>
    where
        FI: FieldSpec + Copy,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&FI::Ux::from(*other))
        }
    }
    impl<FI> PartialEq<FI> for BitReader<FI>
    where
        FI: Copy,
        bool: From<FI>,
    {
        #[inline(always)]
        fn eq(&self, other: &FI) -> bool {
            self.bits.eq(&bool::from(*other))
        }
    }
    impl<FI> BitReader<FI> {
        #[doc = " Value of the field as raw bits."]
        #[inline(always)]
        pub const fn bit(&self) -> bool {
            self.bits
        }
        #[doc = " Returns `true` if the bit is clear (0)."]
        #[inline(always)]
        pub const fn bit_is_clear(&self) -> bool {
            !self.bit()
        }
        #[doc = " Returns `true` if the bit is set (1)."]
        #[inline(always)]
        pub const fn bit_is_set(&self) -> bool {
            self.bit()
        }
    }
    impl<FI> core::fmt::Debug for BitReader<FI> {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            core::fmt::Debug::fmt(&self.bits, f)
        }
    }
    #[doc = " Marker for register/field writers which can take any value of specified width"]
    pub struct Safe;
    #[doc = " You should check that value is allowed to pass to register/field writer marked with this"]
    pub struct Unsafe;
    #[doc = " Marker for field writers are safe to write in specified inclusive range"]
    pub struct Range<const MIN: u64, const MAX: u64>;
    #[doc = " Marker for field writers are safe to write in specified inclusive range"]
    pub struct RangeFrom<const MIN: u64>;
    #[doc = " Marker for field writers are safe to write in specified inclusive range"]
    pub struct RangeTo<const MAX: u64>;
    #[doc = " Write field Proxy"]
    pub type FieldWriter<'a, REG, const WI: u8, FI = u8, Safety = Unsafe> =
        raw::FieldWriter<'a, REG, WI, FI, Safety>;
    impl<'a, REG, const WI: u8, FI, Safety> FieldWriter<'a, REG, WI, FI, Safety>
    where
        REG: Writable + RegisterSpec,
        FI: FieldSpec,
    {
        #[doc = " Field width"]
        pub const WIDTH: u8 = WI;
        #[doc = " Field width"]
        #[inline(always)]
        pub const fn width(&self) -> u8 {
            WI
        }
        #[doc = " Field offset"]
        #[inline(always)]
        pub const fn offset(&self) -> u8 {
            self.o
        }
    }
    impl<'a, REG, const WI: u8, FI, Safety> FieldWriter<'a, REG, WI, FI, Safety>
    where
        REG: Writable + RegisterSpec,
        FI: FieldSpec,
        REG::Ux: From<FI::Ux>,
    {
        #[doc = " Writes raw bits to the field"]
        #[doc = ""]
        #[doc = " # Safety"]
        #[doc = ""]
        #[doc = " Passing incorrect value can cause undefined behaviour. See reference manual"]
        #[inline(always)]
        pub unsafe fn bits(self, value: FI::Ux) -> &'a mut W<REG> {
            self.w.bits &= !(REG::Ux::mask::<WI>() << self.o);
            self.w.bits |= (REG::Ux::from(value) & REG::Ux::mask::<WI>()) << self.o;
            self.w
        }
    }
    impl<'a, REG, const WI: u8, FI> FieldWriter<'a, REG, WI, FI, Safe>
    where
        REG: Writable + RegisterSpec,
        FI: FieldSpec,
        REG::Ux: From<FI::Ux>,
    {
        #[doc = " Writes raw bits to the field"]
        #[inline(always)]
        pub fn set(self, value: FI::Ux) -> &'a mut W<REG> {
            unsafe { self.bits(value) }
        }
    }
    impl<'a, REG, const WI: u8, FI, const MIN: u64, const MAX: u64>
        FieldWriter<'a, REG, WI, FI, Range<MIN, MAX>>
    where
        REG: Writable + RegisterSpec,
        FI: FieldSpec,
        REG::Ux: From<FI::Ux>,
        u64: From<FI::Ux>,
    {
        #[doc = " Writes raw bits to the field"]
        #[inline(always)]
        pub fn set(self, value: FI::Ux) -> &'a mut W<REG> {
            {
                let value = u64::from(value);
                assert!(value >= MIN && value <= MAX);
            }
            unsafe { self.bits(value) }
        }
    }
    impl<'a, REG, const WI: u8, FI, const MIN: u64> FieldWriter<'a, REG, WI, FI, RangeFrom<MIN>>
    where
        REG: Writable + RegisterSpec,
        FI: FieldSpec,
        REG::Ux: From<FI::Ux>,
        u64: From<FI::Ux>,
    {
        #[doc = " Writes raw bits to the field"]
        #[inline(always)]
        pub fn set(self, value: FI::Ux) -> &'a mut W<REG> {
            {
                let value = u64::from(value);
                assert!(value >= MIN);
            }
            unsafe { self.bits(value) }
        }
    }
    impl<'a, REG, const WI: u8, FI, const MAX: u64> FieldWriter<'a, REG, WI, FI, RangeTo<MAX>>
    where
        REG: Writable + RegisterSpec,
        FI: FieldSpec,
        REG::Ux: From<FI::Ux>,
        u64: From<FI::Ux>,
    {
        #[doc = " Writes raw bits to the field"]
        #[inline(always)]
        pub fn set(self, value: FI::Ux) -> &'a mut W<REG> {
            {
                let value = u64::from(value);
                assert!(value <= MAX);
            }
            unsafe { self.bits(value) }
        }
    }
    impl<'a, REG, const WI: u8, FI, Safety> FieldWriter<'a, REG, WI, FI, Safety>
    where
        REG: Writable + RegisterSpec,
        FI: IsEnum,
        REG::Ux: From<FI::Ux>,
    {
        #[doc = " Writes `variant` to the field"]
        #[inline(always)]
        pub fn variant(self, variant: FI) -> &'a mut W<REG> {
            unsafe { self.bits(FI::Ux::from(variant)) }
        }
    }
    macro_rules! bit_proxy {
        ($ writer : ident , $ mwv : ident) => {
            #[doc(hidden)]
            pub struct $mwv;
            #[doc = " Bit-wise write field proxy"]
            pub type $writer<'a, REG, FI = bool> = raw::BitWriter<'a, REG, FI, $mwv>;
            impl<'a, REG, FI> $writer<'a, REG, FI>
            where
                REG: Writable + RegisterSpec,
                bool: From<FI>,
            {
                #[doc = " Field width"]
                pub const WIDTH: u8 = 1;
                #[doc = " Field width"]
                #[inline(always)]
                pub const fn width(&self) -> u8 {
                    Self::WIDTH
                }
                #[doc = " Field offset"]
                #[inline(always)]
                pub const fn offset(&self) -> u8 {
                    self.o
                }
                #[doc = " Writes bit to the field"]
                #[inline(always)]
                pub fn bit(self, value: bool) -> &'a mut W<REG> {
                    self.w.bits &= !(REG::Ux::one() << self.o);
                    self.w.bits |= (REG::Ux::from(value) & REG::Ux::one()) << self.o;
                    self.w
                }
                #[doc = " Writes `variant` to the field"]
                #[inline(always)]
                pub fn variant(self, variant: FI) -> &'a mut W<REG> {
                    self.bit(bool::from(variant))
                }
            }
        };
    }
    bit_proxy!(BitWriter, BitM);
    bit_proxy!(BitWriter1S, Bit1S);
    bit_proxy!(BitWriter0C, Bit0C);
    bit_proxy!(BitWriter1C, Bit1C);
    bit_proxy!(BitWriter0S, Bit0S);
    bit_proxy!(BitWriter1T, Bit1T);
    bit_proxy!(BitWriter0T, Bit0T);
    impl<'a, REG, FI> BitWriter<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = " Sets the field bit"]
        #[inline(always)]
        pub fn set_bit(self) -> &'a mut W<REG> {
            self.w.bits |= REG::Ux::one() << self.o;
            self.w
        }
        #[doc = " Clears the field bit"]
        #[inline(always)]
        pub fn clear_bit(self) -> &'a mut W<REG> {
            self.w.bits &= !(REG::Ux::one() << self.o);
            self.w
        }
    }
    impl<'a, REG, FI> BitWriter1S<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = " Sets the field bit"]
        #[inline(always)]
        pub fn set_bit(self) -> &'a mut W<REG> {
            self.w.bits |= REG::Ux::one() << self.o;
            self.w
        }
    }
    impl<'a, REG, FI> BitWriter0C<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = " Clears the field bit"]
        #[inline(always)]
        pub fn clear_bit(self) -> &'a mut W<REG> {
            self.w.bits &= !(REG::Ux::one() << self.o);
            self.w
        }
    }
    impl<'a, REG, FI> BitWriter1C<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = "Clears the field bit by passing one"]
        #[inline(always)]
        pub fn clear_bit_by_one(self) -> &'a mut W<REG> {
            self.w.bits |= REG::Ux::one() << self.o;
            self.w
        }
    }
    impl<'a, REG, FI> BitWriter0S<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = "Sets the field bit by passing zero"]
        #[inline(always)]
        pub fn set_bit_by_zero(self) -> &'a mut W<REG> {
            self.w.bits &= !(REG::Ux::one() << self.o);
            self.w
        }
    }
    impl<'a, REG, FI> BitWriter1T<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = "Toggle the field bit by passing one"]
        #[inline(always)]
        pub fn toggle_bit(self) -> &'a mut W<REG> {
            self.w.bits |= REG::Ux::one() << self.o;
            self.w
        }
    }
    impl<'a, REG, FI> BitWriter0T<'a, REG, FI>
    where
        REG: Writable + RegisterSpec,
        bool: From<FI>,
    {
        #[doc = "Toggle the field bit by passing zero"]
        #[inline(always)]
        pub fn toggle_bit(self) -> &'a mut W<REG> {
            self.w.bits &= !(REG::Ux::one() << self.o);
            self.w
        }
    }
    #[doc = " This structure provides volatile access to registers."]
    #[repr(transparent)]
    pub struct Reg<REG: RegisterSpec> {
        register: vcell::VolatileCell<REG::Ux>,
        _marker: marker::PhantomData<REG>,
    }
    unsafe impl<REG: RegisterSpec> Send for Reg<REG> where REG::Ux: Send {}
    impl<REG: RegisterSpec> Reg<REG> {
        #[doc = " Returns the underlying memory address of register."]
        #[doc = ""]
        #[doc = " ```ignore"]
        #[doc = " let reg_ptr = periph.reg.as_ptr();"]
        #[doc = " ```"]
        #[inline(always)]
        pub fn as_ptr(&self) -> *mut REG::Ux {
            self.register.as_ptr()
        }
    }
    impl<REG: Readable> Reg<REG> {
        #[doc = " Reads the contents of a `Readable` register."]
        #[doc = ""]
        #[doc = " You can read the raw contents of a register by using `bits`:"]
        #[doc = " ```ignore"]
        #[doc = " let bits = periph.reg.read().bits();"]
        #[doc = " ```"]
        #[doc = " or get the content of a particular field of a register:"]
        #[doc = " ```ignore"]
        #[doc = " let reader = periph.reg.read();"]
        #[doc = " let bits = reader.field1().bits();"]
        #[doc = " let flag = reader.field2().bit_is_set();"]
        #[doc = " ```"]
        #[inline(always)]
        pub fn read(&self) -> R<REG> {
            R {
                bits: self.register.get(),
                _reg: marker::PhantomData,
            }
        }
    }
    impl<REG: Resettable + Writable> Reg<REG> {
        #[doc = " Writes the reset value to `Writable` register."]
        #[doc = ""]
        #[doc = " Resets the register to its initial state."]
        #[inline(always)]
        pub fn reset(&self) {
            self.register.set(REG::RESET_VALUE)
        }
        #[doc = " Writes bits to a `Writable` register."]
        #[doc = ""]
        #[doc = " You can write raw bits into a register:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.write(|w| unsafe { w.bits(rawbits) });"]
        #[doc = " ```"]
        #[doc = " or write only the fields you need:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.write(|w| w"]
        #[doc = "     .field1().bits(newfield1bits)"]
        #[doc = "     .field2().set_bit()"]
        #[doc = "     .field3().variant(VARIANT)"]
        #[doc = " );"]
        #[doc = " ```"]
        #[doc = " or an alternative way of saying the same:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.write(|w| {"]
        #[doc = "     w.field1().bits(newfield1bits);"]
        #[doc = "     w.field2().set_bit();"]
        #[doc = "     w.field3().variant(VARIANT)"]
        #[doc = " });"]
        #[doc = " ```"]
        #[doc = " In the latter case, other fields will be set to their reset value."]
        #[inline(always)]
        pub fn write<F>(&self, f: F)
        where
            F: FnOnce(&mut W<REG>) -> &mut W<REG>,
        {
            self.register.set(
                f(&mut W {
                    bits: REG::RESET_VALUE & !REG::ONE_TO_MODIFY_FIELDS_BITMAP
                        | REG::ZERO_TO_MODIFY_FIELDS_BITMAP,
                    _reg: marker::PhantomData,
                })
                .bits,
            );
        }
    }
    impl<REG: Writable> Reg<REG> {
        #[doc = " Writes 0 to a `Writable` register."]
        #[doc = ""]
        #[doc = " Similar to `write`, but unused bits will contain 0."]
        #[doc = ""]
        #[doc = " # Safety"]
        #[doc = ""]
        #[doc = " Unsafe to use with registers which don't allow to write 0."]
        #[inline(always)]
        pub unsafe fn write_with_zero<F>(&self, f: F)
        where
            F: FnOnce(&mut W<REG>) -> &mut W<REG>,
        {
            self.register.set(
                f(&mut W {
                    bits: REG::Ux::default(),
                    _reg: marker::PhantomData,
                })
                .bits,
            );
        }
    }
    impl<REG: Readable + Writable> Reg<REG> {
        #[doc = " Modifies the contents of the register by reading and then writing it."]
        #[doc = ""]
        #[doc = " E.g. to do a read-modify-write sequence to change parts of a register:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.modify(|r, w| unsafe { w.bits("]
        #[doc = "    r.bits() | 3"]
        #[doc = " ) });"]
        #[doc = " ```"]
        #[doc = " or"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.modify(|_, w| w"]
        #[doc = "     .field1().bits(newfield1bits)"]
        #[doc = "     .field2().set_bit()"]
        #[doc = "     .field3().variant(VARIANT)"]
        #[doc = " );"]
        #[doc = " ```"]
        #[doc = " or an alternative way of saying the same:"]
        #[doc = " ```ignore"]
        #[doc = " periph.reg.modify(|_, w| {"]
        #[doc = "     w.field1().bits(newfield1bits);"]
        #[doc = "     w.field2().set_bit();"]
        #[doc = "     w.field3().variant(VARIANT)"]
        #[doc = " });"]
        #[doc = " ```"]
        #[doc = " Other fields will have the value they had before the call to `modify`."]
        #[inline(always)]
        pub fn modify<F>(&self, f: F)
        where
            for<'w> F: FnOnce(&R<REG>, &'w mut W<REG>) -> &'w mut W<REG>,
        {
            let bits = self.register.get();
            self.register.set(
                f(
                    &R {
                        bits,
                        _reg: marker::PhantomData,
                    },
                    &mut W {
                        bits: bits & !REG::ONE_TO_MODIFY_FIELDS_BITMAP
                            | REG::ZERO_TO_MODIFY_FIELDS_BITMAP,
                        _reg: marker::PhantomData,
                    },
                )
                .bits,
            );
        }
    }
    impl<REG: Readable> core::fmt::Debug for crate::generic::Reg<REG>
    where
        R<REG>: core::fmt::Debug,
    {
        fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
            core::fmt::Debug::fmt(&self.read(), f)
        }
    }
}
#[cfg(feature = "rt")]
extern "C" {
    fn WWDGT();
    fn Tamper();
    fn RTC();
    fn FMC();
    fn RCU();
    fn EXTI_Line0();
    fn EXTI_Line1();
    fn EXTI_Line2();
    fn EXTI_Line3();
    fn EXTI_Line4();
    fn DMA0_Channel0();
    fn DMA0_Channel1();
    fn DMA0_Channel2();
    fn DMA0_Channel3();
    fn DMA0_Channel4();
    fn DMA0_Channel5();
    fn DMA0_Channel6();
    fn ADC0_1();
    fn USBD_HP_CAN0_TX();
    fn USBD_LP_CAN0_RX0();
    fn CAN0_RX1();
    fn CAN0_EWMC();
    fn EXTI_line9_5();
    fn TIMER0_BRK();
    fn TIMER0_UP();
    fn TIMER0_TRG_CMT();
    fn TIMER0_Channel();
    fn TIMER1();
    fn TIMER2();
    fn TIMER3();
    fn I2C0_EV();
    fn I2C0_ER();
    fn I2C1_EV();
    fn I2C1_ER();
    fn SPI0();
    fn SPI1();
    fn USART0();
    fn USART1();
    fn USART2();
    fn EXTI_line15_10();
    fn RTC_Alarm();
    fn USBD_WKUP();
    fn TIMER7_BRK();
    fn TIMER7_UP();
    fn TIMER7_TRG_CMT();
    fn TIMER7_Channel();
    fn ADC2();
    fn EXMC();
    fn SDIO();
    fn TIMER4();
    fn SPI2();
    fn UART3();
    fn UART4();
    fn TIMER5();
    fn TIMER6();
    fn DMA1_Channel0();
    fn DMA1_Channel1();
    fn DMA1_Channel2();
    fn DMA1_Channel3_4();
}
#[doc(hidden)]
#[repr(C)]
pub union Vector {
    _handler: unsafe extern "C" fn(),
    _reserved: u32,
}
#[cfg(feature = "rt")]
#[doc(hidden)]
#[link_section = ".vector_table.interrupts"]
#[no_mangle]
pub static __INTERRUPTS: [Vector; 60] = [
    Vector { _handler: WWDGT },
    Vector { _reserved: 0 },
    Vector { _handler: Tamper },
    Vector { _handler: RTC },
    Vector { _handler: FMC },
    Vector { _handler: RCU },
    Vector {
        _handler: EXTI_Line0,
    },
    Vector {
        _handler: EXTI_Line1,
    },
    Vector {
        _handler: EXTI_Line2,
    },
    Vector {
        _handler: EXTI_Line3,
    },
    Vector {
        _handler: EXTI_Line4,
    },
    Vector {
        _handler: DMA0_Channel0,
    },
    Vector {
        _handler: DMA0_Channel1,
    },
    Vector {
        _handler: DMA0_Channel2,
    },
    Vector {
        _handler: DMA0_Channel3,
    },
    Vector {
        _handler: DMA0_Channel4,
    },
    Vector {
        _handler: DMA0_Channel5,
    },
    Vector {
        _handler: DMA0_Channel6,
    },
    Vector { _handler: ADC0_1 },
    Vector {
        _handler: USBD_HP_CAN0_TX,
    },
    Vector {
        _handler: USBD_LP_CAN0_RX0,
    },
    Vector { _handler: CAN0_RX1 },
    Vector {
        _handler: CAN0_EWMC,
    },
    Vector {
        _handler: EXTI_line9_5,
    },
    Vector {
        _handler: TIMER0_BRK,
    },
    Vector {
        _handler: TIMER0_UP,
    },
    Vector {
        _handler: TIMER0_TRG_CMT,
    },
    Vector {
        _handler: TIMER0_Channel,
    },
    Vector { _handler: TIMER1 },
    Vector { _handler: TIMER2 },
    Vector { _handler: TIMER3 },
    Vector { _handler: I2C0_EV },
    Vector { _handler: I2C0_ER },
    Vector { _handler: I2C1_EV },
    Vector { _handler: I2C1_ER },
    Vector { _handler: SPI0 },
    Vector { _handler: SPI1 },
    Vector { _handler: USART0 },
    Vector { _handler: USART1 },
    Vector { _handler: USART2 },
    Vector {
        _handler: EXTI_line15_10,
    },
    Vector {
        _handler: RTC_Alarm,
    },
    Vector {
        _handler: USBD_WKUP,
    },
    Vector {
        _handler: TIMER7_BRK,
    },
    Vector {
        _handler: TIMER7_UP,
    },
    Vector {
        _handler: TIMER7_TRG_CMT,
    },
    Vector {
        _handler: TIMER7_Channel,
    },
    Vector { _handler: ADC2 },
    Vector { _handler: EXMC },
    Vector { _handler: SDIO },
    Vector { _handler: TIMER4 },
    Vector { _handler: SPI2 },
    Vector { _handler: UART3 },
    Vector { _handler: UART4 },
    Vector { _handler: TIMER5 },
    Vector { _handler: TIMER6 },
    Vector {
        _handler: DMA1_Channel0,
    },
    Vector {
        _handler: DMA1_Channel1,
    },
    Vector {
        _handler: DMA1_Channel2,
    },
    Vector {
        _handler: DMA1_Channel3_4,
    },
];
#[doc = r"Enumeration of all the interrupts."]
#[derive(Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u16)]
pub enum Interrupt {
    #[doc = "0 - WWDGT"]
    WWDGT = 0,
    #[doc = "2 - Tamper"]
    Tamper = 2,
    #[doc = "3 - RTC"]
    RTC = 3,
    #[doc = "4 - FMC"]
    FMC = 4,
    #[doc = "5 - RCU"]
    RCU = 5,
    #[doc = "6 - EXTI_Line0"]
    EXTI_Line0 = 6,
    #[doc = "7 - EXTI_Line1"]
    EXTI_Line1 = 7,
    #[doc = "8 - EXTI_Line2"]
    EXTI_Line2 = 8,
    #[doc = "9 - EXTI_Line3"]
    EXTI_Line3 = 9,
    #[doc = "10 - EXTI_Line4"]
    EXTI_Line4 = 10,
    #[doc = "11 - DMA0_Channel0"]
    DMA0_Channel0 = 11,
    #[doc = "12 - DMA0_Channel1"]
    DMA0_Channel1 = 12,
    #[doc = "13 - DMA0_Channel2"]
    DMA0_Channel2 = 13,
    #[doc = "14 - DMA0_Channel3"]
    DMA0_Channel3 = 14,
    #[doc = "15 - DMA0_Channel4"]
    DMA0_Channel4 = 15,
    #[doc = "16 - DMA0_Channel5"]
    DMA0_Channel5 = 16,
    #[doc = "17 - DMA0_Channel6"]
    DMA0_Channel6 = 17,
    #[doc = "18 - ADC0_1"]
    ADC0_1 = 18,
    #[doc = "19 - USBD_HP_CAN0_TX"]
    USBD_HP_CAN0_TX = 19,
    #[doc = "20 - USBD_LP_CAN0_RX0"]
    USBD_LP_CAN0_RX0 = 20,
    #[doc = "21 - CAN0_RX1"]
    CAN0_RX1 = 21,
    #[doc = "22 - CAN0_EWMC"]
    CAN0_EWMC = 22,
    #[doc = "23 - EXTI_line9_5"]
    EXTI_line9_5 = 23,
    #[doc = "24 - TIMER0_BRK"]
    TIMER0_BRK = 24,
    #[doc = "25 - TIMER0_UP"]
    TIMER0_UP = 25,
    #[doc = "26 - TIMER0_TRG_CMT"]
    TIMER0_TRG_CMT = 26,
    #[doc = "27 - TIMER0_Channel"]
    TIMER0_Channel = 27,
    #[doc = "28 - TIMER1"]
    TIMER1 = 28,
    #[doc = "29 - TIMER2"]
    TIMER2 = 29,
    #[doc = "30 - TIMER3"]
    TIMER3 = 30,
    #[doc = "31 - I2C0_EV"]
    I2C0_EV = 31,
    #[doc = "32 - I2C0_ER"]
    I2C0_ER = 32,
    #[doc = "33 - I2C1_EV"]
    I2C1_EV = 33,
    #[doc = "34 - I2C1_ER"]
    I2C1_ER = 34,
    #[doc = "35 - SPI0"]
    SPI0 = 35,
    #[doc = "36 - SPI1"]
    SPI1 = 36,
    #[doc = "37 - USART0"]
    USART0 = 37,
    #[doc = "38 - USART1"]
    USART1 = 38,
    #[doc = "39 - USART2"]
    USART2 = 39,
    #[doc = "40 - EXTI_line15_10"]
    EXTI_line15_10 = 40,
    #[doc = "41 - RTC_Alarm"]
    RTC_Alarm = 41,
    #[doc = "42 - USBD_WKUP"]
    USBD_WKUP = 42,
    #[doc = "43 - TIMER7_BRK"]
    TIMER7_BRK = 43,
    #[doc = "44 - TIMER7_UP"]
    TIMER7_UP = 44,
    #[doc = "45 - TIMER7_TRG_CMT"]
    TIMER7_TRG_CMT = 45,
    #[doc = "46 - TIMER7_Channel"]
    TIMER7_Channel = 46,
    #[doc = "47 - ADC2"]
    ADC2 = 47,
    #[doc = "48 - EXMC"]
    EXMC = 48,
    #[doc = "49 - SDIO"]
    SDIO = 49,
    #[doc = "50 - TIMER4"]
    TIMER4 = 50,
    #[doc = "51 - SPI2"]
    SPI2 = 51,
    #[doc = "52 - UART3"]
    UART3 = 52,
    #[doc = "53 - UART4"]
    UART4 = 53,
    #[doc = "54 - TIMER5"]
    TIMER5 = 54,
    #[doc = "55 - TIMER6"]
    TIMER6 = 55,
    #[doc = "56 - DMA1_Channel0"]
    DMA1_Channel0 = 56,
    #[doc = "57 - DMA1_Channel1"]
    DMA1_Channel1 = 57,
    #[doc = "58 - DMA1_Channel2"]
    DMA1_Channel2 = 58,
    #[doc = "59 - DMA1_Channel3_4"]
    DMA1_Channel3_4 = 59,
}
unsafe impl cortex_m::interrupt::InterruptNumber for Interrupt {
    #[inline(always)]
    fn number(self) -> u16 {
        self as u16
    }
}
#[doc = "Analog to digital converter"]
pub struct Adc0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Adc0 {}
impl Adc0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc0::RegisterBlock = 0x4001_2400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Adc0 {
    type Target = adc0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Adc0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc0").finish()
    }
}
#[doc = "Analog to digital converter"]
pub mod adc0 {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        stat: Stat,
        ctl0: Ctl0,
        ctl1: Ctl1,
        sampt0: Sampt0,
        sampt1: Sampt1,
        ioff0: Ioff0,
        ioff1: Ioff1,
        ioff2: Ioff2,
        ioff3: Ioff3,
        wdht: Wdht,
        wdlt: Wdlt,
        rsq0: Rsq0,
        rsq1: Rsq1,
        rsq2: Rsq2,
        isq: Isq,
        idata0: Idata0,
        idata1: Idata1,
        idata2: Idata2,
        idata3: Idata3,
        rdata: Rdata,
    }
    impl RegisterBlock {
        #[doc = "0x00 - status register"]
        #[inline(always)]
        pub const fn stat(&self) -> &Stat {
            &self.stat
        }
        #[doc = "0x04 - control register 0"]
        #[inline(always)]
        pub const fn ctl0(&self) -> &Ctl0 {
            &self.ctl0
        }
        #[doc = "0x08 - control register 1"]
        #[inline(always)]
        pub const fn ctl1(&self) -> &Ctl1 {
            &self.ctl1
        }
        #[doc = "0x0c - Sample time register 0"]
        #[inline(always)]
        pub const fn sampt0(&self) -> &Sampt0 {
            &self.sampt0
        }
        #[doc = "0x10 - Sample time register 1"]
        #[inline(always)]
        pub const fn sampt1(&self) -> &Sampt1 {
            &self.sampt1
        }
        #[doc = "0x14 - Inserted channel data offset register 0"]
        #[inline(always)]
        pub const fn ioff0(&self) -> &Ioff0 {
            &self.ioff0
        }
        #[doc = "0x18 - Inserted channel data offset register 1"]
        #[inline(always)]
        pub const fn ioff1(&self) -> &Ioff1 {
            &self.ioff1
        }
        #[doc = "0x1c - Inserted channel data offset register 2"]
        #[inline(always)]
        pub const fn ioff2(&self) -> &Ioff2 {
            &self.ioff2
        }
        #[doc = "0x20 - Inserted channel data offset register 3"]
        #[inline(always)]
        pub const fn ioff3(&self) -> &Ioff3 {
            &self.ioff3
        }
        #[doc = "0x24 - watchdog higher threshold register"]
        #[inline(always)]
        pub const fn wdht(&self) -> &Wdht {
            &self.wdht
        }
        #[doc = "0x28 - watchdog lower threshold register"]
        #[inline(always)]
        pub const fn wdlt(&self) -> &Wdlt {
            &self.wdlt
        }
        #[doc = "0x2c - regular sequence register 0"]
        #[inline(always)]
        pub const fn rsq0(&self) -> &Rsq0 {
            &self.rsq0
        }
        #[doc = "0x30 - regular sequence register 1"]
        #[inline(always)]
        pub const fn rsq1(&self) -> &Rsq1 {
            &self.rsq1
        }
        #[doc = "0x34 - regular sequence register 2"]
        #[inline(always)]
        pub const fn rsq2(&self) -> &Rsq2 {
            &self.rsq2
        }
        #[doc = "0x38 - Inserted sequence register"]
        #[inline(always)]
        pub const fn isq(&self) -> &Isq {
            &self.isq
        }
        #[doc = "0x3c - Inserted data register 0"]
        #[inline(always)]
        pub const fn idata0(&self) -> &Idata0 {
            &self.idata0
        }
        #[doc = "0x40 - Inserted data register 1"]
        #[inline(always)]
        pub const fn idata1(&self) -> &Idata1 {
            &self.idata1
        }
        #[doc = "0x44 - Inserted data register 2"]
        #[inline(always)]
        pub const fn idata2(&self) -> &Idata2 {
            &self.idata2
        }
        #[doc = "0x48 - Inserted data register 3"]
        #[inline(always)]
        pub const fn idata3(&self) -> &Idata3 {
            &self.idata3
        }
        #[doc = "0x4c - regular data register"]
        #[inline(always)]
        pub const fn rdata(&self) -> &Rdata {
            &self.rdata
        }
    }
    #[doc = "STAT (rw) register accessor: status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat`]
module"]
    #[doc(alias = "STAT")]
    pub type Stat = crate::Reg<stat::StatSpec>;
    #[doc = "status register"]
    pub mod stat {
        #[doc = "Register `STAT` reader"]
        pub type R = crate::R<StatSpec>;
        #[doc = "Register `STAT` writer"]
        pub type W = crate::W<StatSpec>;
        #[doc = "Field `WDE` reader - Analog watchdog event flag"]
        pub type WdeR = crate::BitReader;
        #[doc = "Field `WDE` writer - Analog watchdog event flag"]
        pub type WdeW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EOC` reader - End of group conversion flag"]
        pub type EocR = crate::BitReader;
        #[doc = "Field `EOC` writer - End of group conversion flag"]
        pub type EocW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EOIC` reader - End of inserted group conversion flag"]
        pub type EoicR = crate::BitReader;
        #[doc = "Field `EOIC` writer - End of inserted group conversion flag"]
        pub type EoicW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STIC` reader - Start flag of inserted channel group"]
        pub type SticR = crate::BitReader;
        #[doc = "Field `STIC` writer - Start flag of inserted channel group"]
        pub type SticW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STRC` reader - Start flag of regular channel group"]
        pub type StrcR = crate::BitReader;
        #[doc = "Field `STRC` writer - Start flag of regular channel group"]
        pub type StrcW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Analog watchdog event flag"]
            #[inline(always)]
            pub fn wde(&self) -> WdeR {
                WdeR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - End of group conversion flag"]
            #[inline(always)]
            pub fn eoc(&self) -> EocR {
                EocR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - End of inserted group conversion flag"]
            #[inline(always)]
            pub fn eoic(&self) -> EoicR {
                EoicR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Start flag of inserted channel group"]
            #[inline(always)]
            pub fn stic(&self) -> SticR {
                SticR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Start flag of regular channel group"]
            #[inline(always)]
            pub fn strc(&self) -> StrcR {
                StrcR::new(((self.bits >> 4) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Analog watchdog event flag"]
            #[inline(always)]
            #[must_use]
            pub fn wde(&mut self) -> WdeW<StatSpec> {
                WdeW::new(self, 0)
            }
            #[doc = "Bit 1 - End of group conversion flag"]
            #[inline(always)]
            #[must_use]
            pub fn eoc(&mut self) -> EocW<StatSpec> {
                EocW::new(self, 1)
            }
            #[doc = "Bit 2 - End of inserted group conversion flag"]
            #[inline(always)]
            #[must_use]
            pub fn eoic(&mut self) -> EoicW<StatSpec> {
                EoicW::new(self, 2)
            }
            #[doc = "Bit 3 - Start flag of inserted channel group"]
            #[inline(always)]
            #[must_use]
            pub fn stic(&mut self) -> SticW<StatSpec> {
                SticW::new(self, 3)
            }
            #[doc = "Bit 4 - Start flag of regular channel group"]
            #[inline(always)]
            #[must_use]
            pub fn strc(&mut self) -> StrcW<StatSpec> {
                StrcW::new(self, 4)
            }
        }
        #[doc = "status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct StatSpec;
        impl crate::RegisterSpec for StatSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat::R`](R) reader structure"]
        impl crate::Readable for StatSpec {}
        #[doc = "`write(|w| ..)` method takes [`stat::W`](W) writer structure"]
        impl crate::Writable for StatSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets STAT to value 0"]
        impl crate::Resettable for StatSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL0 (rw) register accessor: control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl0`]
module"]
    #[doc(alias = "CTL0")]
    pub type Ctl0 = crate::Reg<ctl0::Ctl0Spec>;
    #[doc = "control register 0"]
    pub mod ctl0 {
        #[doc = "Register `CTL0` reader"]
        pub type R = crate::R<Ctl0Spec>;
        #[doc = "Register `CTL0` writer"]
        pub type W = crate::W<Ctl0Spec>;
        #[doc = "Field `WDCHSEL` reader - Analog watchdog channel select"]
        pub type WdchselR = crate::FieldReader;
        #[doc = "Field `WDCHSEL` writer - Analog watchdog channel select"]
        pub type WdchselW<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `EOCIE` reader - Interrupt enable for EOC"]
        pub type EocieR = crate::BitReader;
        #[doc = "Field `EOCIE` writer - Interrupt enable for EOC"]
        pub type EocieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WDEIE` reader - Interrupt enable for WDE"]
        pub type WdeieR = crate::BitReader;
        #[doc = "Field `WDEIE` writer - Interrupt enable for WDE"]
        pub type WdeieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EOICIE` reader - Interrupt enable for EOIC"]
        pub type EoicieR = crate::BitReader;
        #[doc = "Field `EOICIE` writer - Interrupt enable for EOIC"]
        pub type EoicieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SM` reader - Scan mode"]
        pub type SmR = crate::BitReader;
        #[doc = "Field `SM` writer - Scan mode"]
        pub type SmW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WDSC` reader - When in scan mode, analog watchdog is effective on a single channel"]
        pub type WdscR = crate::BitReader;
        #[doc = "Field `WDSC` writer - When in scan mode, analog watchdog is effective on a single channel"]
        pub type WdscW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ICA` reader - Inserted channel group convert automatically"]
        pub type IcaR = crate::BitReader;
        #[doc = "Field `ICA` writer - Inserted channel group convert automatically"]
        pub type IcaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DISRC` reader - Discontinuous mode on regular channels"]
        pub type DisrcR = crate::BitReader;
        #[doc = "Field `DISRC` writer - Discontinuous mode on regular channels"]
        pub type DisrcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DISIC` reader - Discontinuous mode on inserted channels"]
        pub type DisicR = crate::BitReader;
        #[doc = "Field `DISIC` writer - Discontinuous mode on inserted channels"]
        pub type DisicW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DISNUM` reader - Number of conversions in discontinuous mode"]
        pub type DisnumR = crate::FieldReader;
        #[doc = "Field `DISNUM` writer - Number of conversions in discontinuous mode"]
        pub type DisnumW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SYNCM` reader - sync mode selection"]
        pub type SyncmR = crate::FieldReader;
        #[doc = "Field `SYNCM` writer - sync mode selection"]
        pub type SyncmW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `IWDEN` reader - Inserted channel analog watchdog enable"]
        pub type IwdenR = crate::BitReader;
        #[doc = "Field `IWDEN` writer - Inserted channel analog watchdog enable"]
        pub type IwdenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RWDEN` reader - Regular channel analog watchdog enable"]
        pub type RwdenR = crate::BitReader;
        #[doc = "Field `RWDEN` writer - Regular channel analog watchdog enable"]
        pub type RwdenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:4 - Analog watchdog channel select"]
            #[inline(always)]
            pub fn wdchsel(&self) -> WdchselR {
                WdchselR::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bit 5 - Interrupt enable for EOC"]
            #[inline(always)]
            pub fn eocie(&self) -> EocieR {
                EocieR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Interrupt enable for WDE"]
            #[inline(always)]
            pub fn wdeie(&self) -> WdeieR {
                WdeieR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Interrupt enable for EOIC"]
            #[inline(always)]
            pub fn eoicie(&self) -> EoicieR {
                EoicieR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Scan mode"]
            #[inline(always)]
            pub fn sm(&self) -> SmR {
                SmR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - When in scan mode, analog watchdog is effective on a single channel"]
            #[inline(always)]
            pub fn wdsc(&self) -> WdscR {
                WdscR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Inserted channel group convert automatically"]
            #[inline(always)]
            pub fn ica(&self) -> IcaR {
                IcaR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Discontinuous mode on regular channels"]
            #[inline(always)]
            pub fn disrc(&self) -> DisrcR {
                DisrcR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Discontinuous mode on inserted channels"]
            #[inline(always)]
            pub fn disic(&self) -> DisicR {
                DisicR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bits 13:15 - Number of conversions in discontinuous mode"]
            #[inline(always)]
            pub fn disnum(&self) -> DisnumR {
                DisnumR::new(((self.bits >> 13) & 7) as u8)
            }
            #[doc = "Bits 16:18 - sync mode selection"]
            #[inline(always)]
            pub fn syncm(&self) -> SyncmR {
                SyncmR::new(((self.bits >> 16) & 7) as u8)
            }
            #[doc = "Bit 22 - Inserted channel analog watchdog enable"]
            #[inline(always)]
            pub fn iwden(&self) -> IwdenR {
                IwdenR::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Regular channel analog watchdog enable"]
            #[inline(always)]
            pub fn rwden(&self) -> RwdenR {
                RwdenR::new(((self.bits >> 23) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - Analog watchdog channel select"]
            #[inline(always)]
            #[must_use]
            pub fn wdchsel(&mut self) -> WdchselW<Ctl0Spec> {
                WdchselW::new(self, 0)
            }
            #[doc = "Bit 5 - Interrupt enable for EOC"]
            #[inline(always)]
            #[must_use]
            pub fn eocie(&mut self) -> EocieW<Ctl0Spec> {
                EocieW::new(self, 5)
            }
            #[doc = "Bit 6 - Interrupt enable for WDE"]
            #[inline(always)]
            #[must_use]
            pub fn wdeie(&mut self) -> WdeieW<Ctl0Spec> {
                WdeieW::new(self, 6)
            }
            #[doc = "Bit 7 - Interrupt enable for EOIC"]
            #[inline(always)]
            #[must_use]
            pub fn eoicie(&mut self) -> EoicieW<Ctl0Spec> {
                EoicieW::new(self, 7)
            }
            #[doc = "Bit 8 - Scan mode"]
            #[inline(always)]
            #[must_use]
            pub fn sm(&mut self) -> SmW<Ctl0Spec> {
                SmW::new(self, 8)
            }
            #[doc = "Bit 9 - When in scan mode, analog watchdog is effective on a single channel"]
            #[inline(always)]
            #[must_use]
            pub fn wdsc(&mut self) -> WdscW<Ctl0Spec> {
                WdscW::new(self, 9)
            }
            #[doc = "Bit 10 - Inserted channel group convert automatically"]
            #[inline(always)]
            #[must_use]
            pub fn ica(&mut self) -> IcaW<Ctl0Spec> {
                IcaW::new(self, 10)
            }
            #[doc = "Bit 11 - Discontinuous mode on regular channels"]
            #[inline(always)]
            #[must_use]
            pub fn disrc(&mut self) -> DisrcW<Ctl0Spec> {
                DisrcW::new(self, 11)
            }
            #[doc = "Bit 12 - Discontinuous mode on inserted channels"]
            #[inline(always)]
            #[must_use]
            pub fn disic(&mut self) -> DisicW<Ctl0Spec> {
                DisicW::new(self, 12)
            }
            #[doc = "Bits 13:15 - Number of conversions in discontinuous mode"]
            #[inline(always)]
            #[must_use]
            pub fn disnum(&mut self) -> DisnumW<Ctl0Spec> {
                DisnumW::new(self, 13)
            }
            #[doc = "Bits 16:18 - sync mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn syncm(&mut self) -> SyncmW<Ctl0Spec> {
                SyncmW::new(self, 16)
            }
            #[doc = "Bit 22 - Inserted channel analog watchdog enable"]
            #[inline(always)]
            #[must_use]
            pub fn iwden(&mut self) -> IwdenW<Ctl0Spec> {
                IwdenW::new(self, 22)
            }
            #[doc = "Bit 23 - Regular channel analog watchdog enable"]
            #[inline(always)]
            #[must_use]
            pub fn rwden(&mut self) -> RwdenW<Ctl0Spec> {
                RwdenW::new(self, 23)
            }
        }
        #[doc = "control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl0Spec;
        impl crate::RegisterSpec for Ctl0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl0::R`](R) reader structure"]
        impl crate::Readable for Ctl0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl0::W`](W) writer structure"]
        impl crate::Writable for Ctl0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL0 to value 0"]
        impl crate::Resettable for Ctl0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL1 (rw) register accessor: control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl1`]
module"]
    #[doc(alias = "CTL1")]
    pub type Ctl1 = crate::Reg<ctl1::Ctl1Spec>;
    #[doc = "control register 1"]
    pub mod ctl1 {
        #[doc = "Register `CTL1` reader"]
        pub type R = crate::R<Ctl1Spec>;
        #[doc = "Register `CTL1` writer"]
        pub type W = crate::W<Ctl1Spec>;
        #[doc = "Field `ADCON` reader - ADC on"]
        pub type AdconR = crate::BitReader;
        #[doc = "Field `ADCON` writer - ADC on"]
        pub type AdconW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CTN` reader - Continuous mode"]
        pub type CtnR = crate::BitReader;
        #[doc = "Field `CTN` writer - Continuous mode"]
        pub type CtnW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CLB` reader - ADC calibration"]
        pub type ClbR = crate::BitReader;
        #[doc = "Field `CLB` writer - ADC calibration"]
        pub type ClbW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RSTCLB` reader - Reset calibration"]
        pub type RstclbR = crate::BitReader;
        #[doc = "Field `RSTCLB` writer - Reset calibration"]
        pub type RstclbW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DMA` reader - DMA request enable"]
        pub type DmaR = crate::BitReader;
        #[doc = "Field `DMA` writer - DMA request enable"]
        pub type DmaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DAL` reader - Data alignment"]
        pub type DalR = crate::BitReader;
        #[doc = "Field `DAL` writer - Data alignment"]
        pub type DalW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ETSIC` reader - External trigger select for inserted channel"]
        pub type EtsicR = crate::FieldReader;
        #[doc = "Field `ETSIC` writer - External trigger select for inserted channel"]
        pub type EtsicW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `ETEIC` reader - External trigger select for inserted channel"]
        pub type EteicR = crate::BitReader;
        #[doc = "Field `ETEIC` writer - External trigger select for inserted channel"]
        pub type EteicW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ETSRC` reader - External trigger select for regular channel"]
        pub type EtsrcR = crate::FieldReader;
        #[doc = "Field `ETSRC` writer - External trigger select for regular channel"]
        pub type EtsrcW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `ETERC` reader - External trigger enable for regular channel"]
        pub type EtercR = crate::BitReader;
        #[doc = "Field `ETERC` writer - External trigger enable for regular channel"]
        pub type EtercW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWICST` reader - Start on inserted channel"]
        pub type SwicstR = crate::BitReader;
        #[doc = "Field `SWICST` writer - Start on inserted channel"]
        pub type SwicstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWRCST` reader - Start on regular channel"]
        pub type SwrcstR = crate::BitReader;
        #[doc = "Field `SWRCST` writer - Start on regular channel"]
        pub type SwrcstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TSVREN` reader - Channel 16 and 17 enable of ADC0"]
        pub type TsvrenR = crate::BitReader;
        #[doc = "Field `TSVREN` writer - Channel 16 and 17 enable of ADC0"]
        pub type TsvrenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - ADC on"]
            #[inline(always)]
            pub fn adcon(&self) -> AdconR {
                AdconR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Continuous mode"]
            #[inline(always)]
            pub fn ctn(&self) -> CtnR {
                CtnR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - ADC calibration"]
            #[inline(always)]
            pub fn clb(&self) -> ClbR {
                ClbR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Reset calibration"]
            #[inline(always)]
            pub fn rstclb(&self) -> RstclbR {
                RstclbR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 8 - DMA request enable"]
            #[inline(always)]
            pub fn dma(&self) -> DmaR {
                DmaR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 11 - Data alignment"]
            #[inline(always)]
            pub fn dal(&self) -> DalR {
                DalR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:14 - External trigger select for inserted channel"]
            #[inline(always)]
            pub fn etsic(&self) -> EtsicR {
                EtsicR::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bit 15 - External trigger select for inserted channel"]
            #[inline(always)]
            pub fn eteic(&self) -> EteicR {
                EteicR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bits 17:19 - External trigger select for regular channel"]
            #[inline(always)]
            pub fn etsrc(&self) -> EtsrcR {
                EtsrcR::new(((self.bits >> 17) & 7) as u8)
            }
            #[doc = "Bit 20 - External trigger enable for regular channel"]
            #[inline(always)]
            pub fn eterc(&self) -> EtercR {
                EtercR::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Start on inserted channel"]
            #[inline(always)]
            pub fn swicst(&self) -> SwicstR {
                SwicstR::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Start on regular channel"]
            #[inline(always)]
            pub fn swrcst(&self) -> SwrcstR {
                SwrcstR::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Channel 16 and 17 enable of ADC0"]
            #[inline(always)]
            pub fn tsvren(&self) -> TsvrenR {
                TsvrenR::new(((self.bits >> 23) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - ADC on"]
            #[inline(always)]
            #[must_use]
            pub fn adcon(&mut self) -> AdconW<Ctl1Spec> {
                AdconW::new(self, 0)
            }
            #[doc = "Bit 1 - Continuous mode"]
            #[inline(always)]
            #[must_use]
            pub fn ctn(&mut self) -> CtnW<Ctl1Spec> {
                CtnW::new(self, 1)
            }
            #[doc = "Bit 2 - ADC calibration"]
            #[inline(always)]
            #[must_use]
            pub fn clb(&mut self) -> ClbW<Ctl1Spec> {
                ClbW::new(self, 2)
            }
            #[doc = "Bit 3 - Reset calibration"]
            #[inline(always)]
            #[must_use]
            pub fn rstclb(&mut self) -> RstclbW<Ctl1Spec> {
                RstclbW::new(self, 3)
            }
            #[doc = "Bit 8 - DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn dma(&mut self) -> DmaW<Ctl1Spec> {
                DmaW::new(self, 8)
            }
            #[doc = "Bit 11 - Data alignment"]
            #[inline(always)]
            #[must_use]
            pub fn dal(&mut self) -> DalW<Ctl1Spec> {
                DalW::new(self, 11)
            }
            #[doc = "Bits 12:14 - External trigger select for inserted channel"]
            #[inline(always)]
            #[must_use]
            pub fn etsic(&mut self) -> EtsicW<Ctl1Spec> {
                EtsicW::new(self, 12)
            }
            #[doc = "Bit 15 - External trigger select for inserted channel"]
            #[inline(always)]
            #[must_use]
            pub fn eteic(&mut self) -> EteicW<Ctl1Spec> {
                EteicW::new(self, 15)
            }
            #[doc = "Bits 17:19 - External trigger select for regular channel"]
            #[inline(always)]
            #[must_use]
            pub fn etsrc(&mut self) -> EtsrcW<Ctl1Spec> {
                EtsrcW::new(self, 17)
            }
            #[doc = "Bit 20 - External trigger enable for regular channel"]
            #[inline(always)]
            #[must_use]
            pub fn eterc(&mut self) -> EtercW<Ctl1Spec> {
                EtercW::new(self, 20)
            }
            #[doc = "Bit 21 - Start on inserted channel"]
            #[inline(always)]
            #[must_use]
            pub fn swicst(&mut self) -> SwicstW<Ctl1Spec> {
                SwicstW::new(self, 21)
            }
            #[doc = "Bit 22 - Start on regular channel"]
            #[inline(always)]
            #[must_use]
            pub fn swrcst(&mut self) -> SwrcstW<Ctl1Spec> {
                SwrcstW::new(self, 22)
            }
            #[doc = "Bit 23 - Channel 16 and 17 enable of ADC0"]
            #[inline(always)]
            #[must_use]
            pub fn tsvren(&mut self) -> TsvrenW<Ctl1Spec> {
                TsvrenW::new(self, 23)
            }
        }
        #[doc = "control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl1Spec;
        impl crate::RegisterSpec for Ctl1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl1::R`](R) reader structure"]
        impl crate::Readable for Ctl1Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"]
        impl crate::Writable for Ctl1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL1 to value 0"]
        impl crate::Resettable for Ctl1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "SAMPT0 (rw) register accessor: Sample time register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`sampt0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sampt0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sampt0`]
module"]
    #[doc(alias = "SAMPT0")]
    pub type Sampt0 = crate::Reg<sampt0::Sampt0Spec>;
    #[doc = "Sample time register 0"]
    pub mod sampt0 {
        #[doc = "Register `SAMPT0` reader"]
        pub type R = crate::R<Sampt0Spec>;
        #[doc = "Register `SAMPT0` writer"]
        pub type W = crate::W<Sampt0Spec>;
        #[doc = "Field `SPT10` reader - Channel 10 sample time selection"]
        pub type Spt10R = crate::FieldReader;
        #[doc = "Field `SPT10` writer - Channel 10 sample time selection"]
        pub type Spt10W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT11` reader - Channel 11 sample time selection"]
        pub type Spt11R = crate::FieldReader;
        #[doc = "Field `SPT11` writer - Channel 11 sample time selection"]
        pub type Spt11W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT12` reader - Channel 12 sample time selection"]
        pub type Spt12R = crate::FieldReader;
        #[doc = "Field `SPT12` writer - Channel 12 sample time selection"]
        pub type Spt12W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT13` reader - Channel 13 sample time selection"]
        pub type Spt13R = crate::FieldReader;
        #[doc = "Field `SPT13` writer - Channel 13 sample time selection"]
        pub type Spt13W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT14` reader - Channel 14 sample time selection"]
        pub type Spt14R = crate::FieldReader;
        #[doc = "Field `SPT14` writer - Channel 14 sample time selection"]
        pub type Spt14W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT15` reader - Channel 15 sample time selection"]
        pub type Spt15R = crate::FieldReader;
        #[doc = "Field `SPT15` writer - Channel 15 sample time selection"]
        pub type Spt15W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT16` reader - Channel 16 sample time selection"]
        pub type Spt16R = crate::FieldReader;
        #[doc = "Field `SPT16` writer - Channel 16 sample time selection"]
        pub type Spt16W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT17` reader - Channel 17 sample time selection"]
        pub type Spt17R = crate::FieldReader;
        #[doc = "Field `SPT17` writer - Channel 17 sample time selection"]
        pub type Spt17W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        impl R {
            #[doc = "Bits 0:2 - Channel 10 sample time selection"]
            #[inline(always)]
            pub fn spt10(&self) -> Spt10R {
                Spt10R::new((self.bits & 7) as u8)
            }
            #[doc = "Bits 3:5 - Channel 11 sample time selection"]
            #[inline(always)]
            pub fn spt11(&self) -> Spt11R {
                Spt11R::new(((self.bits >> 3) & 7) as u8)
            }
            #[doc = "Bits 6:8 - Channel 12 sample time selection"]
            #[inline(always)]
            pub fn spt12(&self) -> Spt12R {
                Spt12R::new(((self.bits >> 6) & 7) as u8)
            }
            #[doc = "Bits 9:11 - Channel 13 sample time selection"]
            #[inline(always)]
            pub fn spt13(&self) -> Spt13R {
                Spt13R::new(((self.bits >> 9) & 7) as u8)
            }
            #[doc = "Bits 12:14 - Channel 14 sample time selection"]
            #[inline(always)]
            pub fn spt14(&self) -> Spt14R {
                Spt14R::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bits 15:17 - Channel 15 sample time selection"]
            #[inline(always)]
            pub fn spt15(&self) -> Spt15R {
                Spt15R::new(((self.bits >> 15) & 7) as u8)
            }
            #[doc = "Bits 18:20 - Channel 16 sample time selection"]
            #[inline(always)]
            pub fn spt16(&self) -> Spt16R {
                Spt16R::new(((self.bits >> 18) & 7) as u8)
            }
            #[doc = "Bits 21:23 - Channel 17 sample time selection"]
            #[inline(always)]
            pub fn spt17(&self) -> Spt17R {
                Spt17R::new(((self.bits >> 21) & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Channel 10 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt10(&mut self) -> Spt10W<Sampt0Spec> {
                Spt10W::new(self, 0)
            }
            #[doc = "Bits 3:5 - Channel 11 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt11(&mut self) -> Spt11W<Sampt0Spec> {
                Spt11W::new(self, 3)
            }
            #[doc = "Bits 6:8 - Channel 12 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt12(&mut self) -> Spt12W<Sampt0Spec> {
                Spt12W::new(self, 6)
            }
            #[doc = "Bits 9:11 - Channel 13 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt13(&mut self) -> Spt13W<Sampt0Spec> {
                Spt13W::new(self, 9)
            }
            #[doc = "Bits 12:14 - Channel 14 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt14(&mut self) -> Spt14W<Sampt0Spec> {
                Spt14W::new(self, 12)
            }
            #[doc = "Bits 15:17 - Channel 15 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt15(&mut self) -> Spt15W<Sampt0Spec> {
                Spt15W::new(self, 15)
            }
            #[doc = "Bits 18:20 - Channel 16 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt16(&mut self) -> Spt16W<Sampt0Spec> {
                Spt16W::new(self, 18)
            }
            #[doc = "Bits 21:23 - Channel 17 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt17(&mut self) -> Spt17W<Sampt0Spec> {
                Spt17W::new(self, 21)
            }
        }
        #[doc = "Sample time register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`sampt0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sampt0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Sampt0Spec;
        impl crate::RegisterSpec for Sampt0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sampt0::R`](R) reader structure"]
        impl crate::Readable for Sampt0Spec {}
        #[doc = "`write(|w| ..)` method takes [`sampt0::W`](W) writer structure"]
        impl crate::Writable for Sampt0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SAMPT0 to value 0"]
        impl crate::Resettable for Sampt0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "SAMPT1 (rw) register accessor: Sample time register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`sampt1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sampt1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sampt1`]
module"]
    #[doc(alias = "SAMPT1")]
    pub type Sampt1 = crate::Reg<sampt1::Sampt1Spec>;
    #[doc = "Sample time register 1"]
    pub mod sampt1 {
        #[doc = "Register `SAMPT1` reader"]
        pub type R = crate::R<Sampt1Spec>;
        #[doc = "Register `SAMPT1` writer"]
        pub type W = crate::W<Sampt1Spec>;
        #[doc = "Field `SPT0` reader - Channel 0 sample time selection"]
        pub type Spt0R = crate::FieldReader;
        #[doc = "Field `SPT0` writer - Channel 0 sample time selection"]
        pub type Spt0W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT1` reader - Channel 1 sample time selection"]
        pub type Spt1R = crate::FieldReader;
        #[doc = "Field `SPT1` writer - Channel 1 sample time selection"]
        pub type Spt1W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT2` reader - Channel 2 sample time selection"]
        pub type Spt2R = crate::FieldReader;
        #[doc = "Field `SPT2` writer - Channel 2 sample time selection"]
        pub type Spt2W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT3` reader - Channel 3 sample time selection"]
        pub type Spt3R = crate::FieldReader;
        #[doc = "Field `SPT3` writer - Channel 3 sample time selection"]
        pub type Spt3W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT4` reader - Channel 4 sample time selection"]
        pub type Spt4R = crate::FieldReader;
        #[doc = "Field `SPT4` writer - Channel 4 sample time selection"]
        pub type Spt4W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT5` reader - Channel 5 sample time selection"]
        pub type Spt5R = crate::FieldReader;
        #[doc = "Field `SPT5` writer - Channel 5 sample time selection"]
        pub type Spt5W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT6` reader - Channel 6 sample time selection"]
        pub type Spt6R = crate::FieldReader;
        #[doc = "Field `SPT6` writer - Channel 6 sample time selection"]
        pub type Spt6W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT7` reader - Channel 7 sample time selection"]
        pub type Spt7R = crate::FieldReader;
        #[doc = "Field `SPT7` writer - Channel 7 sample time selection"]
        pub type Spt7W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT8` reader - Channel 8 sample time selection"]
        pub type Spt8R = crate::FieldReader;
        #[doc = "Field `SPT8` writer - Channel 8 sample time selection"]
        pub type Spt8W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT9` reader - Channel 9 sample time selection"]
        pub type Spt9R = crate::FieldReader;
        #[doc = "Field `SPT9` writer - Channel 9 sample time selection"]
        pub type Spt9W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        impl R {
            #[doc = "Bits 0:2 - Channel 0 sample time selection"]
            #[inline(always)]
            pub fn spt0(&self) -> Spt0R {
                Spt0R::new((self.bits & 7) as u8)
            }
            #[doc = "Bits 3:5 - Channel 1 sample time selection"]
            #[inline(always)]
            pub fn spt1(&self) -> Spt1R {
                Spt1R::new(((self.bits >> 3) & 7) as u8)
            }
            #[doc = "Bits 6:8 - Channel 2 sample time selection"]
            #[inline(always)]
            pub fn spt2(&self) -> Spt2R {
                Spt2R::new(((self.bits >> 6) & 7) as u8)
            }
            #[doc = "Bits 9:11 - Channel 3 sample time selection"]
            #[inline(always)]
            pub fn spt3(&self) -> Spt3R {
                Spt3R::new(((self.bits >> 9) & 7) as u8)
            }
            #[doc = "Bits 12:14 - Channel 4 sample time selection"]
            #[inline(always)]
            pub fn spt4(&self) -> Spt4R {
                Spt4R::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bits 15:17 - Channel 5 sample time selection"]
            #[inline(always)]
            pub fn spt5(&self) -> Spt5R {
                Spt5R::new(((self.bits >> 15) & 7) as u8)
            }
            #[doc = "Bits 18:20 - Channel 6 sample time selection"]
            #[inline(always)]
            pub fn spt6(&self) -> Spt6R {
                Spt6R::new(((self.bits >> 18) & 7) as u8)
            }
            #[doc = "Bits 21:23 - Channel 7 sample time selection"]
            #[inline(always)]
            pub fn spt7(&self) -> Spt7R {
                Spt7R::new(((self.bits >> 21) & 7) as u8)
            }
            #[doc = "Bits 24:26 - Channel 8 sample time selection"]
            #[inline(always)]
            pub fn spt8(&self) -> Spt8R {
                Spt8R::new(((self.bits >> 24) & 7) as u8)
            }
            #[doc = "Bits 27:29 - Channel 9 sample time selection"]
            #[inline(always)]
            pub fn spt9(&self) -> Spt9R {
                Spt9R::new(((self.bits >> 27) & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Channel 0 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt0(&mut self) -> Spt0W<Sampt1Spec> {
                Spt0W::new(self, 0)
            }
            #[doc = "Bits 3:5 - Channel 1 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt1(&mut self) -> Spt1W<Sampt1Spec> {
                Spt1W::new(self, 3)
            }
            #[doc = "Bits 6:8 - Channel 2 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt2(&mut self) -> Spt2W<Sampt1Spec> {
                Spt2W::new(self, 6)
            }
            #[doc = "Bits 9:11 - Channel 3 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt3(&mut self) -> Spt3W<Sampt1Spec> {
                Spt3W::new(self, 9)
            }
            #[doc = "Bits 12:14 - Channel 4 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt4(&mut self) -> Spt4W<Sampt1Spec> {
                Spt4W::new(self, 12)
            }
            #[doc = "Bits 15:17 - Channel 5 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt5(&mut self) -> Spt5W<Sampt1Spec> {
                Spt5W::new(self, 15)
            }
            #[doc = "Bits 18:20 - Channel 6 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt6(&mut self) -> Spt6W<Sampt1Spec> {
                Spt6W::new(self, 18)
            }
            #[doc = "Bits 21:23 - Channel 7 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt7(&mut self) -> Spt7W<Sampt1Spec> {
                Spt7W::new(self, 21)
            }
            #[doc = "Bits 24:26 - Channel 8 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt8(&mut self) -> Spt8W<Sampt1Spec> {
                Spt8W::new(self, 24)
            }
            #[doc = "Bits 27:29 - Channel 9 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt9(&mut self) -> Spt9W<Sampt1Spec> {
                Spt9W::new(self, 27)
            }
        }
        #[doc = "Sample time register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`sampt1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sampt1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Sampt1Spec;
        impl crate::RegisterSpec for Sampt1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sampt1::R`](R) reader structure"]
        impl crate::Readable for Sampt1Spec {}
        #[doc = "`write(|w| ..)` method takes [`sampt1::W`](W) writer structure"]
        impl crate::Writable for Sampt1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SAMPT1 to value 0"]
        impl crate::Resettable for Sampt1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IOFF0 (rw) register accessor: Inserted channel data offset register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ioff0`]
module"]
    #[doc(alias = "IOFF0")]
    pub type Ioff0 = crate::Reg<ioff0::Ioff0Spec>;
    #[doc = "Inserted channel data offset register 0"]
    pub mod ioff0 {
        #[doc = "Register `IOFF0` reader"]
        pub type R = crate::R<Ioff0Spec>;
        #[doc = "Register `IOFF0` writer"]
        pub type W = crate::W<Ioff0Spec>;
        #[doc = "Field `IOFF` reader - Data offset for inserted channel 0"]
        pub type IoffR = crate::FieldReader<u16>;
        #[doc = "Field `IOFF` writer - Data offset for inserted channel 0"]
        pub type IoffW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - Data offset for inserted channel 0"]
            #[inline(always)]
            pub fn ioff(&self) -> IoffR {
                IoffR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for inserted channel 0"]
            #[inline(always)]
            #[must_use]
            pub fn ioff(&mut self) -> IoffW<Ioff0Spec> {
                IoffW::new(self, 0)
            }
        }
        #[doc = "Inserted channel data offset register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ioff0Spec;
        impl crate::RegisterSpec for Ioff0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ioff0::R`](R) reader structure"]
        impl crate::Readable for Ioff0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ioff0::W`](W) writer structure"]
        impl crate::Writable for Ioff0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets IOFF0 to value 0"]
        impl crate::Resettable for Ioff0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IOFF1 (rw) register accessor: Inserted channel data offset register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ioff1`]
module"]
    #[doc(alias = "IOFF1")]
    pub type Ioff1 = crate::Reg<ioff1::Ioff1Spec>;
    #[doc = "Inserted channel data offset register 1"]
    pub mod ioff1 {
        #[doc = "Register `IOFF1` reader"]
        pub type R = crate::R<Ioff1Spec>;
        #[doc = "Register `IOFF1` writer"]
        pub type W = crate::W<Ioff1Spec>;
        #[doc = "Field `IOFF` reader - Data offset for inserted channel 1"]
        pub type IoffR = crate::FieldReader<u16>;
        #[doc = "Field `IOFF` writer - Data offset for inserted channel 1"]
        pub type IoffW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - Data offset for inserted channel 1"]
            #[inline(always)]
            pub fn ioff(&self) -> IoffR {
                IoffR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for inserted channel 1"]
            #[inline(always)]
            #[must_use]
            pub fn ioff(&mut self) -> IoffW<Ioff1Spec> {
                IoffW::new(self, 0)
            }
        }
        #[doc = "Inserted channel data offset register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ioff1Spec;
        impl crate::RegisterSpec for Ioff1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ioff1::R`](R) reader structure"]
        impl crate::Readable for Ioff1Spec {}
        #[doc = "`write(|w| ..)` method takes [`ioff1::W`](W) writer structure"]
        impl crate::Writable for Ioff1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets IOFF1 to value 0"]
        impl crate::Resettable for Ioff1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IOFF2 (rw) register accessor: Inserted channel data offset register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ioff2`]
module"]
    #[doc(alias = "IOFF2")]
    pub type Ioff2 = crate::Reg<ioff2::Ioff2Spec>;
    #[doc = "Inserted channel data offset register 2"]
    pub mod ioff2 {
        #[doc = "Register `IOFF2` reader"]
        pub type R = crate::R<Ioff2Spec>;
        #[doc = "Register `IOFF2` writer"]
        pub type W = crate::W<Ioff2Spec>;
        #[doc = "Field `IOFF` reader - Data offset for inserted channel 2"]
        pub type IoffR = crate::FieldReader<u16>;
        #[doc = "Field `IOFF` writer - Data offset for inserted channel 2"]
        pub type IoffW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - Data offset for inserted channel 2"]
            #[inline(always)]
            pub fn ioff(&self) -> IoffR {
                IoffR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for inserted channel 2"]
            #[inline(always)]
            #[must_use]
            pub fn ioff(&mut self) -> IoffW<Ioff2Spec> {
                IoffW::new(self, 0)
            }
        }
        #[doc = "Inserted channel data offset register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ioff2Spec;
        impl crate::RegisterSpec for Ioff2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ioff2::R`](R) reader structure"]
        impl crate::Readable for Ioff2Spec {}
        #[doc = "`write(|w| ..)` method takes [`ioff2::W`](W) writer structure"]
        impl crate::Writable for Ioff2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets IOFF2 to value 0"]
        impl crate::Resettable for Ioff2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IOFF3 (rw) register accessor: Inserted channel data offset register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ioff3`]
module"]
    #[doc(alias = "IOFF3")]
    pub type Ioff3 = crate::Reg<ioff3::Ioff3Spec>;
    #[doc = "Inserted channel data offset register 3"]
    pub mod ioff3 {
        #[doc = "Register `IOFF3` reader"]
        pub type R = crate::R<Ioff3Spec>;
        #[doc = "Register `IOFF3` writer"]
        pub type W = crate::W<Ioff3Spec>;
        #[doc = "Field `IOFF` reader - Data offset for inserted channel 3"]
        pub type IoffR = crate::FieldReader<u16>;
        #[doc = "Field `IOFF` writer - Data offset for inserted channel 3"]
        pub type IoffW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - Data offset for inserted channel 3"]
            #[inline(always)]
            pub fn ioff(&self) -> IoffR {
                IoffR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for inserted channel 3"]
            #[inline(always)]
            #[must_use]
            pub fn ioff(&mut self) -> IoffW<Ioff3Spec> {
                IoffW::new(self, 0)
            }
        }
        #[doc = "Inserted channel data offset register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ioff3Spec;
        impl crate::RegisterSpec for Ioff3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ioff3::R`](R) reader structure"]
        impl crate::Readable for Ioff3Spec {}
        #[doc = "`write(|w| ..)` method takes [`ioff3::W`](W) writer structure"]
        impl crate::Writable for Ioff3Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets IOFF3 to value 0"]
        impl crate::Resettable for Ioff3Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "WDHT (rw) register accessor: watchdog higher threshold register\n\nYou can [`read`](crate::Reg::read) this register and get [`wdht::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`wdht::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@wdht`]
module"]
    #[doc(alias = "WDHT")]
    pub type Wdht = crate::Reg<wdht::WdhtSpec>;
    #[doc = "watchdog higher threshold register"]
    pub mod wdht {
        #[doc = "Register `WDHT` reader"]
        pub type R = crate::R<WdhtSpec>;
        #[doc = "Register `WDHT` writer"]
        pub type W = crate::W<WdhtSpec>;
        #[doc = "Field `WDHT` reader - Analog watchdog higher threshold"]
        pub type WdhtR = crate::FieldReader<u16>;
        #[doc = "Field `WDHT` writer - Analog watchdog higher threshold"]
        pub type WdhtW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - Analog watchdog higher threshold"]
            #[inline(always)]
            pub fn wdht(&self) -> WdhtR {
                WdhtR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Analog watchdog higher threshold"]
            #[inline(always)]
            #[must_use]
            pub fn wdht(&mut self) -> WdhtW<WdhtSpec> {
                WdhtW::new(self, 0)
            }
        }
        #[doc = "watchdog higher threshold register\n\nYou can [`read`](crate::Reg::read) this register and get [`wdht::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`wdht::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct WdhtSpec;
        impl crate::RegisterSpec for WdhtSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`wdht::R`](R) reader structure"]
        impl crate::Readable for WdhtSpec {}
        #[doc = "`write(|w| ..)` method takes [`wdht::W`](W) writer structure"]
        impl crate::Writable for WdhtSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets WDHT to value 0x0fff"]
        impl crate::Resettable for WdhtSpec {
            const RESET_VALUE: u32 = 0x0fff;
        }
    }
    #[doc = "WDLT (rw) register accessor: watchdog lower threshold register\n\nYou can [`read`](crate::Reg::read) this register and get [`wdlt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`wdlt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@wdlt`]
module"]
    #[doc(alias = "WDLT")]
    pub type Wdlt = crate::Reg<wdlt::WdltSpec>;
    #[doc = "watchdog lower threshold register"]
    pub mod wdlt {
        #[doc = "Register `WDLT` reader"]
        pub type R = crate::R<WdltSpec>;
        #[doc = "Register `WDLT` writer"]
        pub type W = crate::W<WdltSpec>;
        #[doc = "Field `WDLT` reader - Analog watchdog lower threshold"]
        pub type WdltR = crate::FieldReader<u16>;
        #[doc = "Field `WDLT` writer - Analog watchdog lower threshold"]
        pub type WdltW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - Analog watchdog lower threshold"]
            #[inline(always)]
            pub fn wdlt(&self) -> WdltR {
                WdltR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Analog watchdog lower threshold"]
            #[inline(always)]
            #[must_use]
            pub fn wdlt(&mut self) -> WdltW<WdltSpec> {
                WdltW::new(self, 0)
            }
        }
        #[doc = "watchdog lower threshold register\n\nYou can [`read`](crate::Reg::read) this register and get [`wdlt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`wdlt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct WdltSpec;
        impl crate::RegisterSpec for WdltSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`wdlt::R`](R) reader structure"]
        impl crate::Readable for WdltSpec {}
        #[doc = "`write(|w| ..)` method takes [`wdlt::W`](W) writer structure"]
        impl crate::Writable for WdltSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets WDLT to value 0"]
        impl crate::Resettable for WdltSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RSQ0 (rw) register accessor: regular sequence register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`rsq0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rsq0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rsq0`]
module"]
    #[doc(alias = "RSQ0")]
    pub type Rsq0 = crate::Reg<rsq0::Rsq0Spec>;
    #[doc = "regular sequence register 0"]
    pub mod rsq0 {
        #[doc = "Register `RSQ0` reader"]
        pub type R = crate::R<Rsq0Spec>;
        #[doc = "Register `RSQ0` writer"]
        pub type W = crate::W<Rsq0Spec>;
        #[doc = "Field `RSQ12` reader - 13th conversion in regular sequence"]
        pub type Rsq12R = crate::FieldReader;
        #[doc = "Field `RSQ12` writer - 13th conversion in regular sequence"]
        pub type Rsq12W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ13` reader - 14th conversion in regular sequence"]
        pub type Rsq13R = crate::FieldReader;
        #[doc = "Field `RSQ13` writer - 14th conversion in regular sequence"]
        pub type Rsq13W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ14` reader - 15th conversion in regular sequence"]
        pub type Rsq14R = crate::FieldReader;
        #[doc = "Field `RSQ14` writer - 15th conversion in regular sequence"]
        pub type Rsq14W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ15` reader - 16th conversion in regular sequence"]
        pub type Rsq15R = crate::FieldReader;
        #[doc = "Field `RSQ15` writer - 16th conversion in regular sequence"]
        pub type Rsq15W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RL` reader - Regular channel group length"]
        pub type RlR = crate::FieldReader;
        #[doc = "Field `RL` writer - Regular channel group length"]
        pub type RlW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:4 - 13th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq12(&self) -> Rsq12R {
                Rsq12R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 14th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq13(&self) -> Rsq13R {
                Rsq13R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 15th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq14(&self) -> Rsq14R {
                Rsq14R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 16th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq15(&self) -> Rsq15R {
                Rsq15R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 20:23 - Regular channel group length"]
            #[inline(always)]
            pub fn rl(&self) -> RlR {
                RlR::new(((self.bits >> 20) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - 13th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq12(&mut self) -> Rsq12W<Rsq0Spec> {
                Rsq12W::new(self, 0)
            }
            #[doc = "Bits 5:9 - 14th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq13(&mut self) -> Rsq13W<Rsq0Spec> {
                Rsq13W::new(self, 5)
            }
            #[doc = "Bits 10:14 - 15th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq14(&mut self) -> Rsq14W<Rsq0Spec> {
                Rsq14W::new(self, 10)
            }
            #[doc = "Bits 15:19 - 16th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq15(&mut self) -> Rsq15W<Rsq0Spec> {
                Rsq15W::new(self, 15)
            }
            #[doc = "Bits 20:23 - Regular channel group length"]
            #[inline(always)]
            #[must_use]
            pub fn rl(&mut self) -> RlW<Rsq0Spec> {
                RlW::new(self, 20)
            }
        }
        #[doc = "regular sequence register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`rsq0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rsq0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rsq0Spec;
        impl crate::RegisterSpec for Rsq0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rsq0::R`](R) reader structure"]
        impl crate::Readable for Rsq0Spec {}
        #[doc = "`write(|w| ..)` method takes [`rsq0::W`](W) writer structure"]
        impl crate::Writable for Rsq0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets RSQ0 to value 0"]
        impl crate::Resettable for Rsq0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RSQ1 (rw) register accessor: regular sequence register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`rsq1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rsq1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rsq1`]
module"]
    #[doc(alias = "RSQ1")]
    pub type Rsq1 = crate::Reg<rsq1::Rsq1Spec>;
    #[doc = "regular sequence register 1"]
    pub mod rsq1 {
        #[doc = "Register `RSQ1` reader"]
        pub type R = crate::R<Rsq1Spec>;
        #[doc = "Register `RSQ1` writer"]
        pub type W = crate::W<Rsq1Spec>;
        #[doc = "Field `RSQ6` reader - 7th conversion in regular sequence"]
        pub type Rsq6R = crate::FieldReader;
        #[doc = "Field `RSQ6` writer - 7th conversion in regular sequence"]
        pub type Rsq6W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ7` reader - 8th conversion in regular sequence"]
        pub type Rsq7R = crate::FieldReader;
        #[doc = "Field `RSQ7` writer - 8th conversion in regular sequence"]
        pub type Rsq7W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ8` reader - 9th conversion in regular sequence"]
        pub type Rsq8R = crate::FieldReader;
        #[doc = "Field `RSQ8` writer - 9th conversion in regular sequence"]
        pub type Rsq8W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ9` reader - 10th conversion in regular sequence"]
        pub type Rsq9R = crate::FieldReader;
        #[doc = "Field `RSQ9` writer - 10th conversion in regular sequence"]
        pub type Rsq9W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ10` reader - 11th conversion in regular sequence"]
        pub type Rsq10R = crate::FieldReader;
        #[doc = "Field `RSQ10` writer - 11th conversion in regular sequence"]
        pub type Rsq10W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ11` reader - 12th conversion in regular sequence"]
        pub type Rsq11R = crate::FieldReader;
        #[doc = "Field `RSQ11` writer - 12th conversion in regular sequence"]
        pub type Rsq11W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        impl R {
            #[doc = "Bits 0:4 - 7th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq6(&self) -> Rsq6R {
                Rsq6R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 8th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq7(&self) -> Rsq7R {
                Rsq7R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 9th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq8(&self) -> Rsq8R {
                Rsq8R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 10th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq9(&self) -> Rsq9R {
                Rsq9R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 20:24 - 11th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq10(&self) -> Rsq10R {
                Rsq10R::new(((self.bits >> 20) & 0x1f) as u8)
            }
            #[doc = "Bits 25:29 - 12th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq11(&self) -> Rsq11R {
                Rsq11R::new(((self.bits >> 25) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - 7th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq6(&mut self) -> Rsq6W<Rsq1Spec> {
                Rsq6W::new(self, 0)
            }
            #[doc = "Bits 5:9 - 8th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq7(&mut self) -> Rsq7W<Rsq1Spec> {
                Rsq7W::new(self, 5)
            }
            #[doc = "Bits 10:14 - 9th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq8(&mut self) -> Rsq8W<Rsq1Spec> {
                Rsq8W::new(self, 10)
            }
            #[doc = "Bits 15:19 - 10th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq9(&mut self) -> Rsq9W<Rsq1Spec> {
                Rsq9W::new(self, 15)
            }
            #[doc = "Bits 20:24 - 11th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq10(&mut self) -> Rsq10W<Rsq1Spec> {
                Rsq10W::new(self, 20)
            }
            #[doc = "Bits 25:29 - 12th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq11(&mut self) -> Rsq11W<Rsq1Spec> {
                Rsq11W::new(self, 25)
            }
        }
        #[doc = "regular sequence register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`rsq1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rsq1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rsq1Spec;
        impl crate::RegisterSpec for Rsq1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rsq1::R`](R) reader structure"]
        impl crate::Readable for Rsq1Spec {}
        #[doc = "`write(|w| ..)` method takes [`rsq1::W`](W) writer structure"]
        impl crate::Writable for Rsq1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets RSQ1 to value 0"]
        impl crate::Resettable for Rsq1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RSQ2 (rw) register accessor: regular sequence register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`rsq2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rsq2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rsq2`]
module"]
    #[doc(alias = "RSQ2")]
    pub type Rsq2 = crate::Reg<rsq2::Rsq2Spec>;
    #[doc = "regular sequence register 2"]
    pub mod rsq2 {
        #[doc = "Register `RSQ2` reader"]
        pub type R = crate::R<Rsq2Spec>;
        #[doc = "Register `RSQ2` writer"]
        pub type W = crate::W<Rsq2Spec>;
        #[doc = "Field `RSQ0` reader - 1st conversion in regular sequence"]
        pub type Rsq0R = crate::FieldReader;
        #[doc = "Field `RSQ0` writer - 1st conversion in regular sequence"]
        pub type Rsq0W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ1` reader - 2nd conversion in regular sequence"]
        pub type Rsq1R = crate::FieldReader;
        #[doc = "Field `RSQ1` writer - 2nd conversion in regular sequence"]
        pub type Rsq1W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ2` reader - 3rd conversion in regular sequence"]
        pub type Rsq2R = crate::FieldReader;
        #[doc = "Field `RSQ2` writer - 3rd conversion in regular sequence"]
        pub type Rsq2W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ3` reader - 4th conversion in regular sequence"]
        pub type Rsq3R = crate::FieldReader;
        #[doc = "Field `RSQ3` writer - 4th conversion in regular sequence"]
        pub type Rsq3W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ4` reader - 5th conversion in regular sequence"]
        pub type Rsq4R = crate::FieldReader;
        #[doc = "Field `RSQ4` writer - 5th conversion in regular sequence"]
        pub type Rsq4W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ5` reader - 6th conversion in regular sequence"]
        pub type Rsq5R = crate::FieldReader;
        #[doc = "Field `RSQ5` writer - 6th conversion in regular sequence"]
        pub type Rsq5W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        impl R {
            #[doc = "Bits 0:4 - 1st conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq0(&self) -> Rsq0R {
                Rsq0R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 2nd conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq1(&self) -> Rsq1R {
                Rsq1R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 3rd conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq2(&self) -> Rsq2R {
                Rsq2R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 4th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq3(&self) -> Rsq3R {
                Rsq3R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 20:24 - 5th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq4(&self) -> Rsq4R {
                Rsq4R::new(((self.bits >> 20) & 0x1f) as u8)
            }
            #[doc = "Bits 25:29 - 6th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq5(&self) -> Rsq5R {
                Rsq5R::new(((self.bits >> 25) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - 1st conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq0(&mut self) -> Rsq0W<Rsq2Spec> {
                Rsq0W::new(self, 0)
            }
            #[doc = "Bits 5:9 - 2nd conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq1(&mut self) -> Rsq1W<Rsq2Spec> {
                Rsq1W::new(self, 5)
            }
            #[doc = "Bits 10:14 - 3rd conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq2(&mut self) -> Rsq2W<Rsq2Spec> {
                Rsq2W::new(self, 10)
            }
            #[doc = "Bits 15:19 - 4th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq3(&mut self) -> Rsq3W<Rsq2Spec> {
                Rsq3W::new(self, 15)
            }
            #[doc = "Bits 20:24 - 5th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq4(&mut self) -> Rsq4W<Rsq2Spec> {
                Rsq4W::new(self, 20)
            }
            #[doc = "Bits 25:29 - 6th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq5(&mut self) -> Rsq5W<Rsq2Spec> {
                Rsq5W::new(self, 25)
            }
        }
        #[doc = "regular sequence register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`rsq2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rsq2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rsq2Spec;
        impl crate::RegisterSpec for Rsq2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rsq2::R`](R) reader structure"]
        impl crate::Readable for Rsq2Spec {}
        #[doc = "`write(|w| ..)` method takes [`rsq2::W`](W) writer structure"]
        impl crate::Writable for Rsq2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets RSQ2 to value 0"]
        impl crate::Resettable for Rsq2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "ISQ (rw) register accessor: Inserted sequence register\n\nYou can [`read`](crate::Reg::read) this register and get [`isq::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`isq::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@isq`]
module"]
    #[doc(alias = "ISQ")]
    pub type Isq = crate::Reg<isq::IsqSpec>;
    #[doc = "Inserted sequence register"]
    pub mod isq {
        #[doc = "Register `ISQ` reader"]
        pub type R = crate::R<IsqSpec>;
        #[doc = "Register `ISQ` writer"]
        pub type W = crate::W<IsqSpec>;
        #[doc = "Field `ISQ0` reader - 1st conversion in inserted sequence"]
        pub type Isq0R = crate::FieldReader;
        #[doc = "Field `ISQ0` writer - 1st conversion in inserted sequence"]
        pub type Isq0W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `ISQ1` reader - 2nd conversion in inserted sequence"]
        pub type Isq1R = crate::FieldReader;
        #[doc = "Field `ISQ1` writer - 2nd conversion in inserted sequence"]
        pub type Isq1W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `ISQ2` reader - 3rd conversion in inserted sequence"]
        pub type Isq2R = crate::FieldReader;
        #[doc = "Field `ISQ2` writer - 3rd conversion in inserted sequence"]
        pub type Isq2W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `ISQ3` reader - 4th conversion in inserted sequence"]
        pub type Isq3R = crate::FieldReader;
        #[doc = "Field `ISQ3` writer - 4th conversion in inserted sequence"]
        pub type Isq3W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `IL` reader - Inserted channel group length"]
        pub type IlR = crate::FieldReader;
        #[doc = "Field `IL` writer - Inserted channel group length"]
        pub type IlW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bits 0:4 - 1st conversion in inserted sequence"]
            #[inline(always)]
            pub fn isq0(&self) -> Isq0R {
                Isq0R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 2nd conversion in inserted sequence"]
            #[inline(always)]
            pub fn isq1(&self) -> Isq1R {
                Isq1R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 3rd conversion in inserted sequence"]
            #[inline(always)]
            pub fn isq2(&self) -> Isq2R {
                Isq2R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 4th conversion in inserted sequence"]
            #[inline(always)]
            pub fn isq3(&self) -> Isq3R {
                Isq3R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 20:21 - Inserted channel group length"]
            #[inline(always)]
            pub fn il(&self) -> IlR {
                IlR::new(((self.bits >> 20) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - 1st conversion in inserted sequence"]
            #[inline(always)]
            #[must_use]
            pub fn isq0(&mut self) -> Isq0W<IsqSpec> {
                Isq0W::new(self, 0)
            }
            #[doc = "Bits 5:9 - 2nd conversion in inserted sequence"]
            #[inline(always)]
            #[must_use]
            pub fn isq1(&mut self) -> Isq1W<IsqSpec> {
                Isq1W::new(self, 5)
            }
            #[doc = "Bits 10:14 - 3rd conversion in inserted sequence"]
            #[inline(always)]
            #[must_use]
            pub fn isq2(&mut self) -> Isq2W<IsqSpec> {
                Isq2W::new(self, 10)
            }
            #[doc = "Bits 15:19 - 4th conversion in inserted sequence"]
            #[inline(always)]
            #[must_use]
            pub fn isq3(&mut self) -> Isq3W<IsqSpec> {
                Isq3W::new(self, 15)
            }
            #[doc = "Bits 20:21 - Inserted channel group length"]
            #[inline(always)]
            #[must_use]
            pub fn il(&mut self) -> IlW<IsqSpec> {
                IlW::new(self, 20)
            }
        }
        #[doc = "Inserted sequence register\n\nYou can [`read`](crate::Reg::read) this register and get [`isq::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`isq::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IsqSpec;
        impl crate::RegisterSpec for IsqSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`isq::R`](R) reader structure"]
        impl crate::Readable for IsqSpec {}
        #[doc = "`write(|w| ..)` method takes [`isq::W`](W) writer structure"]
        impl crate::Writable for IsqSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets ISQ to value 0"]
        impl crate::Resettable for IsqSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IDATA0 (r) register accessor: Inserted data register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`idata0::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@idata0`]
module"]
    #[doc(alias = "IDATA0")]
    pub type Idata0 = crate::Reg<idata0::Idata0Spec>;
    #[doc = "Inserted data register 0"]
    pub mod idata0 {
        #[doc = "Register `IDATA0` reader"]
        pub type R = crate::R<Idata0Spec>;
        #[doc = "Field `IDATAn` reader - Inserted number n conversion data"]
        pub type IdatanR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:15 - Inserted number n conversion data"]
            #[inline(always)]
            pub fn idatan(&self) -> IdatanR {
                IdatanR::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "Inserted data register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`idata0::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Idata0Spec;
        impl crate::RegisterSpec for Idata0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`idata0::R`](R) reader structure"]
        impl crate::Readable for Idata0Spec {}
        #[doc = "`reset()` method sets IDATA0 to value 0"]
        impl crate::Resettable for Idata0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IDATA1 (r) register accessor: Inserted data register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`idata1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@idata1`]
module"]
    #[doc(alias = "IDATA1")]
    pub type Idata1 = crate::Reg<idata1::Idata1Spec>;
    #[doc = "Inserted data register 1"]
    pub mod idata1 {
        #[doc = "Register `IDATA1` reader"]
        pub type R = crate::R<Idata1Spec>;
        #[doc = "Field `IDATAn` reader - Inserted number n conversion data"]
        pub type IdatanR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:15 - Inserted number n conversion data"]
            #[inline(always)]
            pub fn idatan(&self) -> IdatanR {
                IdatanR::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "Inserted data register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`idata1::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Idata1Spec;
        impl crate::RegisterSpec for Idata1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`idata1::R`](R) reader structure"]
        impl crate::Readable for Idata1Spec {}
        #[doc = "`reset()` method sets IDATA1 to value 0"]
        impl crate::Resettable for Idata1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IDATA2 (r) register accessor: Inserted data register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`idata2::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@idata2`]
module"]
    #[doc(alias = "IDATA2")]
    pub type Idata2 = crate::Reg<idata2::Idata2Spec>;
    #[doc = "Inserted data register 2"]
    pub mod idata2 {
        #[doc = "Register `IDATA2` reader"]
        pub type R = crate::R<Idata2Spec>;
        #[doc = "Field `IDATAn` reader - Inserted number n conversion data"]
        pub type IdatanR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:15 - Inserted number n conversion data"]
            #[inline(always)]
            pub fn idatan(&self) -> IdatanR {
                IdatanR::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "Inserted data register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`idata2::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Idata2Spec;
        impl crate::RegisterSpec for Idata2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`idata2::R`](R) reader structure"]
        impl crate::Readable for Idata2Spec {}
        #[doc = "`reset()` method sets IDATA2 to value 0"]
        impl crate::Resettable for Idata2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IDATA3 (r) register accessor: Inserted data register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`idata3::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@idata3`]
module"]
    #[doc(alias = "IDATA3")]
    pub type Idata3 = crate::Reg<idata3::Idata3Spec>;
    #[doc = "Inserted data register 3"]
    pub mod idata3 {
        #[doc = "Register `IDATA3` reader"]
        pub type R = crate::R<Idata3Spec>;
        #[doc = "Field `IDATAn` reader - Inserted number n conversion data"]
        pub type IdatanR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:15 - Inserted number n conversion data"]
            #[inline(always)]
            pub fn idatan(&self) -> IdatanR {
                IdatanR::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "Inserted data register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`idata3::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Idata3Spec;
        impl crate::RegisterSpec for Idata3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`idata3::R`](R) reader structure"]
        impl crate::Readable for Idata3Spec {}
        #[doc = "`reset()` method sets IDATA3 to value 0"]
        impl crate::Resettable for Idata3Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RDATA (r) register accessor: regular data register\n\nYou can [`read`](crate::Reg::read) this register and get [`rdata::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rdata`]
module"]
    #[doc(alias = "RDATA")]
    pub type Rdata = crate::Reg<rdata::RdataSpec>;
    #[doc = "regular data register"]
    pub mod rdata {
        #[doc = "Register `RDATA` reader"]
        pub type R = crate::R<RdataSpec>;
        #[doc = "Field `RDATA` reader - Regular channel data"]
        pub type RdataR = crate::FieldReader<u16>;
        #[doc = "Field `ADC1RDTR` reader - ADCegular channel data"]
        pub type Adc1rdtrR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:15 - Regular channel data"]
            #[inline(always)]
            pub fn rdata(&self) -> RdataR {
                RdataR::new((self.bits & 0xffff) as u16)
            }
            #[doc = "Bits 16:31 - ADCegular channel data"]
            #[inline(always)]
            pub fn adc1rdtr(&self) -> Adc1rdtrR {
                Adc1rdtrR::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        #[doc = "regular data register\n\nYou can [`read`](crate::Reg::read) this register and get [`rdata::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RdataSpec;
        impl crate::RegisterSpec for RdataSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rdata::R`](R) reader structure"]
        impl crate::Readable for RdataSpec {}
        #[doc = "`reset()` method sets RDATA to value 0"]
        impl crate::Resettable for RdataSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Analog to digital converter"]
pub struct Adc1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Adc1 {}
impl Adc1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc1::RegisterBlock = 0x4001_2800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc1::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Adc1 {
    type Target = adc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Adc1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc1").finish()
    }
}
#[doc = "Analog to digital converter"]
pub mod adc1 {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        stat: Stat,
        ctl0: Ctl0,
        ctl1: Ctl1,
        sampt0: Sampt0,
        sampt1: Sampt1,
        ioff0: Ioff0,
        ioff1: Ioff1,
        ioff2: Ioff2,
        ioff3: Ioff3,
        wdht: Wdht,
        wdlt: Wdlt,
        rsq0: Rsq0,
        rsq1: Rsq1,
        rsq2: Rsq2,
        isq: Isq,
        idata0: Idata0,
        idata1: Idata1,
        idata2: Idata2,
        idata3: Idata3,
        rdata: Rdata,
    }
    impl RegisterBlock {
        #[doc = "0x00 - status register"]
        #[inline(always)]
        pub const fn stat(&self) -> &Stat {
            &self.stat
        }
        #[doc = "0x04 - control register 0"]
        #[inline(always)]
        pub const fn ctl0(&self) -> &Ctl0 {
            &self.ctl0
        }
        #[doc = "0x08 - control register 1"]
        #[inline(always)]
        pub const fn ctl1(&self) -> &Ctl1 {
            &self.ctl1
        }
        #[doc = "0x0c - Sample time register 0"]
        #[inline(always)]
        pub const fn sampt0(&self) -> &Sampt0 {
            &self.sampt0
        }
        #[doc = "0x10 - Sample time register 1"]
        #[inline(always)]
        pub const fn sampt1(&self) -> &Sampt1 {
            &self.sampt1
        }
        #[doc = "0x14 - Inserted channel data offset register 0"]
        #[inline(always)]
        pub const fn ioff0(&self) -> &Ioff0 {
            &self.ioff0
        }
        #[doc = "0x18 - Inserted channel data offset register 1"]
        #[inline(always)]
        pub const fn ioff1(&self) -> &Ioff1 {
            &self.ioff1
        }
        #[doc = "0x1c - Inserted channel data offset register 2"]
        #[inline(always)]
        pub const fn ioff2(&self) -> &Ioff2 {
            &self.ioff2
        }
        #[doc = "0x20 - Inserted channel data offset register 3"]
        #[inline(always)]
        pub const fn ioff3(&self) -> &Ioff3 {
            &self.ioff3
        }
        #[doc = "0x24 - watchdog higher threshold register"]
        #[inline(always)]
        pub const fn wdht(&self) -> &Wdht {
            &self.wdht
        }
        #[doc = "0x28 - watchdog lower threshold register"]
        #[inline(always)]
        pub const fn wdlt(&self) -> &Wdlt {
            &self.wdlt
        }
        #[doc = "0x2c - regular sequence register 0"]
        #[inline(always)]
        pub const fn rsq0(&self) -> &Rsq0 {
            &self.rsq0
        }
        #[doc = "0x30 - regular sequence register 1"]
        #[inline(always)]
        pub const fn rsq1(&self) -> &Rsq1 {
            &self.rsq1
        }
        #[doc = "0x34 - regular sequence register 2"]
        #[inline(always)]
        pub const fn rsq2(&self) -> &Rsq2 {
            &self.rsq2
        }
        #[doc = "0x38 - Inserted sequence register"]
        #[inline(always)]
        pub const fn isq(&self) -> &Isq {
            &self.isq
        }
        #[doc = "0x3c - Inserted data register 0"]
        #[inline(always)]
        pub const fn idata0(&self) -> &Idata0 {
            &self.idata0
        }
        #[doc = "0x40 - Inserted data register 1"]
        #[inline(always)]
        pub const fn idata1(&self) -> &Idata1 {
            &self.idata1
        }
        #[doc = "0x44 - Inserted data register 2"]
        #[inline(always)]
        pub const fn idata2(&self) -> &Idata2 {
            &self.idata2
        }
        #[doc = "0x48 - Inserted data register 3"]
        #[inline(always)]
        pub const fn idata3(&self) -> &Idata3 {
            &self.idata3
        }
        #[doc = "0x4c - regular data register"]
        #[inline(always)]
        pub const fn rdata(&self) -> &Rdata {
            &self.rdata
        }
    }
    #[doc = "STAT (rw) register accessor: status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat`]
module"]
    #[doc(alias = "STAT")]
    pub type Stat = crate::Reg<stat::StatSpec>;
    #[doc = "status register"]
    pub mod stat {
        #[doc = "Register `STAT` reader"]
        pub type R = crate::R<StatSpec>;
        #[doc = "Register `STAT` writer"]
        pub type W = crate::W<StatSpec>;
        #[doc = "Field `WDE` reader - Analog watchdog event flag"]
        pub type WdeR = crate::BitReader;
        #[doc = "Field `WDE` writer - Analog watchdog event flag"]
        pub type WdeW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EOC` reader - End of group conversion flag"]
        pub type EocR = crate::BitReader;
        #[doc = "Field `EOC` writer - End of group conversion flag"]
        pub type EocW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EOIC` reader - End of inserted group conversion flag"]
        pub type EoicR = crate::BitReader;
        #[doc = "Field `EOIC` writer - End of inserted group conversion flag"]
        pub type EoicW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STIC` reader - Start flag of inserted channel group"]
        pub type SticR = crate::BitReader;
        #[doc = "Field `STIC` writer - Start flag of inserted channel group"]
        pub type SticW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STRC` reader - Start flag of regular channel group"]
        pub type StrcR = crate::BitReader;
        #[doc = "Field `STRC` writer - Start flag of regular channel group"]
        pub type StrcW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Analog watchdog event flag"]
            #[inline(always)]
            pub fn wde(&self) -> WdeR {
                WdeR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - End of group conversion flag"]
            #[inline(always)]
            pub fn eoc(&self) -> EocR {
                EocR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - End of inserted group conversion flag"]
            #[inline(always)]
            pub fn eoic(&self) -> EoicR {
                EoicR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Start flag of inserted channel group"]
            #[inline(always)]
            pub fn stic(&self) -> SticR {
                SticR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Start flag of regular channel group"]
            #[inline(always)]
            pub fn strc(&self) -> StrcR {
                StrcR::new(((self.bits >> 4) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Analog watchdog event flag"]
            #[inline(always)]
            #[must_use]
            pub fn wde(&mut self) -> WdeW<StatSpec> {
                WdeW::new(self, 0)
            }
            #[doc = "Bit 1 - End of group conversion flag"]
            #[inline(always)]
            #[must_use]
            pub fn eoc(&mut self) -> EocW<StatSpec> {
                EocW::new(self, 1)
            }
            #[doc = "Bit 2 - End of inserted group conversion flag"]
            #[inline(always)]
            #[must_use]
            pub fn eoic(&mut self) -> EoicW<StatSpec> {
                EoicW::new(self, 2)
            }
            #[doc = "Bit 3 - Start flag of inserted channel group"]
            #[inline(always)]
            #[must_use]
            pub fn stic(&mut self) -> SticW<StatSpec> {
                SticW::new(self, 3)
            }
            #[doc = "Bit 4 - Start flag of regular channel group"]
            #[inline(always)]
            #[must_use]
            pub fn strc(&mut self) -> StrcW<StatSpec> {
                StrcW::new(self, 4)
            }
        }
        #[doc = "status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct StatSpec;
        impl crate::RegisterSpec for StatSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat::R`](R) reader structure"]
        impl crate::Readable for StatSpec {}
        #[doc = "`write(|w| ..)` method takes [`stat::W`](W) writer structure"]
        impl crate::Writable for StatSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets STAT to value 0"]
        impl crate::Resettable for StatSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL0 (rw) register accessor: control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl0`]
module"]
    #[doc(alias = "CTL0")]
    pub type Ctl0 = crate::Reg<ctl0::Ctl0Spec>;
    #[doc = "control register 0"]
    pub mod ctl0 {
        #[doc = "Register `CTL0` reader"]
        pub type R = crate::R<Ctl0Spec>;
        #[doc = "Register `CTL0` writer"]
        pub type W = crate::W<Ctl0Spec>;
        #[doc = "Field `WDCHSEL` reader - Analog watchdog channel select"]
        pub type WdchselR = crate::FieldReader;
        #[doc = "Field `WDCHSEL` writer - Analog watchdog channel select"]
        pub type WdchselW<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `EOCIE` reader - Interrupt enable for EOC"]
        pub type EocieR = crate::BitReader;
        #[doc = "Field `EOCIE` writer - Interrupt enable for EOC"]
        pub type EocieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WDEIE` reader - Interrupt enable for WDE"]
        pub type WdeieR = crate::BitReader;
        #[doc = "Field `WDEIE` writer - Interrupt enable for WDE"]
        pub type WdeieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EOICIE` reader - Interrupt enable for EOIC"]
        pub type EoicieR = crate::BitReader;
        #[doc = "Field `EOICIE` writer - Interrupt enable for EOIC"]
        pub type EoicieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SM` reader - Scan mode"]
        pub type SmR = crate::BitReader;
        #[doc = "Field `SM` writer - Scan mode"]
        pub type SmW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WDSC` reader - When in scan mode, analog watchdog is effective on a single channel"]
        pub type WdscR = crate::BitReader;
        #[doc = "Field `WDSC` writer - When in scan mode, analog watchdog is effective on a single channel"]
        pub type WdscW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ICA` reader - Inserted channel group convert automatically"]
        pub type IcaR = crate::BitReader;
        #[doc = "Field `ICA` writer - Inserted channel group convert automatically"]
        pub type IcaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DISRC` reader - Discontinuous mode on regular channels"]
        pub type DisrcR = crate::BitReader;
        #[doc = "Field `DISRC` writer - Discontinuous mode on regular channels"]
        pub type DisrcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DISIC` reader - Discontinuous mode on inserted channels"]
        pub type DisicR = crate::BitReader;
        #[doc = "Field `DISIC` writer - Discontinuous mode on inserted channels"]
        pub type DisicW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DISNUM` reader - Number of conversions in discontinuous mode"]
        pub type DisnumR = crate::FieldReader;
        #[doc = "Field `DISNUM` writer - Number of conversions in discontinuous mode"]
        pub type DisnumW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SYNCM` reader - sync mode selection"]
        pub type SyncmR = crate::FieldReader;
        #[doc = "Field `SYNCM` writer - sync mode selection"]
        pub type SyncmW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `IWDEN` reader - Inserted channel analog watchdog enable"]
        pub type IwdenR = crate::BitReader;
        #[doc = "Field `IWDEN` writer - Inserted channel analog watchdog enable"]
        pub type IwdenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RWDEN` reader - Regular channel analog watchdog enable"]
        pub type RwdenR = crate::BitReader;
        #[doc = "Field `RWDEN` writer - Regular channel analog watchdog enable"]
        pub type RwdenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:4 - Analog watchdog channel select"]
            #[inline(always)]
            pub fn wdchsel(&self) -> WdchselR {
                WdchselR::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bit 5 - Interrupt enable for EOC"]
            #[inline(always)]
            pub fn eocie(&self) -> EocieR {
                EocieR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Interrupt enable for WDE"]
            #[inline(always)]
            pub fn wdeie(&self) -> WdeieR {
                WdeieR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Interrupt enable for EOIC"]
            #[inline(always)]
            pub fn eoicie(&self) -> EoicieR {
                EoicieR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Scan mode"]
            #[inline(always)]
            pub fn sm(&self) -> SmR {
                SmR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - When in scan mode, analog watchdog is effective on a single channel"]
            #[inline(always)]
            pub fn wdsc(&self) -> WdscR {
                WdscR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Inserted channel group convert automatically"]
            #[inline(always)]
            pub fn ica(&self) -> IcaR {
                IcaR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Discontinuous mode on regular channels"]
            #[inline(always)]
            pub fn disrc(&self) -> DisrcR {
                DisrcR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Discontinuous mode on inserted channels"]
            #[inline(always)]
            pub fn disic(&self) -> DisicR {
                DisicR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bits 13:15 - Number of conversions in discontinuous mode"]
            #[inline(always)]
            pub fn disnum(&self) -> DisnumR {
                DisnumR::new(((self.bits >> 13) & 7) as u8)
            }
            #[doc = "Bits 16:18 - sync mode selection"]
            #[inline(always)]
            pub fn syncm(&self) -> SyncmR {
                SyncmR::new(((self.bits >> 16) & 7) as u8)
            }
            #[doc = "Bit 22 - Inserted channel analog watchdog enable"]
            #[inline(always)]
            pub fn iwden(&self) -> IwdenR {
                IwdenR::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Regular channel analog watchdog enable"]
            #[inline(always)]
            pub fn rwden(&self) -> RwdenR {
                RwdenR::new(((self.bits >> 23) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - Analog watchdog channel select"]
            #[inline(always)]
            #[must_use]
            pub fn wdchsel(&mut self) -> WdchselW<Ctl0Spec> {
                WdchselW::new(self, 0)
            }
            #[doc = "Bit 5 - Interrupt enable for EOC"]
            #[inline(always)]
            #[must_use]
            pub fn eocie(&mut self) -> EocieW<Ctl0Spec> {
                EocieW::new(self, 5)
            }
            #[doc = "Bit 6 - Interrupt enable for WDE"]
            #[inline(always)]
            #[must_use]
            pub fn wdeie(&mut self) -> WdeieW<Ctl0Spec> {
                WdeieW::new(self, 6)
            }
            #[doc = "Bit 7 - Interrupt enable for EOIC"]
            #[inline(always)]
            #[must_use]
            pub fn eoicie(&mut self) -> EoicieW<Ctl0Spec> {
                EoicieW::new(self, 7)
            }
            #[doc = "Bit 8 - Scan mode"]
            #[inline(always)]
            #[must_use]
            pub fn sm(&mut self) -> SmW<Ctl0Spec> {
                SmW::new(self, 8)
            }
            #[doc = "Bit 9 - When in scan mode, analog watchdog is effective on a single channel"]
            #[inline(always)]
            #[must_use]
            pub fn wdsc(&mut self) -> WdscW<Ctl0Spec> {
                WdscW::new(self, 9)
            }
            #[doc = "Bit 10 - Inserted channel group convert automatically"]
            #[inline(always)]
            #[must_use]
            pub fn ica(&mut self) -> IcaW<Ctl0Spec> {
                IcaW::new(self, 10)
            }
            #[doc = "Bit 11 - Discontinuous mode on regular channels"]
            #[inline(always)]
            #[must_use]
            pub fn disrc(&mut self) -> DisrcW<Ctl0Spec> {
                DisrcW::new(self, 11)
            }
            #[doc = "Bit 12 - Discontinuous mode on inserted channels"]
            #[inline(always)]
            #[must_use]
            pub fn disic(&mut self) -> DisicW<Ctl0Spec> {
                DisicW::new(self, 12)
            }
            #[doc = "Bits 13:15 - Number of conversions in discontinuous mode"]
            #[inline(always)]
            #[must_use]
            pub fn disnum(&mut self) -> DisnumW<Ctl0Spec> {
                DisnumW::new(self, 13)
            }
            #[doc = "Bits 16:18 - sync mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn syncm(&mut self) -> SyncmW<Ctl0Spec> {
                SyncmW::new(self, 16)
            }
            #[doc = "Bit 22 - Inserted channel analog watchdog enable"]
            #[inline(always)]
            #[must_use]
            pub fn iwden(&mut self) -> IwdenW<Ctl0Spec> {
                IwdenW::new(self, 22)
            }
            #[doc = "Bit 23 - Regular channel analog watchdog enable"]
            #[inline(always)]
            #[must_use]
            pub fn rwden(&mut self) -> RwdenW<Ctl0Spec> {
                RwdenW::new(self, 23)
            }
        }
        #[doc = "control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl0Spec;
        impl crate::RegisterSpec for Ctl0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl0::R`](R) reader structure"]
        impl crate::Readable for Ctl0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl0::W`](W) writer structure"]
        impl crate::Writable for Ctl0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL0 to value 0"]
        impl crate::Resettable for Ctl0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL1 (rw) register accessor: control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl1`]
module"]
    #[doc(alias = "CTL1")]
    pub type Ctl1 = crate::Reg<ctl1::Ctl1Spec>;
    #[doc = "control register 1"]
    pub mod ctl1 {
        #[doc = "Register `CTL1` reader"]
        pub type R = crate::R<Ctl1Spec>;
        #[doc = "Register `CTL1` writer"]
        pub type W = crate::W<Ctl1Spec>;
        #[doc = "Field `ADCON` reader - ADC on"]
        pub type AdconR = crate::BitReader;
        #[doc = "Field `ADCON` writer - ADC on"]
        pub type AdconW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CTN` reader - Continuous mode"]
        pub type CtnR = crate::BitReader;
        #[doc = "Field `CTN` writer - Continuous mode"]
        pub type CtnW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CLB` reader - ADC calibration"]
        pub type ClbR = crate::BitReader;
        #[doc = "Field `CLB` writer - ADC calibration"]
        pub type ClbW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RSTCLB` reader - Reset calibration"]
        pub type RstclbR = crate::BitReader;
        #[doc = "Field `RSTCLB` writer - Reset calibration"]
        pub type RstclbW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DMA` reader - DMA request enable"]
        pub type DmaR = crate::BitReader;
        #[doc = "Field `DMA` writer - DMA request enable"]
        pub type DmaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DAL` reader - Data alignment"]
        pub type DalR = crate::BitReader;
        #[doc = "Field `DAL` writer - Data alignment"]
        pub type DalW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ETSIC` reader - External trigger select for inserted channel"]
        pub type EtsicR = crate::FieldReader;
        #[doc = "Field `ETSIC` writer - External trigger select for inserted channel"]
        pub type EtsicW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `ETEIC` reader - External trigger enable for inserted channel"]
        pub type EteicR = crate::BitReader;
        #[doc = "Field `ETEIC` writer - External trigger enable for inserted channel"]
        pub type EteicW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ETSRC` reader - External trigger select for regular channel"]
        pub type EtsrcR = crate::FieldReader;
        #[doc = "Field `ETSRC` writer - External trigger select for regular channel"]
        pub type EtsrcW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `ETERC` reader - External trigger enable for regular channel"]
        pub type EtercR = crate::BitReader;
        #[doc = "Field `ETERC` writer - External trigger enable for regular channel"]
        pub type EtercW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWICST` reader - Start on inserted channel"]
        pub type SwicstR = crate::BitReader;
        #[doc = "Field `SWICST` writer - Start on inserted channel"]
        pub type SwicstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWRCST` reader - Start on regular channel"]
        pub type SwrcstR = crate::BitReader;
        #[doc = "Field `SWRCST` writer - Start on regular channel"]
        pub type SwrcstW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - ADC on"]
            #[inline(always)]
            pub fn adcon(&self) -> AdconR {
                AdconR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Continuous mode"]
            #[inline(always)]
            pub fn ctn(&self) -> CtnR {
                CtnR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - ADC calibration"]
            #[inline(always)]
            pub fn clb(&self) -> ClbR {
                ClbR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Reset calibration"]
            #[inline(always)]
            pub fn rstclb(&self) -> RstclbR {
                RstclbR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 8 - DMA request enable"]
            #[inline(always)]
            pub fn dma(&self) -> DmaR {
                DmaR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 11 - Data alignment"]
            #[inline(always)]
            pub fn dal(&self) -> DalR {
                DalR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:14 - External trigger select for inserted channel"]
            #[inline(always)]
            pub fn etsic(&self) -> EtsicR {
                EtsicR::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bit 15 - External trigger enable for inserted channel"]
            #[inline(always)]
            pub fn eteic(&self) -> EteicR {
                EteicR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bits 17:19 - External trigger select for regular channel"]
            #[inline(always)]
            pub fn etsrc(&self) -> EtsrcR {
                EtsrcR::new(((self.bits >> 17) & 7) as u8)
            }
            #[doc = "Bit 20 - External trigger enable for regular channel"]
            #[inline(always)]
            pub fn eterc(&self) -> EtercR {
                EtercR::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Start on inserted channel"]
            #[inline(always)]
            pub fn swicst(&self) -> SwicstR {
                SwicstR::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Start on regular channel"]
            #[inline(always)]
            pub fn swrcst(&self) -> SwrcstR {
                SwrcstR::new(((self.bits >> 22) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - ADC on"]
            #[inline(always)]
            #[must_use]
            pub fn adcon(&mut self) -> AdconW<Ctl1Spec> {
                AdconW::new(self, 0)
            }
            #[doc = "Bit 1 - Continuous mode"]
            #[inline(always)]
            #[must_use]
            pub fn ctn(&mut self) -> CtnW<Ctl1Spec> {
                CtnW::new(self, 1)
            }
            #[doc = "Bit 2 - ADC calibration"]
            #[inline(always)]
            #[must_use]
            pub fn clb(&mut self) -> ClbW<Ctl1Spec> {
                ClbW::new(self, 2)
            }
            #[doc = "Bit 3 - Reset calibration"]
            #[inline(always)]
            #[must_use]
            pub fn rstclb(&mut self) -> RstclbW<Ctl1Spec> {
                RstclbW::new(self, 3)
            }
            #[doc = "Bit 8 - DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn dma(&mut self) -> DmaW<Ctl1Spec> {
                DmaW::new(self, 8)
            }
            #[doc = "Bit 11 - Data alignment"]
            #[inline(always)]
            #[must_use]
            pub fn dal(&mut self) -> DalW<Ctl1Spec> {
                DalW::new(self, 11)
            }
            #[doc = "Bits 12:14 - External trigger select for inserted channel"]
            #[inline(always)]
            #[must_use]
            pub fn etsic(&mut self) -> EtsicW<Ctl1Spec> {
                EtsicW::new(self, 12)
            }
            #[doc = "Bit 15 - External trigger enable for inserted channel"]
            #[inline(always)]
            #[must_use]
            pub fn eteic(&mut self) -> EteicW<Ctl1Spec> {
                EteicW::new(self, 15)
            }
            #[doc = "Bits 17:19 - External trigger select for regular channel"]
            #[inline(always)]
            #[must_use]
            pub fn etsrc(&mut self) -> EtsrcW<Ctl1Spec> {
                EtsrcW::new(self, 17)
            }
            #[doc = "Bit 20 - External trigger enable for regular channel"]
            #[inline(always)]
            #[must_use]
            pub fn eterc(&mut self) -> EtercW<Ctl1Spec> {
                EtercW::new(self, 20)
            }
            #[doc = "Bit 21 - Start on inserted channel"]
            #[inline(always)]
            #[must_use]
            pub fn swicst(&mut self) -> SwicstW<Ctl1Spec> {
                SwicstW::new(self, 21)
            }
            #[doc = "Bit 22 - Start on regular channel"]
            #[inline(always)]
            #[must_use]
            pub fn swrcst(&mut self) -> SwrcstW<Ctl1Spec> {
                SwrcstW::new(self, 22)
            }
        }
        #[doc = "control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl1Spec;
        impl crate::RegisterSpec for Ctl1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl1::R`](R) reader structure"]
        impl crate::Readable for Ctl1Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"]
        impl crate::Writable for Ctl1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL1 to value 0"]
        impl crate::Resettable for Ctl1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "SAMPT0 (rw) register accessor: Sample time register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`sampt0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sampt0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sampt0`]
module"]
    #[doc(alias = "SAMPT0")]
    pub type Sampt0 = crate::Reg<sampt0::Sampt0Spec>;
    #[doc = "Sample time register 0"]
    pub mod sampt0 {
        #[doc = "Register `SAMPT0` reader"]
        pub type R = crate::R<Sampt0Spec>;
        #[doc = "Register `SAMPT0` writer"]
        pub type W = crate::W<Sampt0Spec>;
        #[doc = "Field `SPT10` reader - Channel 10 sample time selection"]
        pub type Spt10R = crate::FieldReader;
        #[doc = "Field `SPT10` writer - Channel 10 sample time selection"]
        pub type Spt10W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT11` reader - Channel 11 sample time selection"]
        pub type Spt11R = crate::FieldReader;
        #[doc = "Field `SPT11` writer - Channel 11 sample time selection"]
        pub type Spt11W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT12` reader - Channel 12 sample time selection"]
        pub type Spt12R = crate::FieldReader;
        #[doc = "Field `SPT12` writer - Channel 12 sample time selection"]
        pub type Spt12W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT13` reader - Channel 13 sample time selection"]
        pub type Spt13R = crate::FieldReader;
        #[doc = "Field `SPT13` writer - Channel 13 sample time selection"]
        pub type Spt13W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT14` reader - Channel 14 sample time selection"]
        pub type Spt14R = crate::FieldReader;
        #[doc = "Field `SPT14` writer - Channel 14 sample time selection"]
        pub type Spt14W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT15` reader - Channel 15 sample time selection"]
        pub type Spt15R = crate::FieldReader;
        #[doc = "Field `SPT15` writer - Channel 15 sample time selection"]
        pub type Spt15W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT16` reader - Channel 16 sample time selection"]
        pub type Spt16R = crate::FieldReader;
        #[doc = "Field `SPT16` writer - Channel 16 sample time selection"]
        pub type Spt16W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT17` reader - Channel 17 sample time selection"]
        pub type Spt17R = crate::FieldReader;
        #[doc = "Field `SPT17` writer - Channel 17 sample time selection"]
        pub type Spt17W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        impl R {
            #[doc = "Bits 0:2 - Channel 10 sample time selection"]
            #[inline(always)]
            pub fn spt10(&self) -> Spt10R {
                Spt10R::new((self.bits & 7) as u8)
            }
            #[doc = "Bits 3:5 - Channel 11 sample time selection"]
            #[inline(always)]
            pub fn spt11(&self) -> Spt11R {
                Spt11R::new(((self.bits >> 3) & 7) as u8)
            }
            #[doc = "Bits 6:8 - Channel 12 sample time selection"]
            #[inline(always)]
            pub fn spt12(&self) -> Spt12R {
                Spt12R::new(((self.bits >> 6) & 7) as u8)
            }
            #[doc = "Bits 9:11 - Channel 13 sample time selection"]
            #[inline(always)]
            pub fn spt13(&self) -> Spt13R {
                Spt13R::new(((self.bits >> 9) & 7) as u8)
            }
            #[doc = "Bits 12:14 - Channel 14 sample time selection"]
            #[inline(always)]
            pub fn spt14(&self) -> Spt14R {
                Spt14R::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bits 15:17 - Channel 15 sample time selection"]
            #[inline(always)]
            pub fn spt15(&self) -> Spt15R {
                Spt15R::new(((self.bits >> 15) & 7) as u8)
            }
            #[doc = "Bits 18:20 - Channel 16 sample time selection"]
            #[inline(always)]
            pub fn spt16(&self) -> Spt16R {
                Spt16R::new(((self.bits >> 18) & 7) as u8)
            }
            #[doc = "Bits 21:23 - Channel 17 sample time selection"]
            #[inline(always)]
            pub fn spt17(&self) -> Spt17R {
                Spt17R::new(((self.bits >> 21) & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Channel 10 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt10(&mut self) -> Spt10W<Sampt0Spec> {
                Spt10W::new(self, 0)
            }
            #[doc = "Bits 3:5 - Channel 11 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt11(&mut self) -> Spt11W<Sampt0Spec> {
                Spt11W::new(self, 3)
            }
            #[doc = "Bits 6:8 - Channel 12 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt12(&mut self) -> Spt12W<Sampt0Spec> {
                Spt12W::new(self, 6)
            }
            #[doc = "Bits 9:11 - Channel 13 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt13(&mut self) -> Spt13W<Sampt0Spec> {
                Spt13W::new(self, 9)
            }
            #[doc = "Bits 12:14 - Channel 14 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt14(&mut self) -> Spt14W<Sampt0Spec> {
                Spt14W::new(self, 12)
            }
            #[doc = "Bits 15:17 - Channel 15 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt15(&mut self) -> Spt15W<Sampt0Spec> {
                Spt15W::new(self, 15)
            }
            #[doc = "Bits 18:20 - Channel 16 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt16(&mut self) -> Spt16W<Sampt0Spec> {
                Spt16W::new(self, 18)
            }
            #[doc = "Bits 21:23 - Channel 17 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt17(&mut self) -> Spt17W<Sampt0Spec> {
                Spt17W::new(self, 21)
            }
        }
        #[doc = "Sample time register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`sampt0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sampt0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Sampt0Spec;
        impl crate::RegisterSpec for Sampt0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sampt0::R`](R) reader structure"]
        impl crate::Readable for Sampt0Spec {}
        #[doc = "`write(|w| ..)` method takes [`sampt0::W`](W) writer structure"]
        impl crate::Writable for Sampt0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SAMPT0 to value 0"]
        impl crate::Resettable for Sampt0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "SAMPT1 (rw) register accessor: Sample time register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`sampt1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sampt1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sampt1`]
module"]
    #[doc(alias = "SAMPT1")]
    pub type Sampt1 = crate::Reg<sampt1::Sampt1Spec>;
    #[doc = "Sample time register 1"]
    pub mod sampt1 {
        #[doc = "Register `SAMPT1` reader"]
        pub type R = crate::R<Sampt1Spec>;
        #[doc = "Register `SAMPT1` writer"]
        pub type W = crate::W<Sampt1Spec>;
        #[doc = "Field `SPT0` reader - Channel 0 sample time selection"]
        pub type Spt0R = crate::FieldReader;
        #[doc = "Field `SPT0` writer - Channel 0 sample time selection"]
        pub type Spt0W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT1` reader - Channel 1 sample time selection"]
        pub type Spt1R = crate::FieldReader;
        #[doc = "Field `SPT1` writer - Channel 1 sample time selection"]
        pub type Spt1W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT2` reader - Channel 2 sample time selection"]
        pub type Spt2R = crate::FieldReader;
        #[doc = "Field `SPT2` writer - Channel 2 sample time selection"]
        pub type Spt2W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT3` reader - Channel 3 sample time selection"]
        pub type Spt3R = crate::FieldReader;
        #[doc = "Field `SPT3` writer - Channel 3 sample time selection"]
        pub type Spt3W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT4` reader - Channel 4 sample time selection"]
        pub type Spt4R = crate::FieldReader;
        #[doc = "Field `SPT4` writer - Channel 4 sample time selection"]
        pub type Spt4W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT5` reader - Channel 5 sample time selection"]
        pub type Spt5R = crate::FieldReader;
        #[doc = "Field `SPT5` writer - Channel 5 sample time selection"]
        pub type Spt5W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT6` reader - Channel 6 sample time selection"]
        pub type Spt6R = crate::FieldReader;
        #[doc = "Field `SPT6` writer - Channel 6 sample time selection"]
        pub type Spt6W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT7` reader - Channel 7 sample time selection"]
        pub type Spt7R = crate::FieldReader;
        #[doc = "Field `SPT7` writer - Channel 7 sample time selection"]
        pub type Spt7W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT8` reader - Channel 8 sample time selection"]
        pub type Spt8R = crate::FieldReader;
        #[doc = "Field `SPT8` writer - Channel 8 sample time selection"]
        pub type Spt8W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPT9` reader - Channel 9 sample time selection"]
        pub type Spt9R = crate::FieldReader;
        #[doc = "Field `SPT9` writer - Channel 9 sample time selection"]
        pub type Spt9W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        impl R {
            #[doc = "Bits 0:2 - Channel 0 sample time selection"]
            #[inline(always)]
            pub fn spt0(&self) -> Spt0R {
                Spt0R::new((self.bits & 7) as u8)
            }
            #[doc = "Bits 3:5 - Channel 1 sample time selection"]
            #[inline(always)]
            pub fn spt1(&self) -> Spt1R {
                Spt1R::new(((self.bits >> 3) & 7) as u8)
            }
            #[doc = "Bits 6:8 - Channel 2 sample time selection"]
            #[inline(always)]
            pub fn spt2(&self) -> Spt2R {
                Spt2R::new(((self.bits >> 6) & 7) as u8)
            }
            #[doc = "Bits 9:11 - Channel 3 sample time selection"]
            #[inline(always)]
            pub fn spt3(&self) -> Spt3R {
                Spt3R::new(((self.bits >> 9) & 7) as u8)
            }
            #[doc = "Bits 12:14 - Channel 4 sample time selection"]
            #[inline(always)]
            pub fn spt4(&self) -> Spt4R {
                Spt4R::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bits 15:17 - Channel 5 sample time selection"]
            #[inline(always)]
            pub fn spt5(&self) -> Spt5R {
                Spt5R::new(((self.bits >> 15) & 7) as u8)
            }
            #[doc = "Bits 18:20 - Channel 6 sample time selection"]
            #[inline(always)]
            pub fn spt6(&self) -> Spt6R {
                Spt6R::new(((self.bits >> 18) & 7) as u8)
            }
            #[doc = "Bits 21:23 - Channel 7 sample time selection"]
            #[inline(always)]
            pub fn spt7(&self) -> Spt7R {
                Spt7R::new(((self.bits >> 21) & 7) as u8)
            }
            #[doc = "Bits 24:26 - Channel 8 sample time selection"]
            #[inline(always)]
            pub fn spt8(&self) -> Spt8R {
                Spt8R::new(((self.bits >> 24) & 7) as u8)
            }
            #[doc = "Bits 27:29 - Channel 9 sample time selection"]
            #[inline(always)]
            pub fn spt9(&self) -> Spt9R {
                Spt9R::new(((self.bits >> 27) & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Channel 0 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt0(&mut self) -> Spt0W<Sampt1Spec> {
                Spt0W::new(self, 0)
            }
            #[doc = "Bits 3:5 - Channel 1 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt1(&mut self) -> Spt1W<Sampt1Spec> {
                Spt1W::new(self, 3)
            }
            #[doc = "Bits 6:8 - Channel 2 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt2(&mut self) -> Spt2W<Sampt1Spec> {
                Spt2W::new(self, 6)
            }
            #[doc = "Bits 9:11 - Channel 3 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt3(&mut self) -> Spt3W<Sampt1Spec> {
                Spt3W::new(self, 9)
            }
            #[doc = "Bits 12:14 - Channel 4 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt4(&mut self) -> Spt4W<Sampt1Spec> {
                Spt4W::new(self, 12)
            }
            #[doc = "Bits 15:17 - Channel 5 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt5(&mut self) -> Spt5W<Sampt1Spec> {
                Spt5W::new(self, 15)
            }
            #[doc = "Bits 18:20 - Channel 6 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt6(&mut self) -> Spt6W<Sampt1Spec> {
                Spt6W::new(self, 18)
            }
            #[doc = "Bits 21:23 - Channel 7 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt7(&mut self) -> Spt7W<Sampt1Spec> {
                Spt7W::new(self, 21)
            }
            #[doc = "Bits 24:26 - Channel 8 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt8(&mut self) -> Spt8W<Sampt1Spec> {
                Spt8W::new(self, 24)
            }
            #[doc = "Bits 27:29 - Channel 9 sample time selection"]
            #[inline(always)]
            #[must_use]
            pub fn spt9(&mut self) -> Spt9W<Sampt1Spec> {
                Spt9W::new(self, 27)
            }
        }
        #[doc = "Sample time register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`sampt1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sampt1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Sampt1Spec;
        impl crate::RegisterSpec for Sampt1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sampt1::R`](R) reader structure"]
        impl crate::Readable for Sampt1Spec {}
        #[doc = "`write(|w| ..)` method takes [`sampt1::W`](W) writer structure"]
        impl crate::Writable for Sampt1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SAMPT1 to value 0"]
        impl crate::Resettable for Sampt1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IOFF0 (rw) register accessor: Inserted channel data offset register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ioff0`]
module"]
    #[doc(alias = "IOFF0")]
    pub type Ioff0 = crate::Reg<ioff0::Ioff0Spec>;
    #[doc = "Inserted channel data offset register 0"]
    pub mod ioff0 {
        #[doc = "Register `IOFF0` reader"]
        pub type R = crate::R<Ioff0Spec>;
        #[doc = "Register `IOFF0` writer"]
        pub type W = crate::W<Ioff0Spec>;
        #[doc = "Field `IOFF` reader - Data offset for inserted channel 0"]
        pub type IoffR = crate::FieldReader<u16>;
        #[doc = "Field `IOFF` writer - Data offset for inserted channel 0"]
        pub type IoffW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - Data offset for inserted channel 0"]
            #[inline(always)]
            pub fn ioff(&self) -> IoffR {
                IoffR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for inserted channel 0"]
            #[inline(always)]
            #[must_use]
            pub fn ioff(&mut self) -> IoffW<Ioff0Spec> {
                IoffW::new(self, 0)
            }
        }
        #[doc = "Inserted channel data offset register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ioff0Spec;
        impl crate::RegisterSpec for Ioff0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ioff0::R`](R) reader structure"]
        impl crate::Readable for Ioff0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ioff0::W`](W) writer structure"]
        impl crate::Writable for Ioff0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets IOFF0 to value 0"]
        impl crate::Resettable for Ioff0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IOFF1 (rw) register accessor: Inserted channel data offset register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ioff1`]
module"]
    #[doc(alias = "IOFF1")]
    pub type Ioff1 = crate::Reg<ioff1::Ioff1Spec>;
    #[doc = "Inserted channel data offset register 1"]
    pub mod ioff1 {
        #[doc = "Register `IOFF1` reader"]
        pub type R = crate::R<Ioff1Spec>;
        #[doc = "Register `IOFF1` writer"]
        pub type W = crate::W<Ioff1Spec>;
        #[doc = "Field `IOFF` reader - Data offset for inserted channel 1"]
        pub type IoffR = crate::FieldReader<u16>;
        #[doc = "Field `IOFF` writer - Data offset for inserted channel 1"]
        pub type IoffW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - Data offset for inserted channel 1"]
            #[inline(always)]
            pub fn ioff(&self) -> IoffR {
                IoffR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for inserted channel 1"]
            #[inline(always)]
            #[must_use]
            pub fn ioff(&mut self) -> IoffW<Ioff1Spec> {
                IoffW::new(self, 0)
            }
        }
        #[doc = "Inserted channel data offset register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ioff1Spec;
        impl crate::RegisterSpec for Ioff1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ioff1::R`](R) reader structure"]
        impl crate::Readable for Ioff1Spec {}
        #[doc = "`write(|w| ..)` method takes [`ioff1::W`](W) writer structure"]
        impl crate::Writable for Ioff1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets IOFF1 to value 0"]
        impl crate::Resettable for Ioff1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IOFF2 (rw) register accessor: Inserted channel data offset register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ioff2`]
module"]
    #[doc(alias = "IOFF2")]
    pub type Ioff2 = crate::Reg<ioff2::Ioff2Spec>;
    #[doc = "Inserted channel data offset register 2"]
    pub mod ioff2 {
        #[doc = "Register `IOFF2` reader"]
        pub type R = crate::R<Ioff2Spec>;
        #[doc = "Register `IOFF2` writer"]
        pub type W = crate::W<Ioff2Spec>;
        #[doc = "Field `IOFF` reader - Data offset for inserted channel 2"]
        pub type IoffR = crate::FieldReader<u16>;
        #[doc = "Field `IOFF` writer - Data offset for inserted channel 2"]
        pub type IoffW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - Data offset for inserted channel 2"]
            #[inline(always)]
            pub fn ioff(&self) -> IoffR {
                IoffR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for inserted channel 2"]
            #[inline(always)]
            #[must_use]
            pub fn ioff(&mut self) -> IoffW<Ioff2Spec> {
                IoffW::new(self, 0)
            }
        }
        #[doc = "Inserted channel data offset register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ioff2Spec;
        impl crate::RegisterSpec for Ioff2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ioff2::R`](R) reader structure"]
        impl crate::Readable for Ioff2Spec {}
        #[doc = "`write(|w| ..)` method takes [`ioff2::W`](W) writer structure"]
        impl crate::Writable for Ioff2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets IOFF2 to value 0"]
        impl crate::Resettable for Ioff2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IOFF3 (rw) register accessor: Inserted channel data offset register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ioff3`]
module"]
    #[doc(alias = "IOFF3")]
    pub type Ioff3 = crate::Reg<ioff3::Ioff3Spec>;
    #[doc = "Inserted channel data offset register 3"]
    pub mod ioff3 {
        #[doc = "Register `IOFF3` reader"]
        pub type R = crate::R<Ioff3Spec>;
        #[doc = "Register `IOFF3` writer"]
        pub type W = crate::W<Ioff3Spec>;
        #[doc = "Field `IOFF` reader - Data offset for inserted channel 3"]
        pub type IoffR = crate::FieldReader<u16>;
        #[doc = "Field `IOFF` writer - Data offset for inserted channel 3"]
        pub type IoffW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - Data offset for inserted channel 3"]
            #[inline(always)]
            pub fn ioff(&self) -> IoffR {
                IoffR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Data offset for inserted channel 3"]
            #[inline(always)]
            #[must_use]
            pub fn ioff(&mut self) -> IoffW<Ioff3Spec> {
                IoffW::new(self, 0)
            }
        }
        #[doc = "Inserted channel data offset register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`ioff3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ioff3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ioff3Spec;
        impl crate::RegisterSpec for Ioff3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ioff3::R`](R) reader structure"]
        impl crate::Readable for Ioff3Spec {}
        #[doc = "`write(|w| ..)` method takes [`ioff3::W`](W) writer structure"]
        impl crate::Writable for Ioff3Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets IOFF3 to value 0"]
        impl crate::Resettable for Ioff3Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "WDHT (rw) register accessor: watchdog higher threshold register\n\nYou can [`read`](crate::Reg::read) this register and get [`wdht::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`wdht::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@wdht`]
module"]
    #[doc(alias = "WDHT")]
    pub type Wdht = crate::Reg<wdht::WdhtSpec>;
    #[doc = "watchdog higher threshold register"]
    pub mod wdht {
        #[doc = "Register `WDHT` reader"]
        pub type R = crate::R<WdhtSpec>;
        #[doc = "Register `WDHT` writer"]
        pub type W = crate::W<WdhtSpec>;
        #[doc = "Field `WDHT` reader - Analog watchdog higher threshold"]
        pub type WdhtR = crate::FieldReader<u16>;
        #[doc = "Field `WDHT` writer - Analog watchdog higher threshold"]
        pub type WdhtW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - Analog watchdog higher threshold"]
            #[inline(always)]
            pub fn wdht(&self) -> WdhtR {
                WdhtR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Analog watchdog higher threshold"]
            #[inline(always)]
            #[must_use]
            pub fn wdht(&mut self) -> WdhtW<WdhtSpec> {
                WdhtW::new(self, 0)
            }
        }
        #[doc = "watchdog higher threshold register\n\nYou can [`read`](crate::Reg::read) this register and get [`wdht::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`wdht::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct WdhtSpec;
        impl crate::RegisterSpec for WdhtSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`wdht::R`](R) reader structure"]
        impl crate::Readable for WdhtSpec {}
        #[doc = "`write(|w| ..)` method takes [`wdht::W`](W) writer structure"]
        impl crate::Writable for WdhtSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets WDHT to value 0x0fff"]
        impl crate::Resettable for WdhtSpec {
            const RESET_VALUE: u32 = 0x0fff;
        }
    }
    #[doc = "WDLT (rw) register accessor: watchdog lower threshold register\n\nYou can [`read`](crate::Reg::read) this register and get [`wdlt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`wdlt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@wdlt`]
module"]
    #[doc(alias = "WDLT")]
    pub type Wdlt = crate::Reg<wdlt::WdltSpec>;
    #[doc = "watchdog lower threshold register"]
    pub mod wdlt {
        #[doc = "Register `WDLT` reader"]
        pub type R = crate::R<WdltSpec>;
        #[doc = "Register `WDLT` writer"]
        pub type W = crate::W<WdltSpec>;
        #[doc = "Field `WDLT` reader - Analog watchdog lower threshold"]
        pub type WdltR = crate::FieldReader<u16>;
        #[doc = "Field `WDLT` writer - Analog watchdog lower threshold"]
        pub type WdltW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - Analog watchdog lower threshold"]
            #[inline(always)]
            pub fn wdlt(&self) -> WdltR {
                WdltR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Analog watchdog lower threshold"]
            #[inline(always)]
            #[must_use]
            pub fn wdlt(&mut self) -> WdltW<WdltSpec> {
                WdltW::new(self, 0)
            }
        }
        #[doc = "watchdog lower threshold register\n\nYou can [`read`](crate::Reg::read) this register and get [`wdlt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`wdlt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct WdltSpec;
        impl crate::RegisterSpec for WdltSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`wdlt::R`](R) reader structure"]
        impl crate::Readable for WdltSpec {}
        #[doc = "`write(|w| ..)` method takes [`wdlt::W`](W) writer structure"]
        impl crate::Writable for WdltSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets WDLT to value 0"]
        impl crate::Resettable for WdltSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RSQ0 (rw) register accessor: regular sequence register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`rsq0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rsq0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rsq0`]
module"]
    #[doc(alias = "RSQ0")]
    pub type Rsq0 = crate::Reg<rsq0::Rsq0Spec>;
    #[doc = "regular sequence register 0"]
    pub mod rsq0 {
        #[doc = "Register `RSQ0` reader"]
        pub type R = crate::R<Rsq0Spec>;
        #[doc = "Register `RSQ0` writer"]
        pub type W = crate::W<Rsq0Spec>;
        #[doc = "Field `RSQ12` reader - 13th conversion in regular sequence"]
        pub type Rsq12R = crate::FieldReader;
        #[doc = "Field `RSQ12` writer - 13th conversion in regular sequence"]
        pub type Rsq12W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ13` reader - 14th conversion in regular sequence"]
        pub type Rsq13R = crate::FieldReader;
        #[doc = "Field `RSQ13` writer - 14th conversion in regular sequence"]
        pub type Rsq13W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ14` reader - 15th conversion in regular sequence"]
        pub type Rsq14R = crate::FieldReader;
        #[doc = "Field `RSQ14` writer - 15th conversion in regular sequence"]
        pub type Rsq14W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ15` reader - 16th conversion in regular sequence"]
        pub type Rsq15R = crate::FieldReader;
        #[doc = "Field `RSQ15` writer - 16th conversion in regular sequence"]
        pub type Rsq15W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RL` reader - Regular channel group length"]
        pub type RlR = crate::FieldReader;
        #[doc = "Field `RL` writer - Regular channel group length"]
        pub type RlW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:4 - 13th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq12(&self) -> Rsq12R {
                Rsq12R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 14th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq13(&self) -> Rsq13R {
                Rsq13R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 15th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq14(&self) -> Rsq14R {
                Rsq14R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 16th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq15(&self) -> Rsq15R {
                Rsq15R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 20:23 - Regular channel group length"]
            #[inline(always)]
            pub fn rl(&self) -> RlR {
                RlR::new(((self.bits >> 20) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - 13th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq12(&mut self) -> Rsq12W<Rsq0Spec> {
                Rsq12W::new(self, 0)
            }
            #[doc = "Bits 5:9 - 14th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq13(&mut self) -> Rsq13W<Rsq0Spec> {
                Rsq13W::new(self, 5)
            }
            #[doc = "Bits 10:14 - 15th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq14(&mut self) -> Rsq14W<Rsq0Spec> {
                Rsq14W::new(self, 10)
            }
            #[doc = "Bits 15:19 - 16th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq15(&mut self) -> Rsq15W<Rsq0Spec> {
                Rsq15W::new(self, 15)
            }
            #[doc = "Bits 20:23 - Regular channel group length"]
            #[inline(always)]
            #[must_use]
            pub fn rl(&mut self) -> RlW<Rsq0Spec> {
                RlW::new(self, 20)
            }
        }
        #[doc = "regular sequence register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`rsq0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rsq0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rsq0Spec;
        impl crate::RegisterSpec for Rsq0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rsq0::R`](R) reader structure"]
        impl crate::Readable for Rsq0Spec {}
        #[doc = "`write(|w| ..)` method takes [`rsq0::W`](W) writer structure"]
        impl crate::Writable for Rsq0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets RSQ0 to value 0"]
        impl crate::Resettable for Rsq0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RSQ1 (rw) register accessor: regular sequence register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`rsq1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rsq1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rsq1`]
module"]
    #[doc(alias = "RSQ1")]
    pub type Rsq1 = crate::Reg<rsq1::Rsq1Spec>;
    #[doc = "regular sequence register 1"]
    pub mod rsq1 {
        #[doc = "Register `RSQ1` reader"]
        pub type R = crate::R<Rsq1Spec>;
        #[doc = "Register `RSQ1` writer"]
        pub type W = crate::W<Rsq1Spec>;
        #[doc = "Field `RSQ6` reader - 7th conversion in regular sequence"]
        pub type Rsq6R = crate::FieldReader;
        #[doc = "Field `RSQ6` writer - 7th conversion in regular sequence"]
        pub type Rsq6W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ7` reader - 8th conversion in regular sequence"]
        pub type Rsq7R = crate::FieldReader;
        #[doc = "Field `RSQ7` writer - 8th conversion in regular sequence"]
        pub type Rsq7W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ8` reader - 9th conversion in regular sequence"]
        pub type Rsq8R = crate::FieldReader;
        #[doc = "Field `RSQ8` writer - 9th conversion in regular sequence"]
        pub type Rsq8W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ9` reader - 10th conversion in regular sequence"]
        pub type Rsq9R = crate::FieldReader;
        #[doc = "Field `RSQ9` writer - 10th conversion in regular sequence"]
        pub type Rsq9W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ10` reader - 11th conversion in regular sequence"]
        pub type Rsq10R = crate::FieldReader;
        #[doc = "Field `RSQ10` writer - 11th conversion in regular sequence"]
        pub type Rsq10W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ11` reader - 12th conversion in regular sequence"]
        pub type Rsq11R = crate::FieldReader;
        #[doc = "Field `RSQ11` writer - 12th conversion in regular sequence"]
        pub type Rsq11W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        impl R {
            #[doc = "Bits 0:4 - 7th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq6(&self) -> Rsq6R {
                Rsq6R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 8th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq7(&self) -> Rsq7R {
                Rsq7R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 9th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq8(&self) -> Rsq8R {
                Rsq8R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 10th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq9(&self) -> Rsq9R {
                Rsq9R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 20:24 - 11th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq10(&self) -> Rsq10R {
                Rsq10R::new(((self.bits >> 20) & 0x1f) as u8)
            }
            #[doc = "Bits 25:29 - 12th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq11(&self) -> Rsq11R {
                Rsq11R::new(((self.bits >> 25) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - 7th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq6(&mut self) -> Rsq6W<Rsq1Spec> {
                Rsq6W::new(self, 0)
            }
            #[doc = "Bits 5:9 - 8th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq7(&mut self) -> Rsq7W<Rsq1Spec> {
                Rsq7W::new(self, 5)
            }
            #[doc = "Bits 10:14 - 9th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq8(&mut self) -> Rsq8W<Rsq1Spec> {
                Rsq8W::new(self, 10)
            }
            #[doc = "Bits 15:19 - 10th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq9(&mut self) -> Rsq9W<Rsq1Spec> {
                Rsq9W::new(self, 15)
            }
            #[doc = "Bits 20:24 - 11th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq10(&mut self) -> Rsq10W<Rsq1Spec> {
                Rsq10W::new(self, 20)
            }
            #[doc = "Bits 25:29 - 12th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq11(&mut self) -> Rsq11W<Rsq1Spec> {
                Rsq11W::new(self, 25)
            }
        }
        #[doc = "regular sequence register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`rsq1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rsq1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rsq1Spec;
        impl crate::RegisterSpec for Rsq1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rsq1::R`](R) reader structure"]
        impl crate::Readable for Rsq1Spec {}
        #[doc = "`write(|w| ..)` method takes [`rsq1::W`](W) writer structure"]
        impl crate::Writable for Rsq1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets RSQ1 to value 0"]
        impl crate::Resettable for Rsq1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RSQ2 (rw) register accessor: regular sequence register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`rsq2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rsq2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rsq2`]
module"]
    #[doc(alias = "RSQ2")]
    pub type Rsq2 = crate::Reg<rsq2::Rsq2Spec>;
    #[doc = "regular sequence register 2"]
    pub mod rsq2 {
        #[doc = "Register `RSQ2` reader"]
        pub type R = crate::R<Rsq2Spec>;
        #[doc = "Register `RSQ2` writer"]
        pub type W = crate::W<Rsq2Spec>;
        #[doc = "Field `RSQ0` reader - 1st conversion in regular sequence"]
        pub type Rsq0R = crate::FieldReader;
        #[doc = "Field `RSQ0` writer - 1st conversion in regular sequence"]
        pub type Rsq0W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ1` reader - 2nd conversion in regular sequence"]
        pub type Rsq1R = crate::FieldReader;
        #[doc = "Field `RSQ1` writer - 2nd conversion in regular sequence"]
        pub type Rsq1W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ2` reader - 3rd conversion in regular sequence"]
        pub type Rsq2R = crate::FieldReader;
        #[doc = "Field `RSQ2` writer - 3rd conversion in regular sequence"]
        pub type Rsq2W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ3` reader - 4th conversion in regular sequence"]
        pub type Rsq3R = crate::FieldReader;
        #[doc = "Field `RSQ3` writer - 4th conversion in regular sequence"]
        pub type Rsq3W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ4` reader - 5th conversion in regular sequence"]
        pub type Rsq4R = crate::FieldReader;
        #[doc = "Field `RSQ4` writer - 5th conversion in regular sequence"]
        pub type Rsq4W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `RSQ5` reader - 6th conversion in regular sequence"]
        pub type Rsq5R = crate::FieldReader;
        #[doc = "Field `RSQ5` writer - 6th conversion in regular sequence"]
        pub type Rsq5W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        impl R {
            #[doc = "Bits 0:4 - 1st conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq0(&self) -> Rsq0R {
                Rsq0R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 2nd conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq1(&self) -> Rsq1R {
                Rsq1R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 3rd conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq2(&self) -> Rsq2R {
                Rsq2R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 4th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq3(&self) -> Rsq3R {
                Rsq3R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 20:24 - 5th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq4(&self) -> Rsq4R {
                Rsq4R::new(((self.bits >> 20) & 0x1f) as u8)
            }
            #[doc = "Bits 25:29 - 6th conversion in regular sequence"]
            #[inline(always)]
            pub fn rsq5(&self) -> Rsq5R {
                Rsq5R::new(((self.bits >> 25) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - 1st conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq0(&mut self) -> Rsq0W<Rsq2Spec> {
                Rsq0W::new(self, 0)
            }
            #[doc = "Bits 5:9 - 2nd conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq1(&mut self) -> Rsq1W<Rsq2Spec> {
                Rsq1W::new(self, 5)
            }
            #[doc = "Bits 10:14 - 3rd conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq2(&mut self) -> Rsq2W<Rsq2Spec> {
                Rsq2W::new(self, 10)
            }
            #[doc = "Bits 15:19 - 4th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq3(&mut self) -> Rsq3W<Rsq2Spec> {
                Rsq3W::new(self, 15)
            }
            #[doc = "Bits 20:24 - 5th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq4(&mut self) -> Rsq4W<Rsq2Spec> {
                Rsq4W::new(self, 20)
            }
            #[doc = "Bits 25:29 - 6th conversion in regular sequence"]
            #[inline(always)]
            #[must_use]
            pub fn rsq5(&mut self) -> Rsq5W<Rsq2Spec> {
                Rsq5W::new(self, 25)
            }
        }
        #[doc = "regular sequence register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`rsq2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rsq2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rsq2Spec;
        impl crate::RegisterSpec for Rsq2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rsq2::R`](R) reader structure"]
        impl crate::Readable for Rsq2Spec {}
        #[doc = "`write(|w| ..)` method takes [`rsq2::W`](W) writer structure"]
        impl crate::Writable for Rsq2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets RSQ2 to value 0"]
        impl crate::Resettable for Rsq2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "ISQ (rw) register accessor: Inserted sequence register\n\nYou can [`read`](crate::Reg::read) this register and get [`isq::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`isq::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@isq`]
module"]
    #[doc(alias = "ISQ")]
    pub type Isq = crate::Reg<isq::IsqSpec>;
    #[doc = "Inserted sequence register"]
    pub mod isq {
        #[doc = "Register `ISQ` reader"]
        pub type R = crate::R<IsqSpec>;
        #[doc = "Register `ISQ` writer"]
        pub type W = crate::W<IsqSpec>;
        #[doc = "Field `ISQ0` reader - 1st conversion in inserted sequence"]
        pub type Isq0R = crate::FieldReader;
        #[doc = "Field `ISQ0` writer - 1st conversion in inserted sequence"]
        pub type Isq0W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `ISQ1` reader - 2nd conversion in inserted sequence"]
        pub type Isq1R = crate::FieldReader;
        #[doc = "Field `ISQ1` writer - 2nd conversion in inserted sequence"]
        pub type Isq1W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `ISQ2` reader - 3rd conversion in inserted sequence"]
        pub type Isq2R = crate::FieldReader;
        #[doc = "Field `ISQ2` writer - 3rd conversion in inserted sequence"]
        pub type Isq2W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `ISQ3` reader - 4th conversion in inserted sequence"]
        pub type Isq3R = crate::FieldReader;
        #[doc = "Field `ISQ3` writer - 4th conversion in inserted sequence"]
        pub type Isq3W<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `IL` reader - Inserted channel group length"]
        pub type IlR = crate::FieldReader;
        #[doc = "Field `IL` writer - Inserted channel group length"]
        pub type IlW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bits 0:4 - 1st conversion in inserted sequence"]
            #[inline(always)]
            pub fn isq0(&self) -> Isq0R {
                Isq0R::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bits 5:9 - 2nd conversion in inserted sequence"]
            #[inline(always)]
            pub fn isq1(&self) -> Isq1R {
                Isq1R::new(((self.bits >> 5) & 0x1f) as u8)
            }
            #[doc = "Bits 10:14 - 3rd conversion in inserted sequence"]
            #[inline(always)]
            pub fn isq2(&self) -> Isq2R {
                Isq2R::new(((self.bits >> 10) & 0x1f) as u8)
            }
            #[doc = "Bits 15:19 - 4th conversion in inserted sequence"]
            #[inline(always)]
            pub fn isq3(&self) -> Isq3R {
                Isq3R::new(((self.bits >> 15) & 0x1f) as u8)
            }
            #[doc = "Bits 20:21 - Inserted channel group length"]
            #[inline(always)]
            pub fn il(&self) -> IlR {
                IlR::new(((self.bits >> 20) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - 1st conversion in inserted sequence"]
            #[inline(always)]
            #[must_use]
            pub fn isq0(&mut self) -> Isq0W<IsqSpec> {
                Isq0W::new(self, 0)
            }
            #[doc = "Bits 5:9 - 2nd conversion in inserted sequence"]
            #[inline(always)]
            #[must_use]
            pub fn isq1(&mut self) -> Isq1W<IsqSpec> {
                Isq1W::new(self, 5)
            }
            #[doc = "Bits 10:14 - 3rd conversion in inserted sequence"]
            #[inline(always)]
            #[must_use]
            pub fn isq2(&mut self) -> Isq2W<IsqSpec> {
                Isq2W::new(self, 10)
            }
            #[doc = "Bits 15:19 - 4th conversion in inserted sequence"]
            #[inline(always)]
            #[must_use]
            pub fn isq3(&mut self) -> Isq3W<IsqSpec> {
                Isq3W::new(self, 15)
            }
            #[doc = "Bits 20:21 - Inserted channel group length"]
            #[inline(always)]
            #[must_use]
            pub fn il(&mut self) -> IlW<IsqSpec> {
                IlW::new(self, 20)
            }
        }
        #[doc = "Inserted sequence register\n\nYou can [`read`](crate::Reg::read) this register and get [`isq::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`isq::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IsqSpec;
        impl crate::RegisterSpec for IsqSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`isq::R`](R) reader structure"]
        impl crate::Readable for IsqSpec {}
        #[doc = "`write(|w| ..)` method takes [`isq::W`](W) writer structure"]
        impl crate::Writable for IsqSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets ISQ to value 0"]
        impl crate::Resettable for IsqSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IDATA0 (r) register accessor: Inserted data register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`idata0::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@idata0`]
module"]
    #[doc(alias = "IDATA0")]
    pub type Idata0 = crate::Reg<idata0::Idata0Spec>;
    #[doc = "Inserted data register 0"]
    pub mod idata0 {
        #[doc = "Register `IDATA0` reader"]
        pub type R = crate::R<Idata0Spec>;
        #[doc = "Field `IDATAn` reader - Inserted number n conversion data"]
        pub type IdatanR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:15 - Inserted number n conversion data"]
            #[inline(always)]
            pub fn idatan(&self) -> IdatanR {
                IdatanR::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "Inserted data register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`idata0::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Idata0Spec;
        impl crate::RegisterSpec for Idata0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`idata0::R`](R) reader structure"]
        impl crate::Readable for Idata0Spec {}
        #[doc = "`reset()` method sets IDATA0 to value 0"]
        impl crate::Resettable for Idata0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IDATA1 (r) register accessor: Inserted data register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`idata1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@idata1`]
module"]
    #[doc(alias = "IDATA1")]
    pub type Idata1 = crate::Reg<idata1::Idata1Spec>;
    #[doc = "Inserted data register 1"]
    pub mod idata1 {
        #[doc = "Register `IDATA1` reader"]
        pub type R = crate::R<Idata1Spec>;
        #[doc = "Field `IDATAn` reader - Inserted number n conversion data"]
        pub type IdatanR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:15 - Inserted number n conversion data"]
            #[inline(always)]
            pub fn idatan(&self) -> IdatanR {
                IdatanR::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "Inserted data register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`idata1::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Idata1Spec;
        impl crate::RegisterSpec for Idata1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`idata1::R`](R) reader structure"]
        impl crate::Readable for Idata1Spec {}
        #[doc = "`reset()` method sets IDATA1 to value 0"]
        impl crate::Resettable for Idata1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IDATA2 (r) register accessor: Inserted data register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`idata2::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@idata2`]
module"]
    #[doc(alias = "IDATA2")]
    pub type Idata2 = crate::Reg<idata2::Idata2Spec>;
    #[doc = "Inserted data register 2"]
    pub mod idata2 {
        #[doc = "Register `IDATA2` reader"]
        pub type R = crate::R<Idata2Spec>;
        #[doc = "Field `IDATAn` reader - Inserted number n conversion data"]
        pub type IdatanR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:15 - Inserted number n conversion data"]
            #[inline(always)]
            pub fn idatan(&self) -> IdatanR {
                IdatanR::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "Inserted data register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`idata2::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Idata2Spec;
        impl crate::RegisterSpec for Idata2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`idata2::R`](R) reader structure"]
        impl crate::Readable for Idata2Spec {}
        #[doc = "`reset()` method sets IDATA2 to value 0"]
        impl crate::Resettable for Idata2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "IDATA3 (r) register accessor: Inserted data register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`idata3::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@idata3`]
module"]
    #[doc(alias = "IDATA3")]
    pub type Idata3 = crate::Reg<idata3::Idata3Spec>;
    #[doc = "Inserted data register 3"]
    pub mod idata3 {
        #[doc = "Register `IDATA3` reader"]
        pub type R = crate::R<Idata3Spec>;
        #[doc = "Field `IDATAn` reader - Inserted number n conversion data"]
        pub type IdatanR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:15 - Inserted number n conversion data"]
            #[inline(always)]
            pub fn idatan(&self) -> IdatanR {
                IdatanR::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "Inserted data register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`idata3::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Idata3Spec;
        impl crate::RegisterSpec for Idata3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`idata3::R`](R) reader structure"]
        impl crate::Readable for Idata3Spec {}
        #[doc = "`reset()` method sets IDATA3 to value 0"]
        impl crate::Resettable for Idata3Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RDATA (r) register accessor: regular data register\n\nYou can [`read`](crate::Reg::read) this register and get [`rdata::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rdata`]
module"]
    #[doc(alias = "RDATA")]
    pub type Rdata = crate::Reg<rdata::RdataSpec>;
    #[doc = "regular data register"]
    pub mod rdata {
        #[doc = "Register `RDATA` reader"]
        pub type R = crate::R<RdataSpec>;
        #[doc = "Field `RDATA` reader - Regular channel data"]
        pub type RdataR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:15 - Regular channel data"]
            #[inline(always)]
            pub fn rdata(&self) -> RdataR {
                RdataR::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "regular data register\n\nYou can [`read`](crate::Reg::read) this register and get [`rdata::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RdataSpec;
        impl crate::RegisterSpec for RdataSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rdata::R`](R) reader structure"]
        impl crate::Readable for RdataSpec {}
        #[doc = "`reset()` method sets RDATA to value 0"]
        impl crate::Resettable for RdataSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Analog to digital converter"]
pub struct Adc2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Adc2 {}
impl Adc2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const adc1::RegisterBlock = 0x4001_3c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const adc1::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Adc2 {
    type Target = adc1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Adc2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Adc2").finish()
    }
}
#[doc = "Analog to digital converter"]
pub use self::adc1 as adc2;
#[doc = "Alternate-function I/Os"]
pub struct Afio {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Afio {}
impl Afio {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const afio::RegisterBlock = 0x4001_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const afio::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Afio {
    type Target = afio::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Afio {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Afio").finish()
    }
}
#[doc = "Alternate-function I/Os"]
pub mod afio {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ec: Ec,
        pcf0: Pcf0,
        extiss0: Extiss0,
        extiss1: Extiss1,
        extiss2: Extiss2,
        extiss3: Extiss3,
        _reserved6: [u8; 0x04],
        pcf1: Pcf1,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Event control register"]
        #[inline(always)]
        pub const fn ec(&self) -> &Ec {
            &self.ec
        }
        #[doc = "0x04 - AFIO port configuration register 0"]
        #[inline(always)]
        pub const fn pcf0(&self) -> &Pcf0 {
            &self.pcf0
        }
        #[doc = "0x08 - EXTI sources selection register 0"]
        #[inline(always)]
        pub const fn extiss0(&self) -> &Extiss0 {
            &self.extiss0
        }
        #[doc = "0x0c - EXTI sources selection register 1"]
        #[inline(always)]
        pub const fn extiss1(&self) -> &Extiss1 {
            &self.extiss1
        }
        #[doc = "0x10 - EXTI sources selection register 2"]
        #[inline(always)]
        pub const fn extiss2(&self) -> &Extiss2 {
            &self.extiss2
        }
        #[doc = "0x14 - EXTI sources selection register 3"]
        #[inline(always)]
        pub const fn extiss3(&self) -> &Extiss3 {
            &self.extiss3
        }
        #[doc = "0x1c - AFIO port configuration register 1"]
        #[inline(always)]
        pub const fn pcf1(&self) -> &Pcf1 {
            &self.pcf1
        }
    }
    #[doc = "EC (rw) register accessor: Event control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ec::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ec::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ec`]
module"]
    #[doc(alias = "EC")]
    pub type Ec = crate::Reg<ec::EcSpec>;
    #[doc = "Event control register"]
    pub mod ec {
        #[doc = "Register `EC` reader"]
        pub type R = crate::R<EcSpec>;
        #[doc = "Register `EC` writer"]
        pub type W = crate::W<EcSpec>;
        #[doc = "Field `PIN` reader - Event output pin selection"]
        pub type PinR = crate::FieldReader;
        #[doc = "Field `PIN` writer - Event output pin selection"]
        pub type PinW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `PORT` reader - Event output port selection"]
        pub type PortR = crate::FieldReader;
        #[doc = "Field `PORT` writer - Event output port selection"]
        pub type PortW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `EOE` reader - Event output enable"]
        pub type EoeR = crate::BitReader;
        #[doc = "Field `EOE` writer - Event output enable"]
        pub type EoeW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:3 - Event output pin selection"]
            #[inline(always)]
            pub fn pin(&self) -> PinR {
                PinR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:6 - Event output port selection"]
            #[inline(always)]
            pub fn port(&self) -> PortR {
                PortR::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 7 - Event output enable"]
            #[inline(always)]
            pub fn eoe(&self) -> EoeR {
                EoeR::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Event output pin selection"]
            #[inline(always)]
            #[must_use]
            pub fn pin(&mut self) -> PinW<EcSpec> {
                PinW::new(self, 0)
            }
            #[doc = "Bits 4:6 - Event output port selection"]
            #[inline(always)]
            #[must_use]
            pub fn port(&mut self) -> PortW<EcSpec> {
                PortW::new(self, 4)
            }
            #[doc = "Bit 7 - Event output enable"]
            #[inline(always)]
            #[must_use]
            pub fn eoe(&mut self) -> EoeW<EcSpec> {
                EoeW::new(self, 7)
            }
        }
        #[doc = "Event control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ec::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ec::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct EcSpec;
        impl crate::RegisterSpec for EcSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ec::R`](R) reader structure"]
        impl crate::Readable for EcSpec {}
        #[doc = "`write(|w| ..)` method takes [`ec::W`](W) writer structure"]
        impl crate::Writable for EcSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EC to value 0"]
        impl crate::Resettable for EcSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "PCF0 (rw) register accessor: AFIO port configuration register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`pcf0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pcf0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pcf0`]
module"]
    #[doc(alias = "PCF0")]
    pub type Pcf0 = crate::Reg<pcf0::Pcf0Spec>;
    #[doc = "AFIO port configuration register 0"]
    pub mod pcf0 {
        #[doc = "Register `PCF0` reader"]
        pub type R = crate::R<Pcf0Spec>;
        #[doc = "Register `PCF0` writer"]
        pub type W = crate::W<Pcf0Spec>;
        #[doc = "Field `SPI0_REMAP` reader - SPI0 remapping"]
        pub type Spi0RemapR = crate::BitReader;
        #[doc = "Field `SPI0_REMAP` writer - SPI0 remapping"]
        pub type Spi0RemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `I2C0_REMAP` reader - I2C0 remapping"]
        pub type I2c0RemapR = crate::BitReader;
        #[doc = "Field `I2C0_REMAP` writer - I2C0 remapping"]
        pub type I2c0RemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `USART0_REMAP` reader - USART0 remapping"]
        pub type Usart0RemapR = crate::BitReader;
        #[doc = "Field `USART0_REMAP` writer - USART0 remapping"]
        pub type Usart0RemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `USART1_REMAP` reader - USART1 remapping"]
        pub type Usart1RemapR = crate::BitReader;
        #[doc = "Field `USART1_REMAP` writer - USART1 remapping"]
        pub type Usart1RemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `USART2_REMAP` reader - USART2 remapping"]
        pub type Usart2RemapR = crate::FieldReader;
        #[doc = "Field `USART2_REMAP` writer - USART2 remapping"]
        pub type Usart2RemapW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `TIMER0_REMAP` reader - TIMER0 remapping"]
        pub type Timer0RemapR = crate::FieldReader;
        #[doc = "Field `TIMER0_REMAP` writer - TIMER0 remapping"]
        pub type Timer0RemapW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `TIMER1_REMAP` reader - TIMER1 remapping"]
        pub type Timer1RemapR = crate::FieldReader;
        #[doc = "Field `TIMER1_REMAP` writer - TIMER1 remapping"]
        pub type Timer1RemapW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `TIMER2_REMAP` reader - TIMER2 remapping"]
        pub type Timer2RemapR = crate::FieldReader;
        #[doc = "Field `TIMER2_REMAP` writer - TIMER2 remapping"]
        pub type Timer2RemapW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `TIMER3_REMAP` reader - TIMER3 remapping"]
        pub type Timer3RemapR = crate::BitReader;
        #[doc = "Field `TIMER3_REMAP` writer - TIMER3 remapping"]
        pub type Timer3RemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CAN_REMAP` reader - CAN alternate interface remapping"]
        pub type CanRemapR = crate::FieldReader;
        #[doc = "Field `CAN_REMAP` writer - CAN alternate interface remapping"]
        pub type CanRemapW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PD01_REMAP` reader - Port D0/Port D1 mapping on OSC_IN/OSC_OUT"]
        pub type Pd01RemapR = crate::BitReader;
        #[doc = "Field `PD01_REMAP` writer - Port D0/Port D1 mapping on OSC_IN/OSC_OUT"]
        pub type Pd01RemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER4CH3_IREMAP` reader - TIMER4 channel3 internal remapping"]
        pub type Timer4ch3IremapR = crate::BitReader;
        #[doc = "Field `TIMER4CH3_IREMAP` writer - TIMER4 channel3 internal remapping"]
        pub type Timer4ch3IremapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ADC0_ETRGINS_REMAP` reader - ADC0 external trigger inserted conversion remapping"]
        pub type Adc0EtrginsRemapR = crate::BitReader;
        #[doc = "Field `ADC0_ETRGINS_REMAP` writer - ADC0 external trigger inserted conversion remapping"]
        pub type Adc0EtrginsRemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ADC0_ETRGREG_REMAP` reader - ADC0 external trigger regular conversion remapping"]
        pub type Adc0EtrgregRemapR = crate::BitReader;
        #[doc = "Field `ADC0_ETRGREG_REMAP` writer - ADC0 external trigger regular conversion remapping"]
        pub type Adc0EtrgregRemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ADC1_ETRGINS_REMAP` reader - ADC1 external trigger inserted conversion remapping"]
        pub type Adc1EtrginsRemapR = crate::BitReader;
        #[doc = "Field `ADC1_ETRGINS_REMAP` writer - ADC1 external trigger inserted conversion remapping"]
        pub type Adc1EtrginsRemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ADC1_ETRGREG_REMAP` reader - ADC1 external trigger regular conversion remapping"]
        pub type Adc1EtrgregRemapR = crate::BitReader;
        #[doc = "Field `ADC1_ETRGREG_REMAP` writer - ADC1 external trigger regular conversion remapping"]
        pub type Adc1EtrgregRemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWJ_CFG` reader - Serial wire JTAG configuration"]
        pub type SwjCfgR = crate::FieldReader;
        #[doc = "Field `SWJ_CFG` writer - Serial wire JTAG configuration"]
        pub type SwjCfgW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        impl R {
            #[doc = "Bit 0 - SPI0 remapping"]
            #[inline(always)]
            pub fn spi0_remap(&self) -> Spi0RemapR {
                Spi0RemapR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - I2C0 remapping"]
            #[inline(always)]
            pub fn i2c0_remap(&self) -> I2c0RemapR {
                I2c0RemapR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - USART0 remapping"]
            #[inline(always)]
            pub fn usart0_remap(&self) -> Usart0RemapR {
                Usart0RemapR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - USART1 remapping"]
            #[inline(always)]
            pub fn usart1_remap(&self) -> Usart1RemapR {
                Usart1RemapR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:5 - USART2 remapping"]
            #[inline(always)]
            pub fn usart2_remap(&self) -> Usart2RemapR {
                Usart2RemapR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bits 6:7 - TIMER0 remapping"]
            #[inline(always)]
            pub fn timer0_remap(&self) -> Timer0RemapR {
                Timer0RemapR::new(((self.bits >> 6) & 3) as u8)
            }
            #[doc = "Bits 8:9 - TIMER1 remapping"]
            #[inline(always)]
            pub fn timer1_remap(&self) -> Timer1RemapR {
                Timer1RemapR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - TIMER2 remapping"]
            #[inline(always)]
            pub fn timer2_remap(&self) -> Timer2RemapR {
                Timer2RemapR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bit 12 - TIMER3 remapping"]
            #[inline(always)]
            pub fn timer3_remap(&self) -> Timer3RemapR {
                Timer3RemapR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bits 13:14 - CAN alternate interface remapping"]
            #[inline(always)]
            pub fn can_remap(&self) -> CanRemapR {
                CanRemapR::new(((self.bits >> 13) & 3) as u8)
            }
            #[doc = "Bit 15 - Port D0/Port D1 mapping on OSC_IN/OSC_OUT"]
            #[inline(always)]
            pub fn pd01_remap(&self) -> Pd01RemapR {
                Pd01RemapR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - TIMER4 channel3 internal remapping"]
            #[inline(always)]
            pub fn timer4ch3_iremap(&self) -> Timer4ch3IremapR {
                Timer4ch3IremapR::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - ADC0 external trigger inserted conversion remapping"]
            #[inline(always)]
            pub fn adc0_etrgins_remap(&self) -> Adc0EtrginsRemapR {
                Adc0EtrginsRemapR::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - ADC0 external trigger regular conversion remapping"]
            #[inline(always)]
            pub fn adc0_etrgreg_remap(&self) -> Adc0EtrgregRemapR {
                Adc0EtrgregRemapR::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - ADC1 external trigger inserted conversion remapping"]
            #[inline(always)]
            pub fn adc1_etrgins_remap(&self) -> Adc1EtrginsRemapR {
                Adc1EtrginsRemapR::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - ADC1 external trigger regular conversion remapping"]
            #[inline(always)]
            pub fn adc1_etrgreg_remap(&self) -> Adc1EtrgregRemapR {
                Adc1EtrgregRemapR::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bits 24:26 - Serial wire JTAG configuration"]
            #[inline(always)]
            pub fn swj_cfg(&self) -> SwjCfgR {
                SwjCfgR::new(((self.bits >> 24) & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - SPI0 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn spi0_remap(&mut self) -> Spi0RemapW<Pcf0Spec> {
                Spi0RemapW::new(self, 0)
            }
            #[doc = "Bit 1 - I2C0 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn i2c0_remap(&mut self) -> I2c0RemapW<Pcf0Spec> {
                I2c0RemapW::new(self, 1)
            }
            #[doc = "Bit 2 - USART0 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn usart0_remap(&mut self) -> Usart0RemapW<Pcf0Spec> {
                Usart0RemapW::new(self, 2)
            }
            #[doc = "Bit 3 - USART1 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn usart1_remap(&mut self) -> Usart1RemapW<Pcf0Spec> {
                Usart1RemapW::new(self, 3)
            }
            #[doc = "Bits 4:5 - USART2 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn usart2_remap(&mut self) -> Usart2RemapW<Pcf0Spec> {
                Usart2RemapW::new(self, 4)
            }
            #[doc = "Bits 6:7 - TIMER0 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn timer0_remap(&mut self) -> Timer0RemapW<Pcf0Spec> {
                Timer0RemapW::new(self, 6)
            }
            #[doc = "Bits 8:9 - TIMER1 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn timer1_remap(&mut self) -> Timer1RemapW<Pcf0Spec> {
                Timer1RemapW::new(self, 8)
            }
            #[doc = "Bits 10:11 - TIMER2 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn timer2_remap(&mut self) -> Timer2RemapW<Pcf0Spec> {
                Timer2RemapW::new(self, 10)
            }
            #[doc = "Bit 12 - TIMER3 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn timer3_remap(&mut self) -> Timer3RemapW<Pcf0Spec> {
                Timer3RemapW::new(self, 12)
            }
            #[doc = "Bits 13:14 - CAN alternate interface remapping"]
            #[inline(always)]
            #[must_use]
            pub fn can_remap(&mut self) -> CanRemapW<Pcf0Spec> {
                CanRemapW::new(self, 13)
            }
            #[doc = "Bit 15 - Port D0/Port D1 mapping on OSC_IN/OSC_OUT"]
            #[inline(always)]
            #[must_use]
            pub fn pd01_remap(&mut self) -> Pd01RemapW<Pcf0Spec> {
                Pd01RemapW::new(self, 15)
            }
            #[doc = "Bit 16 - TIMER4 channel3 internal remapping"]
            #[inline(always)]
            #[must_use]
            pub fn timer4ch3_iremap(&mut self) -> Timer4ch3IremapW<Pcf0Spec> {
                Timer4ch3IremapW::new(self, 16)
            }
            #[doc = "Bit 17 - ADC0 external trigger inserted conversion remapping"]
            #[inline(always)]
            #[must_use]
            pub fn adc0_etrgins_remap(&mut self) -> Adc0EtrginsRemapW<Pcf0Spec> {
                Adc0EtrginsRemapW::new(self, 17)
            }
            #[doc = "Bit 18 - ADC0 external trigger regular conversion remapping"]
            #[inline(always)]
            #[must_use]
            pub fn adc0_etrgreg_remap(&mut self) -> Adc0EtrgregRemapW<Pcf0Spec> {
                Adc0EtrgregRemapW::new(self, 18)
            }
            #[doc = "Bit 19 - ADC1 external trigger inserted conversion remapping"]
            #[inline(always)]
            #[must_use]
            pub fn adc1_etrgins_remap(&mut self) -> Adc1EtrginsRemapW<Pcf0Spec> {
                Adc1EtrginsRemapW::new(self, 19)
            }
            #[doc = "Bit 20 - ADC1 external trigger regular conversion remapping"]
            #[inline(always)]
            #[must_use]
            pub fn adc1_etrgreg_remap(&mut self) -> Adc1EtrgregRemapW<Pcf0Spec> {
                Adc1EtrgregRemapW::new(self, 20)
            }
            #[doc = "Bits 24:26 - Serial wire JTAG configuration"]
            #[inline(always)]
            #[must_use]
            pub fn swj_cfg(&mut self) -> SwjCfgW<Pcf0Spec> {
                SwjCfgW::new(self, 24)
            }
        }
        #[doc = "AFIO port configuration register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`pcf0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pcf0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Pcf0Spec;
        impl crate::RegisterSpec for Pcf0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`pcf0::R`](R) reader structure"]
        impl crate::Readable for Pcf0Spec {}
        #[doc = "`write(|w| ..)` method takes [`pcf0::W`](W) writer structure"]
        impl crate::Writable for Pcf0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets PCF0 to value 0"]
        impl crate::Resettable for Pcf0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "EXTISS0 (rw) register accessor: EXTI sources selection register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`extiss0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`extiss0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@extiss0`]
module"]
    #[doc(alias = "EXTISS0")]
    pub type Extiss0 = crate::Reg<extiss0::Extiss0Spec>;
    #[doc = "EXTI sources selection register 0"]
    pub mod extiss0 {
        #[doc = "Register `EXTISS0` reader"]
        pub type R = crate::R<Extiss0Spec>;
        #[doc = "Register `EXTISS0` writer"]
        pub type W = crate::W<Extiss0Spec>;
        #[doc = "Field `EXTI0_SS` reader - EXTI 0 sources selection"]
        pub type Exti0SsR = crate::FieldReader;
        #[doc = "Field `EXTI0_SS` writer - EXTI 0 sources selection"]
        pub type Exti0SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `EXTI1_SS` reader - EXTI 1 sources selection"]
        pub type Exti1SsR = crate::FieldReader;
        #[doc = "Field `EXTI1_SS` writer - EXTI 1 sources selection"]
        pub type Exti1SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `EXTI2_SS` reader - EXTI 2 sources selection"]
        pub type Exti2SsR = crate::FieldReader;
        #[doc = "Field `EXTI2_SS` writer - EXTI 2 sources selection"]
        pub type Exti2SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `EXTI3_SS` reader - EXTI 3 sources selection"]
        pub type Exti3SsR = crate::FieldReader;
        #[doc = "Field `EXTI3_SS` writer - EXTI 3 sources selection"]
        pub type Exti3SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:3 - EXTI 0 sources selection"]
            #[inline(always)]
            pub fn exti0_ss(&self) -> Exti0SsR {
                Exti0SsR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI 1 sources selection"]
            #[inline(always)]
            pub fn exti1_ss(&self) -> Exti1SsR {
                Exti1SsR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI 2 sources selection"]
            #[inline(always)]
            pub fn exti2_ss(&self) -> Exti2SsR {
                Exti2SsR::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - EXTI 3 sources selection"]
            #[inline(always)]
            pub fn exti3_ss(&self) -> Exti3SsR {
                Exti3SsR::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - EXTI 0 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti0_ss(&mut self) -> Exti0SsW<Extiss0Spec> {
                Exti0SsW::new(self, 0)
            }
            #[doc = "Bits 4:7 - EXTI 1 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti1_ss(&mut self) -> Exti1SsW<Extiss0Spec> {
                Exti1SsW::new(self, 4)
            }
            #[doc = "Bits 8:11 - EXTI 2 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti2_ss(&mut self) -> Exti2SsW<Extiss0Spec> {
                Exti2SsW::new(self, 8)
            }
            #[doc = "Bits 12:15 - EXTI 3 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti3_ss(&mut self) -> Exti3SsW<Extiss0Spec> {
                Exti3SsW::new(self, 12)
            }
        }
        #[doc = "EXTI sources selection register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`extiss0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`extiss0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Extiss0Spec;
        impl crate::RegisterSpec for Extiss0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`extiss0::R`](R) reader structure"]
        impl crate::Readable for Extiss0Spec {}
        #[doc = "`write(|w| ..)` method takes [`extiss0::W`](W) writer structure"]
        impl crate::Writable for Extiss0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EXTISS0 to value 0"]
        impl crate::Resettable for Extiss0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "EXTISS1 (rw) register accessor: EXTI sources selection register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`extiss1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`extiss1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@extiss1`]
module"]
    #[doc(alias = "EXTISS1")]
    pub type Extiss1 = crate::Reg<extiss1::Extiss1Spec>;
    #[doc = "EXTI sources selection register 1"]
    pub mod extiss1 {
        #[doc = "Register `EXTISS1` reader"]
        pub type R = crate::R<Extiss1Spec>;
        #[doc = "Register `EXTISS1` writer"]
        pub type W = crate::W<Extiss1Spec>;
        #[doc = "Field `EXTI4_SS` reader - EXTI 4 sources selection"]
        pub type Exti4SsR = crate::FieldReader;
        #[doc = "Field `EXTI4_SS` writer - EXTI 4 sources selection"]
        pub type Exti4SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `EXTI5_SS` reader - EXTI 5 sources selection"]
        pub type Exti5SsR = crate::FieldReader;
        #[doc = "Field `EXTI5_SS` writer - EXTI 5 sources selection"]
        pub type Exti5SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `EXTI6_SS` reader - EXTI 6 sources selection"]
        pub type Exti6SsR = crate::FieldReader;
        #[doc = "Field `EXTI6_SS` writer - EXTI 6 sources selection"]
        pub type Exti6SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `EXTI7_SS` reader - EXTI 7 sources selection"]
        pub type Exti7SsR = crate::FieldReader;
        #[doc = "Field `EXTI7_SS` writer - EXTI 7 sources selection"]
        pub type Exti7SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:3 - EXTI 4 sources selection"]
            #[inline(always)]
            pub fn exti4_ss(&self) -> Exti4SsR {
                Exti4SsR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI 5 sources selection"]
            #[inline(always)]
            pub fn exti5_ss(&self) -> Exti5SsR {
                Exti5SsR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI 6 sources selection"]
            #[inline(always)]
            pub fn exti6_ss(&self) -> Exti6SsR {
                Exti6SsR::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - EXTI 7 sources selection"]
            #[inline(always)]
            pub fn exti7_ss(&self) -> Exti7SsR {
                Exti7SsR::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - EXTI 4 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti4_ss(&mut self) -> Exti4SsW<Extiss1Spec> {
                Exti4SsW::new(self, 0)
            }
            #[doc = "Bits 4:7 - EXTI 5 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti5_ss(&mut self) -> Exti5SsW<Extiss1Spec> {
                Exti5SsW::new(self, 4)
            }
            #[doc = "Bits 8:11 - EXTI 6 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti6_ss(&mut self) -> Exti6SsW<Extiss1Spec> {
                Exti6SsW::new(self, 8)
            }
            #[doc = "Bits 12:15 - EXTI 7 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti7_ss(&mut self) -> Exti7SsW<Extiss1Spec> {
                Exti7SsW::new(self, 12)
            }
        }
        #[doc = "EXTI sources selection register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`extiss1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`extiss1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Extiss1Spec;
        impl crate::RegisterSpec for Extiss1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`extiss1::R`](R) reader structure"]
        impl crate::Readable for Extiss1Spec {}
        #[doc = "`write(|w| ..)` method takes [`extiss1::W`](W) writer structure"]
        impl crate::Writable for Extiss1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EXTISS1 to value 0"]
        impl crate::Resettable for Extiss1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "EXTISS2 (rw) register accessor: EXTI sources selection register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`extiss2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`extiss2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@extiss2`]
module"]
    #[doc(alias = "EXTISS2")]
    pub type Extiss2 = crate::Reg<extiss2::Extiss2Spec>;
    #[doc = "EXTI sources selection register 2"]
    pub mod extiss2 {
        #[doc = "Register `EXTISS2` reader"]
        pub type R = crate::R<Extiss2Spec>;
        #[doc = "Register `EXTISS2` writer"]
        pub type W = crate::W<Extiss2Spec>;
        #[doc = "Field `EXTI8_SS` reader - EXTI 8 sources selection"]
        pub type Exti8SsR = crate::FieldReader;
        #[doc = "Field `EXTI8_SS` writer - EXTI 8 sources selection"]
        pub type Exti8SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `EXTI9_SS` reader - EXTI 9 sources selection"]
        pub type Exti9SsR = crate::FieldReader;
        #[doc = "Field `EXTI9_SS` writer - EXTI 9 sources selection"]
        pub type Exti9SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `EXTI10_SS` reader - EXTI 10 sources selection"]
        pub type Exti10SsR = crate::FieldReader;
        #[doc = "Field `EXTI10_SS` writer - EXTI 10 sources selection"]
        pub type Exti10SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `EXTI11_SS` reader - EXTI 11 sources selection"]
        pub type Exti11SsR = crate::FieldReader;
        #[doc = "Field `EXTI11_SS` writer - EXTI 11 sources selection"]
        pub type Exti11SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:3 - EXTI 8 sources selection"]
            #[inline(always)]
            pub fn exti8_ss(&self) -> Exti8SsR {
                Exti8SsR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI 9 sources selection"]
            #[inline(always)]
            pub fn exti9_ss(&self) -> Exti9SsR {
                Exti9SsR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI 10 sources selection"]
            #[inline(always)]
            pub fn exti10_ss(&self) -> Exti10SsR {
                Exti10SsR::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - EXTI 11 sources selection"]
            #[inline(always)]
            pub fn exti11_ss(&self) -> Exti11SsR {
                Exti11SsR::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - EXTI 8 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti8_ss(&mut self) -> Exti8SsW<Extiss2Spec> {
                Exti8SsW::new(self, 0)
            }
            #[doc = "Bits 4:7 - EXTI 9 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti9_ss(&mut self) -> Exti9SsW<Extiss2Spec> {
                Exti9SsW::new(self, 4)
            }
            #[doc = "Bits 8:11 - EXTI 10 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti10_ss(&mut self) -> Exti10SsW<Extiss2Spec> {
                Exti10SsW::new(self, 8)
            }
            #[doc = "Bits 12:15 - EXTI 11 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti11_ss(&mut self) -> Exti11SsW<Extiss2Spec> {
                Exti11SsW::new(self, 12)
            }
        }
        #[doc = "EXTI sources selection register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`extiss2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`extiss2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Extiss2Spec;
        impl crate::RegisterSpec for Extiss2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`extiss2::R`](R) reader structure"]
        impl crate::Readable for Extiss2Spec {}
        #[doc = "`write(|w| ..)` method takes [`extiss2::W`](W) writer structure"]
        impl crate::Writable for Extiss2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EXTISS2 to value 0"]
        impl crate::Resettable for Extiss2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "EXTISS3 (rw) register accessor: EXTI sources selection register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`extiss3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`extiss3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@extiss3`]
module"]
    #[doc(alias = "EXTISS3")]
    pub type Extiss3 = crate::Reg<extiss3::Extiss3Spec>;
    #[doc = "EXTI sources selection register 3"]
    pub mod extiss3 {
        #[doc = "Register `EXTISS3` reader"]
        pub type R = crate::R<Extiss3Spec>;
        #[doc = "Register `EXTISS3` writer"]
        pub type W = crate::W<Extiss3Spec>;
        #[doc = "Field `EXTI12_SS` reader - EXTI 12 sources selection"]
        pub type Exti12SsR = crate::FieldReader;
        #[doc = "Field `EXTI12_SS` writer - EXTI 12 sources selection"]
        pub type Exti12SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `EXTI13_SS` reader - EXTI 13 sources selection"]
        pub type Exti13SsR = crate::FieldReader;
        #[doc = "Field `EXTI13_SS` writer - EXTI 13 sources selection"]
        pub type Exti13SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `EXTI14_SS` reader - EXTI 14 sources selection"]
        pub type Exti14SsR = crate::FieldReader;
        #[doc = "Field `EXTI14_SS` writer - EXTI 14 sources selection"]
        pub type Exti14SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `EXTI15_SS` reader - EXTI 15 sources selection"]
        pub type Exti15SsR = crate::FieldReader;
        #[doc = "Field `EXTI15_SS` writer - EXTI 15 sources selection"]
        pub type Exti15SsW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:3 - EXTI 12 sources selection"]
            #[inline(always)]
            pub fn exti12_ss(&self) -> Exti12SsR {
                Exti12SsR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - EXTI 13 sources selection"]
            #[inline(always)]
            pub fn exti13_ss(&self) -> Exti13SsR {
                Exti13SsR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:11 - EXTI 14 sources selection"]
            #[inline(always)]
            pub fn exti14_ss(&self) -> Exti14SsR {
                Exti14SsR::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:15 - EXTI 15 sources selection"]
            #[inline(always)]
            pub fn exti15_ss(&self) -> Exti15SsR {
                Exti15SsR::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - EXTI 12 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti12_ss(&mut self) -> Exti12SsW<Extiss3Spec> {
                Exti12SsW::new(self, 0)
            }
            #[doc = "Bits 4:7 - EXTI 13 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti13_ss(&mut self) -> Exti13SsW<Extiss3Spec> {
                Exti13SsW::new(self, 4)
            }
            #[doc = "Bits 8:11 - EXTI 14 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti14_ss(&mut self) -> Exti14SsW<Extiss3Spec> {
                Exti14SsW::new(self, 8)
            }
            #[doc = "Bits 12:15 - EXTI 15 sources selection"]
            #[inline(always)]
            #[must_use]
            pub fn exti15_ss(&mut self) -> Exti15SsW<Extiss3Spec> {
                Exti15SsW::new(self, 12)
            }
        }
        #[doc = "EXTI sources selection register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`extiss3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`extiss3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Extiss3Spec;
        impl crate::RegisterSpec for Extiss3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`extiss3::R`](R) reader structure"]
        impl crate::Readable for Extiss3Spec {}
        #[doc = "`write(|w| ..)` method takes [`extiss3::W`](W) writer structure"]
        impl crate::Writable for Extiss3Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EXTISS3 to value 0"]
        impl crate::Resettable for Extiss3Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "PCF1 (rw) register accessor: AFIO port configuration register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`pcf1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pcf1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pcf1`]
module"]
    #[doc(alias = "PCF1")]
    pub type Pcf1 = crate::Reg<pcf1::Pcf1Spec>;
    #[doc = "AFIO port configuration register 1"]
    pub mod pcf1 {
        #[doc = "Register `PCF1` reader"]
        pub type R = crate::R<Pcf1Spec>;
        #[doc = "Register `PCF1` writer"]
        pub type W = crate::W<Pcf1Spec>;
        #[doc = "Field `TIMER8_REMAP` reader - TIMER8 remapping"]
        pub type Timer8RemapR = crate::BitReader;
        #[doc = "Field `TIMER8_REMAP` writer - TIMER8 remapping"]
        pub type Timer8RemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER9_REMAP` reader - TIMER9 remapping"]
        pub type Timer9RemapR = crate::BitReader;
        #[doc = "Field `TIMER9_REMAP` writer - TIMER9 remapping"]
        pub type Timer9RemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER10_REMAP` reader - TIMER10 remapping"]
        pub type Timer10RemapR = crate::BitReader;
        #[doc = "Field `TIMER10_REMAP` writer - TIMER10 remapping"]
        pub type Timer10RemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER12_REMAP` reader - TIMER12 remapping"]
        pub type Timer12RemapR = crate::BitReader;
        #[doc = "Field `TIMER12_REMAP` writer - TIMER12 remapping"]
        pub type Timer12RemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER13_REMAP` reader - TIMER13 remapping"]
        pub type Timer13RemapR = crate::BitReader;
        #[doc = "Field `TIMER13_REMAP` writer - TIMER13 remapping"]
        pub type Timer13RemapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FSMC_NADV` reader - FSMC_NADV connect/disconnect"]
        pub type FsmcNadvR = crate::BitReader;
        #[doc = "Field `FSMC_NADV` writer - FSMC_NADV connect/disconnect"]
        pub type FsmcNadvW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 5 - TIMER8 remapping"]
            #[inline(always)]
            pub fn timer8_remap(&self) -> Timer8RemapR {
                Timer8RemapR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - TIMER9 remapping"]
            #[inline(always)]
            pub fn timer9_remap(&self) -> Timer9RemapR {
                Timer9RemapR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - TIMER10 remapping"]
            #[inline(always)]
            pub fn timer10_remap(&self) -> Timer10RemapR {
                Timer10RemapR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - TIMER12 remapping"]
            #[inline(always)]
            pub fn timer12_remap(&self) -> Timer12RemapR {
                Timer12RemapR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - TIMER13 remapping"]
            #[inline(always)]
            pub fn timer13_remap(&self) -> Timer13RemapR {
                Timer13RemapR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - FSMC_NADV connect/disconnect"]
            #[inline(always)]
            pub fn fsmc_nadv(&self) -> FsmcNadvR {
                FsmcNadvR::new(((self.bits >> 10) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 5 - TIMER8 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn timer8_remap(&mut self) -> Timer8RemapW<Pcf1Spec> {
                Timer8RemapW::new(self, 5)
            }
            #[doc = "Bit 6 - TIMER9 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn timer9_remap(&mut self) -> Timer9RemapW<Pcf1Spec> {
                Timer9RemapW::new(self, 6)
            }
            #[doc = "Bit 7 - TIMER10 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn timer10_remap(&mut self) -> Timer10RemapW<Pcf1Spec> {
                Timer10RemapW::new(self, 7)
            }
            #[doc = "Bit 8 - TIMER12 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn timer12_remap(&mut self) -> Timer12RemapW<Pcf1Spec> {
                Timer12RemapW::new(self, 8)
            }
            #[doc = "Bit 9 - TIMER13 remapping"]
            #[inline(always)]
            #[must_use]
            pub fn timer13_remap(&mut self) -> Timer13RemapW<Pcf1Spec> {
                Timer13RemapW::new(self, 9)
            }
            #[doc = "Bit 10 - FSMC_NADV connect/disconnect"]
            #[inline(always)]
            #[must_use]
            pub fn fsmc_nadv(&mut self) -> FsmcNadvW<Pcf1Spec> {
                FsmcNadvW::new(self, 10)
            }
        }
        #[doc = "AFIO port configuration register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`pcf1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pcf1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Pcf1Spec;
        impl crate::RegisterSpec for Pcf1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`pcf1::R`](R) reader structure"]
        impl crate::Readable for Pcf1Spec {}
        #[doc = "`write(|w| ..)` method takes [`pcf1::W`](W) writer structure"]
        impl crate::Writable for Pcf1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets PCF1 to value 0"]
        impl crate::Resettable for Pcf1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Backup registers"]
pub struct Bkp {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Bkp {}
impl Bkp {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const bkp::RegisterBlock = 0x4000_6c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const bkp::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Bkp {
    type Target = bkp::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Bkp {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Bkp").finish()
    }
}
#[doc = "Backup registers"]
pub mod bkp {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        _reserved0: [u8; 0x04],
        data0: Data0,
        data1: Data1,
        data2: Data2,
        data3: Data3,
        data4: Data4,
        data5: Data5,
        data6: Data6,
        data7: Data7,
        data8: Data8,
        data9: Data9,
        octl: Octl,
        tpctl: Tpctl,
        tpcs: Tpcs,
        _reserved13: [u8; 0x08],
        data10: Data10,
        data11: Data11,
        data12: Data12,
        data13: Data13,
        data14: Data14,
        data15: Data15,
        data16: Data16,
        data17: Data17,
        data18: Data18,
        data19: Data19,
        data20: Data20,
        data21: Data21,
        data22: Data22,
        data23: Data23,
        data24: Data24,
        data25: Data25,
        data26: Data26,
        data27: Data27,
        data28: Data28,
        data29: Data29,
        data30: Data30,
        data31: Data31,
        data32: Data32,
        data33: Data33,
        data34: Data34,
        data35: Data35,
        data36: Data36,
        data37: Data37,
        data38: Data38,
        data39: Data39,
        data40: Data40,
        data41: Data41,
    }
    impl RegisterBlock {
        #[doc = "0x04 - Backup data register 0"]
        #[inline(always)]
        pub const fn data0(&self) -> &Data0 {
            &self.data0
        }
        #[doc = "0x08 - Backup data register 1"]
        #[inline(always)]
        pub const fn data1(&self) -> &Data1 {
            &self.data1
        }
        #[doc = "0x0c - Backup data register 2"]
        #[inline(always)]
        pub const fn data2(&self) -> &Data2 {
            &self.data2
        }
        #[doc = "0x10 - Backup data register 3"]
        #[inline(always)]
        pub const fn data3(&self) -> &Data3 {
            &self.data3
        }
        #[doc = "0x14 - Backup data register 4"]
        #[inline(always)]
        pub const fn data4(&self) -> &Data4 {
            &self.data4
        }
        #[doc = "0x18 - Backup data register 5"]
        #[inline(always)]
        pub const fn data5(&self) -> &Data5 {
            &self.data5
        }
        #[doc = "0x1c - Backup data register 6"]
        #[inline(always)]
        pub const fn data6(&self) -> &Data6 {
            &self.data6
        }
        #[doc = "0x20 - Backup data register 7"]
        #[inline(always)]
        pub const fn data7(&self) -> &Data7 {
            &self.data7
        }
        #[doc = "0x24 - Backup data register 8"]
        #[inline(always)]
        pub const fn data8(&self) -> &Data8 {
            &self.data8
        }
        #[doc = "0x28 - Backup data register 9"]
        #[inline(always)]
        pub const fn data9(&self) -> &Data9 {
            &self.data9
        }
        #[doc = "0x2c - RTC signal output control register"]
        #[inline(always)]
        pub const fn octl(&self) -> &Octl {
            &self.octl
        }
        #[doc = "0x30 - Tamper pin control register"]
        #[inline(always)]
        pub const fn tpctl(&self) -> &Tpctl {
            &self.tpctl
        }
        #[doc = "0x34 - Tamper control and status register"]
        #[inline(always)]
        pub const fn tpcs(&self) -> &Tpcs {
            &self.tpcs
        }
        #[doc = "0x40 - Backup data register 10"]
        #[inline(always)]
        pub const fn data10(&self) -> &Data10 {
            &self.data10
        }
        #[doc = "0x44 - Backup data register 11"]
        #[inline(always)]
        pub const fn data11(&self) -> &Data11 {
            &self.data11
        }
        #[doc = "0x48 - Backup data register 12"]
        #[inline(always)]
        pub const fn data12(&self) -> &Data12 {
            &self.data12
        }
        #[doc = "0x4c - Backup data register 13"]
        #[inline(always)]
        pub const fn data13(&self) -> &Data13 {
            &self.data13
        }
        #[doc = "0x50 - Backup data register 14"]
        #[inline(always)]
        pub const fn data14(&self) -> &Data14 {
            &self.data14
        }
        #[doc = "0x54 - Backup data register 15"]
        #[inline(always)]
        pub const fn data15(&self) -> &Data15 {
            &self.data15
        }
        #[doc = "0x58 - Backup data register 16"]
        #[inline(always)]
        pub const fn data16(&self) -> &Data16 {
            &self.data16
        }
        #[doc = "0x5c - Backup data register 17"]
        #[inline(always)]
        pub const fn data17(&self) -> &Data17 {
            &self.data17
        }
        #[doc = "0x60 - Backup data register 18"]
        #[inline(always)]
        pub const fn data18(&self) -> &Data18 {
            &self.data18
        }
        #[doc = "0x64 - Backup data register 19"]
        #[inline(always)]
        pub const fn data19(&self) -> &Data19 {
            &self.data19
        }
        #[doc = "0x68 - Backup data register 20"]
        #[inline(always)]
        pub const fn data20(&self) -> &Data20 {
            &self.data20
        }
        #[doc = "0x6c - Backup data register 21"]
        #[inline(always)]
        pub const fn data21(&self) -> &Data21 {
            &self.data21
        }
        #[doc = "0x70 - Backup data register 22"]
        #[inline(always)]
        pub const fn data22(&self) -> &Data22 {
            &self.data22
        }
        #[doc = "0x74 - Backup data register 23"]
        #[inline(always)]
        pub const fn data23(&self) -> &Data23 {
            &self.data23
        }
        #[doc = "0x78 - Backup data register 24"]
        #[inline(always)]
        pub const fn data24(&self) -> &Data24 {
            &self.data24
        }
        #[doc = "0x7c - Backup data register 25"]
        #[inline(always)]
        pub const fn data25(&self) -> &Data25 {
            &self.data25
        }
        #[doc = "0x80 - Backup data register 26"]
        #[inline(always)]
        pub const fn data26(&self) -> &Data26 {
            &self.data26
        }
        #[doc = "0x84 - Backup data register 27"]
        #[inline(always)]
        pub const fn data27(&self) -> &Data27 {
            &self.data27
        }
        #[doc = "0x88 - Backup data register 28"]
        #[inline(always)]
        pub const fn data28(&self) -> &Data28 {
            &self.data28
        }
        #[doc = "0x8c - Backup data register 29"]
        #[inline(always)]
        pub const fn data29(&self) -> &Data29 {
            &self.data29
        }
        #[doc = "0x90 - Backup data register 30"]
        #[inline(always)]
        pub const fn data30(&self) -> &Data30 {
            &self.data30
        }
        #[doc = "0x94 - Backup data register 31"]
        #[inline(always)]
        pub const fn data31(&self) -> &Data31 {
            &self.data31
        }
        #[doc = "0x98 - Backup data register 32"]
        #[inline(always)]
        pub const fn data32(&self) -> &Data32 {
            &self.data32
        }
        #[doc = "0x9c - Backup data register 33"]
        #[inline(always)]
        pub const fn data33(&self) -> &Data33 {
            &self.data33
        }
        #[doc = "0xa0 - Backup data register 34"]
        #[inline(always)]
        pub const fn data34(&self) -> &Data34 {
            &self.data34
        }
        #[doc = "0xa4 - Backup data register 35"]
        #[inline(always)]
        pub const fn data35(&self) -> &Data35 {
            &self.data35
        }
        #[doc = "0xa8 - Backup data register 36"]
        #[inline(always)]
        pub const fn data36(&self) -> &Data36 {
            &self.data36
        }
        #[doc = "0xac - Backup data register 37"]
        #[inline(always)]
        pub const fn data37(&self) -> &Data37 {
            &self.data37
        }
        #[doc = "0xb0 - Backup data register 38"]
        #[inline(always)]
        pub const fn data38(&self) -> &Data38 {
            &self.data38
        }
        #[doc = "0xb4 - Backup data register 39"]
        #[inline(always)]
        pub const fn data39(&self) -> &Data39 {
            &self.data39
        }
        #[doc = "0xb8 - Backup data register 40"]
        #[inline(always)]
        pub const fn data40(&self) -> &Data40 {
            &self.data40
        }
        #[doc = "0xbc - Backup data register 41"]
        #[inline(always)]
        pub const fn data41(&self) -> &Data41 {
            &self.data41
        }
    }
    #[doc = "DATA0 (rw) register accessor: Backup data register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data0`]
module"]
    #[doc(alias = "DATA0")]
    pub type Data0 = crate::Reg<data0::Data0Spec>;
    #[doc = "Backup data register 0"]
    pub mod data0 {
        #[doc = "Register `DATA0` reader"]
        pub type R = crate::R<Data0Spec>;
        #[doc = "Register `DATA0` writer"]
        pub type W = crate::W<Data0Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data0Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data0Spec;
        impl crate::RegisterSpec for Data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data0::R`](R) reader structure"]
        impl crate::Readable for Data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`data0::W`](W) writer structure"]
        impl crate::Writable for Data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA0 to value 0"]
        impl crate::Resettable for Data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA1 (rw) register accessor: Backup data register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data1`]
module"]
    #[doc(alias = "DATA1")]
    pub type Data1 = crate::Reg<data1::Data1Spec>;
    #[doc = "Backup data register 1"]
    pub mod data1 {
        #[doc = "Register `DATA1` reader"]
        pub type R = crate::R<Data1Spec>;
        #[doc = "Register `DATA1` writer"]
        pub type W = crate::W<Data1Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data1Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data1Spec;
        impl crate::RegisterSpec for Data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data1::R`](R) reader structure"]
        impl crate::Readable for Data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`data1::W`](W) writer structure"]
        impl crate::Writable for Data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA1 to value 0"]
        impl crate::Resettable for Data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA2 (rw) register accessor: Backup data register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`data2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data2`]
module"]
    #[doc(alias = "DATA2")]
    pub type Data2 = crate::Reg<data2::Data2Spec>;
    #[doc = "Backup data register 2"]
    pub mod data2 {
        #[doc = "Register `DATA2` reader"]
        pub type R = crate::R<Data2Spec>;
        #[doc = "Register `DATA2` writer"]
        pub type W = crate::W<Data2Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data2Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`data2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data2Spec;
        impl crate::RegisterSpec for Data2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data2::R`](R) reader structure"]
        impl crate::Readable for Data2Spec {}
        #[doc = "`write(|w| ..)` method takes [`data2::W`](W) writer structure"]
        impl crate::Writable for Data2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA2 to value 0"]
        impl crate::Resettable for Data2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA3 (rw) register accessor: Backup data register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`data3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data3`]
module"]
    #[doc(alias = "DATA3")]
    pub type Data3 = crate::Reg<data3::Data3Spec>;
    #[doc = "Backup data register 3"]
    pub mod data3 {
        #[doc = "Register `DATA3` reader"]
        pub type R = crate::R<Data3Spec>;
        #[doc = "Register `DATA3` writer"]
        pub type W = crate::W<Data3Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data3Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`data3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data3Spec;
        impl crate::RegisterSpec for Data3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data3::R`](R) reader structure"]
        impl crate::Readable for Data3Spec {}
        #[doc = "`write(|w| ..)` method takes [`data3::W`](W) writer structure"]
        impl crate::Writable for Data3Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA3 to value 0"]
        impl crate::Resettable for Data3Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA4 (rw) register accessor: Backup data register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`data4::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data4::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data4`]
module"]
    #[doc(alias = "DATA4")]
    pub type Data4 = crate::Reg<data4::Data4Spec>;
    #[doc = "Backup data register 4"]
    pub mod data4 {
        #[doc = "Register `DATA4` reader"]
        pub type R = crate::R<Data4Spec>;
        #[doc = "Register `DATA4` writer"]
        pub type W = crate::W<Data4Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data4Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 4\n\nYou can [`read`](crate::Reg::read) this register and get [`data4::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data4::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data4Spec;
        impl crate::RegisterSpec for Data4Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data4::R`](R) reader structure"]
        impl crate::Readable for Data4Spec {}
        #[doc = "`write(|w| ..)` method takes [`data4::W`](W) writer structure"]
        impl crate::Writable for Data4Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA4 to value 0"]
        impl crate::Resettable for Data4Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA5 (rw) register accessor: Backup data register 5\n\nYou can [`read`](crate::Reg::read) this register and get [`data5::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data5::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data5`]
module"]
    #[doc(alias = "DATA5")]
    pub type Data5 = crate::Reg<data5::Data5Spec>;
    #[doc = "Backup data register 5"]
    pub mod data5 {
        #[doc = "Register `DATA5` reader"]
        pub type R = crate::R<Data5Spec>;
        #[doc = "Register `DATA5` writer"]
        pub type W = crate::W<Data5Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data5Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 5\n\nYou can [`read`](crate::Reg::read) this register and get [`data5::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data5::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data5Spec;
        impl crate::RegisterSpec for Data5Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data5::R`](R) reader structure"]
        impl crate::Readable for Data5Spec {}
        #[doc = "`write(|w| ..)` method takes [`data5::W`](W) writer structure"]
        impl crate::Writable for Data5Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA5 to value 0"]
        impl crate::Resettable for Data5Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA6 (rw) register accessor: Backup data register 6\n\nYou can [`read`](crate::Reg::read) this register and get [`data6::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data6::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data6`]
module"]
    #[doc(alias = "DATA6")]
    pub type Data6 = crate::Reg<data6::Data6Spec>;
    #[doc = "Backup data register 6"]
    pub mod data6 {
        #[doc = "Register `DATA6` reader"]
        pub type R = crate::R<Data6Spec>;
        #[doc = "Register `DATA6` writer"]
        pub type W = crate::W<Data6Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data6Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 6\n\nYou can [`read`](crate::Reg::read) this register and get [`data6::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data6::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data6Spec;
        impl crate::RegisterSpec for Data6Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data6::R`](R) reader structure"]
        impl crate::Readable for Data6Spec {}
        #[doc = "`write(|w| ..)` method takes [`data6::W`](W) writer structure"]
        impl crate::Writable for Data6Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA6 to value 0"]
        impl crate::Resettable for Data6Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA7 (rw) register accessor: Backup data register 7\n\nYou can [`read`](crate::Reg::read) this register and get [`data7::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data7::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data7`]
module"]
    #[doc(alias = "DATA7")]
    pub type Data7 = crate::Reg<data7::Data7Spec>;
    #[doc = "Backup data register 7"]
    pub mod data7 {
        #[doc = "Register `DATA7` reader"]
        pub type R = crate::R<Data7Spec>;
        #[doc = "Register `DATA7` writer"]
        pub type W = crate::W<Data7Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data7Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 7\n\nYou can [`read`](crate::Reg::read) this register and get [`data7::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data7::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data7Spec;
        impl crate::RegisterSpec for Data7Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data7::R`](R) reader structure"]
        impl crate::Readable for Data7Spec {}
        #[doc = "`write(|w| ..)` method takes [`data7::W`](W) writer structure"]
        impl crate::Writable for Data7Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA7 to value 0"]
        impl crate::Resettable for Data7Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA8 (rw) register accessor: Backup data register 8\n\nYou can [`read`](crate::Reg::read) this register and get [`data8::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data8::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data8`]
module"]
    #[doc(alias = "DATA8")]
    pub type Data8 = crate::Reg<data8::Data8Spec>;
    #[doc = "Backup data register 8"]
    pub mod data8 {
        #[doc = "Register `DATA8` reader"]
        pub type R = crate::R<Data8Spec>;
        #[doc = "Register `DATA8` writer"]
        pub type W = crate::W<Data8Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data8Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 8\n\nYou can [`read`](crate::Reg::read) this register and get [`data8::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data8::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data8Spec;
        impl crate::RegisterSpec for Data8Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data8::R`](R) reader structure"]
        impl crate::Readable for Data8Spec {}
        #[doc = "`write(|w| ..)` method takes [`data8::W`](W) writer structure"]
        impl crate::Writable for Data8Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA8 to value 0"]
        impl crate::Resettable for Data8Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA9 (rw) register accessor: Backup data register 9\n\nYou can [`read`](crate::Reg::read) this register and get [`data9::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data9::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data9`]
module"]
    #[doc(alias = "DATA9")]
    pub type Data9 = crate::Reg<data9::Data9Spec>;
    #[doc = "Backup data register 9"]
    pub mod data9 {
        #[doc = "Register `DATA9` reader"]
        pub type R = crate::R<Data9Spec>;
        #[doc = "Register `DATA9` writer"]
        pub type W = crate::W<Data9Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data9Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 9\n\nYou can [`read`](crate::Reg::read) this register and get [`data9::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data9::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data9Spec;
        impl crate::RegisterSpec for Data9Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data9::R`](R) reader structure"]
        impl crate::Readable for Data9Spec {}
        #[doc = "`write(|w| ..)` method takes [`data9::W`](W) writer structure"]
        impl crate::Writable for Data9Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA9 to value 0"]
        impl crate::Resettable for Data9Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA10 (rw) register accessor: Backup data register 10\n\nYou can [`read`](crate::Reg::read) this register and get [`data10::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data10::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data10`]
module"]
    #[doc(alias = "DATA10")]
    pub type Data10 = crate::Reg<data10::Data10Spec>;
    #[doc = "Backup data register 10"]
    pub mod data10 {
        #[doc = "Register `DATA10` reader"]
        pub type R = crate::R<Data10Spec>;
        #[doc = "Register `DATA10` writer"]
        pub type W = crate::W<Data10Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data10Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 10\n\nYou can [`read`](crate::Reg::read) this register and get [`data10::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data10::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data10Spec;
        impl crate::RegisterSpec for Data10Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data10::R`](R) reader structure"]
        impl crate::Readable for Data10Spec {}
        #[doc = "`write(|w| ..)` method takes [`data10::W`](W) writer structure"]
        impl crate::Writable for Data10Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA10 to value 0"]
        impl crate::Resettable for Data10Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA11 (rw) register accessor: Backup data register 11\n\nYou can [`read`](crate::Reg::read) this register and get [`data11::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data11::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data11`]
module"]
    #[doc(alias = "DATA11")]
    pub type Data11 = crate::Reg<data11::Data11Spec>;
    #[doc = "Backup data register 11"]
    pub mod data11 {
        #[doc = "Register `DATA11` reader"]
        pub type R = crate::R<Data11Spec>;
        #[doc = "Register `DATA11` writer"]
        pub type W = crate::W<Data11Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data11Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 11\n\nYou can [`read`](crate::Reg::read) this register and get [`data11::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data11::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data11Spec;
        impl crate::RegisterSpec for Data11Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data11::R`](R) reader structure"]
        impl crate::Readable for Data11Spec {}
        #[doc = "`write(|w| ..)` method takes [`data11::W`](W) writer structure"]
        impl crate::Writable for Data11Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA11 to value 0"]
        impl crate::Resettable for Data11Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA12 (rw) register accessor: Backup data register 12\n\nYou can [`read`](crate::Reg::read) this register and get [`data12::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data12::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data12`]
module"]
    #[doc(alias = "DATA12")]
    pub type Data12 = crate::Reg<data12::Data12Spec>;
    #[doc = "Backup data register 12"]
    pub mod data12 {
        #[doc = "Register `DATA12` reader"]
        pub type R = crate::R<Data12Spec>;
        #[doc = "Register `DATA12` writer"]
        pub type W = crate::W<Data12Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data12Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 12\n\nYou can [`read`](crate::Reg::read) this register and get [`data12::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data12::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data12Spec;
        impl crate::RegisterSpec for Data12Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data12::R`](R) reader structure"]
        impl crate::Readable for Data12Spec {}
        #[doc = "`write(|w| ..)` method takes [`data12::W`](W) writer structure"]
        impl crate::Writable for Data12Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA12 to value 0"]
        impl crate::Resettable for Data12Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA13 (rw) register accessor: Backup data register 13\n\nYou can [`read`](crate::Reg::read) this register and get [`data13::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data13::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data13`]
module"]
    #[doc(alias = "DATA13")]
    pub type Data13 = crate::Reg<data13::Data13Spec>;
    #[doc = "Backup data register 13"]
    pub mod data13 {
        #[doc = "Register `DATA13` reader"]
        pub type R = crate::R<Data13Spec>;
        #[doc = "Register `DATA13` writer"]
        pub type W = crate::W<Data13Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data13Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 13\n\nYou can [`read`](crate::Reg::read) this register and get [`data13::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data13::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data13Spec;
        impl crate::RegisterSpec for Data13Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data13::R`](R) reader structure"]
        impl crate::Readable for Data13Spec {}
        #[doc = "`write(|w| ..)` method takes [`data13::W`](W) writer structure"]
        impl crate::Writable for Data13Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA13 to value 0"]
        impl crate::Resettable for Data13Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA14 (rw) register accessor: Backup data register 14\n\nYou can [`read`](crate::Reg::read) this register and get [`data14::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data14::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data14`]
module"]
    #[doc(alias = "DATA14")]
    pub type Data14 = crate::Reg<data14::Data14Spec>;
    #[doc = "Backup data register 14"]
    pub mod data14 {
        #[doc = "Register `DATA14` reader"]
        pub type R = crate::R<Data14Spec>;
        #[doc = "Register `DATA14` writer"]
        pub type W = crate::W<Data14Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data14Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 14\n\nYou can [`read`](crate::Reg::read) this register and get [`data14::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data14::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data14Spec;
        impl crate::RegisterSpec for Data14Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data14::R`](R) reader structure"]
        impl crate::Readable for Data14Spec {}
        #[doc = "`write(|w| ..)` method takes [`data14::W`](W) writer structure"]
        impl crate::Writable for Data14Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA14 to value 0"]
        impl crate::Resettable for Data14Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA15 (rw) register accessor: Backup data register 15\n\nYou can [`read`](crate::Reg::read) this register and get [`data15::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data15::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data15`]
module"]
    #[doc(alias = "DATA15")]
    pub type Data15 = crate::Reg<data15::Data15Spec>;
    #[doc = "Backup data register 15"]
    pub mod data15 {
        #[doc = "Register `DATA15` reader"]
        pub type R = crate::R<Data15Spec>;
        #[doc = "Register `DATA15` writer"]
        pub type W = crate::W<Data15Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data15Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 15\n\nYou can [`read`](crate::Reg::read) this register and get [`data15::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data15::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data15Spec;
        impl crate::RegisterSpec for Data15Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data15::R`](R) reader structure"]
        impl crate::Readable for Data15Spec {}
        #[doc = "`write(|w| ..)` method takes [`data15::W`](W) writer structure"]
        impl crate::Writable for Data15Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA15 to value 0"]
        impl crate::Resettable for Data15Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA16 (rw) register accessor: Backup data register 16\n\nYou can [`read`](crate::Reg::read) this register and get [`data16::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data16::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data16`]
module"]
    #[doc(alias = "DATA16")]
    pub type Data16 = crate::Reg<data16::Data16Spec>;
    #[doc = "Backup data register 16"]
    pub mod data16 {
        #[doc = "Register `DATA16` reader"]
        pub type R = crate::R<Data16Spec>;
        #[doc = "Register `DATA16` writer"]
        pub type W = crate::W<Data16Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data16Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 16\n\nYou can [`read`](crate::Reg::read) this register and get [`data16::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data16::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data16Spec;
        impl crate::RegisterSpec for Data16Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data16::R`](R) reader structure"]
        impl crate::Readable for Data16Spec {}
        #[doc = "`write(|w| ..)` method takes [`data16::W`](W) writer structure"]
        impl crate::Writable for Data16Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA16 to value 0"]
        impl crate::Resettable for Data16Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA17 (rw) register accessor: Backup data register 17\n\nYou can [`read`](crate::Reg::read) this register and get [`data17::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data17::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data17`]
module"]
    #[doc(alias = "DATA17")]
    pub type Data17 = crate::Reg<data17::Data17Spec>;
    #[doc = "Backup data register 17"]
    pub mod data17 {
        #[doc = "Register `DATA17` reader"]
        pub type R = crate::R<Data17Spec>;
        #[doc = "Register `DATA17` writer"]
        pub type W = crate::W<Data17Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data17Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 17\n\nYou can [`read`](crate::Reg::read) this register and get [`data17::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data17::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data17Spec;
        impl crate::RegisterSpec for Data17Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data17::R`](R) reader structure"]
        impl crate::Readable for Data17Spec {}
        #[doc = "`write(|w| ..)` method takes [`data17::W`](W) writer structure"]
        impl crate::Writable for Data17Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA17 to value 0"]
        impl crate::Resettable for Data17Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA18 (rw) register accessor: Backup data register 18\n\nYou can [`read`](crate::Reg::read) this register and get [`data18::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data18::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data18`]
module"]
    #[doc(alias = "DATA18")]
    pub type Data18 = crate::Reg<data18::Data18Spec>;
    #[doc = "Backup data register 18"]
    pub mod data18 {
        #[doc = "Register `DATA18` reader"]
        pub type R = crate::R<Data18Spec>;
        #[doc = "Register `DATA18` writer"]
        pub type W = crate::W<Data18Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data18Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 18\n\nYou can [`read`](crate::Reg::read) this register and get [`data18::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data18::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data18Spec;
        impl crate::RegisterSpec for Data18Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data18::R`](R) reader structure"]
        impl crate::Readable for Data18Spec {}
        #[doc = "`write(|w| ..)` method takes [`data18::W`](W) writer structure"]
        impl crate::Writable for Data18Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA18 to value 0"]
        impl crate::Resettable for Data18Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA19 (rw) register accessor: Backup data register 19\n\nYou can [`read`](crate::Reg::read) this register and get [`data19::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data19::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data19`]
module"]
    #[doc(alias = "DATA19")]
    pub type Data19 = crate::Reg<data19::Data19Spec>;
    #[doc = "Backup data register 19"]
    pub mod data19 {
        #[doc = "Register `DATA19` reader"]
        pub type R = crate::R<Data19Spec>;
        #[doc = "Register `DATA19` writer"]
        pub type W = crate::W<Data19Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data19Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 19\n\nYou can [`read`](crate::Reg::read) this register and get [`data19::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data19::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data19Spec;
        impl crate::RegisterSpec for Data19Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data19::R`](R) reader structure"]
        impl crate::Readable for Data19Spec {}
        #[doc = "`write(|w| ..)` method takes [`data19::W`](W) writer structure"]
        impl crate::Writable for Data19Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA19 to value 0"]
        impl crate::Resettable for Data19Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA20 (rw) register accessor: Backup data register 20\n\nYou can [`read`](crate::Reg::read) this register and get [`data20::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data20::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data20`]
module"]
    #[doc(alias = "DATA20")]
    pub type Data20 = crate::Reg<data20::Data20Spec>;
    #[doc = "Backup data register 20"]
    pub mod data20 {
        #[doc = "Register `DATA20` reader"]
        pub type R = crate::R<Data20Spec>;
        #[doc = "Register `DATA20` writer"]
        pub type W = crate::W<Data20Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data20Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 20\n\nYou can [`read`](crate::Reg::read) this register and get [`data20::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data20::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data20Spec;
        impl crate::RegisterSpec for Data20Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data20::R`](R) reader structure"]
        impl crate::Readable for Data20Spec {}
        #[doc = "`write(|w| ..)` method takes [`data20::W`](W) writer structure"]
        impl crate::Writable for Data20Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA20 to value 0"]
        impl crate::Resettable for Data20Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA21 (rw) register accessor: Backup data register 21\n\nYou can [`read`](crate::Reg::read) this register and get [`data21::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data21::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data21`]
module"]
    #[doc(alias = "DATA21")]
    pub type Data21 = crate::Reg<data21::Data21Spec>;
    #[doc = "Backup data register 21"]
    pub mod data21 {
        #[doc = "Register `DATA21` reader"]
        pub type R = crate::R<Data21Spec>;
        #[doc = "Register `DATA21` writer"]
        pub type W = crate::W<Data21Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data21Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 21\n\nYou can [`read`](crate::Reg::read) this register and get [`data21::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data21::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data21Spec;
        impl crate::RegisterSpec for Data21Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data21::R`](R) reader structure"]
        impl crate::Readable for Data21Spec {}
        #[doc = "`write(|w| ..)` method takes [`data21::W`](W) writer structure"]
        impl crate::Writable for Data21Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA21 to value 0"]
        impl crate::Resettable for Data21Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA22 (rw) register accessor: Backup data register 22\n\nYou can [`read`](crate::Reg::read) this register and get [`data22::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data22::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data22`]
module"]
    #[doc(alias = "DATA22")]
    pub type Data22 = crate::Reg<data22::Data22Spec>;
    #[doc = "Backup data register 22"]
    pub mod data22 {
        #[doc = "Register `DATA22` reader"]
        pub type R = crate::R<Data22Spec>;
        #[doc = "Register `DATA22` writer"]
        pub type W = crate::W<Data22Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data22Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 22\n\nYou can [`read`](crate::Reg::read) this register and get [`data22::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data22::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data22Spec;
        impl crate::RegisterSpec for Data22Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data22::R`](R) reader structure"]
        impl crate::Readable for Data22Spec {}
        #[doc = "`write(|w| ..)` method takes [`data22::W`](W) writer structure"]
        impl crate::Writable for Data22Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA22 to value 0"]
        impl crate::Resettable for Data22Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA23 (rw) register accessor: Backup data register 23\n\nYou can [`read`](crate::Reg::read) this register and get [`data23::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data23::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data23`]
module"]
    #[doc(alias = "DATA23")]
    pub type Data23 = crate::Reg<data23::Data23Spec>;
    #[doc = "Backup data register 23"]
    pub mod data23 {
        #[doc = "Register `DATA23` reader"]
        pub type R = crate::R<Data23Spec>;
        #[doc = "Register `DATA23` writer"]
        pub type W = crate::W<Data23Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data23Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 23\n\nYou can [`read`](crate::Reg::read) this register and get [`data23::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data23::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data23Spec;
        impl crate::RegisterSpec for Data23Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data23::R`](R) reader structure"]
        impl crate::Readable for Data23Spec {}
        #[doc = "`write(|w| ..)` method takes [`data23::W`](W) writer structure"]
        impl crate::Writable for Data23Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA23 to value 0"]
        impl crate::Resettable for Data23Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA24 (rw) register accessor: Backup data register 24\n\nYou can [`read`](crate::Reg::read) this register and get [`data24::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data24::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data24`]
module"]
    #[doc(alias = "DATA24")]
    pub type Data24 = crate::Reg<data24::Data24Spec>;
    #[doc = "Backup data register 24"]
    pub mod data24 {
        #[doc = "Register `DATA24` reader"]
        pub type R = crate::R<Data24Spec>;
        #[doc = "Register `DATA24` writer"]
        pub type W = crate::W<Data24Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data24Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 24\n\nYou can [`read`](crate::Reg::read) this register and get [`data24::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data24::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data24Spec;
        impl crate::RegisterSpec for Data24Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data24::R`](R) reader structure"]
        impl crate::Readable for Data24Spec {}
        #[doc = "`write(|w| ..)` method takes [`data24::W`](W) writer structure"]
        impl crate::Writable for Data24Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA24 to value 0"]
        impl crate::Resettable for Data24Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA25 (rw) register accessor: Backup data register 25\n\nYou can [`read`](crate::Reg::read) this register and get [`data25::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data25::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data25`]
module"]
    #[doc(alias = "DATA25")]
    pub type Data25 = crate::Reg<data25::Data25Spec>;
    #[doc = "Backup data register 25"]
    pub mod data25 {
        #[doc = "Register `DATA25` reader"]
        pub type R = crate::R<Data25Spec>;
        #[doc = "Register `DATA25` writer"]
        pub type W = crate::W<Data25Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data25Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 25\n\nYou can [`read`](crate::Reg::read) this register and get [`data25::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data25::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data25Spec;
        impl crate::RegisterSpec for Data25Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data25::R`](R) reader structure"]
        impl crate::Readable for Data25Spec {}
        #[doc = "`write(|w| ..)` method takes [`data25::W`](W) writer structure"]
        impl crate::Writable for Data25Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA25 to value 0"]
        impl crate::Resettable for Data25Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA26 (rw) register accessor: Backup data register 26\n\nYou can [`read`](crate::Reg::read) this register and get [`data26::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data26::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data26`]
module"]
    #[doc(alias = "DATA26")]
    pub type Data26 = crate::Reg<data26::Data26Spec>;
    #[doc = "Backup data register 26"]
    pub mod data26 {
        #[doc = "Register `DATA26` reader"]
        pub type R = crate::R<Data26Spec>;
        #[doc = "Register `DATA26` writer"]
        pub type W = crate::W<Data26Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data26Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 26\n\nYou can [`read`](crate::Reg::read) this register and get [`data26::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data26::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data26Spec;
        impl crate::RegisterSpec for Data26Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data26::R`](R) reader structure"]
        impl crate::Readable for Data26Spec {}
        #[doc = "`write(|w| ..)` method takes [`data26::W`](W) writer structure"]
        impl crate::Writable for Data26Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA26 to value 0"]
        impl crate::Resettable for Data26Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA27 (rw) register accessor: Backup data register 27\n\nYou can [`read`](crate::Reg::read) this register and get [`data27::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data27::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data27`]
module"]
    #[doc(alias = "DATA27")]
    pub type Data27 = crate::Reg<data27::Data27Spec>;
    #[doc = "Backup data register 27"]
    pub mod data27 {
        #[doc = "Register `DATA27` reader"]
        pub type R = crate::R<Data27Spec>;
        #[doc = "Register `DATA27` writer"]
        pub type W = crate::W<Data27Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data27Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 27\n\nYou can [`read`](crate::Reg::read) this register and get [`data27::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data27::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data27Spec;
        impl crate::RegisterSpec for Data27Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data27::R`](R) reader structure"]
        impl crate::Readable for Data27Spec {}
        #[doc = "`write(|w| ..)` method takes [`data27::W`](W) writer structure"]
        impl crate::Writable for Data27Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA27 to value 0"]
        impl crate::Resettable for Data27Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA28 (rw) register accessor: Backup data register 28\n\nYou can [`read`](crate::Reg::read) this register and get [`data28::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data28::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data28`]
module"]
    #[doc(alias = "DATA28")]
    pub type Data28 = crate::Reg<data28::Data28Spec>;
    #[doc = "Backup data register 28"]
    pub mod data28 {
        #[doc = "Register `DATA28` reader"]
        pub type R = crate::R<Data28Spec>;
        #[doc = "Register `DATA28` writer"]
        pub type W = crate::W<Data28Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data28Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 28\n\nYou can [`read`](crate::Reg::read) this register and get [`data28::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data28::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data28Spec;
        impl crate::RegisterSpec for Data28Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data28::R`](R) reader structure"]
        impl crate::Readable for Data28Spec {}
        #[doc = "`write(|w| ..)` method takes [`data28::W`](W) writer structure"]
        impl crate::Writable for Data28Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA28 to value 0"]
        impl crate::Resettable for Data28Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA29 (rw) register accessor: Backup data register 29\n\nYou can [`read`](crate::Reg::read) this register and get [`data29::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data29::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data29`]
module"]
    #[doc(alias = "DATA29")]
    pub type Data29 = crate::Reg<data29::Data29Spec>;
    #[doc = "Backup data register 29"]
    pub mod data29 {
        #[doc = "Register `DATA29` reader"]
        pub type R = crate::R<Data29Spec>;
        #[doc = "Register `DATA29` writer"]
        pub type W = crate::W<Data29Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data29Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 29\n\nYou can [`read`](crate::Reg::read) this register and get [`data29::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data29::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data29Spec;
        impl crate::RegisterSpec for Data29Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data29::R`](R) reader structure"]
        impl crate::Readable for Data29Spec {}
        #[doc = "`write(|w| ..)` method takes [`data29::W`](W) writer structure"]
        impl crate::Writable for Data29Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA29 to value 0"]
        impl crate::Resettable for Data29Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA30 (rw) register accessor: Backup data register 30\n\nYou can [`read`](crate::Reg::read) this register and get [`data30::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data30::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data30`]
module"]
    #[doc(alias = "DATA30")]
    pub type Data30 = crate::Reg<data30::Data30Spec>;
    #[doc = "Backup data register 30"]
    pub mod data30 {
        #[doc = "Register `DATA30` reader"]
        pub type R = crate::R<Data30Spec>;
        #[doc = "Register `DATA30` writer"]
        pub type W = crate::W<Data30Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data30Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 30\n\nYou can [`read`](crate::Reg::read) this register and get [`data30::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data30::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data30Spec;
        impl crate::RegisterSpec for Data30Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data30::R`](R) reader structure"]
        impl crate::Readable for Data30Spec {}
        #[doc = "`write(|w| ..)` method takes [`data30::W`](W) writer structure"]
        impl crate::Writable for Data30Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA30 to value 0"]
        impl crate::Resettable for Data30Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA31 (rw) register accessor: Backup data register 31\n\nYou can [`read`](crate::Reg::read) this register and get [`data31::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data31::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data31`]
module"]
    #[doc(alias = "DATA31")]
    pub type Data31 = crate::Reg<data31::Data31Spec>;
    #[doc = "Backup data register 31"]
    pub mod data31 {
        #[doc = "Register `DATA31` reader"]
        pub type R = crate::R<Data31Spec>;
        #[doc = "Register `DATA31` writer"]
        pub type W = crate::W<Data31Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data31Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 31\n\nYou can [`read`](crate::Reg::read) this register and get [`data31::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data31::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data31Spec;
        impl crate::RegisterSpec for Data31Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data31::R`](R) reader structure"]
        impl crate::Readable for Data31Spec {}
        #[doc = "`write(|w| ..)` method takes [`data31::W`](W) writer structure"]
        impl crate::Writable for Data31Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA31 to value 0"]
        impl crate::Resettable for Data31Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA32 (rw) register accessor: Backup data register 32\n\nYou can [`read`](crate::Reg::read) this register and get [`data32::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data32::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data32`]
module"]
    #[doc(alias = "DATA32")]
    pub type Data32 = crate::Reg<data32::Data32Spec>;
    #[doc = "Backup data register 32"]
    pub mod data32 {
        #[doc = "Register `DATA32` reader"]
        pub type R = crate::R<Data32Spec>;
        #[doc = "Register `DATA32` writer"]
        pub type W = crate::W<Data32Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data32Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 32\n\nYou can [`read`](crate::Reg::read) this register and get [`data32::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data32::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data32Spec;
        impl crate::RegisterSpec for Data32Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data32::R`](R) reader structure"]
        impl crate::Readable for Data32Spec {}
        #[doc = "`write(|w| ..)` method takes [`data32::W`](W) writer structure"]
        impl crate::Writable for Data32Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA32 to value 0"]
        impl crate::Resettable for Data32Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA33 (rw) register accessor: Backup data register 33\n\nYou can [`read`](crate::Reg::read) this register and get [`data33::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data33::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data33`]
module"]
    #[doc(alias = "DATA33")]
    pub type Data33 = crate::Reg<data33::Data33Spec>;
    #[doc = "Backup data register 33"]
    pub mod data33 {
        #[doc = "Register `DATA33` reader"]
        pub type R = crate::R<Data33Spec>;
        #[doc = "Register `DATA33` writer"]
        pub type W = crate::W<Data33Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data33Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 33\n\nYou can [`read`](crate::Reg::read) this register and get [`data33::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data33::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data33Spec;
        impl crate::RegisterSpec for Data33Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data33::R`](R) reader structure"]
        impl crate::Readable for Data33Spec {}
        #[doc = "`write(|w| ..)` method takes [`data33::W`](W) writer structure"]
        impl crate::Writable for Data33Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA33 to value 0"]
        impl crate::Resettable for Data33Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA34 (rw) register accessor: Backup data register 34\n\nYou can [`read`](crate::Reg::read) this register and get [`data34::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data34::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data34`]
module"]
    #[doc(alias = "DATA34")]
    pub type Data34 = crate::Reg<data34::Data34Spec>;
    #[doc = "Backup data register 34"]
    pub mod data34 {
        #[doc = "Register `DATA34` reader"]
        pub type R = crate::R<Data34Spec>;
        #[doc = "Register `DATA34` writer"]
        pub type W = crate::W<Data34Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data34Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 34\n\nYou can [`read`](crate::Reg::read) this register and get [`data34::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data34::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data34Spec;
        impl crate::RegisterSpec for Data34Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data34::R`](R) reader structure"]
        impl crate::Readable for Data34Spec {}
        #[doc = "`write(|w| ..)` method takes [`data34::W`](W) writer structure"]
        impl crate::Writable for Data34Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA34 to value 0"]
        impl crate::Resettable for Data34Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA35 (rw) register accessor: Backup data register 35\n\nYou can [`read`](crate::Reg::read) this register and get [`data35::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data35::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data35`]
module"]
    #[doc(alias = "DATA35")]
    pub type Data35 = crate::Reg<data35::Data35Spec>;
    #[doc = "Backup data register 35"]
    pub mod data35 {
        #[doc = "Register `DATA35` reader"]
        pub type R = crate::R<Data35Spec>;
        #[doc = "Register `DATA35` writer"]
        pub type W = crate::W<Data35Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data35Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 35\n\nYou can [`read`](crate::Reg::read) this register and get [`data35::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data35::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data35Spec;
        impl crate::RegisterSpec for Data35Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data35::R`](R) reader structure"]
        impl crate::Readable for Data35Spec {}
        #[doc = "`write(|w| ..)` method takes [`data35::W`](W) writer structure"]
        impl crate::Writable for Data35Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA35 to value 0"]
        impl crate::Resettable for Data35Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA36 (rw) register accessor: Backup data register 36\n\nYou can [`read`](crate::Reg::read) this register and get [`data36::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data36::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data36`]
module"]
    #[doc(alias = "DATA36")]
    pub type Data36 = crate::Reg<data36::Data36Spec>;
    #[doc = "Backup data register 36"]
    pub mod data36 {
        #[doc = "Register `DATA36` reader"]
        pub type R = crate::R<Data36Spec>;
        #[doc = "Register `DATA36` writer"]
        pub type W = crate::W<Data36Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data36Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 36\n\nYou can [`read`](crate::Reg::read) this register and get [`data36::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data36::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data36Spec;
        impl crate::RegisterSpec for Data36Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data36::R`](R) reader structure"]
        impl crate::Readable for Data36Spec {}
        #[doc = "`write(|w| ..)` method takes [`data36::W`](W) writer structure"]
        impl crate::Writable for Data36Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA36 to value 0"]
        impl crate::Resettable for Data36Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA37 (rw) register accessor: Backup data register 37\n\nYou can [`read`](crate::Reg::read) this register and get [`data37::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data37::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data37`]
module"]
    #[doc(alias = "DATA37")]
    pub type Data37 = crate::Reg<data37::Data37Spec>;
    #[doc = "Backup data register 37"]
    pub mod data37 {
        #[doc = "Register `DATA37` reader"]
        pub type R = crate::R<Data37Spec>;
        #[doc = "Register `DATA37` writer"]
        pub type W = crate::W<Data37Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data37Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 37\n\nYou can [`read`](crate::Reg::read) this register and get [`data37::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data37::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data37Spec;
        impl crate::RegisterSpec for Data37Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data37::R`](R) reader structure"]
        impl crate::Readable for Data37Spec {}
        #[doc = "`write(|w| ..)` method takes [`data37::W`](W) writer structure"]
        impl crate::Writable for Data37Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA37 to value 0"]
        impl crate::Resettable for Data37Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA38 (rw) register accessor: Backup data register 38\n\nYou can [`read`](crate::Reg::read) this register and get [`data38::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data38::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data38`]
module"]
    #[doc(alias = "DATA38")]
    pub type Data38 = crate::Reg<data38::Data38Spec>;
    #[doc = "Backup data register 38"]
    pub mod data38 {
        #[doc = "Register `DATA38` reader"]
        pub type R = crate::R<Data38Spec>;
        #[doc = "Register `DATA38` writer"]
        pub type W = crate::W<Data38Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data38Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 38\n\nYou can [`read`](crate::Reg::read) this register and get [`data38::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data38::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data38Spec;
        impl crate::RegisterSpec for Data38Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data38::R`](R) reader structure"]
        impl crate::Readable for Data38Spec {}
        #[doc = "`write(|w| ..)` method takes [`data38::W`](W) writer structure"]
        impl crate::Writable for Data38Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA38 to value 0"]
        impl crate::Resettable for Data38Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA39 (rw) register accessor: Backup data register 39\n\nYou can [`read`](crate::Reg::read) this register and get [`data39::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data39::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data39`]
module"]
    #[doc(alias = "DATA39")]
    pub type Data39 = crate::Reg<data39::Data39Spec>;
    #[doc = "Backup data register 39"]
    pub mod data39 {
        #[doc = "Register `DATA39` reader"]
        pub type R = crate::R<Data39Spec>;
        #[doc = "Register `DATA39` writer"]
        pub type W = crate::W<Data39Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data39Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 39\n\nYou can [`read`](crate::Reg::read) this register and get [`data39::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data39::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data39Spec;
        impl crate::RegisterSpec for Data39Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data39::R`](R) reader structure"]
        impl crate::Readable for Data39Spec {}
        #[doc = "`write(|w| ..)` method takes [`data39::W`](W) writer structure"]
        impl crate::Writable for Data39Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA39 to value 0"]
        impl crate::Resettable for Data39Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA40 (rw) register accessor: Backup data register 40\n\nYou can [`read`](crate::Reg::read) this register and get [`data40::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data40::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data40`]
module"]
    #[doc(alias = "DATA40")]
    pub type Data40 = crate::Reg<data40::Data40Spec>;
    #[doc = "Backup data register 40"]
    pub mod data40 {
        #[doc = "Register `DATA40` reader"]
        pub type R = crate::R<Data40Spec>;
        #[doc = "Register `DATA40` writer"]
        pub type W = crate::W<Data40Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data40Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 40\n\nYou can [`read`](crate::Reg::read) this register and get [`data40::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data40::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data40Spec;
        impl crate::RegisterSpec for Data40Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data40::R`](R) reader structure"]
        impl crate::Readable for Data40Spec {}
        #[doc = "`write(|w| ..)` method takes [`data40::W`](W) writer structure"]
        impl crate::Writable for Data40Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA40 to value 0"]
        impl crate::Resettable for Data40Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA41 (rw) register accessor: Backup data register 41\n\nYou can [`read`](crate::Reg::read) this register and get [`data41::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data41::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data41`]
module"]
    #[doc(alias = "DATA41")]
    pub type Data41 = crate::Reg<data41::Data41Spec>;
    #[doc = "Backup data register 41"]
    pub mod data41 {
        #[doc = "Register `DATA41` reader"]
        pub type R = crate::R<Data41Spec>;
        #[doc = "Register `DATA41` writer"]
        pub type W = crate::W<Data41Spec>;
        #[doc = "Field `DATA` reader - Backup data"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Backup data"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Backup data"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<Data41Spec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Backup data register 41\n\nYou can [`read`](crate::Reg::read) this register and get [`data41::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data41::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Data41Spec;
        impl crate::RegisterSpec for Data41Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data41::R`](R) reader structure"]
        impl crate::Readable for Data41Spec {}
        #[doc = "`write(|w| ..)` method takes [`data41::W`](W) writer structure"]
        impl crate::Writable for Data41Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA41 to value 0"]
        impl crate::Resettable for Data41Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "OCTL (rw) register accessor: RTC signal output control register\n\nYou can [`read`](crate::Reg::read) this register and get [`octl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`octl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@octl`]
module"]
    #[doc(alias = "OCTL")]
    pub type Octl = crate::Reg<octl::OctlSpec>;
    #[doc = "RTC signal output control register"]
    pub mod octl {
        #[doc = "Register `OCTL` reader"]
        pub type R = crate::R<OctlSpec>;
        #[doc = "Register `OCTL` writer"]
        pub type W = crate::W<OctlSpec>;
        #[doc = "Field `RCCV` reader - RTC clock calibration value"]
        pub type RccvR = crate::FieldReader;
        #[doc = "Field `RCCV` writer - RTC clock calibration value"]
        pub type RccvW<'a, REG> = crate::FieldWriter<'a, REG, 7>;
        #[doc = "Field `COEN` reader - RTC clock calibration output enable"]
        pub type CoenR = crate::BitReader;
        #[doc = "Field `COEN` writer - RTC clock calibration output enable"]
        pub type CoenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ASOEN` reader - RTC alarm or second signal output enable"]
        pub type AsoenR = crate::BitReader;
        #[doc = "Field `ASOEN` writer - RTC alarm or second signal output enable"]
        pub type AsoenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ROSEL` reader - RTC output selection"]
        pub type RoselR = crate::BitReader;
        #[doc = "Field `ROSEL` writer - RTC output selection"]
        pub type RoselW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:6 - RTC clock calibration value"]
            #[inline(always)]
            pub fn rccv(&self) -> RccvR {
                RccvR::new((self.bits & 0x7f) as u8)
            }
            #[doc = "Bit 7 - RTC clock calibration output enable"]
            #[inline(always)]
            pub fn coen(&self) -> CoenR {
                CoenR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - RTC alarm or second signal output enable"]
            #[inline(always)]
            pub fn asoen(&self) -> AsoenR {
                AsoenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - RTC output selection"]
            #[inline(always)]
            pub fn rosel(&self) -> RoselR {
                RoselR::new(((self.bits >> 9) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - RTC clock calibration value"]
            #[inline(always)]
            #[must_use]
            pub fn rccv(&mut self) -> RccvW<OctlSpec> {
                RccvW::new(self, 0)
            }
            #[doc = "Bit 7 - RTC clock calibration output enable"]
            #[inline(always)]
            #[must_use]
            pub fn coen(&mut self) -> CoenW<OctlSpec> {
                CoenW::new(self, 7)
            }
            #[doc = "Bit 8 - RTC alarm or second signal output enable"]
            #[inline(always)]
            #[must_use]
            pub fn asoen(&mut self) -> AsoenW<OctlSpec> {
                AsoenW::new(self, 8)
            }
            #[doc = "Bit 9 - RTC output selection"]
            #[inline(always)]
            #[must_use]
            pub fn rosel(&mut self) -> RoselW<OctlSpec> {
                RoselW::new(self, 9)
            }
        }
        #[doc = "RTC signal output control register\n\nYou can [`read`](crate::Reg::read) this register and get [`octl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`octl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct OctlSpec;
        impl crate::RegisterSpec for OctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`octl::R`](R) reader structure"]
        impl crate::Readable for OctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`octl::W`](W) writer structure"]
        impl crate::Writable for OctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets OCTL to value 0"]
        impl crate::Resettable for OctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TPCTL (rw) register accessor: Tamper pin control register\n\nYou can [`read`](crate::Reg::read) this register and get [`tpctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tpctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tpctl`]
module"]
    #[doc(alias = "TPCTL")]
    pub type Tpctl = crate::Reg<tpctl::TpctlSpec>;
    #[doc = "Tamper pin control register"]
    pub mod tpctl {
        #[doc = "Register `TPCTL` reader"]
        pub type R = crate::R<TpctlSpec>;
        #[doc = "Register `TPCTL` writer"]
        pub type W = crate::W<TpctlSpec>;
        #[doc = "Field `TPEN` reader - TAMPER detection enable"]
        pub type TpenR = crate::BitReader;
        #[doc = "Field `TPEN` writer - TAMPER detection enable"]
        pub type TpenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TPAL` reader - TAMPER pin active level"]
        pub type TpalR = crate::BitReader;
        #[doc = "Field `TPAL` writer - TAMPER pin active level"]
        pub type TpalW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - TAMPER detection enable"]
            #[inline(always)]
            pub fn tpen(&self) -> TpenR {
                TpenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - TAMPER pin active level"]
            #[inline(always)]
            pub fn tpal(&self) -> TpalR {
                TpalR::new(((self.bits >> 1) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - TAMPER detection enable"]
            #[inline(always)]
            #[must_use]
            pub fn tpen(&mut self) -> TpenW<TpctlSpec> {
                TpenW::new(self, 0)
            }
            #[doc = "Bit 1 - TAMPER pin active level"]
            #[inline(always)]
            #[must_use]
            pub fn tpal(&mut self) -> TpalW<TpctlSpec> {
                TpalW::new(self, 1)
            }
        }
        #[doc = "Tamper pin control register\n\nYou can [`read`](crate::Reg::read) this register and get [`tpctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tpctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TpctlSpec;
        impl crate::RegisterSpec for TpctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tpctl::R`](R) reader structure"]
        impl crate::Readable for TpctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`tpctl::W`](W) writer structure"]
        impl crate::Writable for TpctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TPCTL to value 0"]
        impl crate::Resettable for TpctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TPCS (rw) register accessor: Tamper control and status register\n\nYou can [`read`](crate::Reg::read) this register and get [`tpcs::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tpcs::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tpcs`]
module"]
    #[doc(alias = "TPCS")]
    pub type Tpcs = crate::Reg<tpcs::TpcsSpec>;
    #[doc = "Tamper control and status register"]
    pub mod tpcs {
        #[doc = "Register `TPCS` reader"]
        pub type R = crate::R<TpcsSpec>;
        #[doc = "Register `TPCS` writer"]
        pub type W = crate::W<TpcsSpec>;
        #[doc = "Field `TER` reader - Tamper event reset"]
        pub type TerR = crate::BitReader;
        #[doc = "Field `TER` writer - Tamper event reset"]
        pub type TerW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIR` reader - Tamper interrupt reset"]
        pub type TirR = crate::BitReader;
        #[doc = "Field `TIR` writer - Tamper interrupt reset"]
        pub type TirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TPIE` reader - Tamper interrupt enable"]
        pub type TpieR = crate::BitReader;
        #[doc = "Field `TPIE` writer - Tamper interrupt enable"]
        pub type TpieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TEF` reader - Tamper event flag"]
        pub type TefR = crate::BitReader;
        #[doc = "Field `TEF` writer - Tamper event flag"]
        pub type TefW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIF` reader - Tamper interrupt flag"]
        pub type TifR = crate::BitReader;
        #[doc = "Field `TIF` writer - Tamper interrupt flag"]
        pub type TifW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Tamper event reset"]
            #[inline(always)]
            pub fn ter(&self) -> TerR {
                TerR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Tamper interrupt reset"]
            #[inline(always)]
            pub fn tir(&self) -> TirR {
                TirR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Tamper interrupt enable"]
            #[inline(always)]
            pub fn tpie(&self) -> TpieR {
                TpieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 8 - Tamper event flag"]
            #[inline(always)]
            pub fn tef(&self) -> TefR {
                TefR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Tamper interrupt flag"]
            #[inline(always)]
            pub fn tif(&self) -> TifR {
                TifR::new(((self.bits >> 9) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Tamper event reset"]
            #[inline(always)]
            #[must_use]
            pub fn ter(&mut self) -> TerW<TpcsSpec> {
                TerW::new(self, 0)
            }
            #[doc = "Bit 1 - Tamper interrupt reset"]
            #[inline(always)]
            #[must_use]
            pub fn tir(&mut self) -> TirW<TpcsSpec> {
                TirW::new(self, 1)
            }
            #[doc = "Bit 2 - Tamper interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn tpie(&mut self) -> TpieW<TpcsSpec> {
                TpieW::new(self, 2)
            }
            #[doc = "Bit 8 - Tamper event flag"]
            #[inline(always)]
            #[must_use]
            pub fn tef(&mut self) -> TefW<TpcsSpec> {
                TefW::new(self, 8)
            }
            #[doc = "Bit 9 - Tamper interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn tif(&mut self) -> TifW<TpcsSpec> {
                TifW::new(self, 9)
            }
        }
        #[doc = "Tamper control and status register\n\nYou can [`read`](crate::Reg::read) this register and get [`tpcs::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tpcs::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TpcsSpec;
        impl crate::RegisterSpec for TpcsSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tpcs::R`](R) reader structure"]
        impl crate::Readable for TpcsSpec {}
        #[doc = "`write(|w| ..)` method takes [`tpcs::W`](W) writer structure"]
        impl crate::Writable for TpcsSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TPCS to value 0"]
        impl crate::Resettable for TpcsSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Controller area network"]
pub struct Can {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Can {}
impl Can {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const can::RegisterBlock = 0x4000_6400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const can::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Can {
    type Target = can::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Can {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Can").finish()
    }
}
#[doc = "Controller area network"]
pub mod can {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ctl: Ctl,
        stat: Stat,
        tstat: Tstat,
        rfifo0: Rfifo0,
        rfifo1: Rfifo1,
        inten: Inten,
        err: Err,
        bt: Bt,
        _reserved8: [u8; 0x0160],
        tmi0: Tmi0,
        tmp0: Tmp0,
        tmdata00: Tmdata00,
        tmdata10: Tmdata10,
        tmi1: Tmi1,
        tmp1: Tmp1,
        tmdata01: Tmdata01,
        tmdata11: Tmdata11,
        tmi2: Tmi2,
        tmp2: Tmp2,
        tmdata02: Tmdata02,
        tmdata12: Tmdata12,
        rfifomi0: Rfifomi0,
        rfifomp0: Rfifomp0,
        rfifomdata00: Rfifomdata00,
        rfifomdata10: Rfifomdata10,
        rfifomi1: Rfifomi1,
        rfifomp1: Rfifomp1,
        rfifomdata01: Rfifomdata01,
        rfifomdata11: Rfifomdata11,
        _reserved28: [u8; 0x30],
        fctl: Fctl,
        fmcfg: Fmcfg,
        _reserved30: [u8; 0x04],
        fscfg: Fscfg,
        _reserved31: [u8; 0x04],
        fafifo: Fafifo,
        _reserved32: [u8; 0x04],
        fw: Fw,
        _reserved33: [u8; 0x20],
        f0data0: F0data0,
        f0data1: F0data1,
        f1data0: F1data0,
        f1data1: F1data1,
        f2data0: F2data0,
        f2data1: F2data1,
        f3data0: F3data0,
        f3data1: F3data1,
        f4data0: F4data0,
        f4data1: F4data1,
        f5data0: F5data0,
        f5data1: F5data1,
        f6data0: F6data0,
        f6data1: F6data1,
        f7data0: F7data0,
        f7data1: F7data1,
        f8data0: F8data0,
        f8data1: F8data1,
        f9data0: F9data0,
        f9data1: F9data1,
        f10data0: F10data0,
        f10data1: F10data1,
        f11data0: F11data0,
        f11data1: F11data1,
        f12data0: F12data0,
        f12data1: F12data1,
        f13data0: F13data0,
        f13data1: F13data1,
        f14data0: F14data0,
        f14data1: F14data1,
        f15data0: F15data0,
        f15data1: F15data1,
        f16data0: F16data0,
        f16data1: F16data1,
        f17data0: F17data0,
        f17data1: F17data1,
        f18data0: F18data0,
        f18data1: F18data1,
        f19data0: F19data0,
        f19data1: F19data1,
        f20data0: F20data0,
        f20data1: F20data1,
        f21data0: F21data0,
        f21data1: F21data1,
        f22data0: F22data0,
        f22data1: F22data1,
        f23data0: F23data0,
        f23data1: F23data1,
        f24data0: F24data0,
        f24data1: F24data1,
        f25data0: F25data0,
        f25data1: F25data1,
        f26data0: F26data0,
        f26data1: F26data1,
        f27data0: F27data0,
        f27data1: F27data1,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Control register"]
        #[inline(always)]
        pub const fn ctl(&self) -> &Ctl {
            &self.ctl
        }
        #[doc = "0x04 - Status register"]
        #[inline(always)]
        pub const fn stat(&self) -> &Stat {
            &self.stat
        }
        #[doc = "0x08 - Transmit status register"]
        #[inline(always)]
        pub const fn tstat(&self) -> &Tstat {
            &self.tstat
        }
        #[doc = "0x0c - Receive message FIFO0 register"]
        #[inline(always)]
        pub const fn rfifo0(&self) -> &Rfifo0 {
            &self.rfifo0
        }
        #[doc = "0x10 - Receive message FIFO1 register"]
        #[inline(always)]
        pub const fn rfifo1(&self) -> &Rfifo1 {
            &self.rfifo1
        }
        #[doc = "0x14 - Interrupt enable register"]
        #[inline(always)]
        pub const fn inten(&self) -> &Inten {
            &self.inten
        }
        #[doc = "0x18 - Error register"]
        #[inline(always)]
        pub const fn err(&self) -> &Err {
            &self.err
        }
        #[doc = "0x1c - Bit timing register"]
        #[inline(always)]
        pub const fn bt(&self) -> &Bt {
            &self.bt
        }
        #[doc = "0x180 - Transmit mailbox identifier register 0"]
        #[inline(always)]
        pub const fn tmi0(&self) -> &Tmi0 {
            &self.tmi0
        }
        #[doc = "0x184 - Transmit mailbox property register 0"]
        #[inline(always)]
        pub const fn tmp0(&self) -> &Tmp0 {
            &self.tmp0
        }
        #[doc = "0x188 - Transmit mailbox data0 register"]
        #[inline(always)]
        pub const fn tmdata00(&self) -> &Tmdata00 {
            &self.tmdata00
        }
        #[doc = "0x18c - Transmit mailbox data1 register"]
        #[inline(always)]
        pub const fn tmdata10(&self) -> &Tmdata10 {
            &self.tmdata10
        }
        #[doc = "0x190 - Transmit mailbox identifier register 1"]
        #[inline(always)]
        pub const fn tmi1(&self) -> &Tmi1 {
            &self.tmi1
        }
        #[doc = "0x194 - Transmit mailbox property register 1"]
        #[inline(always)]
        pub const fn tmp1(&self) -> &Tmp1 {
            &self.tmp1
        }
        #[doc = "0x198 - Transmit mailbox data0 register"]
        #[inline(always)]
        pub const fn tmdata01(&self) -> &Tmdata01 {
            &self.tmdata01
        }
        #[doc = "0x19c - Transmit mailbox data1 register"]
        #[inline(always)]
        pub const fn tmdata11(&self) -> &Tmdata11 {
            &self.tmdata11
        }
        #[doc = "0x1a0 - Transmit mailbox identifier register 2"]
        #[inline(always)]
        pub const fn tmi2(&self) -> &Tmi2 {
            &self.tmi2
        }
        #[doc = "0x1a4 - Transmit mailbox property register 2"]
        #[inline(always)]
        pub const fn tmp2(&self) -> &Tmp2 {
            &self.tmp2
        }
        #[doc = "0x1a8 - Transmit mailbox data0 register"]
        #[inline(always)]
        pub const fn tmdata02(&self) -> &Tmdata02 {
            &self.tmdata02
        }
        #[doc = "0x1ac - Transmit mailbox data1 register"]
        #[inline(always)]
        pub const fn tmdata12(&self) -> &Tmdata12 {
            &self.tmdata12
        }
        #[doc = "0x1b0 - Receive FIFO mailbox identifier register"]
        #[inline(always)]
        pub const fn rfifomi0(&self) -> &Rfifomi0 {
            &self.rfifomi0
        }
        #[doc = "0x1b4 - Receive FIFO0 mailbox property register"]
        #[inline(always)]
        pub const fn rfifomp0(&self) -> &Rfifomp0 {
            &self.rfifomp0
        }
        #[doc = "0x1b8 - Receive FIFO0 mailbox data0 register"]
        #[inline(always)]
        pub const fn rfifomdata00(&self) -> &Rfifomdata00 {
            &self.rfifomdata00
        }
        #[doc = "0x1bc - Receive FIFO0 mailbox data1 register"]
        #[inline(always)]
        pub const fn rfifomdata10(&self) -> &Rfifomdata10 {
            &self.rfifomdata10
        }
        #[doc = "0x1c0 - Receive FIFO1 mailbox identifier register"]
        #[inline(always)]
        pub const fn rfifomi1(&self) -> &Rfifomi1 {
            &self.rfifomi1
        }
        #[doc = "0x1c4 - Receive FIFO1 mailbox property register"]
        #[inline(always)]
        pub const fn rfifomp1(&self) -> &Rfifomp1 {
            &self.rfifomp1
        }
        #[doc = "0x1c8 - Receive FIFO1 mailbox data0 register"]
        #[inline(always)]
        pub const fn rfifomdata01(&self) -> &Rfifomdata01 {
            &self.rfifomdata01
        }
        #[doc = "0x1cc - Receive FIFO1 mailbox data1 register"]
        #[inline(always)]
        pub const fn rfifomdata11(&self) -> &Rfifomdata11 {
            &self.rfifomdata11
        }
        #[doc = "0x200 - Filter control register"]
        #[inline(always)]
        pub const fn fctl(&self) -> &Fctl {
            &self.fctl
        }
        #[doc = "0x204 - Filter mode configuration register"]
        #[inline(always)]
        pub const fn fmcfg(&self) -> &Fmcfg {
            &self.fmcfg
        }
        #[doc = "0x20c - Filter scale configuration register"]
        #[inline(always)]
        pub const fn fscfg(&self) -> &Fscfg {
            &self.fscfg
        }
        #[doc = "0x214 - Filter associated FIFO register"]
        #[inline(always)]
        pub const fn fafifo(&self) -> &Fafifo {
            &self.fafifo
        }
        #[doc = "0x21c - Filter working register"]
        #[inline(always)]
        pub const fn fw(&self) -> &Fw {
            &self.fw
        }
        #[doc = "0x240 - Filter 0 data 0 register"]
        #[inline(always)]
        pub const fn f0data0(&self) -> &F0data0 {
            &self.f0data0
        }
        #[doc = "0x244 - Filter 0 data 1 register"]
        #[inline(always)]
        pub const fn f0data1(&self) -> &F0data1 {
            &self.f0data1
        }
        #[doc = "0x248 - Filter 1 data 0 register"]
        #[inline(always)]
        pub const fn f1data0(&self) -> &F1data0 {
            &self.f1data0
        }
        #[doc = "0x24c - Filter 1 data 1 register"]
        #[inline(always)]
        pub const fn f1data1(&self) -> &F1data1 {
            &self.f1data1
        }
        #[doc = "0x250 - Filter 2 data 0 register"]
        #[inline(always)]
        pub const fn f2data0(&self) -> &F2data0 {
            &self.f2data0
        }
        #[doc = "0x254 - Filter 2 data 1 register"]
        #[inline(always)]
        pub const fn f2data1(&self) -> &F2data1 {
            &self.f2data1
        }
        #[doc = "0x258 - Filter 3 data 0 register"]
        #[inline(always)]
        pub const fn f3data0(&self) -> &F3data0 {
            &self.f3data0
        }
        #[doc = "0x25c - Filter 3 data 1 register"]
        #[inline(always)]
        pub const fn f3data1(&self) -> &F3data1 {
            &self.f3data1
        }
        #[doc = "0x260 - Filter 4 data 0 register"]
        #[inline(always)]
        pub const fn f4data0(&self) -> &F4data0 {
            &self.f4data0
        }
        #[doc = "0x264 - Filter 4 data 1 register"]
        #[inline(always)]
        pub const fn f4data1(&self) -> &F4data1 {
            &self.f4data1
        }
        #[doc = "0x268 - Filter 5 data 0 register"]
        #[inline(always)]
        pub const fn f5data0(&self) -> &F5data0 {
            &self.f5data0
        }
        #[doc = "0x26c - Filter 5 data 1 register"]
        #[inline(always)]
        pub const fn f5data1(&self) -> &F5data1 {
            &self.f5data1
        }
        #[doc = "0x270 - Filter 6 data 0 register"]
        #[inline(always)]
        pub const fn f6data0(&self) -> &F6data0 {
            &self.f6data0
        }
        #[doc = "0x274 - Filter 6 data 1 register"]
        #[inline(always)]
        pub const fn f6data1(&self) -> &F6data1 {
            &self.f6data1
        }
        #[doc = "0x278 - Filter 7 data 0 register"]
        #[inline(always)]
        pub const fn f7data0(&self) -> &F7data0 {
            &self.f7data0
        }
        #[doc = "0x27c - Filter 7 data 1 register"]
        #[inline(always)]
        pub const fn f7data1(&self) -> &F7data1 {
            &self.f7data1
        }
        #[doc = "0x280 - Filter 8 data 0 register"]
        #[inline(always)]
        pub const fn f8data0(&self) -> &F8data0 {
            &self.f8data0
        }
        #[doc = "0x284 - Filter 8 data 1 register"]
        #[inline(always)]
        pub const fn f8data1(&self) -> &F8data1 {
            &self.f8data1
        }
        #[doc = "0x288 - Filter 9 data 0 register"]
        #[inline(always)]
        pub const fn f9data0(&self) -> &F9data0 {
            &self.f9data0
        }
        #[doc = "0x28c - Filter 9 data 1 register"]
        #[inline(always)]
        pub const fn f9data1(&self) -> &F9data1 {
            &self.f9data1
        }
        #[doc = "0x290 - Filter 10 data 0 register"]
        #[inline(always)]
        pub const fn f10data0(&self) -> &F10data0 {
            &self.f10data0
        }
        #[doc = "0x294 - Filter 10 data 1 register"]
        #[inline(always)]
        pub const fn f10data1(&self) -> &F10data1 {
            &self.f10data1
        }
        #[doc = "0x298 - Filter 11 data 0 register"]
        #[inline(always)]
        pub const fn f11data0(&self) -> &F11data0 {
            &self.f11data0
        }
        #[doc = "0x29c - Filter 11 data 1 register"]
        #[inline(always)]
        pub const fn f11data1(&self) -> &F11data1 {
            &self.f11data1
        }
        #[doc = "0x2a0 - Filter 12 data 0 register"]
        #[inline(always)]
        pub const fn f12data0(&self) -> &F12data0 {
            &self.f12data0
        }
        #[doc = "0x2a4 - Filter 12 data 1 register"]
        #[inline(always)]
        pub const fn f12data1(&self) -> &F12data1 {
            &self.f12data1
        }
        #[doc = "0x2a8 - Filter 13 data 0 register"]
        #[inline(always)]
        pub const fn f13data0(&self) -> &F13data0 {
            &self.f13data0
        }
        #[doc = "0x2ac - Filter 13 data 1 register"]
        #[inline(always)]
        pub const fn f13data1(&self) -> &F13data1 {
            &self.f13data1
        }
        #[doc = "0x2b0 - Filter 14 data 0 register"]
        #[inline(always)]
        pub const fn f14data0(&self) -> &F14data0 {
            &self.f14data0
        }
        #[doc = "0x2b4 - Filter 14 data 1 register"]
        #[inline(always)]
        pub const fn f14data1(&self) -> &F14data1 {
            &self.f14data1
        }
        #[doc = "0x2b8 - Filter 15 data 0 register"]
        #[inline(always)]
        pub const fn f15data0(&self) -> &F15data0 {
            &self.f15data0
        }
        #[doc = "0x2bc - Filter 15 data 1 register"]
        #[inline(always)]
        pub const fn f15data1(&self) -> &F15data1 {
            &self.f15data1
        }
        #[doc = "0x2c0 - Filter 16 data 0 register"]
        #[inline(always)]
        pub const fn f16data0(&self) -> &F16data0 {
            &self.f16data0
        }
        #[doc = "0x2c4 - Filter 16 data 1 register"]
        #[inline(always)]
        pub const fn f16data1(&self) -> &F16data1 {
            &self.f16data1
        }
        #[doc = "0x2c8 - Filter 17 data 0 register"]
        #[inline(always)]
        pub const fn f17data0(&self) -> &F17data0 {
            &self.f17data0
        }
        #[doc = "0x2cc - Filter 17 data 1 register"]
        #[inline(always)]
        pub const fn f17data1(&self) -> &F17data1 {
            &self.f17data1
        }
        #[doc = "0x2d0 - Filter 18 data 0 register"]
        #[inline(always)]
        pub const fn f18data0(&self) -> &F18data0 {
            &self.f18data0
        }
        #[doc = "0x2d4 - Filter 18 data 1 register"]
        #[inline(always)]
        pub const fn f18data1(&self) -> &F18data1 {
            &self.f18data1
        }
        #[doc = "0x2d8 - Filter 19 data 0 register"]
        #[inline(always)]
        pub const fn f19data0(&self) -> &F19data0 {
            &self.f19data0
        }
        #[doc = "0x2dc - Filter 19 data 1 register"]
        #[inline(always)]
        pub const fn f19data1(&self) -> &F19data1 {
            &self.f19data1
        }
        #[doc = "0x2e0 - Filter 20 data 0 register"]
        #[inline(always)]
        pub const fn f20data0(&self) -> &F20data0 {
            &self.f20data0
        }
        #[doc = "0x2e4 - Filter 20 data 1 register"]
        #[inline(always)]
        pub const fn f20data1(&self) -> &F20data1 {
            &self.f20data1
        }
        #[doc = "0x2e8 - Filter 21 data 0 register"]
        #[inline(always)]
        pub const fn f21data0(&self) -> &F21data0 {
            &self.f21data0
        }
        #[doc = "0x2ec - Filter 21 data 1 register"]
        #[inline(always)]
        pub const fn f21data1(&self) -> &F21data1 {
            &self.f21data1
        }
        #[doc = "0x2f0 - Filter 22 data 0 register"]
        #[inline(always)]
        pub const fn f22data0(&self) -> &F22data0 {
            &self.f22data0
        }
        #[doc = "0x2f4 - Filter 22 data 1 register"]
        #[inline(always)]
        pub const fn f22data1(&self) -> &F22data1 {
            &self.f22data1
        }
        #[doc = "0x2f8 - Filter 23 data 0 register"]
        #[inline(always)]
        pub const fn f23data0(&self) -> &F23data0 {
            &self.f23data0
        }
        #[doc = "0x2fc - Filter 23 data 1 register"]
        #[inline(always)]
        pub const fn f23data1(&self) -> &F23data1 {
            &self.f23data1
        }
        #[doc = "0x300 - Filter 24 data 0 register"]
        #[inline(always)]
        pub const fn f24data0(&self) -> &F24data0 {
            &self.f24data0
        }
        #[doc = "0x304 - Filter 24 data 1 register"]
        #[inline(always)]
        pub const fn f24data1(&self) -> &F24data1 {
            &self.f24data1
        }
        #[doc = "0x308 - Filter 25 data 0 register"]
        #[inline(always)]
        pub const fn f25data0(&self) -> &F25data0 {
            &self.f25data0
        }
        #[doc = "0x30c - Filter 25 data 1 register"]
        #[inline(always)]
        pub const fn f25data1(&self) -> &F25data1 {
            &self.f25data1
        }
        #[doc = "0x310 - Filter 26 data 0 register"]
        #[inline(always)]
        pub const fn f26data0(&self) -> &F26data0 {
            &self.f26data0
        }
        #[doc = "0x314 - Filter 26 data 1 register"]
        #[inline(always)]
        pub const fn f26data1(&self) -> &F26data1 {
            &self.f26data1
        }
        #[doc = "0x318 - Filter 27 data 0 register"]
        #[inline(always)]
        pub const fn f27data0(&self) -> &F27data0 {
            &self.f27data0
        }
        #[doc = "0x31c - Filter 27 data 1 register"]
        #[inline(always)]
        pub const fn f27data1(&self) -> &F27data1 {
            &self.f27data1
        }
    }
    #[doc = "CTL (rw) register accessor: Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl`]
module"]
    #[doc(alias = "CTL")]
    pub type Ctl = crate::Reg<ctl::CtlSpec>;
    #[doc = "Control register"]
    pub mod ctl {
        #[doc = "Register `CTL` reader"]
        pub type R = crate::R<CtlSpec>;
        #[doc = "Register `CTL` writer"]
        pub type W = crate::W<CtlSpec>;
        #[doc = "Field `IWMOD` reader - Initial working mode"]
        pub type IwmodR = crate::BitReader;
        #[doc = "Field `IWMOD` writer - Initial working mode"]
        pub type IwmodW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SLPWMOD` reader - Sleep working mode"]
        pub type SlpwmodR = crate::BitReader;
        #[doc = "Field `SLPWMOD` writer - Sleep working mode"]
        pub type SlpwmodW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TFO` reader - Transmit FIFO order"]
        pub type TfoR = crate::BitReader;
        #[doc = "Field `TFO` writer - Transmit FIFO order"]
        pub type TfoW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFOD` reader - Receive FIFO overwrite disable"]
        pub type RfodR = crate::BitReader;
        #[doc = "Field `RFOD` writer - Receive FIFO overwrite disable"]
        pub type RfodW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ARD` reader - Automatic retransmission disable"]
        pub type ArdR = crate::BitReader;
        #[doc = "Field `ARD` writer - Automatic retransmission disable"]
        pub type ArdW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `AWU` reader - Automatic wakeup"]
        pub type AwuR = crate::BitReader;
        #[doc = "Field `AWU` writer - Automatic wakeup"]
        pub type AwuW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ABOR` reader - Automatic bus-off recovery"]
        pub type AborR = crate::BitReader;
        #[doc = "Field `ABOR` writer - Automatic bus-off recovery"]
        pub type AborW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TTC` reader - Time-triggered communication"]
        pub type TtcR = crate::BitReader;
        #[doc = "Field `TTC` writer - Time-triggered communication"]
        pub type TtcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWRST` reader - Software reset"]
        pub type SwrstR = crate::BitReader;
        #[doc = "Field `SWRST` writer - Software reset"]
        pub type SwrstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DFZ` reader - Debug freeze"]
        pub type DfzR = crate::BitReader;
        #[doc = "Field `DFZ` writer - Debug freeze"]
        pub type DfzW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Initial working mode"]
            #[inline(always)]
            pub fn iwmod(&self) -> IwmodR {
                IwmodR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Sleep working mode"]
            #[inline(always)]
            pub fn slpwmod(&self) -> SlpwmodR {
                SlpwmodR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Transmit FIFO order"]
            #[inline(always)]
            pub fn tfo(&self) -> TfoR {
                TfoR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Receive FIFO overwrite disable"]
            #[inline(always)]
            pub fn rfod(&self) -> RfodR {
                RfodR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Automatic retransmission disable"]
            #[inline(always)]
            pub fn ard(&self) -> ArdR {
                ArdR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Automatic wakeup"]
            #[inline(always)]
            pub fn awu(&self) -> AwuR {
                AwuR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Automatic bus-off recovery"]
            #[inline(always)]
            pub fn abor(&self) -> AborR {
                AborR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Time-triggered communication"]
            #[inline(always)]
            pub fn ttc(&self) -> TtcR {
                TtcR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 15 - Software reset"]
            #[inline(always)]
            pub fn swrst(&self) -> SwrstR {
                SwrstR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Debug freeze"]
            #[inline(always)]
            pub fn dfz(&self) -> DfzR {
                DfzR::new(((self.bits >> 16) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Initial working mode"]
            #[inline(always)]
            #[must_use]
            pub fn iwmod(&mut self) -> IwmodW<CtlSpec> {
                IwmodW::new(self, 0)
            }
            #[doc = "Bit 1 - Sleep working mode"]
            #[inline(always)]
            #[must_use]
            pub fn slpwmod(&mut self) -> SlpwmodW<CtlSpec> {
                SlpwmodW::new(self, 1)
            }
            #[doc = "Bit 2 - Transmit FIFO order"]
            #[inline(always)]
            #[must_use]
            pub fn tfo(&mut self) -> TfoW<CtlSpec> {
                TfoW::new(self, 2)
            }
            #[doc = "Bit 3 - Receive FIFO overwrite disable"]
            #[inline(always)]
            #[must_use]
            pub fn rfod(&mut self) -> RfodW<CtlSpec> {
                RfodW::new(self, 3)
            }
            #[doc = "Bit 4 - Automatic retransmission disable"]
            #[inline(always)]
            #[must_use]
            pub fn ard(&mut self) -> ArdW<CtlSpec> {
                ArdW::new(self, 4)
            }
            #[doc = "Bit 5 - Automatic wakeup"]
            #[inline(always)]
            #[must_use]
            pub fn awu(&mut self) -> AwuW<CtlSpec> {
                AwuW::new(self, 5)
            }
            #[doc = "Bit 6 - Automatic bus-off recovery"]
            #[inline(always)]
            #[must_use]
            pub fn abor(&mut self) -> AborW<CtlSpec> {
                AborW::new(self, 6)
            }
            #[doc = "Bit 7 - Time-triggered communication"]
            #[inline(always)]
            #[must_use]
            pub fn ttc(&mut self) -> TtcW<CtlSpec> {
                TtcW::new(self, 7)
            }
            #[doc = "Bit 15 - Software reset"]
            #[inline(always)]
            #[must_use]
            pub fn swrst(&mut self) -> SwrstW<CtlSpec> {
                SwrstW::new(self, 15)
            }
            #[doc = "Bit 16 - Debug freeze"]
            #[inline(always)]
            #[must_use]
            pub fn dfz(&mut self) -> DfzW<CtlSpec> {
                DfzW::new(self, 16)
            }
        }
        #[doc = "Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CtlSpec;
        impl crate::RegisterSpec for CtlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl::R`](R) reader structure"]
        impl crate::Readable for CtlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ctl::W`](W) writer structure"]
        impl crate::Writable for CtlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL to value 0x0001_0002"]
        impl crate::Resettable for CtlSpec {
            const RESET_VALUE: u32 = 0x0001_0002;
        }
    }
    #[doc = "STAT (rw) register accessor: Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat`]
module"]
    #[doc(alias = "STAT")]
    pub type Stat = crate::Reg<stat::StatSpec>;
    #[doc = "Status register"]
    pub mod stat {
        #[doc = "Register `STAT` reader"]
        pub type R = crate::R<StatSpec>;
        #[doc = "Register `STAT` writer"]
        pub type W = crate::W<StatSpec>;
        #[doc = "Field `IWS` reader - Initial working state"]
        pub type IwsR = crate::BitReader;
        #[doc = "Field `SLPWS` reader - Sleep working state"]
        pub type SlpwsR = crate::BitReader;
        #[doc = "Field `ERRIF` reader - Error interrupt flag"]
        pub type ErrifR = crate::BitReader;
        #[doc = "Field `ERRIF` writer - Error interrupt flag"]
        pub type ErrifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WUIF` reader - Status change interrupt flag of wakeup from sleep working mode"]
        pub type WuifR = crate::BitReader;
        #[doc = "Field `WUIF` writer - Status change interrupt flag of wakeup from sleep working mode"]
        pub type WuifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SLPIF` reader - Status change interrupt flag of sleep working mode entering"]
        pub type SlpifR = crate::BitReader;
        #[doc = "Field `SLPIF` writer - Status change interrupt flag of sleep working mode entering"]
        pub type SlpifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TS` reader - Transmitting state"]
        pub type TsR = crate::BitReader;
        #[doc = "Field `RS` reader - Receiving state"]
        pub type RsR = crate::BitReader;
        #[doc = "Field `LASTRX` reader - Last sample value of RX pin"]
        pub type LastrxR = crate::BitReader;
        #[doc = "Field `RXL` reader - RX level"]
        pub type RxlR = crate::BitReader;
        impl R {
            #[doc = "Bit 0 - Initial working state"]
            #[inline(always)]
            pub fn iws(&self) -> IwsR {
                IwsR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Sleep working state"]
            #[inline(always)]
            pub fn slpws(&self) -> SlpwsR {
                SlpwsR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Error interrupt flag"]
            #[inline(always)]
            pub fn errif(&self) -> ErrifR {
                ErrifR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Status change interrupt flag of wakeup from sleep working mode"]
            #[inline(always)]
            pub fn wuif(&self) -> WuifR {
                WuifR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Status change interrupt flag of sleep working mode entering"]
            #[inline(always)]
            pub fn slpif(&self) -> SlpifR {
                SlpifR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 8 - Transmitting state"]
            #[inline(always)]
            pub fn ts(&self) -> TsR {
                TsR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Receiving state"]
            #[inline(always)]
            pub fn rs(&self) -> RsR {
                RsR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Last sample value of RX pin"]
            #[inline(always)]
            pub fn lastrx(&self) -> LastrxR {
                LastrxR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - RX level"]
            #[inline(always)]
            pub fn rxl(&self) -> RxlR {
                RxlR::new(((self.bits >> 11) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - Error interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn errif(&mut self) -> ErrifW<StatSpec> {
                ErrifW::new(self, 2)
            }
            #[doc = "Bit 3 - Status change interrupt flag of wakeup from sleep working mode"]
            #[inline(always)]
            #[must_use]
            pub fn wuif(&mut self) -> WuifW<StatSpec> {
                WuifW::new(self, 3)
            }
            #[doc = "Bit 4 - Status change interrupt flag of sleep working mode entering"]
            #[inline(always)]
            #[must_use]
            pub fn slpif(&mut self) -> SlpifW<StatSpec> {
                SlpifW::new(self, 4)
            }
        }
        #[doc = "Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct StatSpec;
        impl crate::RegisterSpec for StatSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat::R`](R) reader structure"]
        impl crate::Readable for StatSpec {}
        #[doc = "`write(|w| ..)` method takes [`stat::W`](W) writer structure"]
        impl crate::Writable for StatSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets STAT to value 0x0c02"]
        impl crate::Resettable for StatSpec {
            const RESET_VALUE: u32 = 0x0c02;
        }
    }
    #[doc = "TSTAT (rw) register accessor: Transmit status register\n\nYou can [`read`](crate::Reg::read) this register and get [`tstat::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tstat::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tstat`]
module"]
    #[doc(alias = "TSTAT")]
    pub type Tstat = crate::Reg<tstat::TstatSpec>;
    #[doc = "Transmit status register"]
    pub mod tstat {
        #[doc = "Register `TSTAT` reader"]
        pub type R = crate::R<TstatSpec>;
        #[doc = "Register `TSTAT` writer"]
        pub type W = crate::W<TstatSpec>;
        #[doc = "Field `MTF0` reader - Mailbox 0 transmit finished"]
        pub type Mtf0R = crate::BitReader;
        #[doc = "Field `MTF0` writer - Mailbox 0 transmit finished"]
        pub type Mtf0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MTFNERR0` reader - Mailbox 0 transmit finished and no error"]
        pub type Mtfnerr0R = crate::BitReader;
        #[doc = "Field `MTFNERR0` writer - Mailbox 0 transmit finished and no error"]
        pub type Mtfnerr0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MAL0` reader - Mailbox 0 arbitration lost"]
        pub type Mal0R = crate::BitReader;
        #[doc = "Field `MAL0` writer - Mailbox 0 arbitration lost"]
        pub type Mal0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MTE0` reader - Mailbox 0 transmit error"]
        pub type Mte0R = crate::BitReader;
        #[doc = "Field `MTE0` writer - Mailbox 0 transmit error"]
        pub type Mte0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MST0` reader - Mailbox 0 stop transmitting"]
        pub type Mst0R = crate::BitReader;
        #[doc = "Field `MST0` writer - Mailbox 0 stop transmitting"]
        pub type Mst0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MTF1` reader - Mailbox 1 transmit finished"]
        pub type Mtf1R = crate::BitReader;
        #[doc = "Field `MTF1` writer - Mailbox 1 transmit finished"]
        pub type Mtf1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MTFNERR1` reader - Mailbox 1 transmit finished and no error"]
        pub type Mtfnerr1R = crate::BitReader;
        #[doc = "Field `MTFNERR1` writer - Mailbox 1 transmit finished and no error"]
        pub type Mtfnerr1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MAL1` reader - Mailbox 1 arbitration lost"]
        pub type Mal1R = crate::BitReader;
        #[doc = "Field `MAL1` writer - Mailbox 1 arbitration lost"]
        pub type Mal1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MTE1` reader - Mailbox 1 transmit error"]
        pub type Mte1R = crate::BitReader;
        #[doc = "Field `MTE1` writer - Mailbox 1 transmit error"]
        pub type Mte1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MST1` reader - Mailbox 1 stop transmitting"]
        pub type Mst1R = crate::BitReader;
        #[doc = "Field `MST1` writer - Mailbox 1 stop transmitting"]
        pub type Mst1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MTF2` reader - Mailbox 2 transmit finished"]
        pub type Mtf2R = crate::BitReader;
        #[doc = "Field `MTF2` writer - Mailbox 2 transmit finished"]
        pub type Mtf2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MTFNERR2` reader - Mailbox 2 transmit finished and no error"]
        pub type Mtfnerr2R = crate::BitReader;
        #[doc = "Field `MTFNERR2` writer - Mailbox 2 transmit finished and no error"]
        pub type Mtfnerr2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MAL2` reader - Mailbox 2 arbitration lost"]
        pub type Mal2R = crate::BitReader;
        #[doc = "Field `MAL2` writer - Mailbox 2 arbitration lost"]
        pub type Mal2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MTE2` reader - Mailbox 2 transmit error"]
        pub type Mte2R = crate::BitReader;
        #[doc = "Field `MTE2` writer - Mailbox 2 transmit error"]
        pub type Mte2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MST2` reader - Mailbox 2 stop transmitting"]
        pub type Mst2R = crate::BitReader;
        #[doc = "Field `MST2` writer - Mailbox 2 stop transmitting"]
        pub type Mst2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NUM` reader - number of the transmit FIFO mailbox in which the frame will be transmitted if at least one mailbox is empty"]
        pub type NumR = crate::FieldReader;
        #[doc = "Field `TME0` reader - Transmit mailbox 0 empty"]
        pub type Tme0R = crate::BitReader;
        #[doc = "Field `TME1` reader - Transmit mailbox 1 empty"]
        pub type Tme1R = crate::BitReader;
        #[doc = "Field `TME2` reader - Transmit mailbox 2 empty"]
        pub type Tme2R = crate::BitReader;
        #[doc = "Field `TMLS0` reader - Transmit mailbox 0 last sending in transmit FIFO"]
        pub type Tmls0R = crate::BitReader;
        #[doc = "Field `TMLS1` reader - Transmit mailbox 1 last sending in transmit FIFO"]
        pub type Tmls1R = crate::BitReader;
        #[doc = "Field `TMLS2` reader - Transmit mailbox 2 last sending in transmit FIFO"]
        pub type Tmls2R = crate::BitReader;
        impl R {
            #[doc = "Bit 0 - Mailbox 0 transmit finished"]
            #[inline(always)]
            pub fn mtf0(&self) -> Mtf0R {
                Mtf0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Mailbox 0 transmit finished and no error"]
            #[inline(always)]
            pub fn mtfnerr0(&self) -> Mtfnerr0R {
                Mtfnerr0R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Mailbox 0 arbitration lost"]
            #[inline(always)]
            pub fn mal0(&self) -> Mal0R {
                Mal0R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Mailbox 0 transmit error"]
            #[inline(always)]
            pub fn mte0(&self) -> Mte0R {
                Mte0R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 7 - Mailbox 0 stop transmitting"]
            #[inline(always)]
            pub fn mst0(&self) -> Mst0R {
                Mst0R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Mailbox 1 transmit finished"]
            #[inline(always)]
            pub fn mtf1(&self) -> Mtf1R {
                Mtf1R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Mailbox 1 transmit finished and no error"]
            #[inline(always)]
            pub fn mtfnerr1(&self) -> Mtfnerr1R {
                Mtfnerr1R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Mailbox 1 arbitration lost"]
            #[inline(always)]
            pub fn mal1(&self) -> Mal1R {
                Mal1R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Mailbox 1 transmit error"]
            #[inline(always)]
            pub fn mte1(&self) -> Mte1R {
                Mte1R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 15 - Mailbox 1 stop transmitting"]
            #[inline(always)]
            pub fn mst1(&self) -> Mst1R {
                Mst1R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Mailbox 2 transmit finished"]
            #[inline(always)]
            pub fn mtf2(&self) -> Mtf2R {
                Mtf2R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Mailbox 2 transmit finished and no error"]
            #[inline(always)]
            pub fn mtfnerr2(&self) -> Mtfnerr2R {
                Mtfnerr2R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Mailbox 2 arbitration lost"]
            #[inline(always)]
            pub fn mal2(&self) -> Mal2R {
                Mal2R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Mailbox 2 transmit error"]
            #[inline(always)]
            pub fn mte2(&self) -> Mte2R {
                Mte2R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 23 - Mailbox 2 stop transmitting"]
            #[inline(always)]
            pub fn mst2(&self) -> Mst2R {
                Mst2R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bits 24:25 - number of the transmit FIFO mailbox in which the frame will be transmitted if at least one mailbox is empty"]
            #[inline(always)]
            pub fn num(&self) -> NumR {
                NumR::new(((self.bits >> 24) & 3) as u8)
            }
            #[doc = "Bit 26 - Transmit mailbox 0 empty"]
            #[inline(always)]
            pub fn tme0(&self) -> Tme0R {
                Tme0R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Transmit mailbox 1 empty"]
            #[inline(always)]
            pub fn tme1(&self) -> Tme1R {
                Tme1R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Transmit mailbox 2 empty"]
            #[inline(always)]
            pub fn tme2(&self) -> Tme2R {
                Tme2R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Transmit mailbox 0 last sending in transmit FIFO"]
            #[inline(always)]
            pub fn tmls0(&self) -> Tmls0R {
                Tmls0R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Transmit mailbox 1 last sending in transmit FIFO"]
            #[inline(always)]
            pub fn tmls1(&self) -> Tmls1R {
                Tmls1R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Transmit mailbox 2 last sending in transmit FIFO"]
            #[inline(always)]
            pub fn tmls2(&self) -> Tmls2R {
                Tmls2R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Mailbox 0 transmit finished"]
            #[inline(always)]
            #[must_use]
            pub fn mtf0(&mut self) -> Mtf0W<TstatSpec> {
                Mtf0W::new(self, 0)
            }
            #[doc = "Bit 1 - Mailbox 0 transmit finished and no error"]
            #[inline(always)]
            #[must_use]
            pub fn mtfnerr0(&mut self) -> Mtfnerr0W<TstatSpec> {
                Mtfnerr0W::new(self, 1)
            }
            #[doc = "Bit 2 - Mailbox 0 arbitration lost"]
            #[inline(always)]
            #[must_use]
            pub fn mal0(&mut self) -> Mal0W<TstatSpec> {
                Mal0W::new(self, 2)
            }
            #[doc = "Bit 3 - Mailbox 0 transmit error"]
            #[inline(always)]
            #[must_use]
            pub fn mte0(&mut self) -> Mte0W<TstatSpec> {
                Mte0W::new(self, 3)
            }
            #[doc = "Bit 7 - Mailbox 0 stop transmitting"]
            #[inline(always)]
            #[must_use]
            pub fn mst0(&mut self) -> Mst0W<TstatSpec> {
                Mst0W::new(self, 7)
            }
            #[doc = "Bit 8 - Mailbox 1 transmit finished"]
            #[inline(always)]
            #[must_use]
            pub fn mtf1(&mut self) -> Mtf1W<TstatSpec> {
                Mtf1W::new(self, 8)
            }
            #[doc = "Bit 9 - Mailbox 1 transmit finished and no error"]
            #[inline(always)]
            #[must_use]
            pub fn mtfnerr1(&mut self) -> Mtfnerr1W<TstatSpec> {
                Mtfnerr1W::new(self, 9)
            }
            #[doc = "Bit 10 - Mailbox 1 arbitration lost"]
            #[inline(always)]
            #[must_use]
            pub fn mal1(&mut self) -> Mal1W<TstatSpec> {
                Mal1W::new(self, 10)
            }
            #[doc = "Bit 11 - Mailbox 1 transmit error"]
            #[inline(always)]
            #[must_use]
            pub fn mte1(&mut self) -> Mte1W<TstatSpec> {
                Mte1W::new(self, 11)
            }
            #[doc = "Bit 15 - Mailbox 1 stop transmitting"]
            #[inline(always)]
            #[must_use]
            pub fn mst1(&mut self) -> Mst1W<TstatSpec> {
                Mst1W::new(self, 15)
            }
            #[doc = "Bit 16 - Mailbox 2 transmit finished"]
            #[inline(always)]
            #[must_use]
            pub fn mtf2(&mut self) -> Mtf2W<TstatSpec> {
                Mtf2W::new(self, 16)
            }
            #[doc = "Bit 17 - Mailbox 2 transmit finished and no error"]
            #[inline(always)]
            #[must_use]
            pub fn mtfnerr2(&mut self) -> Mtfnerr2W<TstatSpec> {
                Mtfnerr2W::new(self, 17)
            }
            #[doc = "Bit 18 - Mailbox 2 arbitration lost"]
            #[inline(always)]
            #[must_use]
            pub fn mal2(&mut self) -> Mal2W<TstatSpec> {
                Mal2W::new(self, 18)
            }
            #[doc = "Bit 19 - Mailbox 2 transmit error"]
            #[inline(always)]
            #[must_use]
            pub fn mte2(&mut self) -> Mte2W<TstatSpec> {
                Mte2W::new(self, 19)
            }
            #[doc = "Bit 23 - Mailbox 2 stop transmitting"]
            #[inline(always)]
            #[must_use]
            pub fn mst2(&mut self) -> Mst2W<TstatSpec> {
                Mst2W::new(self, 23)
            }
        }
        #[doc = "Transmit status register\n\nYou can [`read`](crate::Reg::read) this register and get [`tstat::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tstat::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TstatSpec;
        impl crate::RegisterSpec for TstatSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tstat::R`](R) reader structure"]
        impl crate::Readable for TstatSpec {}
        #[doc = "`write(|w| ..)` method takes [`tstat::W`](W) writer structure"]
        impl crate::Writable for TstatSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TSTAT to value 0x1c00_0000"]
        impl crate::Resettable for TstatSpec {
            const RESET_VALUE: u32 = 0x1c00_0000;
        }
    }
    #[doc = "RFIFO0 (rw) register accessor: Receive message FIFO0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifo0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rfifo0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rfifo0`]
module"]
    #[doc(alias = "RFIFO0")]
    pub type Rfifo0 = crate::Reg<rfifo0::Rfifo0Spec>;
    #[doc = "Receive message FIFO0 register"]
    pub mod rfifo0 {
        #[doc = "Register `RFIFO0` reader"]
        pub type R = crate::R<Rfifo0Spec>;
        #[doc = "Register `RFIFO0` writer"]
        pub type W = crate::W<Rfifo0Spec>;
        #[doc = "Field `RFL0` reader - Receive FIFO0 length"]
        pub type Rfl0R = crate::FieldReader;
        #[doc = "Field `RFF0` reader - Receive FIFO0 full"]
        pub type Rff0R = crate::BitReader;
        #[doc = "Field `RFF0` writer - Receive FIFO0 full"]
        pub type Rff0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFO0` reader - Receive FIFO0 overfull"]
        pub type Rfo0R = crate::BitReader;
        #[doc = "Field `RFO0` writer - Receive FIFO0 overfull"]
        pub type Rfo0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFD0` reader - Receive FIFO0 dequeue"]
        pub type Rfd0R = crate::BitReader;
        #[doc = "Field `RFD0` writer - Receive FIFO0 dequeue"]
        pub type Rfd0W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:1 - Receive FIFO0 length"]
            #[inline(always)]
            pub fn rfl0(&self) -> Rfl0R {
                Rfl0R::new((self.bits & 3) as u8)
            }
            #[doc = "Bit 3 - Receive FIFO0 full"]
            #[inline(always)]
            pub fn rff0(&self) -> Rff0R {
                Rff0R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Receive FIFO0 overfull"]
            #[inline(always)]
            pub fn rfo0(&self) -> Rfo0R {
                Rfo0R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Receive FIFO0 dequeue"]
            #[inline(always)]
            pub fn rfd0(&self) -> Rfd0R {
                Rfd0R::new(((self.bits >> 5) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - Receive FIFO0 full"]
            #[inline(always)]
            #[must_use]
            pub fn rff0(&mut self) -> Rff0W<Rfifo0Spec> {
                Rff0W::new(self, 3)
            }
            #[doc = "Bit 4 - Receive FIFO0 overfull"]
            #[inline(always)]
            #[must_use]
            pub fn rfo0(&mut self) -> Rfo0W<Rfifo0Spec> {
                Rfo0W::new(self, 4)
            }
            #[doc = "Bit 5 - Receive FIFO0 dequeue"]
            #[inline(always)]
            #[must_use]
            pub fn rfd0(&mut self) -> Rfd0W<Rfifo0Spec> {
                Rfd0W::new(self, 5)
            }
        }
        #[doc = "Receive message FIFO0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifo0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rfifo0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rfifo0Spec;
        impl crate::RegisterSpec for Rfifo0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rfifo0::R`](R) reader structure"]
        impl crate::Readable for Rfifo0Spec {}
        #[doc = "`write(|w| ..)` method takes [`rfifo0::W`](W) writer structure"]
        impl crate::Writable for Rfifo0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets RFIFO0 to value 0"]
        impl crate::Resettable for Rfifo0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RFIFO1 (rw) register accessor: Receive message FIFO1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifo1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rfifo1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rfifo1`]
module"]
    #[doc(alias = "RFIFO1")]
    pub type Rfifo1 = crate::Reg<rfifo1::Rfifo1Spec>;
    #[doc = "Receive message FIFO1 register"]
    pub mod rfifo1 {
        #[doc = "Register `RFIFO1` reader"]
        pub type R = crate::R<Rfifo1Spec>;
        #[doc = "Register `RFIFO1` writer"]
        pub type W = crate::W<Rfifo1Spec>;
        #[doc = "Field `RFL1` reader - Receive FIFO1 length"]
        pub type Rfl1R = crate::FieldReader;
        #[doc = "Field `RFF1` reader - Receive FIFO1 full"]
        pub type Rff1R = crate::BitReader;
        #[doc = "Field `RFF1` writer - Receive FIFO1 full"]
        pub type Rff1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFO1` reader - Receive FIFO1 overfull"]
        pub type Rfo1R = crate::BitReader;
        #[doc = "Field `RFO1` writer - Receive FIFO1 overfull"]
        pub type Rfo1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFD1` reader - Receive FIFO1 dequeue"]
        pub type Rfd1R = crate::BitReader;
        #[doc = "Field `RFD1` writer - Receive FIFO1 dequeue"]
        pub type Rfd1W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:1 - Receive FIFO1 length"]
            #[inline(always)]
            pub fn rfl1(&self) -> Rfl1R {
                Rfl1R::new((self.bits & 3) as u8)
            }
            #[doc = "Bit 3 - Receive FIFO1 full"]
            #[inline(always)]
            pub fn rff1(&self) -> Rff1R {
                Rff1R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Receive FIFO1 overfull"]
            #[inline(always)]
            pub fn rfo1(&self) -> Rfo1R {
                Rfo1R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Receive FIFO1 dequeue"]
            #[inline(always)]
            pub fn rfd1(&self) -> Rfd1R {
                Rfd1R::new(((self.bits >> 5) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - Receive FIFO1 full"]
            #[inline(always)]
            #[must_use]
            pub fn rff1(&mut self) -> Rff1W<Rfifo1Spec> {
                Rff1W::new(self, 3)
            }
            #[doc = "Bit 4 - Receive FIFO1 overfull"]
            #[inline(always)]
            #[must_use]
            pub fn rfo1(&mut self) -> Rfo1W<Rfifo1Spec> {
                Rfo1W::new(self, 4)
            }
            #[doc = "Bit 5 - Receive FIFO1 dequeue"]
            #[inline(always)]
            #[must_use]
            pub fn rfd1(&mut self) -> Rfd1W<Rfifo1Spec> {
                Rfd1W::new(self, 5)
            }
        }
        #[doc = "Receive message FIFO1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifo1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rfifo1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rfifo1Spec;
        impl crate::RegisterSpec for Rfifo1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rfifo1::R`](R) reader structure"]
        impl crate::Readable for Rfifo1Spec {}
        #[doc = "`write(|w| ..)` method takes [`rfifo1::W`](W) writer structure"]
        impl crate::Writable for Rfifo1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets RFIFO1 to value 0"]
        impl crate::Resettable for Rfifo1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "INTEN (rw) register accessor: Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`inten::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`inten::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inten`]
module"]
    #[doc(alias = "INTEN")]
    pub type Inten = crate::Reg<inten::IntenSpec>;
    #[doc = "Interrupt enable register"]
    pub mod inten {
        #[doc = "Register `INTEN` reader"]
        pub type R = crate::R<IntenSpec>;
        #[doc = "Register `INTEN` writer"]
        pub type W = crate::W<IntenSpec>;
        #[doc = "Field `TMEIE` reader - Transmit mailbox empty interrupt enable"]
        pub type TmeieR = crate::BitReader;
        #[doc = "Field `TMEIE` writer - Transmit mailbox empty interrupt enable"]
        pub type TmeieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFNEIE0` reader - Receive FIFO0 not empty interrupt enable"]
        pub type Rfneie0R = crate::BitReader;
        #[doc = "Field `RFNEIE0` writer - Receive FIFO0 not empty interrupt enable"]
        pub type Rfneie0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFFIE0` reader - Receive FIFO0 full interrupt enable"]
        pub type Rffie0R = crate::BitReader;
        #[doc = "Field `RFFIE0` writer - Receive FIFO0 full interrupt enable"]
        pub type Rffie0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFOIE0` reader - Receive FIFO0 overfull interrupt enable"]
        pub type Rfoie0R = crate::BitReader;
        #[doc = "Field `RFOIE0` writer - Receive FIFO0 overfull interrupt enable"]
        pub type Rfoie0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFNEIE1` reader - Receive FIFO1 not empty interrupt enable"]
        pub type Rfneie1R = crate::BitReader;
        #[doc = "Field `RFNEIE1` writer - Receive FIFO1 not empty interrupt enable"]
        pub type Rfneie1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFFIE1` reader - Receive FIFO1 full interrupt enable"]
        pub type Rffie1R = crate::BitReader;
        #[doc = "Field `RFFIE1` writer - Receive FIFO1 full interrupt enable"]
        pub type Rffie1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFOIE1` reader - Receive FIFO1 overfull interrupt enable"]
        pub type Rfoie1R = crate::BitReader;
        #[doc = "Field `RFOIE1` writer - Receive FIFO1 overfull interrupt enable"]
        pub type Rfoie1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WERRIE` reader - Warning error interrupt enable"]
        pub type WerrieR = crate::BitReader;
        #[doc = "Field `WERRIE` writer - Warning error interrupt enable"]
        pub type WerrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PERRIE` reader - Passive error interrupt enable"]
        pub type PerrieR = crate::BitReader;
        #[doc = "Field `PERRIE` writer - Passive error interrupt enable"]
        pub type PerrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOIE` reader - Bus-off interrupt enable"]
        pub type BoieR = crate::BitReader;
        #[doc = "Field `BOIE` writer - Bus-off interrupt enable"]
        pub type BoieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRNIE` reader - Error number interrupt enable"]
        pub type ErrnieR = crate::BitReader;
        #[doc = "Field `ERRNIE` writer - Error number interrupt enable"]
        pub type ErrnieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Error interrupt enable"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Error interrupt enable"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WIE` reader - Wakeup interrupt enable"]
        pub type WieR = crate::BitReader;
        #[doc = "Field `WIE` writer - Wakeup interrupt enable"]
        pub type WieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SLPWIE` reader - Sleep working interrupt enable"]
        pub type SlpwieR = crate::BitReader;
        #[doc = "Field `SLPWIE` writer - Sleep working interrupt enable"]
        pub type SlpwieW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Transmit mailbox empty interrupt enable"]
            #[inline(always)]
            pub fn tmeie(&self) -> TmeieR {
                TmeieR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Receive FIFO0 not empty interrupt enable"]
            #[inline(always)]
            pub fn rfneie0(&self) -> Rfneie0R {
                Rfneie0R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Receive FIFO0 full interrupt enable"]
            #[inline(always)]
            pub fn rffie0(&self) -> Rffie0R {
                Rffie0R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Receive FIFO0 overfull interrupt enable"]
            #[inline(always)]
            pub fn rfoie0(&self) -> Rfoie0R {
                Rfoie0R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Receive FIFO1 not empty interrupt enable"]
            #[inline(always)]
            pub fn rfneie1(&self) -> Rfneie1R {
                Rfneie1R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Receive FIFO1 full interrupt enable"]
            #[inline(always)]
            pub fn rffie1(&self) -> Rffie1R {
                Rffie1R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Receive FIFO1 overfull interrupt enable"]
            #[inline(always)]
            pub fn rfoie1(&self) -> Rfoie1R {
                Rfoie1R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 8 - Warning error interrupt enable"]
            #[inline(always)]
            pub fn werrie(&self) -> WerrieR {
                WerrieR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Passive error interrupt enable"]
            #[inline(always)]
            pub fn perrie(&self) -> PerrieR {
                PerrieR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Bus-off interrupt enable"]
            #[inline(always)]
            pub fn boie(&self) -> BoieR {
                BoieR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Error number interrupt enable"]
            #[inline(always)]
            pub fn errnie(&self) -> ErrnieR {
                ErrnieR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 15 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Wakeup interrupt enable"]
            #[inline(always)]
            pub fn wie(&self) -> WieR {
                WieR::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Sleep working interrupt enable"]
            #[inline(always)]
            pub fn slpwie(&self) -> SlpwieR {
                SlpwieR::new(((self.bits >> 17) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Transmit mailbox empty interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn tmeie(&mut self) -> TmeieW<IntenSpec> {
                TmeieW::new(self, 0)
            }
            #[doc = "Bit 1 - Receive FIFO0 not empty interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rfneie0(&mut self) -> Rfneie0W<IntenSpec> {
                Rfneie0W::new(self, 1)
            }
            #[doc = "Bit 2 - Receive FIFO0 full interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rffie0(&mut self) -> Rffie0W<IntenSpec> {
                Rffie0W::new(self, 2)
            }
            #[doc = "Bit 3 - Receive FIFO0 overfull interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rfoie0(&mut self) -> Rfoie0W<IntenSpec> {
                Rfoie0W::new(self, 3)
            }
            #[doc = "Bit 4 - Receive FIFO1 not empty interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rfneie1(&mut self) -> Rfneie1W<IntenSpec> {
                Rfneie1W::new(self, 4)
            }
            #[doc = "Bit 5 - Receive FIFO1 full interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rffie1(&mut self) -> Rffie1W<IntenSpec> {
                Rffie1W::new(self, 5)
            }
            #[doc = "Bit 6 - Receive FIFO1 overfull interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rfoie1(&mut self) -> Rfoie1W<IntenSpec> {
                Rfoie1W::new(self, 6)
            }
            #[doc = "Bit 8 - Warning error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn werrie(&mut self) -> WerrieW<IntenSpec> {
                WerrieW::new(self, 8)
            }
            #[doc = "Bit 9 - Passive error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn perrie(&mut self) -> PerrieW<IntenSpec> {
                PerrieW::new(self, 9)
            }
            #[doc = "Bit 10 - Bus-off interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn boie(&mut self) -> BoieW<IntenSpec> {
                BoieW::new(self, 10)
            }
            #[doc = "Bit 11 - Error number interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn errnie(&mut self) -> ErrnieW<IntenSpec> {
                ErrnieW::new(self, 11)
            }
            #[doc = "Bit 15 - Error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<IntenSpec> {
                ErrieW::new(self, 15)
            }
            #[doc = "Bit 16 - Wakeup interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn wie(&mut self) -> WieW<IntenSpec> {
                WieW::new(self, 16)
            }
            #[doc = "Bit 17 - Sleep working interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn slpwie(&mut self) -> SlpwieW<IntenSpec> {
                SlpwieW::new(self, 17)
            }
        }
        #[doc = "Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`inten::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`inten::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntenSpec;
        impl crate::RegisterSpec for IntenSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inten::R`](R) reader structure"]
        impl crate::Readable for IntenSpec {}
        #[doc = "`write(|w| ..)` method takes [`inten::W`](W) writer structure"]
        impl crate::Writable for IntenSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets INTEN to value 0"]
        impl crate::Resettable for IntenSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "ERR (rw) register accessor: Error register\n\nYou can [`read`](crate::Reg::read) this register and get [`err::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`err::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@err`]
module"]
    #[doc(alias = "ERR")]
    pub type Err = crate::Reg<err::ErrSpec>;
    #[doc = "Error register"]
    pub mod err {
        #[doc = "Register `ERR` reader"]
        pub type R = crate::R<ErrSpec>;
        #[doc = "Register `ERR` writer"]
        pub type W = crate::W<ErrSpec>;
        #[doc = "Field `WERR` reader - Warning error"]
        pub type WerrR = crate::BitReader;
        #[doc = "Field `PERR` reader - Passive error"]
        pub type PerrR = crate::BitReader;
        #[doc = "Field `BOERR` reader - Bus-off error"]
        pub type BoerrR = crate::BitReader;
        #[doc = "Field `ERRN` reader - Error number"]
        pub type ErrnR = crate::FieldReader;
        #[doc = "Field `ERRN` writer - Error number"]
        pub type ErrnW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `TECNT` reader - Transmit Error Count defined by the CAN standard"]
        pub type TecntR = crate::FieldReader;
        #[doc = "Field `RECNT` reader - Receive Error Count defined by the CAN standard"]
        pub type RecntR = crate::FieldReader;
        impl R {
            #[doc = "Bit 0 - Warning error"]
            #[inline(always)]
            pub fn werr(&self) -> WerrR {
                WerrR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Passive error"]
            #[inline(always)]
            pub fn perr(&self) -> PerrR {
                PerrR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Bus-off error"]
            #[inline(always)]
            pub fn boerr(&self) -> BoerrR {
                BoerrR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Error number"]
            #[inline(always)]
            pub fn errn(&self) -> ErrnR {
                ErrnR::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bits 16:23 - Transmit Error Count defined by the CAN standard"]
            #[inline(always)]
            pub fn tecnt(&self) -> TecntR {
                TecntR::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Receive Error Count defined by the CAN standard"]
            #[inline(always)]
            pub fn recnt(&self) -> RecntR {
                RecntR::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:6 - Error number"]
            #[inline(always)]
            #[must_use]
            pub fn errn(&mut self) -> ErrnW<ErrSpec> {
                ErrnW::new(self, 4)
            }
        }
        #[doc = "Error register\n\nYou can [`read`](crate::Reg::read) this register and get [`err::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`err::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct ErrSpec;
        impl crate::RegisterSpec for ErrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`err::R`](R) reader structure"]
        impl crate::Readable for ErrSpec {}
        #[doc = "`write(|w| ..)` method takes [`err::W`](W) writer structure"]
        impl crate::Writable for ErrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets ERR to value 0"]
        impl crate::Resettable for ErrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "BT (rw) register accessor: Bit timing register\n\nYou can [`read`](crate::Reg::read) this register and get [`bt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@bt`]
module"]
    #[doc(alias = "BT")]
    pub type Bt = crate::Reg<bt::BtSpec>;
    #[doc = "Bit timing register"]
    pub mod bt {
        #[doc = "Register `BT` reader"]
        pub type R = crate::R<BtSpec>;
        #[doc = "Register `BT` writer"]
        pub type W = crate::W<BtSpec>;
        #[doc = "Field `BAUDPSC` reader - Baud rate prescaler"]
        pub type BaudpscR = crate::FieldReader<u16>;
        #[doc = "Field `BAUDPSC` writer - Baud rate prescaler"]
        pub type BaudpscW<'a, REG> = crate::FieldWriter<'a, REG, 10, u16>;
        #[doc = "Field `BS1` reader - Bit segment 1"]
        pub type Bs1R = crate::FieldReader;
        #[doc = "Field `BS1` writer - Bit segment 1"]
        pub type Bs1W<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `BS2` reader - Bit segment 2"]
        pub type Bs2R = crate::FieldReader;
        #[doc = "Field `BS2` writer - Bit segment 2"]
        pub type Bs2W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SJW` reader - Resynchronization jump width"]
        pub type SjwR = crate::FieldReader;
        #[doc = "Field `SJW` writer - Resynchronization jump width"]
        pub type SjwW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `LCMOD` reader - Loopback communication mode"]
        pub type LcmodR = crate::BitReader;
        #[doc = "Field `LCMOD` writer - Loopback communication mode"]
        pub type LcmodW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SCMOD` reader - Silent communication mode"]
        pub type ScmodR = crate::BitReader;
        #[doc = "Field `SCMOD` writer - Silent communication mode"]
        pub type ScmodW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:9 - Baud rate prescaler"]
            #[inline(always)]
            pub fn baudpsc(&self) -> BaudpscR {
                BaudpscR::new((self.bits & 0x03ff) as u16)
            }
            #[doc = "Bits 16:19 - Bit segment 1"]
            #[inline(always)]
            pub fn bs1(&self) -> Bs1R {
                Bs1R::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 20:22 - Bit segment 2"]
            #[inline(always)]
            pub fn bs2(&self) -> Bs2R {
                Bs2R::new(((self.bits >> 20) & 7) as u8)
            }
            #[doc = "Bits 24:25 - Resynchronization jump width"]
            #[inline(always)]
            pub fn sjw(&self) -> SjwR {
                SjwR::new(((self.bits >> 24) & 3) as u8)
            }
            #[doc = "Bit 30 - Loopback communication mode"]
            #[inline(always)]
            pub fn lcmod(&self) -> LcmodR {
                LcmodR::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Silent communication mode"]
            #[inline(always)]
            pub fn scmod(&self) -> ScmodR {
                ScmodR::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:9 - Baud rate prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn baudpsc(&mut self) -> BaudpscW<BtSpec> {
                BaudpscW::new(self, 0)
            }
            #[doc = "Bits 16:19 - Bit segment 1"]
            #[inline(always)]
            #[must_use]
            pub fn bs1(&mut self) -> Bs1W<BtSpec> {
                Bs1W::new(self, 16)
            }
            #[doc = "Bits 20:22 - Bit segment 2"]
            #[inline(always)]
            #[must_use]
            pub fn bs2(&mut self) -> Bs2W<BtSpec> {
                Bs2W::new(self, 20)
            }
            #[doc = "Bits 24:25 - Resynchronization jump width"]
            #[inline(always)]
            #[must_use]
            pub fn sjw(&mut self) -> SjwW<BtSpec> {
                SjwW::new(self, 24)
            }
            #[doc = "Bit 30 - Loopback communication mode"]
            #[inline(always)]
            #[must_use]
            pub fn lcmod(&mut self) -> LcmodW<BtSpec> {
                LcmodW::new(self, 30)
            }
            #[doc = "Bit 31 - Silent communication mode"]
            #[inline(always)]
            #[must_use]
            pub fn scmod(&mut self) -> ScmodW<BtSpec> {
                ScmodW::new(self, 31)
            }
        }
        #[doc = "Bit timing register\n\nYou can [`read`](crate::Reg::read) this register and get [`bt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct BtSpec;
        impl crate::RegisterSpec for BtSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`bt::R`](R) reader structure"]
        impl crate::Readable for BtSpec {}
        #[doc = "`write(|w| ..)` method takes [`bt::W`](W) writer structure"]
        impl crate::Writable for BtSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets BT to value 0x0123_0000"]
        impl crate::Resettable for BtSpec {
            const RESET_VALUE: u32 = 0x0123_0000;
        }
    }
    #[doc = "TMI0 (rw) register accessor: Transmit mailbox identifier register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`tmi0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmi0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tmi0`]
module"]
    #[doc(alias = "TMI0")]
    pub type Tmi0 = crate::Reg<tmi0::Tmi0Spec>;
    #[doc = "Transmit mailbox identifier register 0"]
    pub mod tmi0 {
        #[doc = "Register `TMI0` reader"]
        pub type R = crate::R<Tmi0Spec>;
        #[doc = "Register `TMI0` writer"]
        pub type W = crate::W<Tmi0Spec>;
        #[doc = "Field `TEN` reader - Transmit enable"]
        pub type TenR = crate::BitReader;
        #[doc = "Field `TEN` writer - Transmit enable"]
        pub type TenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FT` reader - Frame type"]
        pub type FtR = crate::BitReader;
        #[doc = "Field `FT` writer - Frame type"]
        pub type FtW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FF` reader - Frame format"]
        pub type FfR = crate::BitReader;
        #[doc = "Field `FF` writer - Frame format"]
        pub type FfW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EFID` reader - The frame identifier"]
        pub type EfidR = crate::FieldReader<u32>;
        #[doc = "Field `EFID` writer - The frame identifier"]
        pub type EfidW<'a, REG> = crate::FieldWriter<'a, REG, 18, u32>;
        #[doc = "Field `SFID_EFID` reader - The frame identifier"]
        pub type SfidEfidR = crate::FieldReader<u16>;
        #[doc = "Field `SFID_EFID` writer - The frame identifier"]
        pub type SfidEfidW<'a, REG> = crate::FieldWriter<'a, REG, 11, u16>;
        impl R {
            #[doc = "Bit 0 - Transmit enable"]
            #[inline(always)]
            pub fn ten(&self) -> TenR {
                TenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Frame type"]
            #[inline(always)]
            pub fn ft(&self) -> FtR {
                FtR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Frame format"]
            #[inline(always)]
            pub fn ff(&self) -> FfR {
                FfR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 3:20 - The frame identifier"]
            #[inline(always)]
            pub fn efid(&self) -> EfidR {
                EfidR::new((self.bits >> 3) & 0x0003_ffff)
            }
            #[doc = "Bits 21:31 - The frame identifier"]
            #[inline(always)]
            pub fn sfid_efid(&self) -> SfidEfidR {
                SfidEfidR::new(((self.bits >> 21) & 0x07ff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 0 - Transmit enable"]
            #[inline(always)]
            #[must_use]
            pub fn ten(&mut self) -> TenW<Tmi0Spec> {
                TenW::new(self, 0)
            }
            #[doc = "Bit 1 - Frame type"]
            #[inline(always)]
            #[must_use]
            pub fn ft(&mut self) -> FtW<Tmi0Spec> {
                FtW::new(self, 1)
            }
            #[doc = "Bit 2 - Frame format"]
            #[inline(always)]
            #[must_use]
            pub fn ff(&mut self) -> FfW<Tmi0Spec> {
                FfW::new(self, 2)
            }
            #[doc = "Bits 3:20 - The frame identifier"]
            #[inline(always)]
            #[must_use]
            pub fn efid(&mut self) -> EfidW<Tmi0Spec> {
                EfidW::new(self, 3)
            }
            #[doc = "Bits 21:31 - The frame identifier"]
            #[inline(always)]
            #[must_use]
            pub fn sfid_efid(&mut self) -> SfidEfidW<Tmi0Spec> {
                SfidEfidW::new(self, 21)
            }
        }
        #[doc = "Transmit mailbox identifier register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`tmi0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmi0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Tmi0Spec;
        impl crate::RegisterSpec for Tmi0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tmi0::R`](R) reader structure"]
        impl crate::Readable for Tmi0Spec {}
        #[doc = "`write(|w| ..)` method takes [`tmi0::W`](W) writer structure"]
        impl crate::Writable for Tmi0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TMI0 to value 0"]
        impl crate::Resettable for Tmi0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TMP0 (rw) register accessor: Transmit mailbox property register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`tmp0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmp0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tmp0`]
module"]
    #[doc(alias = "TMP0")]
    pub type Tmp0 = crate::Reg<tmp0::Tmp0Spec>;
    #[doc = "Transmit mailbox property register 0"]
    pub mod tmp0 {
        #[doc = "Register `TMP0` reader"]
        pub type R = crate::R<Tmp0Spec>;
        #[doc = "Register `TMP0` writer"]
        pub type W = crate::W<Tmp0Spec>;
        #[doc = "Field `DLENC` reader - Data length code"]
        pub type DlencR = crate::FieldReader;
        #[doc = "Field `DLENC` writer - Data length code"]
        pub type DlencW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `TSEN` reader - Time stamp enable"]
        pub type TsenR = crate::BitReader;
        #[doc = "Field `TSEN` writer - Time stamp enable"]
        pub type TsenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TS` reader - Time stamp"]
        pub type TsR = crate::FieldReader<u16>;
        #[doc = "Field `TS` writer - Time stamp"]
        pub type TsW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:3 - Data length code"]
            #[inline(always)]
            pub fn dlenc(&self) -> DlencR {
                DlencR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bit 8 - Time stamp enable"]
            #[inline(always)]
            pub fn tsen(&self) -> TsenR {
                TsenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bits 16:31 - Time stamp"]
            #[inline(always)]
            pub fn ts(&self) -> TsR {
                TsR::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Data length code"]
            #[inline(always)]
            #[must_use]
            pub fn dlenc(&mut self) -> DlencW<Tmp0Spec> {
                DlencW::new(self, 0)
            }
            #[doc = "Bit 8 - Time stamp enable"]
            #[inline(always)]
            #[must_use]
            pub fn tsen(&mut self) -> TsenW<Tmp0Spec> {
                TsenW::new(self, 8)
            }
            #[doc = "Bits 16:31 - Time stamp"]
            #[inline(always)]
            #[must_use]
            pub fn ts(&mut self) -> TsW<Tmp0Spec> {
                TsW::new(self, 16)
            }
        }
        #[doc = "Transmit mailbox property register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`tmp0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmp0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Tmp0Spec;
        impl crate::RegisterSpec for Tmp0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tmp0::R`](R) reader structure"]
        impl crate::Readable for Tmp0Spec {}
        #[doc = "`write(|w| ..)` method takes [`tmp0::W`](W) writer structure"]
        impl crate::Writable for Tmp0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TMP0 to value 0"]
        impl crate::Resettable for Tmp0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TMDATA00 (rw) register accessor: Transmit mailbox data0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tmdata00::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmdata00::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tmdata00`]
module"]
    #[doc(alias = "TMDATA00")]
    pub type Tmdata00 = crate::Reg<tmdata00::Tmdata00Spec>;
    #[doc = "Transmit mailbox data0 register"]
    pub mod tmdata00 {
        #[doc = "Register `TMDATA00` reader"]
        pub type R = crate::R<Tmdata00Spec>;
        #[doc = "Register `TMDATA00` writer"]
        pub type W = crate::W<Tmdata00Spec>;
        #[doc = "Field `DB0` reader - Data byte 0"]
        pub type Db0R = crate::FieldReader;
        #[doc = "Field `DB0` writer - Data byte 0"]
        pub type Db0W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB1` reader - Data byte 1"]
        pub type Db1R = crate::FieldReader;
        #[doc = "Field `DB1` writer - Data byte 1"]
        pub type Db1W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB2` reader - Data byte 2"]
        pub type Db2R = crate::FieldReader;
        #[doc = "Field `DB2` writer - Data byte 2"]
        pub type Db2W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB3` reader - Data byte 3"]
        pub type Db3R = crate::FieldReader;
        #[doc = "Field `DB3` writer - Data byte 3"]
        pub type Db3W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Data byte 0"]
            #[inline(always)]
            pub fn db0(&self) -> Db0R {
                Db0R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Data byte 1"]
            #[inline(always)]
            pub fn db1(&self) -> Db1R {
                Db1R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Data byte 2"]
            #[inline(always)]
            pub fn db2(&self) -> Db2R {
                Db2R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Data byte 3"]
            #[inline(always)]
            pub fn db3(&self) -> Db3R {
                Db3R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Data byte 0"]
            #[inline(always)]
            #[must_use]
            pub fn db0(&mut self) -> Db0W<Tmdata00Spec> {
                Db0W::new(self, 0)
            }
            #[doc = "Bits 8:15 - Data byte 1"]
            #[inline(always)]
            #[must_use]
            pub fn db1(&mut self) -> Db1W<Tmdata00Spec> {
                Db1W::new(self, 8)
            }
            #[doc = "Bits 16:23 - Data byte 2"]
            #[inline(always)]
            #[must_use]
            pub fn db2(&mut self) -> Db2W<Tmdata00Spec> {
                Db2W::new(self, 16)
            }
            #[doc = "Bits 24:31 - Data byte 3"]
            #[inline(always)]
            #[must_use]
            pub fn db3(&mut self) -> Db3W<Tmdata00Spec> {
                Db3W::new(self, 24)
            }
        }
        #[doc = "Transmit mailbox data0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tmdata00::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmdata00::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Tmdata00Spec;
        impl crate::RegisterSpec for Tmdata00Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tmdata00::R`](R) reader structure"]
        impl crate::Readable for Tmdata00Spec {}
        #[doc = "`write(|w| ..)` method takes [`tmdata00::W`](W) writer structure"]
        impl crate::Writable for Tmdata00Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TMDATA00 to value 0"]
        impl crate::Resettable for Tmdata00Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TMDATA10 (rw) register accessor: Transmit mailbox data1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tmdata10::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmdata10::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tmdata10`]
module"]
    #[doc(alias = "TMDATA10")]
    pub type Tmdata10 = crate::Reg<tmdata10::Tmdata10Spec>;
    #[doc = "Transmit mailbox data1 register"]
    pub mod tmdata10 {
        #[doc = "Register `TMDATA10` reader"]
        pub type R = crate::R<Tmdata10Spec>;
        #[doc = "Register `TMDATA10` writer"]
        pub type W = crate::W<Tmdata10Spec>;
        #[doc = "Field `DB4` reader - Data byte 4"]
        pub type Db4R = crate::FieldReader;
        #[doc = "Field `DB4` writer - Data byte 4"]
        pub type Db4W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB5` reader - Data byte 5"]
        pub type Db5R = crate::FieldReader;
        #[doc = "Field `DB5` writer - Data byte 5"]
        pub type Db5W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB6` reader - Data byte 6"]
        pub type Db6R = crate::FieldReader;
        #[doc = "Field `DB6` writer - Data byte 6"]
        pub type Db6W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB7` reader - Data byte 7"]
        pub type Db7R = crate::FieldReader;
        #[doc = "Field `DB7` writer - Data byte 7"]
        pub type Db7W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Data byte 4"]
            #[inline(always)]
            pub fn db4(&self) -> Db4R {
                Db4R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Data byte 5"]
            #[inline(always)]
            pub fn db5(&self) -> Db5R {
                Db5R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Data byte 6"]
            #[inline(always)]
            pub fn db6(&self) -> Db6R {
                Db6R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Data byte 7"]
            #[inline(always)]
            pub fn db7(&self) -> Db7R {
                Db7R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Data byte 4"]
            #[inline(always)]
            #[must_use]
            pub fn db4(&mut self) -> Db4W<Tmdata10Spec> {
                Db4W::new(self, 0)
            }
            #[doc = "Bits 8:15 - Data byte 5"]
            #[inline(always)]
            #[must_use]
            pub fn db5(&mut self) -> Db5W<Tmdata10Spec> {
                Db5W::new(self, 8)
            }
            #[doc = "Bits 16:23 - Data byte 6"]
            #[inline(always)]
            #[must_use]
            pub fn db6(&mut self) -> Db6W<Tmdata10Spec> {
                Db6W::new(self, 16)
            }
            #[doc = "Bits 24:31 - Data byte 7"]
            #[inline(always)]
            #[must_use]
            pub fn db7(&mut self) -> Db7W<Tmdata10Spec> {
                Db7W::new(self, 24)
            }
        }
        #[doc = "Transmit mailbox data1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tmdata10::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmdata10::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Tmdata10Spec;
        impl crate::RegisterSpec for Tmdata10Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tmdata10::R`](R) reader structure"]
        impl crate::Readable for Tmdata10Spec {}
        #[doc = "`write(|w| ..)` method takes [`tmdata10::W`](W) writer structure"]
        impl crate::Writable for Tmdata10Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TMDATA10 to value 0"]
        impl crate::Resettable for Tmdata10Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TMI1 (rw) register accessor: Transmit mailbox identifier register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`tmi1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmi1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tmi1`]
module"]
    #[doc(alias = "TMI1")]
    pub type Tmi1 = crate::Reg<tmi1::Tmi1Spec>;
    #[doc = "Transmit mailbox identifier register 1"]
    pub mod tmi1 {
        #[doc = "Register `TMI1` reader"]
        pub type R = crate::R<Tmi1Spec>;
        #[doc = "Register `TMI1` writer"]
        pub type W = crate::W<Tmi1Spec>;
        #[doc = "Field `TEN` reader - Transmit enable"]
        pub type TenR = crate::BitReader;
        #[doc = "Field `TEN` writer - Transmit enable"]
        pub type TenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FT` reader - Frame type"]
        pub type FtR = crate::BitReader;
        #[doc = "Field `FT` writer - Frame type"]
        pub type FtW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FF` reader - Frame format"]
        pub type FfR = crate::BitReader;
        #[doc = "Field `FF` writer - Frame format"]
        pub type FfW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EFID` reader - The frame identifier"]
        pub type EfidR = crate::FieldReader<u32>;
        #[doc = "Field `EFID` writer - The frame identifier"]
        pub type EfidW<'a, REG> = crate::FieldWriter<'a, REG, 18, u32>;
        #[doc = "Field `SFID_EFID` reader - The frame identifier"]
        pub type SfidEfidR = crate::FieldReader<u16>;
        #[doc = "Field `SFID_EFID` writer - The frame identifier"]
        pub type SfidEfidW<'a, REG> = crate::FieldWriter<'a, REG, 11, u16>;
        impl R {
            #[doc = "Bit 0 - Transmit enable"]
            #[inline(always)]
            pub fn ten(&self) -> TenR {
                TenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Frame type"]
            #[inline(always)]
            pub fn ft(&self) -> FtR {
                FtR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Frame format"]
            #[inline(always)]
            pub fn ff(&self) -> FfR {
                FfR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 3:20 - The frame identifier"]
            #[inline(always)]
            pub fn efid(&self) -> EfidR {
                EfidR::new((self.bits >> 3) & 0x0003_ffff)
            }
            #[doc = "Bits 21:31 - The frame identifier"]
            #[inline(always)]
            pub fn sfid_efid(&self) -> SfidEfidR {
                SfidEfidR::new(((self.bits >> 21) & 0x07ff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 0 - Transmit enable"]
            #[inline(always)]
            #[must_use]
            pub fn ten(&mut self) -> TenW<Tmi1Spec> {
                TenW::new(self, 0)
            }
            #[doc = "Bit 1 - Frame type"]
            #[inline(always)]
            #[must_use]
            pub fn ft(&mut self) -> FtW<Tmi1Spec> {
                FtW::new(self, 1)
            }
            #[doc = "Bit 2 - Frame format"]
            #[inline(always)]
            #[must_use]
            pub fn ff(&mut self) -> FfW<Tmi1Spec> {
                FfW::new(self, 2)
            }
            #[doc = "Bits 3:20 - The frame identifier"]
            #[inline(always)]
            #[must_use]
            pub fn efid(&mut self) -> EfidW<Tmi1Spec> {
                EfidW::new(self, 3)
            }
            #[doc = "Bits 21:31 - The frame identifier"]
            #[inline(always)]
            #[must_use]
            pub fn sfid_efid(&mut self) -> SfidEfidW<Tmi1Spec> {
                SfidEfidW::new(self, 21)
            }
        }
        #[doc = "Transmit mailbox identifier register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`tmi1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmi1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Tmi1Spec;
        impl crate::RegisterSpec for Tmi1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tmi1::R`](R) reader structure"]
        impl crate::Readable for Tmi1Spec {}
        #[doc = "`write(|w| ..)` method takes [`tmi1::W`](W) writer structure"]
        impl crate::Writable for Tmi1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TMI1 to value 0"]
        impl crate::Resettable for Tmi1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TMP1 (rw) register accessor: Transmit mailbox property register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`tmp1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmp1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tmp1`]
module"]
    #[doc(alias = "TMP1")]
    pub type Tmp1 = crate::Reg<tmp1::Tmp1Spec>;
    #[doc = "Transmit mailbox property register 1"]
    pub mod tmp1 {
        #[doc = "Register `TMP1` reader"]
        pub type R = crate::R<Tmp1Spec>;
        #[doc = "Register `TMP1` writer"]
        pub type W = crate::W<Tmp1Spec>;
        #[doc = "Field `DLENC` reader - Data length code"]
        pub type DlencR = crate::FieldReader;
        #[doc = "Field `DLENC` writer - Data length code"]
        pub type DlencW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `TSEN` reader - Time stamp enable"]
        pub type TsenR = crate::BitReader;
        #[doc = "Field `TSEN` writer - Time stamp enable"]
        pub type TsenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TS` reader - Time stamp"]
        pub type TsR = crate::FieldReader<u16>;
        #[doc = "Field `TS` writer - Time stamp"]
        pub type TsW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:3 - Data length code"]
            #[inline(always)]
            pub fn dlenc(&self) -> DlencR {
                DlencR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bit 8 - Time stamp enable"]
            #[inline(always)]
            pub fn tsen(&self) -> TsenR {
                TsenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bits 16:31 - Time stamp"]
            #[inline(always)]
            pub fn ts(&self) -> TsR {
                TsR::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Data length code"]
            #[inline(always)]
            #[must_use]
            pub fn dlenc(&mut self) -> DlencW<Tmp1Spec> {
                DlencW::new(self, 0)
            }
            #[doc = "Bit 8 - Time stamp enable"]
            #[inline(always)]
            #[must_use]
            pub fn tsen(&mut self) -> TsenW<Tmp1Spec> {
                TsenW::new(self, 8)
            }
            #[doc = "Bits 16:31 - Time stamp"]
            #[inline(always)]
            #[must_use]
            pub fn ts(&mut self) -> TsW<Tmp1Spec> {
                TsW::new(self, 16)
            }
        }
        #[doc = "Transmit mailbox property register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`tmp1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmp1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Tmp1Spec;
        impl crate::RegisterSpec for Tmp1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tmp1::R`](R) reader structure"]
        impl crate::Readable for Tmp1Spec {}
        #[doc = "`write(|w| ..)` method takes [`tmp1::W`](W) writer structure"]
        impl crate::Writable for Tmp1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TMP1 to value 0"]
        impl crate::Resettable for Tmp1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TMDATA01 (rw) register accessor: Transmit mailbox data0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tmdata01::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmdata01::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tmdata01`]
module"]
    #[doc(alias = "TMDATA01")]
    pub type Tmdata01 = crate::Reg<tmdata01::Tmdata01Spec>;
    #[doc = "Transmit mailbox data0 register"]
    pub mod tmdata01 {
        #[doc = "Register `TMDATA01` reader"]
        pub type R = crate::R<Tmdata01Spec>;
        #[doc = "Register `TMDATA01` writer"]
        pub type W = crate::W<Tmdata01Spec>;
        #[doc = "Field `DB0` reader - Data byte 0"]
        pub type Db0R = crate::FieldReader;
        #[doc = "Field `DB0` writer - Data byte 0"]
        pub type Db0W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB1` reader - Data byte 1"]
        pub type Db1R = crate::FieldReader;
        #[doc = "Field `DB1` writer - Data byte 1"]
        pub type Db1W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB2` reader - Data byte 2"]
        pub type Db2R = crate::FieldReader;
        #[doc = "Field `DB2` writer - Data byte 2"]
        pub type Db2W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB3` reader - Data byte 3"]
        pub type Db3R = crate::FieldReader;
        #[doc = "Field `DB3` writer - Data byte 3"]
        pub type Db3W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Data byte 0"]
            #[inline(always)]
            pub fn db0(&self) -> Db0R {
                Db0R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Data byte 1"]
            #[inline(always)]
            pub fn db1(&self) -> Db1R {
                Db1R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Data byte 2"]
            #[inline(always)]
            pub fn db2(&self) -> Db2R {
                Db2R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Data byte 3"]
            #[inline(always)]
            pub fn db3(&self) -> Db3R {
                Db3R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Data byte 0"]
            #[inline(always)]
            #[must_use]
            pub fn db0(&mut self) -> Db0W<Tmdata01Spec> {
                Db0W::new(self, 0)
            }
            #[doc = "Bits 8:15 - Data byte 1"]
            #[inline(always)]
            #[must_use]
            pub fn db1(&mut self) -> Db1W<Tmdata01Spec> {
                Db1W::new(self, 8)
            }
            #[doc = "Bits 16:23 - Data byte 2"]
            #[inline(always)]
            #[must_use]
            pub fn db2(&mut self) -> Db2W<Tmdata01Spec> {
                Db2W::new(self, 16)
            }
            #[doc = "Bits 24:31 - Data byte 3"]
            #[inline(always)]
            #[must_use]
            pub fn db3(&mut self) -> Db3W<Tmdata01Spec> {
                Db3W::new(self, 24)
            }
        }
        #[doc = "Transmit mailbox data0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tmdata01::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmdata01::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Tmdata01Spec;
        impl crate::RegisterSpec for Tmdata01Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tmdata01::R`](R) reader structure"]
        impl crate::Readable for Tmdata01Spec {}
        #[doc = "`write(|w| ..)` method takes [`tmdata01::W`](W) writer structure"]
        impl crate::Writable for Tmdata01Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TMDATA01 to value 0"]
        impl crate::Resettable for Tmdata01Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TMDATA11 (rw) register accessor: Transmit mailbox data1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tmdata11::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmdata11::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tmdata11`]
module"]
    #[doc(alias = "TMDATA11")]
    pub type Tmdata11 = crate::Reg<tmdata11::Tmdata11Spec>;
    #[doc = "Transmit mailbox data1 register"]
    pub mod tmdata11 {
        #[doc = "Register `TMDATA11` reader"]
        pub type R = crate::R<Tmdata11Spec>;
        #[doc = "Register `TMDATA11` writer"]
        pub type W = crate::W<Tmdata11Spec>;
        #[doc = "Field `DB4` reader - Data byte 4"]
        pub type Db4R = crate::FieldReader;
        #[doc = "Field `DB4` writer - Data byte 4"]
        pub type Db4W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB5` reader - Data byte 5"]
        pub type Db5R = crate::FieldReader;
        #[doc = "Field `DB5` writer - Data byte 5"]
        pub type Db5W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB6` reader - Data byte 6"]
        pub type Db6R = crate::FieldReader;
        #[doc = "Field `DB6` writer - Data byte 6"]
        pub type Db6W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB7` reader - Data byte 7"]
        pub type Db7R = crate::FieldReader;
        #[doc = "Field `DB7` writer - Data byte 7"]
        pub type Db7W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Data byte 4"]
            #[inline(always)]
            pub fn db4(&self) -> Db4R {
                Db4R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Data byte 5"]
            #[inline(always)]
            pub fn db5(&self) -> Db5R {
                Db5R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Data byte 6"]
            #[inline(always)]
            pub fn db6(&self) -> Db6R {
                Db6R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Data byte 7"]
            #[inline(always)]
            pub fn db7(&self) -> Db7R {
                Db7R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Data byte 4"]
            #[inline(always)]
            #[must_use]
            pub fn db4(&mut self) -> Db4W<Tmdata11Spec> {
                Db4W::new(self, 0)
            }
            #[doc = "Bits 8:15 - Data byte 5"]
            #[inline(always)]
            #[must_use]
            pub fn db5(&mut self) -> Db5W<Tmdata11Spec> {
                Db5W::new(self, 8)
            }
            #[doc = "Bits 16:23 - Data byte 6"]
            #[inline(always)]
            #[must_use]
            pub fn db6(&mut self) -> Db6W<Tmdata11Spec> {
                Db6W::new(self, 16)
            }
            #[doc = "Bits 24:31 - Data byte 7"]
            #[inline(always)]
            #[must_use]
            pub fn db7(&mut self) -> Db7W<Tmdata11Spec> {
                Db7W::new(self, 24)
            }
        }
        #[doc = "Transmit mailbox data1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tmdata11::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmdata11::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Tmdata11Spec;
        impl crate::RegisterSpec for Tmdata11Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tmdata11::R`](R) reader structure"]
        impl crate::Readable for Tmdata11Spec {}
        #[doc = "`write(|w| ..)` method takes [`tmdata11::W`](W) writer structure"]
        impl crate::Writable for Tmdata11Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TMDATA11 to value 0"]
        impl crate::Resettable for Tmdata11Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TMI2 (rw) register accessor: Transmit mailbox identifier register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`tmi2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmi2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tmi2`]
module"]
    #[doc(alias = "TMI2")]
    pub type Tmi2 = crate::Reg<tmi2::Tmi2Spec>;
    #[doc = "Transmit mailbox identifier register 2"]
    pub mod tmi2 {
        #[doc = "Register `TMI2` reader"]
        pub type R = crate::R<Tmi2Spec>;
        #[doc = "Register `TMI2` writer"]
        pub type W = crate::W<Tmi2Spec>;
        #[doc = "Field `TEN` reader - Transmit enable"]
        pub type TenR = crate::BitReader;
        #[doc = "Field `TEN` writer - Transmit enable"]
        pub type TenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FT` reader - Frame type"]
        pub type FtR = crate::BitReader;
        #[doc = "Field `FT` writer - Frame type"]
        pub type FtW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FF` reader - Frame format"]
        pub type FfR = crate::BitReader;
        #[doc = "Field `FF` writer - Frame format"]
        pub type FfW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EFID` reader - The frame identifier"]
        pub type EfidR = crate::FieldReader<u32>;
        #[doc = "Field `EFID` writer - The frame identifier"]
        pub type EfidW<'a, REG> = crate::FieldWriter<'a, REG, 18, u32>;
        #[doc = "Field `SFID_EFID` reader - The frame identifier"]
        pub type SfidEfidR = crate::FieldReader<u16>;
        #[doc = "Field `SFID_EFID` writer - The frame identifier"]
        pub type SfidEfidW<'a, REG> = crate::FieldWriter<'a, REG, 11, u16>;
        impl R {
            #[doc = "Bit 0 - Transmit enable"]
            #[inline(always)]
            pub fn ten(&self) -> TenR {
                TenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Frame type"]
            #[inline(always)]
            pub fn ft(&self) -> FtR {
                FtR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Frame format"]
            #[inline(always)]
            pub fn ff(&self) -> FfR {
                FfR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 3:20 - The frame identifier"]
            #[inline(always)]
            pub fn efid(&self) -> EfidR {
                EfidR::new((self.bits >> 3) & 0x0003_ffff)
            }
            #[doc = "Bits 21:31 - The frame identifier"]
            #[inline(always)]
            pub fn sfid_efid(&self) -> SfidEfidR {
                SfidEfidR::new(((self.bits >> 21) & 0x07ff) as u16)
            }
        }
        impl W {
            #[doc = "Bit 0 - Transmit enable"]
            #[inline(always)]
            #[must_use]
            pub fn ten(&mut self) -> TenW<Tmi2Spec> {
                TenW::new(self, 0)
            }
            #[doc = "Bit 1 - Frame type"]
            #[inline(always)]
            #[must_use]
            pub fn ft(&mut self) -> FtW<Tmi2Spec> {
                FtW::new(self, 1)
            }
            #[doc = "Bit 2 - Frame format"]
            #[inline(always)]
            #[must_use]
            pub fn ff(&mut self) -> FfW<Tmi2Spec> {
                FfW::new(self, 2)
            }
            #[doc = "Bits 3:20 - The frame identifier"]
            #[inline(always)]
            #[must_use]
            pub fn efid(&mut self) -> EfidW<Tmi2Spec> {
                EfidW::new(self, 3)
            }
            #[doc = "Bits 21:31 - The frame identifier"]
            #[inline(always)]
            #[must_use]
            pub fn sfid_efid(&mut self) -> SfidEfidW<Tmi2Spec> {
                SfidEfidW::new(self, 21)
            }
        }
        #[doc = "Transmit mailbox identifier register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`tmi2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmi2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Tmi2Spec;
        impl crate::RegisterSpec for Tmi2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tmi2::R`](R) reader structure"]
        impl crate::Readable for Tmi2Spec {}
        #[doc = "`write(|w| ..)` method takes [`tmi2::W`](W) writer structure"]
        impl crate::Writable for Tmi2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TMI2 to value 0"]
        impl crate::Resettable for Tmi2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TMP2 (rw) register accessor: Transmit mailbox property register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`tmp2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmp2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tmp2`]
module"]
    #[doc(alias = "TMP2")]
    pub type Tmp2 = crate::Reg<tmp2::Tmp2Spec>;
    #[doc = "Transmit mailbox property register 2"]
    pub mod tmp2 {
        #[doc = "Register `TMP2` reader"]
        pub type R = crate::R<Tmp2Spec>;
        #[doc = "Register `TMP2` writer"]
        pub type W = crate::W<Tmp2Spec>;
        #[doc = "Field `DLENC` reader - Data length code"]
        pub type DlencR = crate::FieldReader;
        #[doc = "Field `DLENC` writer - Data length code"]
        pub type DlencW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `TSEN` reader - Time stamp enable"]
        pub type TsenR = crate::BitReader;
        #[doc = "Field `TSEN` writer - Time stamp enable"]
        pub type TsenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TS` reader - Time stamp"]
        pub type TsR = crate::FieldReader<u16>;
        #[doc = "Field `TS` writer - Time stamp"]
        pub type TsW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:3 - Data length code"]
            #[inline(always)]
            pub fn dlenc(&self) -> DlencR {
                DlencR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bit 8 - Time stamp enable"]
            #[inline(always)]
            pub fn tsen(&self) -> TsenR {
                TsenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bits 16:31 - Time stamp"]
            #[inline(always)]
            pub fn ts(&self) -> TsR {
                TsR::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Data length code"]
            #[inline(always)]
            #[must_use]
            pub fn dlenc(&mut self) -> DlencW<Tmp2Spec> {
                DlencW::new(self, 0)
            }
            #[doc = "Bit 8 - Time stamp enable"]
            #[inline(always)]
            #[must_use]
            pub fn tsen(&mut self) -> TsenW<Tmp2Spec> {
                TsenW::new(self, 8)
            }
            #[doc = "Bits 16:31 - Time stamp"]
            #[inline(always)]
            #[must_use]
            pub fn ts(&mut self) -> TsW<Tmp2Spec> {
                TsW::new(self, 16)
            }
        }
        #[doc = "Transmit mailbox property register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`tmp2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmp2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Tmp2Spec;
        impl crate::RegisterSpec for Tmp2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tmp2::R`](R) reader structure"]
        impl crate::Readable for Tmp2Spec {}
        #[doc = "`write(|w| ..)` method takes [`tmp2::W`](W) writer structure"]
        impl crate::Writable for Tmp2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TMP2 to value 0"]
        impl crate::Resettable for Tmp2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TMDATA02 (rw) register accessor: Transmit mailbox data0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tmdata02::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmdata02::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tmdata02`]
module"]
    #[doc(alias = "TMDATA02")]
    pub type Tmdata02 = crate::Reg<tmdata02::Tmdata02Spec>;
    #[doc = "Transmit mailbox data0 register"]
    pub mod tmdata02 {
        #[doc = "Register `TMDATA02` reader"]
        pub type R = crate::R<Tmdata02Spec>;
        #[doc = "Register `TMDATA02` writer"]
        pub type W = crate::W<Tmdata02Spec>;
        #[doc = "Field `DB0` reader - Data byte 0"]
        pub type Db0R = crate::FieldReader;
        #[doc = "Field `DB0` writer - Data byte 0"]
        pub type Db0W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB1` reader - Data byte 1"]
        pub type Db1R = crate::FieldReader;
        #[doc = "Field `DB1` writer - Data byte 1"]
        pub type Db1W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB2` reader - Data byte 2"]
        pub type Db2R = crate::FieldReader;
        #[doc = "Field `DB2` writer - Data byte 2"]
        pub type Db2W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB3` reader - Data byte 3"]
        pub type Db3R = crate::FieldReader;
        #[doc = "Field `DB3` writer - Data byte 3"]
        pub type Db3W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Data byte 0"]
            #[inline(always)]
            pub fn db0(&self) -> Db0R {
                Db0R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Data byte 1"]
            #[inline(always)]
            pub fn db1(&self) -> Db1R {
                Db1R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Data byte 2"]
            #[inline(always)]
            pub fn db2(&self) -> Db2R {
                Db2R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Data byte 3"]
            #[inline(always)]
            pub fn db3(&self) -> Db3R {
                Db3R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Data byte 0"]
            #[inline(always)]
            #[must_use]
            pub fn db0(&mut self) -> Db0W<Tmdata02Spec> {
                Db0W::new(self, 0)
            }
            #[doc = "Bits 8:15 - Data byte 1"]
            #[inline(always)]
            #[must_use]
            pub fn db1(&mut self) -> Db1W<Tmdata02Spec> {
                Db1W::new(self, 8)
            }
            #[doc = "Bits 16:23 - Data byte 2"]
            #[inline(always)]
            #[must_use]
            pub fn db2(&mut self) -> Db2W<Tmdata02Spec> {
                Db2W::new(self, 16)
            }
            #[doc = "Bits 24:31 - Data byte 3"]
            #[inline(always)]
            #[must_use]
            pub fn db3(&mut self) -> Db3W<Tmdata02Spec> {
                Db3W::new(self, 24)
            }
        }
        #[doc = "Transmit mailbox data0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tmdata02::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmdata02::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Tmdata02Spec;
        impl crate::RegisterSpec for Tmdata02Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tmdata02::R`](R) reader structure"]
        impl crate::Readable for Tmdata02Spec {}
        #[doc = "`write(|w| ..)` method takes [`tmdata02::W`](W) writer structure"]
        impl crate::Writable for Tmdata02Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TMDATA02 to value 0"]
        impl crate::Resettable for Tmdata02Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TMDATA12 (rw) register accessor: Transmit mailbox data1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tmdata12::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmdata12::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tmdata12`]
module"]
    #[doc(alias = "TMDATA12")]
    pub type Tmdata12 = crate::Reg<tmdata12::Tmdata12Spec>;
    #[doc = "Transmit mailbox data1 register"]
    pub mod tmdata12 {
        #[doc = "Register `TMDATA12` reader"]
        pub type R = crate::R<Tmdata12Spec>;
        #[doc = "Register `TMDATA12` writer"]
        pub type W = crate::W<Tmdata12Spec>;
        #[doc = "Field `DB4` reader - Data byte 4"]
        pub type Db4R = crate::FieldReader;
        #[doc = "Field `DB4` writer - Data byte 4"]
        pub type Db4W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB5` reader - Data byte 5"]
        pub type Db5R = crate::FieldReader;
        #[doc = "Field `DB5` writer - Data byte 5"]
        pub type Db5W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB6` reader - Data byte 6"]
        pub type Db6R = crate::FieldReader;
        #[doc = "Field `DB6` writer - Data byte 6"]
        pub type Db6W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `DB7` reader - Data byte 7"]
        pub type Db7R = crate::FieldReader;
        #[doc = "Field `DB7` writer - Data byte 7"]
        pub type Db7W<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Data byte 4"]
            #[inline(always)]
            pub fn db4(&self) -> Db4R {
                Db4R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Data byte 5"]
            #[inline(always)]
            pub fn db5(&self) -> Db5R {
                Db5R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Data byte 6"]
            #[inline(always)]
            pub fn db6(&self) -> Db6R {
                Db6R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Data byte 7"]
            #[inline(always)]
            pub fn db7(&self) -> Db7R {
                Db7R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Data byte 4"]
            #[inline(always)]
            #[must_use]
            pub fn db4(&mut self) -> Db4W<Tmdata12Spec> {
                Db4W::new(self, 0)
            }
            #[doc = "Bits 8:15 - Data byte 5"]
            #[inline(always)]
            #[must_use]
            pub fn db5(&mut self) -> Db5W<Tmdata12Spec> {
                Db5W::new(self, 8)
            }
            #[doc = "Bits 16:23 - Data byte 6"]
            #[inline(always)]
            #[must_use]
            pub fn db6(&mut self) -> Db6W<Tmdata12Spec> {
                Db6W::new(self, 16)
            }
            #[doc = "Bits 24:31 - Data byte 7"]
            #[inline(always)]
            #[must_use]
            pub fn db7(&mut self) -> Db7W<Tmdata12Spec> {
                Db7W::new(self, 24)
            }
        }
        #[doc = "Transmit mailbox data1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`tmdata12::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`tmdata12::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Tmdata12Spec;
        impl crate::RegisterSpec for Tmdata12Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tmdata12::R`](R) reader structure"]
        impl crate::Readable for Tmdata12Spec {}
        #[doc = "`write(|w| ..)` method takes [`tmdata12::W`](W) writer structure"]
        impl crate::Writable for Tmdata12Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets TMDATA12 to value 0"]
        impl crate::Resettable for Tmdata12Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RFIFOMI0 (r) register accessor: Receive FIFO mailbox identifier register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomi0::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rfifomi0`]
module"]
    #[doc(alias = "RFIFOMI0")]
    pub type Rfifomi0 = crate::Reg<rfifomi0::Rfifomi0Spec>;
    #[doc = "Receive FIFO mailbox identifier register"]
    pub mod rfifomi0 {
        #[doc = "Register `RFIFOMI0` reader"]
        pub type R = crate::R<Rfifomi0Spec>;
        #[doc = "Field `FT` reader - Frame type"]
        pub type FtR = crate::BitReader;
        #[doc = "Field `FF` reader - Frame format"]
        pub type FfR = crate::BitReader;
        #[doc = "Field `EFID` reader - The frame identifier"]
        pub type EfidR = crate::FieldReader<u32>;
        #[doc = "Field `SFID_EFID` reader - The frame identifier"]
        pub type SfidEfidR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bit 1 - Frame type"]
            #[inline(always)]
            pub fn ft(&self) -> FtR {
                FtR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Frame format"]
            #[inline(always)]
            pub fn ff(&self) -> FfR {
                FfR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 3:20 - The frame identifier"]
            #[inline(always)]
            pub fn efid(&self) -> EfidR {
                EfidR::new((self.bits >> 3) & 0x0003_ffff)
            }
            #[doc = "Bits 21:31 - The frame identifier"]
            #[inline(always)]
            pub fn sfid_efid(&self) -> SfidEfidR {
                SfidEfidR::new(((self.bits >> 21) & 0x07ff) as u16)
            }
        }
        #[doc = "Receive FIFO mailbox identifier register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomi0::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rfifomi0Spec;
        impl crate::RegisterSpec for Rfifomi0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rfifomi0::R`](R) reader structure"]
        impl crate::Readable for Rfifomi0Spec {}
        #[doc = "`reset()` method sets RFIFOMI0 to value 0"]
        impl crate::Resettable for Rfifomi0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RFIFOMP0 (r) register accessor: Receive FIFO0 mailbox property register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomp0::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rfifomp0`]
module"]
    #[doc(alias = "RFIFOMP0")]
    pub type Rfifomp0 = crate::Reg<rfifomp0::Rfifomp0Spec>;
    #[doc = "Receive FIFO0 mailbox property register"]
    pub mod rfifomp0 {
        #[doc = "Register `RFIFOMP0` reader"]
        pub type R = crate::R<Rfifomp0Spec>;
        #[doc = "Field `DLENC` reader - Data length code"]
        pub type DlencR = crate::FieldReader;
        #[doc = "Field `FI` reader - Filtering index"]
        pub type FiR = crate::FieldReader;
        #[doc = "Field `TS` reader - Time stamp"]
        pub type TsR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:3 - Data length code"]
            #[inline(always)]
            pub fn dlenc(&self) -> DlencR {
                DlencR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - Filtering index"]
            #[inline(always)]
            pub fn fi(&self) -> FiR {
                FiR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:31 - Time stamp"]
            #[inline(always)]
            pub fn ts(&self) -> TsR {
                TsR::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        #[doc = "Receive FIFO0 mailbox property register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomp0::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rfifomp0Spec;
        impl crate::RegisterSpec for Rfifomp0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rfifomp0::R`](R) reader structure"]
        impl crate::Readable for Rfifomp0Spec {}
        #[doc = "`reset()` method sets RFIFOMP0 to value 0"]
        impl crate::Resettable for Rfifomp0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RFIFOMDATA00 (r) register accessor: Receive FIFO0 mailbox data0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomdata00::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rfifomdata00`]
module"]
    #[doc(alias = "RFIFOMDATA00")]
    pub type Rfifomdata00 = crate::Reg<rfifomdata00::Rfifomdata00Spec>;
    #[doc = "Receive FIFO0 mailbox data0 register"]
    pub mod rfifomdata00 {
        #[doc = "Register `RFIFOMDATA00` reader"]
        pub type R = crate::R<Rfifomdata00Spec>;
        #[doc = "Field `DB0` reader - Data byte 0"]
        pub type Db0R = crate::FieldReader;
        #[doc = "Field `DB1` reader - Data byte 1"]
        pub type Db1R = crate::FieldReader;
        #[doc = "Field `DB2` reader - Data byte 2"]
        pub type Db2R = crate::FieldReader;
        #[doc = "Field `DB3` reader - Data byte 3"]
        pub type Db3R = crate::FieldReader;
        impl R {
            #[doc = "Bits 0:7 - Data byte 0"]
            #[inline(always)]
            pub fn db0(&self) -> Db0R {
                Db0R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Data byte 1"]
            #[inline(always)]
            pub fn db1(&self) -> Db1R {
                Db1R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Data byte 2"]
            #[inline(always)]
            pub fn db2(&self) -> Db2R {
                Db2R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Data byte 3"]
            #[inline(always)]
            pub fn db3(&self) -> Db3R {
                Db3R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        #[doc = "Receive FIFO0 mailbox data0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomdata00::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rfifomdata00Spec;
        impl crate::RegisterSpec for Rfifomdata00Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rfifomdata00::R`](R) reader structure"]
        impl crate::Readable for Rfifomdata00Spec {}
        #[doc = "`reset()` method sets RFIFOMDATA00 to value 0"]
        impl crate::Resettable for Rfifomdata00Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RFIFOMDATA10 (r) register accessor: Receive FIFO0 mailbox data1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomdata10::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rfifomdata10`]
module"]
    #[doc(alias = "RFIFOMDATA10")]
    pub type Rfifomdata10 = crate::Reg<rfifomdata10::Rfifomdata10Spec>;
    #[doc = "Receive FIFO0 mailbox data1 register"]
    pub mod rfifomdata10 {
        #[doc = "Register `RFIFOMDATA10` reader"]
        pub type R = crate::R<Rfifomdata10Spec>;
        #[doc = "Field `DB4` reader - Data byte 4"]
        pub type Db4R = crate::FieldReader;
        #[doc = "Field `DB5` reader - Data byte 5"]
        pub type Db5R = crate::FieldReader;
        #[doc = "Field `DB6` reader - Data byte 6"]
        pub type Db6R = crate::FieldReader;
        #[doc = "Field `DB7` reader - Data byte 7"]
        pub type Db7R = crate::FieldReader;
        impl R {
            #[doc = "Bits 0:7 - Data byte 4"]
            #[inline(always)]
            pub fn db4(&self) -> Db4R {
                Db4R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Data byte 5"]
            #[inline(always)]
            pub fn db5(&self) -> Db5R {
                Db5R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Data byte 6"]
            #[inline(always)]
            pub fn db6(&self) -> Db6R {
                Db6R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Data byte 7"]
            #[inline(always)]
            pub fn db7(&self) -> Db7R {
                Db7R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        #[doc = "Receive FIFO0 mailbox data1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomdata10::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rfifomdata10Spec;
        impl crate::RegisterSpec for Rfifomdata10Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rfifomdata10::R`](R) reader structure"]
        impl crate::Readable for Rfifomdata10Spec {}
        #[doc = "`reset()` method sets RFIFOMDATA10 to value 0"]
        impl crate::Resettable for Rfifomdata10Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RFIFOMI1 (r) register accessor: Receive FIFO1 mailbox identifier register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomi1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rfifomi1`]
module"]
    #[doc(alias = "RFIFOMI1")]
    pub type Rfifomi1 = crate::Reg<rfifomi1::Rfifomi1Spec>;
    #[doc = "Receive FIFO1 mailbox identifier register"]
    pub mod rfifomi1 {
        #[doc = "Register `RFIFOMI1` reader"]
        pub type R = crate::R<Rfifomi1Spec>;
        #[doc = "Field `FT` reader - Frame type"]
        pub type FtR = crate::BitReader;
        #[doc = "Field `FF` reader - Frame format"]
        pub type FfR = crate::BitReader;
        #[doc = "Field `EFID` reader - The frame identifier"]
        pub type EfidR = crate::FieldReader<u32>;
        #[doc = "Field `SFID_EFID` reader - The frame identifier"]
        pub type SfidEfidR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bit 1 - Frame type"]
            #[inline(always)]
            pub fn ft(&self) -> FtR {
                FtR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Frame format"]
            #[inline(always)]
            pub fn ff(&self) -> FfR {
                FfR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 3:20 - The frame identifier"]
            #[inline(always)]
            pub fn efid(&self) -> EfidR {
                EfidR::new((self.bits >> 3) & 0x0003_ffff)
            }
            #[doc = "Bits 21:31 - The frame identifier"]
            #[inline(always)]
            pub fn sfid_efid(&self) -> SfidEfidR {
                SfidEfidR::new(((self.bits >> 21) & 0x07ff) as u16)
            }
        }
        #[doc = "Receive FIFO1 mailbox identifier register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomi1::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rfifomi1Spec;
        impl crate::RegisterSpec for Rfifomi1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rfifomi1::R`](R) reader structure"]
        impl crate::Readable for Rfifomi1Spec {}
        #[doc = "`reset()` method sets RFIFOMI1 to value 0"]
        impl crate::Resettable for Rfifomi1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RFIFOMP1 (r) register accessor: Receive FIFO1 mailbox property register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomp1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rfifomp1`]
module"]
    #[doc(alias = "RFIFOMP1")]
    pub type Rfifomp1 = crate::Reg<rfifomp1::Rfifomp1Spec>;
    #[doc = "Receive FIFO1 mailbox property register"]
    pub mod rfifomp1 {
        #[doc = "Register `RFIFOMP1` reader"]
        pub type R = crate::R<Rfifomp1Spec>;
        #[doc = "Field `DLENC` reader - Data length code"]
        pub type DlencR = crate::FieldReader;
        #[doc = "Field `FI` reader - Filtering index"]
        pub type FiR = crate::FieldReader;
        #[doc = "Field `TS` reader - Time stamp"]
        pub type TsR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:3 - Data length code"]
            #[inline(always)]
            pub fn dlenc(&self) -> DlencR {
                DlencR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - Filtering index"]
            #[inline(always)]
            pub fn fi(&self) -> FiR {
                FiR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:31 - Time stamp"]
            #[inline(always)]
            pub fn ts(&self) -> TsR {
                TsR::new(((self.bits >> 16) & 0xffff) as u16)
            }
        }
        #[doc = "Receive FIFO1 mailbox property register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomp1::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rfifomp1Spec;
        impl crate::RegisterSpec for Rfifomp1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rfifomp1::R`](R) reader structure"]
        impl crate::Readable for Rfifomp1Spec {}
        #[doc = "`reset()` method sets RFIFOMP1 to value 0"]
        impl crate::Resettable for Rfifomp1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RFIFOMDATA01 (r) register accessor: Receive FIFO1 mailbox data0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomdata01::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rfifomdata01`]
module"]
    #[doc(alias = "RFIFOMDATA01")]
    pub type Rfifomdata01 = crate::Reg<rfifomdata01::Rfifomdata01Spec>;
    #[doc = "Receive FIFO1 mailbox data0 register"]
    pub mod rfifomdata01 {
        #[doc = "Register `RFIFOMDATA01` reader"]
        pub type R = crate::R<Rfifomdata01Spec>;
        #[doc = "Field `DB0` reader - Data byte 0"]
        pub type Db0R = crate::FieldReader;
        #[doc = "Field `DB1` reader - Data byte 1"]
        pub type Db1R = crate::FieldReader;
        #[doc = "Field `DB2` reader - Data byte 2"]
        pub type Db2R = crate::FieldReader;
        #[doc = "Field `DB3` reader - Data byte 3"]
        pub type Db3R = crate::FieldReader;
        impl R {
            #[doc = "Bits 0:7 - Data byte 0"]
            #[inline(always)]
            pub fn db0(&self) -> Db0R {
                Db0R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Data byte 1"]
            #[inline(always)]
            pub fn db1(&self) -> Db1R {
                Db1R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Data byte 2"]
            #[inline(always)]
            pub fn db2(&self) -> Db2R {
                Db2R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Data byte 3"]
            #[inline(always)]
            pub fn db3(&self) -> Db3R {
                Db3R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        #[doc = "Receive FIFO1 mailbox data0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomdata01::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rfifomdata01Spec;
        impl crate::RegisterSpec for Rfifomdata01Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rfifomdata01::R`](R) reader structure"]
        impl crate::Readable for Rfifomdata01Spec {}
        #[doc = "`reset()` method sets RFIFOMDATA01 to value 0"]
        impl crate::Resettable for Rfifomdata01Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RFIFOMDATA11 (r) register accessor: Receive FIFO1 mailbox data1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomdata11::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rfifomdata11`]
module"]
    #[doc(alias = "RFIFOMDATA11")]
    pub type Rfifomdata11 = crate::Reg<rfifomdata11::Rfifomdata11Spec>;
    #[doc = "Receive FIFO1 mailbox data1 register"]
    pub mod rfifomdata11 {
        #[doc = "Register `RFIFOMDATA11` reader"]
        pub type R = crate::R<Rfifomdata11Spec>;
        #[doc = "Field `DB4` reader - Data byte 4"]
        pub type Db4R = crate::FieldReader;
        #[doc = "Field `DB5` reader - Data byte 5"]
        pub type Db5R = crate::FieldReader;
        #[doc = "Field `DB6` reader - Data byte 6"]
        pub type Db6R = crate::FieldReader;
        #[doc = "Field `DB7` reader - Data byte 7"]
        pub type Db7R = crate::FieldReader;
        impl R {
            #[doc = "Bits 0:7 - Data byte 4"]
            #[inline(always)]
            pub fn db4(&self) -> Db4R {
                Db4R::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Data byte 5"]
            #[inline(always)]
            pub fn db5(&self) -> Db5R {
                Db5R::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Data byte 6"]
            #[inline(always)]
            pub fn db6(&self) -> Db6R {
                Db6R::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Data byte 7"]
            #[inline(always)]
            pub fn db7(&self) -> Db7R {
                Db7R::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        #[doc = "Receive FIFO1 mailbox data1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`rfifomdata11::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Rfifomdata11Spec;
        impl crate::RegisterSpec for Rfifomdata11Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rfifomdata11::R`](R) reader structure"]
        impl crate::Readable for Rfifomdata11Spec {}
        #[doc = "`reset()` method sets RFIFOMDATA11 to value 0"]
        impl crate::Resettable for Rfifomdata11Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "FCTL (rw) register accessor: Filter control register\n\nYou can [`read`](crate::Reg::read) this register and get [`fctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fctl`]
module"]
    #[doc(alias = "FCTL")]
    pub type Fctl = crate::Reg<fctl::FctlSpec>;
    #[doc = "Filter control register"]
    pub mod fctl {
        #[doc = "Register `FCTL` reader"]
        pub type R = crate::R<FctlSpec>;
        #[doc = "Register `FCTL` writer"]
        pub type W = crate::W<FctlSpec>;
        #[doc = "Field `FLD` reader - Filter lock disable"]
        pub type FldR = crate::BitReader;
        #[doc = "Field `FLD` writer - Filter lock disable"]
        pub type FldW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter lock disable"]
            #[inline(always)]
            pub fn fld(&self) -> FldR {
                FldR::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter lock disable"]
            #[inline(always)]
            #[must_use]
            pub fn fld(&mut self) -> FldW<FctlSpec> {
                FldW::new(self, 0)
            }
        }
        #[doc = "Filter control register\n\nYou can [`read`](crate::Reg::read) this register and get [`fctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct FctlSpec;
        impl crate::RegisterSpec for FctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`fctl::R`](R) reader structure"]
        impl crate::Readable for FctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`fctl::W`](W) writer structure"]
        impl crate::Writable for FctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets FCTL to value 0x2a1c_0e01"]
        impl crate::Resettable for FctlSpec {
            const RESET_VALUE: u32 = 0x2a1c_0e01;
        }
    }
    #[doc = "FMCFG (rw) register accessor: Filter mode configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`fmcfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fmcfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fmcfg`]
module"]
    #[doc(alias = "FMCFG")]
    pub type Fmcfg = crate::Reg<fmcfg::FmcfgSpec>;
    #[doc = "Filter mode configuration register"]
    pub mod fmcfg {
        #[doc = "Register `FMCFG` reader"]
        pub type R = crate::R<FmcfgSpec>;
        #[doc = "Register `FMCFG` writer"]
        pub type W = crate::W<FmcfgSpec>;
        #[doc = "Field `FMOD0` reader - Filter mode"]
        pub type Fmod0R = crate::BitReader;
        #[doc = "Field `FMOD0` writer - Filter mode"]
        pub type Fmod0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD1` reader - Filter mode"]
        pub type Fmod1R = crate::BitReader;
        #[doc = "Field `FMOD1` writer - Filter mode"]
        pub type Fmod1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD2` reader - Filter mode"]
        pub type Fmod2R = crate::BitReader;
        #[doc = "Field `FMOD2` writer - Filter mode"]
        pub type Fmod2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD3` reader - Filter mode"]
        pub type Fmod3R = crate::BitReader;
        #[doc = "Field `FMOD3` writer - Filter mode"]
        pub type Fmod3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD4` reader - Filter mode"]
        pub type Fmod4R = crate::BitReader;
        #[doc = "Field `FMOD4` writer - Filter mode"]
        pub type Fmod4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD5` reader - Filter mode"]
        pub type Fmod5R = crate::BitReader;
        #[doc = "Field `FMOD5` writer - Filter mode"]
        pub type Fmod5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD6` reader - Filter mode"]
        pub type Fmod6R = crate::BitReader;
        #[doc = "Field `FMOD6` writer - Filter mode"]
        pub type Fmod6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD7` reader - Filter mode"]
        pub type Fmod7R = crate::BitReader;
        #[doc = "Field `FMOD7` writer - Filter mode"]
        pub type Fmod7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD8` reader - Filter mode"]
        pub type Fmod8R = crate::BitReader;
        #[doc = "Field `FMOD8` writer - Filter mode"]
        pub type Fmod8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD9` reader - Filter mode"]
        pub type Fmod9R = crate::BitReader;
        #[doc = "Field `FMOD9` writer - Filter mode"]
        pub type Fmod9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD10` reader - Filter mode"]
        pub type Fmod10R = crate::BitReader;
        #[doc = "Field `FMOD10` writer - Filter mode"]
        pub type Fmod10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD11` reader - Filter mode"]
        pub type Fmod11R = crate::BitReader;
        #[doc = "Field `FMOD11` writer - Filter mode"]
        pub type Fmod11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD12` reader - Filter mode"]
        pub type Fmod12R = crate::BitReader;
        #[doc = "Field `FMOD12` writer - Filter mode"]
        pub type Fmod12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD13` reader - Filter mode"]
        pub type Fmod13R = crate::BitReader;
        #[doc = "Field `FMOD13` writer - Filter mode"]
        pub type Fmod13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD14` reader - Filter mode"]
        pub type Fmod14R = crate::BitReader;
        #[doc = "Field `FMOD14` writer - Filter mode"]
        pub type Fmod14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD15` reader - Filter mode"]
        pub type Fmod15R = crate::BitReader;
        #[doc = "Field `FMOD15` writer - Filter mode"]
        pub type Fmod15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD16` reader - Filter mode"]
        pub type Fmod16R = crate::BitReader;
        #[doc = "Field `FMOD16` writer - Filter mode"]
        pub type Fmod16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD17` reader - Filter mode"]
        pub type Fmod17R = crate::BitReader;
        #[doc = "Field `FMOD17` writer - Filter mode"]
        pub type Fmod17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD18` reader - Filter mode"]
        pub type Fmod18R = crate::BitReader;
        #[doc = "Field `FMOD18` writer - Filter mode"]
        pub type Fmod18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD19` reader - Filter mode"]
        pub type Fmod19R = crate::BitReader;
        #[doc = "Field `FMOD19` writer - Filter mode"]
        pub type Fmod19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD20` reader - Filter mode"]
        pub type Fmod20R = crate::BitReader;
        #[doc = "Field `FMOD20` writer - Filter mode"]
        pub type Fmod20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD21` reader - Filter mode"]
        pub type Fmod21R = crate::BitReader;
        #[doc = "Field `FMOD21` writer - Filter mode"]
        pub type Fmod21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD22` reader - Filter mode"]
        pub type Fmod22R = crate::BitReader;
        #[doc = "Field `FMOD22` writer - Filter mode"]
        pub type Fmod22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD23` reader - Filter mode"]
        pub type Fmod23R = crate::BitReader;
        #[doc = "Field `FMOD23` writer - Filter mode"]
        pub type Fmod23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD24` reader - Filter mode"]
        pub type Fmod24R = crate::BitReader;
        #[doc = "Field `FMOD24` writer - Filter mode"]
        pub type Fmod24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD25` reader - Filter mode"]
        pub type Fmod25R = crate::BitReader;
        #[doc = "Field `FMOD25` writer - Filter mode"]
        pub type Fmod25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD26` reader - Filter mode"]
        pub type Fmod26R = crate::BitReader;
        #[doc = "Field `FMOD26` writer - Filter mode"]
        pub type Fmod26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMOD27` reader - Filter mode"]
        pub type Fmod27R = crate::BitReader;
        #[doc = "Field `FMOD27` writer - Filter mode"]
        pub type Fmod27W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter mode"]
            #[inline(always)]
            pub fn fmod0(&self) -> Fmod0R {
                Fmod0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter mode"]
            #[inline(always)]
            pub fn fmod1(&self) -> Fmod1R {
                Fmod1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter mode"]
            #[inline(always)]
            pub fn fmod2(&self) -> Fmod2R {
                Fmod2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter mode"]
            #[inline(always)]
            pub fn fmod3(&self) -> Fmod3R {
                Fmod3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter mode"]
            #[inline(always)]
            pub fn fmod4(&self) -> Fmod4R {
                Fmod4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter mode"]
            #[inline(always)]
            pub fn fmod5(&self) -> Fmod5R {
                Fmod5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter mode"]
            #[inline(always)]
            pub fn fmod6(&self) -> Fmod6R {
                Fmod6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter mode"]
            #[inline(always)]
            pub fn fmod7(&self) -> Fmod7R {
                Fmod7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter mode"]
            #[inline(always)]
            pub fn fmod8(&self) -> Fmod8R {
                Fmod8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter mode"]
            #[inline(always)]
            pub fn fmod9(&self) -> Fmod9R {
                Fmod9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter mode"]
            #[inline(always)]
            pub fn fmod10(&self) -> Fmod10R {
                Fmod10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter mode"]
            #[inline(always)]
            pub fn fmod11(&self) -> Fmod11R {
                Fmod11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter mode"]
            #[inline(always)]
            pub fn fmod12(&self) -> Fmod12R {
                Fmod12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter mode"]
            #[inline(always)]
            pub fn fmod13(&self) -> Fmod13R {
                Fmod13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter mode"]
            #[inline(always)]
            pub fn fmod14(&self) -> Fmod14R {
                Fmod14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter mode"]
            #[inline(always)]
            pub fn fmod15(&self) -> Fmod15R {
                Fmod15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter mode"]
            #[inline(always)]
            pub fn fmod16(&self) -> Fmod16R {
                Fmod16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter mode"]
            #[inline(always)]
            pub fn fmod17(&self) -> Fmod17R {
                Fmod17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter mode"]
            #[inline(always)]
            pub fn fmod18(&self) -> Fmod18R {
                Fmod18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter mode"]
            #[inline(always)]
            pub fn fmod19(&self) -> Fmod19R {
                Fmod19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter mode"]
            #[inline(always)]
            pub fn fmod20(&self) -> Fmod20R {
                Fmod20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter mode"]
            #[inline(always)]
            pub fn fmod21(&self) -> Fmod21R {
                Fmod21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter mode"]
            #[inline(always)]
            pub fn fmod22(&self) -> Fmod22R {
                Fmod22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter mode"]
            #[inline(always)]
            pub fn fmod23(&self) -> Fmod23R {
                Fmod23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter mode"]
            #[inline(always)]
            pub fn fmod24(&self) -> Fmod24R {
                Fmod24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter mode"]
            #[inline(always)]
            pub fn fmod25(&self) -> Fmod25R {
                Fmod25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter mode"]
            #[inline(always)]
            pub fn fmod26(&self) -> Fmod26R {
                Fmod26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter mode"]
            #[inline(always)]
            pub fn fmod27(&self) -> Fmod27R {
                Fmod27R::new(((self.bits >> 27) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod0(&mut self) -> Fmod0W<FmcfgSpec> {
                Fmod0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod1(&mut self) -> Fmod1W<FmcfgSpec> {
                Fmod1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod2(&mut self) -> Fmod2W<FmcfgSpec> {
                Fmod2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod3(&mut self) -> Fmod3W<FmcfgSpec> {
                Fmod3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod4(&mut self) -> Fmod4W<FmcfgSpec> {
                Fmod4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod5(&mut self) -> Fmod5W<FmcfgSpec> {
                Fmod5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod6(&mut self) -> Fmod6W<FmcfgSpec> {
                Fmod6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod7(&mut self) -> Fmod7W<FmcfgSpec> {
                Fmod7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod8(&mut self) -> Fmod8W<FmcfgSpec> {
                Fmod8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod9(&mut self) -> Fmod9W<FmcfgSpec> {
                Fmod9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod10(&mut self) -> Fmod10W<FmcfgSpec> {
                Fmod10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod11(&mut self) -> Fmod11W<FmcfgSpec> {
                Fmod11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod12(&mut self) -> Fmod12W<FmcfgSpec> {
                Fmod12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod13(&mut self) -> Fmod13W<FmcfgSpec> {
                Fmod13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod14(&mut self) -> Fmod14W<FmcfgSpec> {
                Fmod14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod15(&mut self) -> Fmod15W<FmcfgSpec> {
                Fmod15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod16(&mut self) -> Fmod16W<FmcfgSpec> {
                Fmod16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod17(&mut self) -> Fmod17W<FmcfgSpec> {
                Fmod17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod18(&mut self) -> Fmod18W<FmcfgSpec> {
                Fmod18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod19(&mut self) -> Fmod19W<FmcfgSpec> {
                Fmod19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod20(&mut self) -> Fmod20W<FmcfgSpec> {
                Fmod20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod21(&mut self) -> Fmod21W<FmcfgSpec> {
                Fmod21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod22(&mut self) -> Fmod22W<FmcfgSpec> {
                Fmod22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod23(&mut self) -> Fmod23W<FmcfgSpec> {
                Fmod23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod24(&mut self) -> Fmod24W<FmcfgSpec> {
                Fmod24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod25(&mut self) -> Fmod25W<FmcfgSpec> {
                Fmod25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod26(&mut self) -> Fmod26W<FmcfgSpec> {
                Fmod26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmod27(&mut self) -> Fmod27W<FmcfgSpec> {
                Fmod27W::new(self, 27)
            }
        }
        #[doc = "Filter mode configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`fmcfg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fmcfg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct FmcfgSpec;
        impl crate::RegisterSpec for FmcfgSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`fmcfg::R`](R) reader structure"]
        impl crate::Readable for FmcfgSpec {}
        #[doc = "`write(|w| ..)` method takes [`fmcfg::W`](W) writer structure"]
        impl crate::Writable for FmcfgSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets FMCFG to value 0"]
        impl crate::Resettable for FmcfgSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "FSCFG (rw) register accessor: Filter scale configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`fscfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fscfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fscfg`]
module"]
    #[doc(alias = "FSCFG")]
    pub type Fscfg = crate::Reg<fscfg::FscfgSpec>;
    #[doc = "Filter scale configuration register"]
    pub mod fscfg {
        #[doc = "Register `FSCFG` reader"]
        pub type R = crate::R<FscfgSpec>;
        #[doc = "Register `FSCFG` writer"]
        pub type W = crate::W<FscfgSpec>;
        #[doc = "Field `FS0` reader - Filter scale configuration"]
        pub type Fs0R = crate::BitReader;
        #[doc = "Field `FS0` writer - Filter scale configuration"]
        pub type Fs0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS1` reader - Filter scale configuration"]
        pub type Fs1R = crate::BitReader;
        #[doc = "Field `FS1` writer - Filter scale configuration"]
        pub type Fs1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS2` reader - Filter scale configuration"]
        pub type Fs2R = crate::BitReader;
        #[doc = "Field `FS2` writer - Filter scale configuration"]
        pub type Fs2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS3` reader - Filter scale configuration"]
        pub type Fs3R = crate::BitReader;
        #[doc = "Field `FS3` writer - Filter scale configuration"]
        pub type Fs3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS4` reader - Filter scale configuration"]
        pub type Fs4R = crate::BitReader;
        #[doc = "Field `FS4` writer - Filter scale configuration"]
        pub type Fs4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS5` reader - Filter scale configuration"]
        pub type Fs5R = crate::BitReader;
        #[doc = "Field `FS5` writer - Filter scale configuration"]
        pub type Fs5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS6` reader - Filter scale configuration"]
        pub type Fs6R = crate::BitReader;
        #[doc = "Field `FS6` writer - Filter scale configuration"]
        pub type Fs6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS7` reader - Filter scale configuration"]
        pub type Fs7R = crate::BitReader;
        #[doc = "Field `FS7` writer - Filter scale configuration"]
        pub type Fs7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS8` reader - Filter scale configuration"]
        pub type Fs8R = crate::BitReader;
        #[doc = "Field `FS8` writer - Filter scale configuration"]
        pub type Fs8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS9` reader - Filter scale configuration"]
        pub type Fs9R = crate::BitReader;
        #[doc = "Field `FS9` writer - Filter scale configuration"]
        pub type Fs9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS10` reader - Filter scale configuration"]
        pub type Fs10R = crate::BitReader;
        #[doc = "Field `FS10` writer - Filter scale configuration"]
        pub type Fs10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS11` reader - Filter scale configuration"]
        pub type Fs11R = crate::BitReader;
        #[doc = "Field `FS11` writer - Filter scale configuration"]
        pub type Fs11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS12` reader - Filter scale configuration"]
        pub type Fs12R = crate::BitReader;
        #[doc = "Field `FS12` writer - Filter scale configuration"]
        pub type Fs12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS13` reader - Filter scale configuration"]
        pub type Fs13R = crate::BitReader;
        #[doc = "Field `FS13` writer - Filter scale configuration"]
        pub type Fs13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS14` reader - Filter scale configuration"]
        pub type Fs14R = crate::BitReader;
        #[doc = "Field `FS14` writer - Filter scale configuration"]
        pub type Fs14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS15` reader - Filter scale configuration"]
        pub type Fs15R = crate::BitReader;
        #[doc = "Field `FS15` writer - Filter scale configuration"]
        pub type Fs15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS16` reader - Filter scale configuration"]
        pub type Fs16R = crate::BitReader;
        #[doc = "Field `FS16` writer - Filter scale configuration"]
        pub type Fs16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS17` reader - Filter scale configuration"]
        pub type Fs17R = crate::BitReader;
        #[doc = "Field `FS17` writer - Filter scale configuration"]
        pub type Fs17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS18` reader - Filter scale configuration"]
        pub type Fs18R = crate::BitReader;
        #[doc = "Field `FS18` writer - Filter scale configuration"]
        pub type Fs18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS19` reader - Filter scale configuration"]
        pub type Fs19R = crate::BitReader;
        #[doc = "Field `FS19` writer - Filter scale configuration"]
        pub type Fs19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS20` reader - Filter scale configuration"]
        pub type Fs20R = crate::BitReader;
        #[doc = "Field `FS20` writer - Filter scale configuration"]
        pub type Fs20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS21` reader - Filter scale configuration"]
        pub type Fs21R = crate::BitReader;
        #[doc = "Field `FS21` writer - Filter scale configuration"]
        pub type Fs21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS22` reader - Filter scale configuration"]
        pub type Fs22R = crate::BitReader;
        #[doc = "Field `FS22` writer - Filter scale configuration"]
        pub type Fs22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS23` reader - Filter scale configuration"]
        pub type Fs23R = crate::BitReader;
        #[doc = "Field `FS23` writer - Filter scale configuration"]
        pub type Fs23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS24` reader - Filter scale configuration"]
        pub type Fs24R = crate::BitReader;
        #[doc = "Field `FS24` writer - Filter scale configuration"]
        pub type Fs24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS25` reader - Filter scale configuration"]
        pub type Fs25R = crate::BitReader;
        #[doc = "Field `FS25` writer - Filter scale configuration"]
        pub type Fs25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS26` reader - Filter scale configuration"]
        pub type Fs26R = crate::BitReader;
        #[doc = "Field `FS26` writer - Filter scale configuration"]
        pub type Fs26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FS27` reader - Filter scale configuration"]
        pub type Fs27R = crate::BitReader;
        #[doc = "Field `FS27` writer - Filter scale configuration"]
        pub type Fs27W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs0(&self) -> Fs0R {
                Fs0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs1(&self) -> Fs1R {
                Fs1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs2(&self) -> Fs2R {
                Fs2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs3(&self) -> Fs3R {
                Fs3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs4(&self) -> Fs4R {
                Fs4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs5(&self) -> Fs5R {
                Fs5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs6(&self) -> Fs6R {
                Fs6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs7(&self) -> Fs7R {
                Fs7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs8(&self) -> Fs8R {
                Fs8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs9(&self) -> Fs9R {
                Fs9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs10(&self) -> Fs10R {
                Fs10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs11(&self) -> Fs11R {
                Fs11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs12(&self) -> Fs12R {
                Fs12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs13(&self) -> Fs13R {
                Fs13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs14(&self) -> Fs14R {
                Fs14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs15(&self) -> Fs15R {
                Fs15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs16(&self) -> Fs16R {
                Fs16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs17(&self) -> Fs17R {
                Fs17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs18(&self) -> Fs18R {
                Fs18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs19(&self) -> Fs19R {
                Fs19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs20(&self) -> Fs20R {
                Fs20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs21(&self) -> Fs21R {
                Fs21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs22(&self) -> Fs22R {
                Fs22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs23(&self) -> Fs23R {
                Fs23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs24(&self) -> Fs24R {
                Fs24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs25(&self) -> Fs25R {
                Fs25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs26(&self) -> Fs26R {
                Fs26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter scale configuration"]
            #[inline(always)]
            pub fn fs27(&self) -> Fs27R {
                Fs27R::new(((self.bits >> 27) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs0(&mut self) -> Fs0W<FscfgSpec> {
                Fs0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs1(&mut self) -> Fs1W<FscfgSpec> {
                Fs1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs2(&mut self) -> Fs2W<FscfgSpec> {
                Fs2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs3(&mut self) -> Fs3W<FscfgSpec> {
                Fs3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs4(&mut self) -> Fs4W<FscfgSpec> {
                Fs4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs5(&mut self) -> Fs5W<FscfgSpec> {
                Fs5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs6(&mut self) -> Fs6W<FscfgSpec> {
                Fs6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs7(&mut self) -> Fs7W<FscfgSpec> {
                Fs7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs8(&mut self) -> Fs8W<FscfgSpec> {
                Fs8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs9(&mut self) -> Fs9W<FscfgSpec> {
                Fs9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs10(&mut self) -> Fs10W<FscfgSpec> {
                Fs10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs11(&mut self) -> Fs11W<FscfgSpec> {
                Fs11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs12(&mut self) -> Fs12W<FscfgSpec> {
                Fs12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs13(&mut self) -> Fs13W<FscfgSpec> {
                Fs13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs14(&mut self) -> Fs14W<FscfgSpec> {
                Fs14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs15(&mut self) -> Fs15W<FscfgSpec> {
                Fs15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs16(&mut self) -> Fs16W<FscfgSpec> {
                Fs16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs17(&mut self) -> Fs17W<FscfgSpec> {
                Fs17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs18(&mut self) -> Fs18W<FscfgSpec> {
                Fs18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs19(&mut self) -> Fs19W<FscfgSpec> {
                Fs19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs20(&mut self) -> Fs20W<FscfgSpec> {
                Fs20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs21(&mut self) -> Fs21W<FscfgSpec> {
                Fs21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs22(&mut self) -> Fs22W<FscfgSpec> {
                Fs22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs23(&mut self) -> Fs23W<FscfgSpec> {
                Fs23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs24(&mut self) -> Fs24W<FscfgSpec> {
                Fs24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs25(&mut self) -> Fs25W<FscfgSpec> {
                Fs25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs26(&mut self) -> Fs26W<FscfgSpec> {
                Fs26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter scale configuration"]
            #[inline(always)]
            #[must_use]
            pub fn fs27(&mut self) -> Fs27W<FscfgSpec> {
                Fs27W::new(self, 27)
            }
        }
        #[doc = "Filter scale configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`fscfg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fscfg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct FscfgSpec;
        impl crate::RegisterSpec for FscfgSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`fscfg::R`](R) reader structure"]
        impl crate::Readable for FscfgSpec {}
        #[doc = "`write(|w| ..)` method takes [`fscfg::W`](W) writer structure"]
        impl crate::Writable for FscfgSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets FSCFG to value 0"]
        impl crate::Resettable for FscfgSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "FAFIFO (rw) register accessor: Filter associated FIFO register\n\nYou can [`read`](crate::Reg::read) this register and get [`fafifo::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fafifo::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fafifo`]
module"]
    #[doc(alias = "FAFIFO")]
    pub type Fafifo = crate::Reg<fafifo::FafifoSpec>;
    #[doc = "Filter associated FIFO register"]
    pub mod fafifo {
        #[doc = "Register `FAFIFO` reader"]
        pub type R = crate::R<FafifoSpec>;
        #[doc = "Register `FAFIFO` writer"]
        pub type W = crate::W<FafifoSpec>;
        #[doc = "Field `FAF0` reader - Filter 0 associated with FIFO"]
        pub type Faf0R = crate::BitReader;
        #[doc = "Field `FAF0` writer - Filter 0 associated with FIFO"]
        pub type Faf0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF1` reader - Filter 1 associated with FIFO"]
        pub type Faf1R = crate::BitReader;
        #[doc = "Field `FAF1` writer - Filter 1 associated with FIFO"]
        pub type Faf1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF2` reader - Filter 2 associated with FIFO"]
        pub type Faf2R = crate::BitReader;
        #[doc = "Field `FAF2` writer - Filter 2 associated with FIFO"]
        pub type Faf2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF3` reader - Filter 3 associated with FIFO"]
        pub type Faf3R = crate::BitReader;
        #[doc = "Field `FAF3` writer - Filter 3 associated with FIFO"]
        pub type Faf3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF4` reader - Filter 4 associated with FIFO"]
        pub type Faf4R = crate::BitReader;
        #[doc = "Field `FAF4` writer - Filter 4 associated with FIFO"]
        pub type Faf4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF5` reader - Filter 5 associated with FIFO"]
        pub type Faf5R = crate::BitReader;
        #[doc = "Field `FAF5` writer - Filter 5 associated with FIFO"]
        pub type Faf5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF6` reader - Filter 6 associated with FIFO"]
        pub type Faf6R = crate::BitReader;
        #[doc = "Field `FAF6` writer - Filter 6 associated with FIFO"]
        pub type Faf6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF7` reader - Filter 7 associated with FIFO"]
        pub type Faf7R = crate::BitReader;
        #[doc = "Field `FAF7` writer - Filter 7 associated with FIFO"]
        pub type Faf7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF8` reader - Filter 8 associated with FIFO"]
        pub type Faf8R = crate::BitReader;
        #[doc = "Field `FAF8` writer - Filter 8 associated with FIFO"]
        pub type Faf8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF9` reader - Filter 9 associated with FIFO"]
        pub type Faf9R = crate::BitReader;
        #[doc = "Field `FAF9` writer - Filter 9 associated with FIFO"]
        pub type Faf9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF10` reader - Filter 10 associated with FIFO"]
        pub type Faf10R = crate::BitReader;
        #[doc = "Field `FAF10` writer - Filter 10 associated with FIFO"]
        pub type Faf10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF11` reader - Filter 11 associated with FIFO"]
        pub type Faf11R = crate::BitReader;
        #[doc = "Field `FAF11` writer - Filter 11 associated with FIFO"]
        pub type Faf11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF12` reader - Filter 12 associated with FIFO"]
        pub type Faf12R = crate::BitReader;
        #[doc = "Field `FAF12` writer - Filter 12 associated with FIFO"]
        pub type Faf12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF13` reader - Filter 13 associated with FIFO"]
        pub type Faf13R = crate::BitReader;
        #[doc = "Field `FAF13` writer - Filter 13 associated with FIFO"]
        pub type Faf13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF14` reader - Filter 14 associated with FIFO"]
        pub type Faf14R = crate::BitReader;
        #[doc = "Field `FAF14` writer - Filter 14 associated with FIFO"]
        pub type Faf14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF15` reader - Filter 15 associated with FIFO"]
        pub type Faf15R = crate::BitReader;
        #[doc = "Field `FAF15` writer - Filter 15 associated with FIFO"]
        pub type Faf15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF16` reader - Filter 16 associated with FIFO"]
        pub type Faf16R = crate::BitReader;
        #[doc = "Field `FAF16` writer - Filter 16 associated with FIFO"]
        pub type Faf16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF17` reader - Filter 17 associated with FIFO"]
        pub type Faf17R = crate::BitReader;
        #[doc = "Field `FAF17` writer - Filter 17 associated with FIFO"]
        pub type Faf17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF18` reader - Filter 18 associated with FIFO"]
        pub type Faf18R = crate::BitReader;
        #[doc = "Field `FAF18` writer - Filter 18 associated with FIFO"]
        pub type Faf18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF19` reader - Filter 19 associated with FIFO"]
        pub type Faf19R = crate::BitReader;
        #[doc = "Field `FAF19` writer - Filter 19 associated with FIFO"]
        pub type Faf19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF20` reader - Filter 20 associated with FIFO"]
        pub type Faf20R = crate::BitReader;
        #[doc = "Field `FAF20` writer - Filter 20 associated with FIFO"]
        pub type Faf20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF21` reader - Filter 21 associated with FIFO"]
        pub type Faf21R = crate::BitReader;
        #[doc = "Field `FAF21` writer - Filter 21 associated with FIFO"]
        pub type Faf21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF22` reader - Filter 22 associated with FIFO"]
        pub type Faf22R = crate::BitReader;
        #[doc = "Field `FAF22` writer - Filter 22 associated with FIFO"]
        pub type Faf22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF23` reader - Filter 23 associated with FIFO"]
        pub type Faf23R = crate::BitReader;
        #[doc = "Field `FAF23` writer - Filter 23 associated with FIFO"]
        pub type Faf23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF24` reader - Filter 24 associated with FIFO"]
        pub type Faf24R = crate::BitReader;
        #[doc = "Field `FAF24` writer - Filter 24 associated with FIFO"]
        pub type Faf24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF25` reader - Filter 25 associated with FIFO"]
        pub type Faf25R = crate::BitReader;
        #[doc = "Field `FAF25` writer - Filter 25 associated with FIFO"]
        pub type Faf25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF26` reader - Filter 26 associated with FIFO"]
        pub type Faf26R = crate::BitReader;
        #[doc = "Field `FAF26` writer - Filter 26 associated with FIFO"]
        pub type Faf26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAF27` reader - Filter 27 associated with FIFO"]
        pub type Faf27R = crate::BitReader;
        #[doc = "Field `FAF27` writer - Filter 27 associated with FIFO"]
        pub type Faf27W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter 0 associated with FIFO"]
            #[inline(always)]
            pub fn faf0(&self) -> Faf0R {
                Faf0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter 1 associated with FIFO"]
            #[inline(always)]
            pub fn faf1(&self) -> Faf1R {
                Faf1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter 2 associated with FIFO"]
            #[inline(always)]
            pub fn faf2(&self) -> Faf2R {
                Faf2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter 3 associated with FIFO"]
            #[inline(always)]
            pub fn faf3(&self) -> Faf3R {
                Faf3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter 4 associated with FIFO"]
            #[inline(always)]
            pub fn faf4(&self) -> Faf4R {
                Faf4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter 5 associated with FIFO"]
            #[inline(always)]
            pub fn faf5(&self) -> Faf5R {
                Faf5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter 6 associated with FIFO"]
            #[inline(always)]
            pub fn faf6(&self) -> Faf6R {
                Faf6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter 7 associated with FIFO"]
            #[inline(always)]
            pub fn faf7(&self) -> Faf7R {
                Faf7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter 8 associated with FIFO"]
            #[inline(always)]
            pub fn faf8(&self) -> Faf8R {
                Faf8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter 9 associated with FIFO"]
            #[inline(always)]
            pub fn faf9(&self) -> Faf9R {
                Faf9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter 10 associated with FIFO"]
            #[inline(always)]
            pub fn faf10(&self) -> Faf10R {
                Faf10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter 11 associated with FIFO"]
            #[inline(always)]
            pub fn faf11(&self) -> Faf11R {
                Faf11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter 12 associated with FIFO"]
            #[inline(always)]
            pub fn faf12(&self) -> Faf12R {
                Faf12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter 13 associated with FIFO"]
            #[inline(always)]
            pub fn faf13(&self) -> Faf13R {
                Faf13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter 14 associated with FIFO"]
            #[inline(always)]
            pub fn faf14(&self) -> Faf14R {
                Faf14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter 15 associated with FIFO"]
            #[inline(always)]
            pub fn faf15(&self) -> Faf15R {
                Faf15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter 16 associated with FIFO"]
            #[inline(always)]
            pub fn faf16(&self) -> Faf16R {
                Faf16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter 17 associated with FIFO"]
            #[inline(always)]
            pub fn faf17(&self) -> Faf17R {
                Faf17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter 18 associated with FIFO"]
            #[inline(always)]
            pub fn faf18(&self) -> Faf18R {
                Faf18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter 19 associated with FIFO"]
            #[inline(always)]
            pub fn faf19(&self) -> Faf19R {
                Faf19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter 20 associated with FIFO"]
            #[inline(always)]
            pub fn faf20(&self) -> Faf20R {
                Faf20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter 21 associated with FIFO"]
            #[inline(always)]
            pub fn faf21(&self) -> Faf21R {
                Faf21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter 22 associated with FIFO"]
            #[inline(always)]
            pub fn faf22(&self) -> Faf22R {
                Faf22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter 23 associated with FIFO"]
            #[inline(always)]
            pub fn faf23(&self) -> Faf23R {
                Faf23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter 24 associated with FIFO"]
            #[inline(always)]
            pub fn faf24(&self) -> Faf24R {
                Faf24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter 25 associated with FIFO"]
            #[inline(always)]
            pub fn faf25(&self) -> Faf25R {
                Faf25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter 26 associated with FIFO"]
            #[inline(always)]
            pub fn faf26(&self) -> Faf26R {
                Faf26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter 27 associated with FIFO"]
            #[inline(always)]
            pub fn faf27(&self) -> Faf27R {
                Faf27R::new(((self.bits >> 27) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter 0 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf0(&mut self) -> Faf0W<FafifoSpec> {
                Faf0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter 1 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf1(&mut self) -> Faf1W<FafifoSpec> {
                Faf1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter 2 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf2(&mut self) -> Faf2W<FafifoSpec> {
                Faf2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter 3 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf3(&mut self) -> Faf3W<FafifoSpec> {
                Faf3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter 4 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf4(&mut self) -> Faf4W<FafifoSpec> {
                Faf4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter 5 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf5(&mut self) -> Faf5W<FafifoSpec> {
                Faf5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter 6 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf6(&mut self) -> Faf6W<FafifoSpec> {
                Faf6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter 7 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf7(&mut self) -> Faf7W<FafifoSpec> {
                Faf7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter 8 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf8(&mut self) -> Faf8W<FafifoSpec> {
                Faf8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter 9 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf9(&mut self) -> Faf9W<FafifoSpec> {
                Faf9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter 10 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf10(&mut self) -> Faf10W<FafifoSpec> {
                Faf10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter 11 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf11(&mut self) -> Faf11W<FafifoSpec> {
                Faf11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter 12 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf12(&mut self) -> Faf12W<FafifoSpec> {
                Faf12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter 13 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf13(&mut self) -> Faf13W<FafifoSpec> {
                Faf13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter 14 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf14(&mut self) -> Faf14W<FafifoSpec> {
                Faf14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter 15 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf15(&mut self) -> Faf15W<FafifoSpec> {
                Faf15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter 16 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf16(&mut self) -> Faf16W<FafifoSpec> {
                Faf16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter 17 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf17(&mut self) -> Faf17W<FafifoSpec> {
                Faf17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter 18 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf18(&mut self) -> Faf18W<FafifoSpec> {
                Faf18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter 19 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf19(&mut self) -> Faf19W<FafifoSpec> {
                Faf19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter 20 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf20(&mut self) -> Faf20W<FafifoSpec> {
                Faf20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter 21 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf21(&mut self) -> Faf21W<FafifoSpec> {
                Faf21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter 22 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf22(&mut self) -> Faf22W<FafifoSpec> {
                Faf22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter 23 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf23(&mut self) -> Faf23W<FafifoSpec> {
                Faf23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter 24 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf24(&mut self) -> Faf24W<FafifoSpec> {
                Faf24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter 25 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf25(&mut self) -> Faf25W<FafifoSpec> {
                Faf25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter 26 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf26(&mut self) -> Faf26W<FafifoSpec> {
                Faf26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter 27 associated with FIFO"]
            #[inline(always)]
            #[must_use]
            pub fn faf27(&mut self) -> Faf27W<FafifoSpec> {
                Faf27W::new(self, 27)
            }
        }
        #[doc = "Filter associated FIFO register\n\nYou can [`read`](crate::Reg::read) this register and get [`fafifo::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fafifo::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct FafifoSpec;
        impl crate::RegisterSpec for FafifoSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`fafifo::R`](R) reader structure"]
        impl crate::Readable for FafifoSpec {}
        #[doc = "`write(|w| ..)` method takes [`fafifo::W`](W) writer structure"]
        impl crate::Writable for FafifoSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets FAFIFO to value 0"]
        impl crate::Resettable for FafifoSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "FW (rw) register accessor: Filter working register\n\nYou can [`read`](crate::Reg::read) this register and get [`fw::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fw::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw`]
module"]
    #[doc(alias = "FW")]
    pub type Fw = crate::Reg<fw::FwSpec>;
    #[doc = "Filter working register"]
    pub mod fw {
        #[doc = "Register `FW` reader"]
        pub type R = crate::R<FwSpec>;
        #[doc = "Register `FW` writer"]
        pub type W = crate::W<FwSpec>;
        #[doc = "Field `FW0` reader - Filter working"]
        pub type Fw0R = crate::BitReader;
        #[doc = "Field `FW0` writer - Filter working"]
        pub type Fw0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW1` reader - Filter working"]
        pub type Fw1R = crate::BitReader;
        #[doc = "Field `FW1` writer - Filter working"]
        pub type Fw1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW2` reader - Filter working"]
        pub type Fw2R = crate::BitReader;
        #[doc = "Field `FW2` writer - Filter working"]
        pub type Fw2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW3` reader - Filter working"]
        pub type Fw3R = crate::BitReader;
        #[doc = "Field `FW3` writer - Filter working"]
        pub type Fw3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW4` reader - Filter working"]
        pub type Fw4R = crate::BitReader;
        #[doc = "Field `FW4` writer - Filter working"]
        pub type Fw4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW5` reader - Filter working"]
        pub type Fw5R = crate::BitReader;
        #[doc = "Field `FW5` writer - Filter working"]
        pub type Fw5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW6` reader - Filter working"]
        pub type Fw6R = crate::BitReader;
        #[doc = "Field `FW6` writer - Filter working"]
        pub type Fw6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW7` reader - Filter working"]
        pub type Fw7R = crate::BitReader;
        #[doc = "Field `FW7` writer - Filter working"]
        pub type Fw7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW8` reader - Filter working"]
        pub type Fw8R = crate::BitReader;
        #[doc = "Field `FW8` writer - Filter working"]
        pub type Fw8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW9` reader - Filter working"]
        pub type Fw9R = crate::BitReader;
        #[doc = "Field `FW9` writer - Filter working"]
        pub type Fw9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW10` reader - Filter working"]
        pub type Fw10R = crate::BitReader;
        #[doc = "Field `FW10` writer - Filter working"]
        pub type Fw10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW11` reader - Filter working"]
        pub type Fw11R = crate::BitReader;
        #[doc = "Field `FW11` writer - Filter working"]
        pub type Fw11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW12` reader - Filter working"]
        pub type Fw12R = crate::BitReader;
        #[doc = "Field `FW12` writer - Filter working"]
        pub type Fw12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW13` reader - Filter working"]
        pub type Fw13R = crate::BitReader;
        #[doc = "Field `FW13` writer - Filter working"]
        pub type Fw13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW14` reader - Filter working"]
        pub type Fw14R = crate::BitReader;
        #[doc = "Field `FW14` writer - Filter working"]
        pub type Fw14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW15` reader - Filter working"]
        pub type Fw15R = crate::BitReader;
        #[doc = "Field `FW15` writer - Filter working"]
        pub type Fw15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW16` reader - Filter working"]
        pub type Fw16R = crate::BitReader;
        #[doc = "Field `FW16` writer - Filter working"]
        pub type Fw16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW17` reader - Filter working"]
        pub type Fw17R = crate::BitReader;
        #[doc = "Field `FW17` writer - Filter working"]
        pub type Fw17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW18` reader - Filter working"]
        pub type Fw18R = crate::BitReader;
        #[doc = "Field `FW18` writer - Filter working"]
        pub type Fw18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW19` reader - Filter working"]
        pub type Fw19R = crate::BitReader;
        #[doc = "Field `FW19` writer - Filter working"]
        pub type Fw19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW20` reader - Filter working"]
        pub type Fw20R = crate::BitReader;
        #[doc = "Field `FW20` writer - Filter working"]
        pub type Fw20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW21` reader - Filter working"]
        pub type Fw21R = crate::BitReader;
        #[doc = "Field `FW21` writer - Filter working"]
        pub type Fw21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW22` reader - Filter working"]
        pub type Fw22R = crate::BitReader;
        #[doc = "Field `FW22` writer - Filter working"]
        pub type Fw22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW23` reader - Filter working"]
        pub type Fw23R = crate::BitReader;
        #[doc = "Field `FW23` writer - Filter working"]
        pub type Fw23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW24` reader - Filter working"]
        pub type Fw24R = crate::BitReader;
        #[doc = "Field `FW24` writer - Filter working"]
        pub type Fw24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW25` reader - Filter working"]
        pub type Fw25R = crate::BitReader;
        #[doc = "Field `FW25` writer - Filter working"]
        pub type Fw25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW26` reader - Filter working"]
        pub type Fw26R = crate::BitReader;
        #[doc = "Field `FW26` writer - Filter working"]
        pub type Fw26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FW27` reader - Filter working"]
        pub type Fw27R = crate::BitReader;
        #[doc = "Field `FW27` writer - Filter working"]
        pub type Fw27W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter working"]
            #[inline(always)]
            pub fn fw0(&self) -> Fw0R {
                Fw0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter working"]
            #[inline(always)]
            pub fn fw1(&self) -> Fw1R {
                Fw1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter working"]
            #[inline(always)]
            pub fn fw2(&self) -> Fw2R {
                Fw2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter working"]
            #[inline(always)]
            pub fn fw3(&self) -> Fw3R {
                Fw3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter working"]
            #[inline(always)]
            pub fn fw4(&self) -> Fw4R {
                Fw4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter working"]
            #[inline(always)]
            pub fn fw5(&self) -> Fw5R {
                Fw5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter working"]
            #[inline(always)]
            pub fn fw6(&self) -> Fw6R {
                Fw6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter working"]
            #[inline(always)]
            pub fn fw7(&self) -> Fw7R {
                Fw7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter working"]
            #[inline(always)]
            pub fn fw8(&self) -> Fw8R {
                Fw8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter working"]
            #[inline(always)]
            pub fn fw9(&self) -> Fw9R {
                Fw9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter working"]
            #[inline(always)]
            pub fn fw10(&self) -> Fw10R {
                Fw10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter working"]
            #[inline(always)]
            pub fn fw11(&self) -> Fw11R {
                Fw11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter working"]
            #[inline(always)]
            pub fn fw12(&self) -> Fw12R {
                Fw12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter working"]
            #[inline(always)]
            pub fn fw13(&self) -> Fw13R {
                Fw13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter working"]
            #[inline(always)]
            pub fn fw14(&self) -> Fw14R {
                Fw14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter working"]
            #[inline(always)]
            pub fn fw15(&self) -> Fw15R {
                Fw15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter working"]
            #[inline(always)]
            pub fn fw16(&self) -> Fw16R {
                Fw16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter working"]
            #[inline(always)]
            pub fn fw17(&self) -> Fw17R {
                Fw17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter working"]
            #[inline(always)]
            pub fn fw18(&self) -> Fw18R {
                Fw18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter working"]
            #[inline(always)]
            pub fn fw19(&self) -> Fw19R {
                Fw19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter working"]
            #[inline(always)]
            pub fn fw20(&self) -> Fw20R {
                Fw20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter working"]
            #[inline(always)]
            pub fn fw21(&self) -> Fw21R {
                Fw21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter working"]
            #[inline(always)]
            pub fn fw22(&self) -> Fw22R {
                Fw22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter working"]
            #[inline(always)]
            pub fn fw23(&self) -> Fw23R {
                Fw23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter working"]
            #[inline(always)]
            pub fn fw24(&self) -> Fw24R {
                Fw24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter working"]
            #[inline(always)]
            pub fn fw25(&self) -> Fw25R {
                Fw25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter working"]
            #[inline(always)]
            pub fn fw26(&self) -> Fw26R {
                Fw26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter working"]
            #[inline(always)]
            pub fn fw27(&self) -> Fw27R {
                Fw27R::new(((self.bits >> 27) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw0(&mut self) -> Fw0W<FwSpec> {
                Fw0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw1(&mut self) -> Fw1W<FwSpec> {
                Fw1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw2(&mut self) -> Fw2W<FwSpec> {
                Fw2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw3(&mut self) -> Fw3W<FwSpec> {
                Fw3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw4(&mut self) -> Fw4W<FwSpec> {
                Fw4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw5(&mut self) -> Fw5W<FwSpec> {
                Fw5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw6(&mut self) -> Fw6W<FwSpec> {
                Fw6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw7(&mut self) -> Fw7W<FwSpec> {
                Fw7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw8(&mut self) -> Fw8W<FwSpec> {
                Fw8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw9(&mut self) -> Fw9W<FwSpec> {
                Fw9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw10(&mut self) -> Fw10W<FwSpec> {
                Fw10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw11(&mut self) -> Fw11W<FwSpec> {
                Fw11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw12(&mut self) -> Fw12W<FwSpec> {
                Fw12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw13(&mut self) -> Fw13W<FwSpec> {
                Fw13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw14(&mut self) -> Fw14W<FwSpec> {
                Fw14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw15(&mut self) -> Fw15W<FwSpec> {
                Fw15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw16(&mut self) -> Fw16W<FwSpec> {
                Fw16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw17(&mut self) -> Fw17W<FwSpec> {
                Fw17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw18(&mut self) -> Fw18W<FwSpec> {
                Fw18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw19(&mut self) -> Fw19W<FwSpec> {
                Fw19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw20(&mut self) -> Fw20W<FwSpec> {
                Fw20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw21(&mut self) -> Fw21W<FwSpec> {
                Fw21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw22(&mut self) -> Fw22W<FwSpec> {
                Fw22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw23(&mut self) -> Fw23W<FwSpec> {
                Fw23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw24(&mut self) -> Fw24W<FwSpec> {
                Fw24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw25(&mut self) -> Fw25W<FwSpec> {
                Fw25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw26(&mut self) -> Fw26W<FwSpec> {
                Fw26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter working"]
            #[inline(always)]
            #[must_use]
            pub fn fw27(&mut self) -> Fw27W<FwSpec> {
                Fw27W::new(self, 27)
            }
        }
        #[doc = "Filter working register\n\nYou can [`read`](crate::Reg::read) this register and get [`fw::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fw::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct FwSpec;
        impl crate::RegisterSpec for FwSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`fw::R`](R) reader structure"]
        impl crate::Readable for FwSpec {}
        #[doc = "`write(|w| ..)` method takes [`fw::W`](W) writer structure"]
        impl crate::Writable for FwSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets FW to value 0"]
        impl crate::Resettable for FwSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F0DATA0 (rw) register accessor: Filter 0 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f0data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f0data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f0data0`]
module"]
    #[doc(alias = "F0DATA0")]
    pub type F0data0 = crate::Reg<f0data0::F0data0Spec>;
    #[doc = "Filter 0 data 0 register"]
    pub mod f0data0 {
        #[doc = "Register `F0DATA0` reader"]
        pub type R = crate::R<F0data0Spec>;
        #[doc = "Register `F0DATA0` writer"]
        pub type W = crate::W<F0data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F0data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F0data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F0data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F0data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F0data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F0data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F0data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F0data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F0data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F0data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F0data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F0data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F0data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F0data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F0data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F0data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F0data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F0data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F0data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F0data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F0data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F0data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F0data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F0data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F0data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F0data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F0data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F0data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F0data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F0data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F0data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F0data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 0 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f0data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f0data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F0data0Spec;
        impl crate::RegisterSpec for F0data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f0data0::R`](R) reader structure"]
        impl crate::Readable for F0data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f0data0::W`](W) writer structure"]
        impl crate::Writable for F0data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F0DATA0 to value 0"]
        impl crate::Resettable for F0data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F0DATA1 (rw) register accessor: Filter 0 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f0data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f0data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f0data1`]
module"]
    #[doc(alias = "F0DATA1")]
    pub type F0data1 = crate::Reg<f0data1::F0data1Spec>;
    #[doc = "Filter 0 data 1 register"]
    pub mod f0data1 {
        #[doc = "Register `F0DATA1` reader"]
        pub type R = crate::R<F0data1Spec>;
        #[doc = "Register `F0DATA1` writer"]
        pub type W = crate::W<F0data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F0data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F0data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F0data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F0data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F0data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F0data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F0data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F0data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F0data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F0data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F0data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F0data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F0data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F0data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F0data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F0data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F0data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F0data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F0data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F0data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F0data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F0data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F0data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F0data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F0data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F0data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F0data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F0data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F0data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F0data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F0data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F0data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 0 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f0data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f0data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F0data1Spec;
        impl crate::RegisterSpec for F0data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f0data1::R`](R) reader structure"]
        impl crate::Readable for F0data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f0data1::W`](W) writer structure"]
        impl crate::Writable for F0data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F0DATA1 to value 0"]
        impl crate::Resettable for F0data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F1DATA0 (rw) register accessor: Filter 1 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f1data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f1data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f1data0`]
module"]
    #[doc(alias = "F1DATA0")]
    pub type F1data0 = crate::Reg<f1data0::F1data0Spec>;
    #[doc = "Filter 1 data 0 register"]
    pub mod f1data0 {
        #[doc = "Register `F1DATA0` reader"]
        pub type R = crate::R<F1data0Spec>;
        #[doc = "Register `F1DATA0` writer"]
        pub type W = crate::W<F1data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F1data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F1data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F1data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F1data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F1data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F1data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F1data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F1data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F1data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F1data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F1data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F1data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F1data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F1data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F1data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F1data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F1data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F1data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F1data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F1data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F1data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F1data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F1data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F1data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F1data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F1data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F1data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F1data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F1data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F1data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F1data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F1data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 1 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f1data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f1data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F1data0Spec;
        impl crate::RegisterSpec for F1data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f1data0::R`](R) reader structure"]
        impl crate::Readable for F1data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f1data0::W`](W) writer structure"]
        impl crate::Writable for F1data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F1DATA0 to value 0"]
        impl crate::Resettable for F1data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F1DATA1 (rw) register accessor: Filter 1 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f1data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f1data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f1data1`]
module"]
    #[doc(alias = "F1DATA1")]
    pub type F1data1 = crate::Reg<f1data1::F1data1Spec>;
    #[doc = "Filter 1 data 1 register"]
    pub mod f1data1 {
        #[doc = "Register `F1DATA1` reader"]
        pub type R = crate::R<F1data1Spec>;
        #[doc = "Register `F1DATA1` writer"]
        pub type W = crate::W<F1data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F1data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F1data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F1data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F1data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F1data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F1data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F1data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F1data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F1data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F1data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F1data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F1data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F1data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F1data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F1data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F1data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F1data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F1data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F1data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F1data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F1data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F1data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F1data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F1data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F1data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F1data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F1data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F1data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F1data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F1data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F1data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F1data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 1 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f1data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f1data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F1data1Spec;
        impl crate::RegisterSpec for F1data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f1data1::R`](R) reader structure"]
        impl crate::Readable for F1data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f1data1::W`](W) writer structure"]
        impl crate::Writable for F1data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F1DATA1 to value 0"]
        impl crate::Resettable for F1data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F2DATA0 (rw) register accessor: Filter 2 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f2data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f2data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f2data0`]
module"]
    #[doc(alias = "F2DATA0")]
    pub type F2data0 = crate::Reg<f2data0::F2data0Spec>;
    #[doc = "Filter 2 data 0 register"]
    pub mod f2data0 {
        #[doc = "Register `F2DATA0` reader"]
        pub type R = crate::R<F2data0Spec>;
        #[doc = "Register `F2DATA0` writer"]
        pub type W = crate::W<F2data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F2data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F2data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F2data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F2data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F2data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F2data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F2data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F2data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F2data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F2data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F2data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F2data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F2data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F2data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F2data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F2data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F2data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F2data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F2data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F2data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F2data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F2data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F2data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F2data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F2data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F2data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F2data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F2data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F2data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F2data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F2data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F2data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 2 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f2data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f2data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F2data0Spec;
        impl crate::RegisterSpec for F2data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f2data0::R`](R) reader structure"]
        impl crate::Readable for F2data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f2data0::W`](W) writer structure"]
        impl crate::Writable for F2data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F2DATA0 to value 0"]
        impl crate::Resettable for F2data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F2DATA1 (rw) register accessor: Filter 2 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f2data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f2data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f2data1`]
module"]
    #[doc(alias = "F2DATA1")]
    pub type F2data1 = crate::Reg<f2data1::F2data1Spec>;
    #[doc = "Filter 2 data 1 register"]
    pub mod f2data1 {
        #[doc = "Register `F2DATA1` reader"]
        pub type R = crate::R<F2data1Spec>;
        #[doc = "Register `F2DATA1` writer"]
        pub type W = crate::W<F2data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F2data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F2data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F2data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F2data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F2data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F2data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F2data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F2data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F2data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F2data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F2data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F2data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F2data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F2data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F2data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F2data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F2data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F2data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F2data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F2data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F2data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F2data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F2data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F2data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F2data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F2data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F2data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F2data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F2data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F2data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F2data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F2data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 2 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f2data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f2data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F2data1Spec;
        impl crate::RegisterSpec for F2data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f2data1::R`](R) reader structure"]
        impl crate::Readable for F2data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f2data1::W`](W) writer structure"]
        impl crate::Writable for F2data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F2DATA1 to value 0"]
        impl crate::Resettable for F2data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F3DATA0 (rw) register accessor: Filter 3 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f3data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f3data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f3data0`]
module"]
    #[doc(alias = "F3DATA0")]
    pub type F3data0 = crate::Reg<f3data0::F3data0Spec>;
    #[doc = "Filter 3 data 0 register"]
    pub mod f3data0 {
        #[doc = "Register `F3DATA0` reader"]
        pub type R = crate::R<F3data0Spec>;
        #[doc = "Register `F3DATA0` writer"]
        pub type W = crate::W<F3data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F3data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F3data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F3data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F3data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F3data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F3data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F3data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F3data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F3data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F3data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F3data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F3data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F3data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F3data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F3data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F3data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F3data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F3data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F3data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F3data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F3data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F3data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F3data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F3data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F3data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F3data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F3data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F3data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F3data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F3data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F3data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F3data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 3 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f3data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f3data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F3data0Spec;
        impl crate::RegisterSpec for F3data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f3data0::R`](R) reader structure"]
        impl crate::Readable for F3data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f3data0::W`](W) writer structure"]
        impl crate::Writable for F3data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F3DATA0 to value 0"]
        impl crate::Resettable for F3data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F3DATA1 (rw) register accessor: Filter 3 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f3data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f3data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f3data1`]
module"]
    #[doc(alias = "F3DATA1")]
    pub type F3data1 = crate::Reg<f3data1::F3data1Spec>;
    #[doc = "Filter 3 data 1 register"]
    pub mod f3data1 {
        #[doc = "Register `F3DATA1` reader"]
        pub type R = crate::R<F3data1Spec>;
        #[doc = "Register `F3DATA1` writer"]
        pub type W = crate::W<F3data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F3data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F3data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F3data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F3data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F3data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F3data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F3data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F3data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F3data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F3data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F3data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F3data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F3data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F3data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F3data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F3data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F3data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F3data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F3data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F3data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F3data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F3data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F3data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F3data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F3data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F3data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F3data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F3data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F3data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F3data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F3data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F3data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 3 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f3data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f3data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F3data1Spec;
        impl crate::RegisterSpec for F3data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f3data1::R`](R) reader structure"]
        impl crate::Readable for F3data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f3data1::W`](W) writer structure"]
        impl crate::Writable for F3data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F3DATA1 to value 0"]
        impl crate::Resettable for F3data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F4DATA0 (rw) register accessor: Filter 4 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f4data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f4data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f4data0`]
module"]
    #[doc(alias = "F4DATA0")]
    pub type F4data0 = crate::Reg<f4data0::F4data0Spec>;
    #[doc = "Filter 4 data 0 register"]
    pub mod f4data0 {
        #[doc = "Register `F4DATA0` reader"]
        pub type R = crate::R<F4data0Spec>;
        #[doc = "Register `F4DATA0` writer"]
        pub type W = crate::W<F4data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F4data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F4data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F4data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F4data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F4data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F4data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F4data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F4data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F4data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F4data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F4data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F4data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F4data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F4data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F4data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F4data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F4data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F4data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F4data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F4data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F4data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F4data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F4data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F4data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F4data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F4data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F4data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F4data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F4data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F4data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F4data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F4data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 4 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f4data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f4data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F4data0Spec;
        impl crate::RegisterSpec for F4data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f4data0::R`](R) reader structure"]
        impl crate::Readable for F4data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f4data0::W`](W) writer structure"]
        impl crate::Writable for F4data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F4DATA0 to value 0"]
        impl crate::Resettable for F4data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F4DATA1 (rw) register accessor: Filter 4 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f4data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f4data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f4data1`]
module"]
    #[doc(alias = "F4DATA1")]
    pub type F4data1 = crate::Reg<f4data1::F4data1Spec>;
    #[doc = "Filter 4 data 1 register"]
    pub mod f4data1 {
        #[doc = "Register `F4DATA1` reader"]
        pub type R = crate::R<F4data1Spec>;
        #[doc = "Register `F4DATA1` writer"]
        pub type W = crate::W<F4data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F4data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F4data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F4data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F4data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F4data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F4data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F4data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F4data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F4data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F4data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F4data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F4data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F4data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F4data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F4data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F4data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F4data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F4data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F4data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F4data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F4data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F4data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F4data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F4data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F4data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F4data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F4data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F4data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F4data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F4data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F4data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F4data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 4 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f4data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f4data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F4data1Spec;
        impl crate::RegisterSpec for F4data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f4data1::R`](R) reader structure"]
        impl crate::Readable for F4data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f4data1::W`](W) writer structure"]
        impl crate::Writable for F4data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F4DATA1 to value 0"]
        impl crate::Resettable for F4data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F5DATA0 (rw) register accessor: Filter 5 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f5data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f5data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f5data0`]
module"]
    #[doc(alias = "F5DATA0")]
    pub type F5data0 = crate::Reg<f5data0::F5data0Spec>;
    #[doc = "Filter 5 data 0 register"]
    pub mod f5data0 {
        #[doc = "Register `F5DATA0` reader"]
        pub type R = crate::R<F5data0Spec>;
        #[doc = "Register `F5DATA0` writer"]
        pub type W = crate::W<F5data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F5data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F5data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F5data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F5data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F5data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F5data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F5data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F5data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F5data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F5data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F5data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F5data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F5data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F5data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F5data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F5data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F5data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F5data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F5data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F5data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F5data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F5data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F5data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F5data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F5data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F5data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F5data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F5data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F5data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F5data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F5data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F5data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 5 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f5data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f5data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F5data0Spec;
        impl crate::RegisterSpec for F5data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f5data0::R`](R) reader structure"]
        impl crate::Readable for F5data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f5data0::W`](W) writer structure"]
        impl crate::Writable for F5data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F5DATA0 to value 0"]
        impl crate::Resettable for F5data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F5DATA1 (rw) register accessor: Filter 5 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f5data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f5data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f5data1`]
module"]
    #[doc(alias = "F5DATA1")]
    pub type F5data1 = crate::Reg<f5data1::F5data1Spec>;
    #[doc = "Filter 5 data 1 register"]
    pub mod f5data1 {
        #[doc = "Register `F5DATA1` reader"]
        pub type R = crate::R<F5data1Spec>;
        #[doc = "Register `F5DATA1` writer"]
        pub type W = crate::W<F5data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F5data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F5data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F5data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F5data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F5data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F5data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F5data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F5data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F5data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F5data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F5data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F5data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F5data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F5data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F5data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F5data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F5data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F5data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F5data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F5data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F5data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F5data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F5data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F5data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F5data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F5data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F5data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F5data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F5data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F5data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F5data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F5data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 5 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f5data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f5data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F5data1Spec;
        impl crate::RegisterSpec for F5data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f5data1::R`](R) reader structure"]
        impl crate::Readable for F5data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f5data1::W`](W) writer structure"]
        impl crate::Writable for F5data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F5DATA1 to value 0"]
        impl crate::Resettable for F5data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F6DATA0 (rw) register accessor: Filter 6 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f6data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f6data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f6data0`]
module"]
    #[doc(alias = "F6DATA0")]
    pub type F6data0 = crate::Reg<f6data0::F6data0Spec>;
    #[doc = "Filter 6 data 0 register"]
    pub mod f6data0 {
        #[doc = "Register `F6DATA0` reader"]
        pub type R = crate::R<F6data0Spec>;
        #[doc = "Register `F6DATA0` writer"]
        pub type W = crate::W<F6data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F6data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F6data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F6data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F6data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F6data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F6data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F6data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F6data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F6data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F6data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F6data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F6data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F6data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F6data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F6data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F6data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F6data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F6data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F6data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F6data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F6data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F6data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F6data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F6data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F6data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F6data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F6data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F6data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F6data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F6data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F6data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F6data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 6 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f6data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f6data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F6data0Spec;
        impl crate::RegisterSpec for F6data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f6data0::R`](R) reader structure"]
        impl crate::Readable for F6data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f6data0::W`](W) writer structure"]
        impl crate::Writable for F6data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F6DATA0 to value 0"]
        impl crate::Resettable for F6data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F6DATA1 (rw) register accessor: Filter 6 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f6data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f6data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f6data1`]
module"]
    #[doc(alias = "F6DATA1")]
    pub type F6data1 = crate::Reg<f6data1::F6data1Spec>;
    #[doc = "Filter 6 data 1 register"]
    pub mod f6data1 {
        #[doc = "Register `F6DATA1` reader"]
        pub type R = crate::R<F6data1Spec>;
        #[doc = "Register `F6DATA1` writer"]
        pub type W = crate::W<F6data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F6data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F6data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F6data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F6data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F6data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F6data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F6data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F6data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F6data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F6data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F6data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F6data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F6data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F6data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F6data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F6data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F6data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F6data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F6data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F6data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F6data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F6data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F6data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F6data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F6data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F6data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F6data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F6data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F6data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F6data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F6data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F6data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 6 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f6data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f6data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F6data1Spec;
        impl crate::RegisterSpec for F6data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f6data1::R`](R) reader structure"]
        impl crate::Readable for F6data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f6data1::W`](W) writer structure"]
        impl crate::Writable for F6data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F6DATA1 to value 0"]
        impl crate::Resettable for F6data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F7DATA0 (rw) register accessor: Filter 7 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f7data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f7data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f7data0`]
module"]
    #[doc(alias = "F7DATA0")]
    pub type F7data0 = crate::Reg<f7data0::F7data0Spec>;
    #[doc = "Filter 7 data 0 register"]
    pub mod f7data0 {
        #[doc = "Register `F7DATA0` reader"]
        pub type R = crate::R<F7data0Spec>;
        #[doc = "Register `F7DATA0` writer"]
        pub type W = crate::W<F7data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F7data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F7data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F7data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F7data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F7data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F7data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F7data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F7data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F7data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F7data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F7data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F7data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F7data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F7data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F7data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F7data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F7data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F7data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F7data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F7data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F7data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F7data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F7data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F7data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F7data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F7data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F7data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F7data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F7data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F7data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F7data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F7data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 7 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f7data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f7data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F7data0Spec;
        impl crate::RegisterSpec for F7data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f7data0::R`](R) reader structure"]
        impl crate::Readable for F7data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f7data0::W`](W) writer structure"]
        impl crate::Writable for F7data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F7DATA0 to value 0"]
        impl crate::Resettable for F7data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F7DATA1 (rw) register accessor: Filter 7 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f7data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f7data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f7data1`]
module"]
    #[doc(alias = "F7DATA1")]
    pub type F7data1 = crate::Reg<f7data1::F7data1Spec>;
    #[doc = "Filter 7 data 1 register"]
    pub mod f7data1 {
        #[doc = "Register `F7DATA1` reader"]
        pub type R = crate::R<F7data1Spec>;
        #[doc = "Register `F7DATA1` writer"]
        pub type W = crate::W<F7data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F7data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F7data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F7data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F7data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F7data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F7data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F7data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F7data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F7data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F7data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F7data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F7data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F7data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F7data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F7data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F7data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F7data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F7data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F7data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F7data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F7data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F7data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F7data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F7data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F7data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F7data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F7data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F7data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F7data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F7data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F7data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F7data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 7 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f7data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f7data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F7data1Spec;
        impl crate::RegisterSpec for F7data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f7data1::R`](R) reader structure"]
        impl crate::Readable for F7data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f7data1::W`](W) writer structure"]
        impl crate::Writable for F7data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F7DATA1 to value 0"]
        impl crate::Resettable for F7data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F8DATA0 (rw) register accessor: Filter 8 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f8data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f8data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f8data0`]
module"]
    #[doc(alias = "F8DATA0")]
    pub type F8data0 = crate::Reg<f8data0::F8data0Spec>;
    #[doc = "Filter 8 data 0 register"]
    pub mod f8data0 {
        #[doc = "Register `F8DATA0` reader"]
        pub type R = crate::R<F8data0Spec>;
        #[doc = "Register `F8DATA0` writer"]
        pub type W = crate::W<F8data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F8data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F8data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F8data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F8data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F8data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F8data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F8data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F8data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F8data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F8data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F8data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F8data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F8data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F8data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F8data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F8data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F8data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F8data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F8data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F8data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F8data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F8data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F8data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F8data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F8data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F8data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F8data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F8data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F8data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F8data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F8data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F8data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 8 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f8data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f8data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F8data0Spec;
        impl crate::RegisterSpec for F8data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f8data0::R`](R) reader structure"]
        impl crate::Readable for F8data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f8data0::W`](W) writer structure"]
        impl crate::Writable for F8data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F8DATA0 to value 0"]
        impl crate::Resettable for F8data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F8DATA1 (rw) register accessor: Filter 8 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f8data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f8data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f8data1`]
module"]
    #[doc(alias = "F8DATA1")]
    pub type F8data1 = crate::Reg<f8data1::F8data1Spec>;
    #[doc = "Filter 8 data 1 register"]
    pub mod f8data1 {
        #[doc = "Register `F8DATA1` reader"]
        pub type R = crate::R<F8data1Spec>;
        #[doc = "Register `F8DATA1` writer"]
        pub type W = crate::W<F8data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F8data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F8data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F8data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F8data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F8data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F8data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F8data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F8data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F8data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F8data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F8data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F8data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F8data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F8data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F8data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F8data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F8data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F8data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F8data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F8data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F8data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F8data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F8data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F8data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F8data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F8data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F8data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F8data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F8data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F8data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F8data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F8data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 8 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f8data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f8data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F8data1Spec;
        impl crate::RegisterSpec for F8data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f8data1::R`](R) reader structure"]
        impl crate::Readable for F8data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f8data1::W`](W) writer structure"]
        impl crate::Writable for F8data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F8DATA1 to value 0"]
        impl crate::Resettable for F8data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F9DATA0 (rw) register accessor: Filter 9 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f9data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f9data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f9data0`]
module"]
    #[doc(alias = "F9DATA0")]
    pub type F9data0 = crate::Reg<f9data0::F9data0Spec>;
    #[doc = "Filter 9 data 0 register"]
    pub mod f9data0 {
        #[doc = "Register `F9DATA0` reader"]
        pub type R = crate::R<F9data0Spec>;
        #[doc = "Register `F9DATA0` writer"]
        pub type W = crate::W<F9data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F9data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F9data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F9data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F9data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F9data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F9data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F9data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F9data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F9data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F9data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F9data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F9data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F9data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F9data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F9data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F9data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F9data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F9data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F9data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F9data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F9data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F9data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F9data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F9data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F9data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F9data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F9data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F9data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F9data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F9data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F9data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F9data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 9 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f9data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f9data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F9data0Spec;
        impl crate::RegisterSpec for F9data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f9data0::R`](R) reader structure"]
        impl crate::Readable for F9data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f9data0::W`](W) writer structure"]
        impl crate::Writable for F9data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F9DATA0 to value 0"]
        impl crate::Resettable for F9data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F9DATA1 (rw) register accessor: Filter 9 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f9data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f9data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f9data1`]
module"]
    #[doc(alias = "F9DATA1")]
    pub type F9data1 = crate::Reg<f9data1::F9data1Spec>;
    #[doc = "Filter 9 data 1 register"]
    pub mod f9data1 {
        #[doc = "Register `F9DATA1` reader"]
        pub type R = crate::R<F9data1Spec>;
        #[doc = "Register `F9DATA1` writer"]
        pub type W = crate::W<F9data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F9data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F9data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F9data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F9data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F9data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F9data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F9data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F9data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F9data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F9data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F9data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F9data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F9data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F9data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F9data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F9data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F9data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F9data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F9data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F9data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F9data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F9data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F9data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F9data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F9data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F9data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F9data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F9data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F9data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F9data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F9data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F9data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 9 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f9data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f9data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F9data1Spec;
        impl crate::RegisterSpec for F9data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f9data1::R`](R) reader structure"]
        impl crate::Readable for F9data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f9data1::W`](W) writer structure"]
        impl crate::Writable for F9data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F9DATA1 to value 0"]
        impl crate::Resettable for F9data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F10DATA0 (rw) register accessor: Filter 10 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f10data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f10data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f10data0`]
module"]
    #[doc(alias = "F10DATA0")]
    pub type F10data0 = crate::Reg<f10data0::F10data0Spec>;
    #[doc = "Filter 10 data 0 register"]
    pub mod f10data0 {
        #[doc = "Register `F10DATA0` reader"]
        pub type R = crate::R<F10data0Spec>;
        #[doc = "Register `F10DATA0` writer"]
        pub type W = crate::W<F10data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F10data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F10data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F10data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F10data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F10data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F10data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F10data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F10data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F10data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F10data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F10data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F10data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F10data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F10data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F10data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F10data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F10data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F10data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F10data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F10data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F10data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F10data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F10data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F10data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F10data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F10data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F10data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F10data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F10data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F10data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F10data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F10data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 10 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f10data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f10data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F10data0Spec;
        impl crate::RegisterSpec for F10data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f10data0::R`](R) reader structure"]
        impl crate::Readable for F10data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f10data0::W`](W) writer structure"]
        impl crate::Writable for F10data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F10DATA0 to value 0"]
        impl crate::Resettable for F10data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F10DATA1 (rw) register accessor: Filter 10 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f10data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f10data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f10data1`]
module"]
    #[doc(alias = "F10DATA1")]
    pub type F10data1 = crate::Reg<f10data1::F10data1Spec>;
    #[doc = "Filter 10 data 1 register"]
    pub mod f10data1 {
        #[doc = "Register `F10DATA1` reader"]
        pub type R = crate::R<F10data1Spec>;
        #[doc = "Register `F10DATA1` writer"]
        pub type W = crate::W<F10data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F10data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F10data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F10data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F10data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F10data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F10data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F10data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F10data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F10data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F10data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F10data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F10data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F10data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F10data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F10data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F10data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F10data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F10data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F10data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F10data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F10data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F10data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F10data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F10data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F10data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F10data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F10data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F10data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F10data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F10data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F10data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F10data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 10 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f10data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f10data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F10data1Spec;
        impl crate::RegisterSpec for F10data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f10data1::R`](R) reader structure"]
        impl crate::Readable for F10data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f10data1::W`](W) writer structure"]
        impl crate::Writable for F10data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F10DATA1 to value 0"]
        impl crate::Resettable for F10data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F11DATA0 (rw) register accessor: Filter 11 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f11data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f11data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f11data0`]
module"]
    #[doc(alias = "F11DATA0")]
    pub type F11data0 = crate::Reg<f11data0::F11data0Spec>;
    #[doc = "Filter 11 data 0 register"]
    pub mod f11data0 {
        #[doc = "Register `F11DATA0` reader"]
        pub type R = crate::R<F11data0Spec>;
        #[doc = "Register `F11DATA0` writer"]
        pub type W = crate::W<F11data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F11data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F11data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F11data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F11data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F11data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F11data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F11data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F11data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F11data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F11data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F11data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F11data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F11data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F11data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F11data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F11data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F11data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F11data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F11data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F11data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F11data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F11data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F11data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F11data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F11data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F11data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F11data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F11data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F11data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F11data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F11data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F11data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 11 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f11data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f11data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F11data0Spec;
        impl crate::RegisterSpec for F11data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f11data0::R`](R) reader structure"]
        impl crate::Readable for F11data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f11data0::W`](W) writer structure"]
        impl crate::Writable for F11data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F11DATA0 to value 0"]
        impl crate::Resettable for F11data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F11DATA1 (rw) register accessor: Filter 11 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f11data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f11data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f11data1`]
module"]
    #[doc(alias = "F11DATA1")]
    pub type F11data1 = crate::Reg<f11data1::F11data1Spec>;
    #[doc = "Filter 11 data 1 register"]
    pub mod f11data1 {
        #[doc = "Register `F11DATA1` reader"]
        pub type R = crate::R<F11data1Spec>;
        #[doc = "Register `F11DATA1` writer"]
        pub type W = crate::W<F11data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F11data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F11data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F11data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F11data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F11data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F11data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F11data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F11data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F11data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F11data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F11data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F11data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F11data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F11data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F11data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F11data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F11data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F11data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F11data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F11data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F11data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F11data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F11data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F11data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F11data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F11data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F11data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F11data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F11data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F11data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F11data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F11data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 11 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f11data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f11data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F11data1Spec;
        impl crate::RegisterSpec for F11data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f11data1::R`](R) reader structure"]
        impl crate::Readable for F11data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f11data1::W`](W) writer structure"]
        impl crate::Writable for F11data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F11DATA1 to value 0"]
        impl crate::Resettable for F11data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F12DATA0 (rw) register accessor: Filter 12 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f12data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f12data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f12data0`]
module"]
    #[doc(alias = "F12DATA0")]
    pub type F12data0 = crate::Reg<f12data0::F12data0Spec>;
    #[doc = "Filter 12 data 0 register"]
    pub mod f12data0 {
        #[doc = "Register `F12DATA0` reader"]
        pub type R = crate::R<F12data0Spec>;
        #[doc = "Register `F12DATA0` writer"]
        pub type W = crate::W<F12data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F12data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F12data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F12data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F12data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F12data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F12data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F12data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F12data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F12data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F12data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F12data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F12data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F12data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F12data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F12data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F12data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F12data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F12data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F12data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F12data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F12data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F12data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F12data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F12data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F12data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F12data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F12data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F12data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F12data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F12data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F12data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F12data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 12 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f12data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f12data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F12data0Spec;
        impl crate::RegisterSpec for F12data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f12data0::R`](R) reader structure"]
        impl crate::Readable for F12data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f12data0::W`](W) writer structure"]
        impl crate::Writable for F12data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F12DATA0 to value 0"]
        impl crate::Resettable for F12data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F12DATA1 (rw) register accessor: Filter 12 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f12data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f12data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f12data1`]
module"]
    #[doc(alias = "F12DATA1")]
    pub type F12data1 = crate::Reg<f12data1::F12data1Spec>;
    #[doc = "Filter 12 data 1 register"]
    pub mod f12data1 {
        #[doc = "Register `F12DATA1` reader"]
        pub type R = crate::R<F12data1Spec>;
        #[doc = "Register `F12DATA1` writer"]
        pub type W = crate::W<F12data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F12data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F12data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F12data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F12data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F12data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F12data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F12data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F12data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F12data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F12data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F12data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F12data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F12data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F12data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F12data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F12data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F12data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F12data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F12data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F12data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F12data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F12data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F12data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F12data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F12data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F12data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F12data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F12data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F12data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F12data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F12data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F12data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 12 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f12data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f12data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F12data1Spec;
        impl crate::RegisterSpec for F12data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f12data1::R`](R) reader structure"]
        impl crate::Readable for F12data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f12data1::W`](W) writer structure"]
        impl crate::Writable for F12data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F12DATA1 to value 0"]
        impl crate::Resettable for F12data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F13DATA0 (rw) register accessor: Filter 13 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f13data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f13data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f13data0`]
module"]
    #[doc(alias = "F13DATA0")]
    pub type F13data0 = crate::Reg<f13data0::F13data0Spec>;
    #[doc = "Filter 13 data 0 register"]
    pub mod f13data0 {
        #[doc = "Register `F13DATA0` reader"]
        pub type R = crate::R<F13data0Spec>;
        #[doc = "Register `F13DATA0` writer"]
        pub type W = crate::W<F13data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F13data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F13data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F13data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F13data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F13data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F13data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F13data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F13data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F13data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F13data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F13data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F13data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F13data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F13data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F13data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F13data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F13data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F13data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F13data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F13data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F13data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F13data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F13data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F13data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F13data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F13data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F13data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F13data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F13data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F13data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F13data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F13data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 13 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f13data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f13data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F13data0Spec;
        impl crate::RegisterSpec for F13data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f13data0::R`](R) reader structure"]
        impl crate::Readable for F13data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f13data0::W`](W) writer structure"]
        impl crate::Writable for F13data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F13DATA0 to value 0"]
        impl crate::Resettable for F13data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F13DATA1 (rw) register accessor: Filter 13 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f13data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f13data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f13data1`]
module"]
    #[doc(alias = "F13DATA1")]
    pub type F13data1 = crate::Reg<f13data1::F13data1Spec>;
    #[doc = "Filter 13 data 1 register"]
    pub mod f13data1 {
        #[doc = "Register `F13DATA1` reader"]
        pub type R = crate::R<F13data1Spec>;
        #[doc = "Register `F13DATA1` writer"]
        pub type W = crate::W<F13data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F13data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F13data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F13data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F13data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F13data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F13data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F13data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F13data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F13data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F13data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F13data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F13data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F13data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F13data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F13data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F13data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F13data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F13data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F13data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F13data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F13data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F13data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F13data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F13data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F13data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F13data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F13data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F13data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F13data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F13data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F13data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F13data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 13 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f13data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f13data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F13data1Spec;
        impl crate::RegisterSpec for F13data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f13data1::R`](R) reader structure"]
        impl crate::Readable for F13data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f13data1::W`](W) writer structure"]
        impl crate::Writable for F13data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F13DATA1 to value 0"]
        impl crate::Resettable for F13data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F14DATA0 (rw) register accessor: Filter 14 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f14data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f14data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f14data0`]
module"]
    #[doc(alias = "F14DATA0")]
    pub type F14data0 = crate::Reg<f14data0::F14data0Spec>;
    #[doc = "Filter 14 data 0 register"]
    pub mod f14data0 {
        #[doc = "Register `F14DATA0` reader"]
        pub type R = crate::R<F14data0Spec>;
        #[doc = "Register `F14DATA0` writer"]
        pub type W = crate::W<F14data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F14data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F14data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F14data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F14data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F14data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F14data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F14data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F14data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F14data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F14data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F14data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F14data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F14data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F14data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F14data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F14data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F14data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F14data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F14data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F14data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F14data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F14data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F14data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F14data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F14data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F14data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F14data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F14data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F14data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F14data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F14data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F14data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 14 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f14data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f14data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F14data0Spec;
        impl crate::RegisterSpec for F14data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f14data0::R`](R) reader structure"]
        impl crate::Readable for F14data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f14data0::W`](W) writer structure"]
        impl crate::Writable for F14data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F14DATA0 to value 0"]
        impl crate::Resettable for F14data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F14DATA1 (rw) register accessor: Filter 14 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f14data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f14data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f14data1`]
module"]
    #[doc(alias = "F14DATA1")]
    pub type F14data1 = crate::Reg<f14data1::F14data1Spec>;
    #[doc = "Filter 14 data 1 register"]
    pub mod f14data1 {
        #[doc = "Register `F14DATA1` reader"]
        pub type R = crate::R<F14data1Spec>;
        #[doc = "Register `F14DATA1` writer"]
        pub type W = crate::W<F14data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F14data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F14data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F14data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F14data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F14data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F14data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F14data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F14data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F14data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F14data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F14data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F14data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F14data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F14data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F14data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F14data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F14data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F14data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F14data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F14data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F14data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F14data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F14data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F14data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F14data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F14data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F14data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F14data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F14data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F14data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F14data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F14data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 14 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f14data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f14data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F14data1Spec;
        impl crate::RegisterSpec for F14data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f14data1::R`](R) reader structure"]
        impl crate::Readable for F14data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f14data1::W`](W) writer structure"]
        impl crate::Writable for F14data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F14DATA1 to value 0"]
        impl crate::Resettable for F14data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F15DATA0 (rw) register accessor: Filter 15 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f15data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f15data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f15data0`]
module"]
    #[doc(alias = "F15DATA0")]
    pub type F15data0 = crate::Reg<f15data0::F15data0Spec>;
    #[doc = "Filter 15 data 0 register"]
    pub mod f15data0 {
        #[doc = "Register `F15DATA0` reader"]
        pub type R = crate::R<F15data0Spec>;
        #[doc = "Register `F15DATA0` writer"]
        pub type W = crate::W<F15data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F15data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F15data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F15data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F15data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F15data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F15data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F15data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F15data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F15data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F15data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F15data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F15data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F15data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F15data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F15data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F15data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F15data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F15data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F15data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F15data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F15data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F15data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F15data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F15data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F15data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F15data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F15data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F15data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F15data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F15data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F15data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F15data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 15 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f15data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f15data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F15data0Spec;
        impl crate::RegisterSpec for F15data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f15data0::R`](R) reader structure"]
        impl crate::Readable for F15data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f15data0::W`](W) writer structure"]
        impl crate::Writable for F15data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F15DATA0 to value 0"]
        impl crate::Resettable for F15data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F15DATA1 (rw) register accessor: Filter 15 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f15data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f15data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f15data1`]
module"]
    #[doc(alias = "F15DATA1")]
    pub type F15data1 = crate::Reg<f15data1::F15data1Spec>;
    #[doc = "Filter 15 data 1 register"]
    pub mod f15data1 {
        #[doc = "Register `F15DATA1` reader"]
        pub type R = crate::R<F15data1Spec>;
        #[doc = "Register `F15DATA1` writer"]
        pub type W = crate::W<F15data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F15data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F15data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F15data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F15data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F15data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F15data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F15data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F15data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F15data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F15data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F15data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F15data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F15data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F15data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F15data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F15data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F15data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F15data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F15data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F15data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F15data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F15data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F15data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F15data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F15data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F15data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F15data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F15data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F15data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F15data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F15data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F15data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 15 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f15data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f15data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F15data1Spec;
        impl crate::RegisterSpec for F15data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f15data1::R`](R) reader structure"]
        impl crate::Readable for F15data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f15data1::W`](W) writer structure"]
        impl crate::Writable for F15data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F15DATA1 to value 0"]
        impl crate::Resettable for F15data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F16DATA0 (rw) register accessor: Filter 16 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f16data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f16data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f16data0`]
module"]
    #[doc(alias = "F16DATA0")]
    pub type F16data0 = crate::Reg<f16data0::F16data0Spec>;
    #[doc = "Filter 16 data 0 register"]
    pub mod f16data0 {
        #[doc = "Register `F16DATA0` reader"]
        pub type R = crate::R<F16data0Spec>;
        #[doc = "Register `F16DATA0` writer"]
        pub type W = crate::W<F16data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F16data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F16data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F16data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F16data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F16data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F16data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F16data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F16data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F16data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F16data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F16data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F16data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F16data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F16data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F16data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F16data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F16data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F16data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F16data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F16data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F16data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F16data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F16data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F16data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F16data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F16data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F16data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F16data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F16data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F16data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F16data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F16data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 16 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f16data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f16data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F16data0Spec;
        impl crate::RegisterSpec for F16data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f16data0::R`](R) reader structure"]
        impl crate::Readable for F16data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f16data0::W`](W) writer structure"]
        impl crate::Writable for F16data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F16DATA0 to value 0"]
        impl crate::Resettable for F16data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F16DATA1 (rw) register accessor: Filter 16 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f16data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f16data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f16data1`]
module"]
    #[doc(alias = "F16DATA1")]
    pub type F16data1 = crate::Reg<f16data1::F16data1Spec>;
    #[doc = "Filter 16 data 1 register"]
    pub mod f16data1 {
        #[doc = "Register `F16DATA1` reader"]
        pub type R = crate::R<F16data1Spec>;
        #[doc = "Register `F16DATA1` writer"]
        pub type W = crate::W<F16data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F16data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F16data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F16data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F16data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F16data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F16data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F16data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F16data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F16data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F16data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F16data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F16data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F16data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F16data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F16data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F16data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F16data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F16data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F16data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F16data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F16data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F16data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F16data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F16data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F16data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F16data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F16data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F16data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F16data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F16data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F16data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F16data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 16 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f16data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f16data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F16data1Spec;
        impl crate::RegisterSpec for F16data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f16data1::R`](R) reader structure"]
        impl crate::Readable for F16data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f16data1::W`](W) writer structure"]
        impl crate::Writable for F16data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F16DATA1 to value 0"]
        impl crate::Resettable for F16data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F17DATA0 (rw) register accessor: Filter 17 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f17data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f17data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f17data0`]
module"]
    #[doc(alias = "F17DATA0")]
    pub type F17data0 = crate::Reg<f17data0::F17data0Spec>;
    #[doc = "Filter 17 data 0 register"]
    pub mod f17data0 {
        #[doc = "Register `F17DATA0` reader"]
        pub type R = crate::R<F17data0Spec>;
        #[doc = "Register `F17DATA0` writer"]
        pub type W = crate::W<F17data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F17data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F17data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F17data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F17data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F17data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F17data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F17data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F17data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F17data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F17data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F17data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F17data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F17data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F17data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F17data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F17data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F17data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F17data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F17data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F17data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F17data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F17data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F17data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F17data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F17data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F17data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F17data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F17data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F17data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F17data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F17data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F17data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 17 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f17data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f17data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F17data0Spec;
        impl crate::RegisterSpec for F17data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f17data0::R`](R) reader structure"]
        impl crate::Readable for F17data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f17data0::W`](W) writer structure"]
        impl crate::Writable for F17data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F17DATA0 to value 0"]
        impl crate::Resettable for F17data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F17DATA1 (rw) register accessor: Filter 17 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f17data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f17data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f17data1`]
module"]
    #[doc(alias = "F17DATA1")]
    pub type F17data1 = crate::Reg<f17data1::F17data1Spec>;
    #[doc = "Filter 17 data 1 register"]
    pub mod f17data1 {
        #[doc = "Register `F17DATA1` reader"]
        pub type R = crate::R<F17data1Spec>;
        #[doc = "Register `F17DATA1` writer"]
        pub type W = crate::W<F17data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F17data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F17data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F17data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F17data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F17data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F17data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F17data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F17data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F17data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F17data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F17data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F17data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F17data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F17data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F17data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F17data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F17data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F17data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F17data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F17data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F17data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F17data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F17data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F17data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F17data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F17data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F17data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F17data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F17data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F17data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F17data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F17data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 17 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f17data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f17data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F17data1Spec;
        impl crate::RegisterSpec for F17data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f17data1::R`](R) reader structure"]
        impl crate::Readable for F17data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f17data1::W`](W) writer structure"]
        impl crate::Writable for F17data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F17DATA1 to value 0"]
        impl crate::Resettable for F17data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F18DATA0 (rw) register accessor: Filter 18 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f18data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f18data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f18data0`]
module"]
    #[doc(alias = "F18DATA0")]
    pub type F18data0 = crate::Reg<f18data0::F18data0Spec>;
    #[doc = "Filter 18 data 0 register"]
    pub mod f18data0 {
        #[doc = "Register `F18DATA0` reader"]
        pub type R = crate::R<F18data0Spec>;
        #[doc = "Register `F18DATA0` writer"]
        pub type W = crate::W<F18data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F18data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F18data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F18data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F18data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F18data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F18data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F18data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F18data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F18data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F18data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F18data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F18data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F18data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F18data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F18data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F18data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F18data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F18data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F18data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F18data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F18data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F18data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F18data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F18data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F18data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F18data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F18data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F18data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F18data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F18data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F18data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F18data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 18 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f18data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f18data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F18data0Spec;
        impl crate::RegisterSpec for F18data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f18data0::R`](R) reader structure"]
        impl crate::Readable for F18data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f18data0::W`](W) writer structure"]
        impl crate::Writable for F18data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F18DATA0 to value 0"]
        impl crate::Resettable for F18data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F18DATA1 (rw) register accessor: Filter 18 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f18data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f18data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f18data1`]
module"]
    #[doc(alias = "F18DATA1")]
    pub type F18data1 = crate::Reg<f18data1::F18data1Spec>;
    #[doc = "Filter 18 data 1 register"]
    pub mod f18data1 {
        #[doc = "Register `F18DATA1` reader"]
        pub type R = crate::R<F18data1Spec>;
        #[doc = "Register `F18DATA1` writer"]
        pub type W = crate::W<F18data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F18data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F18data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F18data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F18data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F18data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F18data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F18data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F18data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F18data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F18data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F18data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F18data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F18data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F18data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F18data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F18data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F18data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F18data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F18data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F18data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F18data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F18data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F18data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F18data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F18data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F18data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F18data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F18data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F18data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F18data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F18data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F18data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 18 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f18data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f18data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F18data1Spec;
        impl crate::RegisterSpec for F18data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f18data1::R`](R) reader structure"]
        impl crate::Readable for F18data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f18data1::W`](W) writer structure"]
        impl crate::Writable for F18data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F18DATA1 to value 0"]
        impl crate::Resettable for F18data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F19DATA0 (rw) register accessor: Filter 19 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f19data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f19data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f19data0`]
module"]
    #[doc(alias = "F19DATA0")]
    pub type F19data0 = crate::Reg<f19data0::F19data0Spec>;
    #[doc = "Filter 19 data 0 register"]
    pub mod f19data0 {
        #[doc = "Register `F19DATA0` reader"]
        pub type R = crate::R<F19data0Spec>;
        #[doc = "Register `F19DATA0` writer"]
        pub type W = crate::W<F19data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F19data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F19data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F19data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F19data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F19data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F19data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F19data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F19data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F19data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F19data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F19data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F19data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F19data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F19data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F19data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F19data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F19data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F19data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F19data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F19data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F19data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F19data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F19data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F19data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F19data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F19data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F19data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F19data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F19data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F19data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F19data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F19data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 19 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f19data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f19data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F19data0Spec;
        impl crate::RegisterSpec for F19data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f19data0::R`](R) reader structure"]
        impl crate::Readable for F19data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f19data0::W`](W) writer structure"]
        impl crate::Writable for F19data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F19DATA0 to value 0"]
        impl crate::Resettable for F19data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F19DATA1 (rw) register accessor: Filter 19 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f19data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f19data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f19data1`]
module"]
    #[doc(alias = "F19DATA1")]
    pub type F19data1 = crate::Reg<f19data1::F19data1Spec>;
    #[doc = "Filter 19 data 1 register"]
    pub mod f19data1 {
        #[doc = "Register `F19DATA1` reader"]
        pub type R = crate::R<F19data1Spec>;
        #[doc = "Register `F19DATA1` writer"]
        pub type W = crate::W<F19data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F19data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F19data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F19data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F19data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F19data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F19data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F19data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F19data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F19data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F19data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F19data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F19data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F19data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F19data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F19data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F19data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F19data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F19data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F19data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F19data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F19data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F19data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F19data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F19data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F19data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F19data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F19data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F19data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F19data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F19data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F19data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F19data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 19 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f19data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f19data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F19data1Spec;
        impl crate::RegisterSpec for F19data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f19data1::R`](R) reader structure"]
        impl crate::Readable for F19data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f19data1::W`](W) writer structure"]
        impl crate::Writable for F19data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F19DATA1 to value 0"]
        impl crate::Resettable for F19data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F20DATA0 (rw) register accessor: Filter 20 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f20data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f20data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f20data0`]
module"]
    #[doc(alias = "F20DATA0")]
    pub type F20data0 = crate::Reg<f20data0::F20data0Spec>;
    #[doc = "Filter 20 data 0 register"]
    pub mod f20data0 {
        #[doc = "Register `F20DATA0` reader"]
        pub type R = crate::R<F20data0Spec>;
        #[doc = "Register `F20DATA0` writer"]
        pub type W = crate::W<F20data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F20data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F20data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F20data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F20data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F20data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F20data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F20data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F20data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F20data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F20data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F20data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F20data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F20data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F20data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F20data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F20data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F20data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F20data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F20data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F20data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F20data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F20data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F20data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F20data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F20data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F20data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F20data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F20data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F20data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F20data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F20data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F20data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 20 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f20data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f20data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F20data0Spec;
        impl crate::RegisterSpec for F20data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f20data0::R`](R) reader structure"]
        impl crate::Readable for F20data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f20data0::W`](W) writer structure"]
        impl crate::Writable for F20data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F20DATA0 to value 0"]
        impl crate::Resettable for F20data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F20DATA1 (rw) register accessor: Filter 20 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f20data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f20data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f20data1`]
module"]
    #[doc(alias = "F20DATA1")]
    pub type F20data1 = crate::Reg<f20data1::F20data1Spec>;
    #[doc = "Filter 20 data 1 register"]
    pub mod f20data1 {
        #[doc = "Register `F20DATA1` reader"]
        pub type R = crate::R<F20data1Spec>;
        #[doc = "Register `F20DATA1` writer"]
        pub type W = crate::W<F20data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F20data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F20data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F20data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F20data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F20data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F20data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F20data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F20data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F20data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F20data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F20data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F20data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F20data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F20data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F20data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F20data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F20data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F20data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F20data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F20data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F20data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F20data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F20data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F20data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F20data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F20data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F20data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F20data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F20data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F20data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F20data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F20data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 20 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f20data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f20data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F20data1Spec;
        impl crate::RegisterSpec for F20data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f20data1::R`](R) reader structure"]
        impl crate::Readable for F20data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f20data1::W`](W) writer structure"]
        impl crate::Writable for F20data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F20DATA1 to value 0"]
        impl crate::Resettable for F20data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F21DATA0 (rw) register accessor: Filter 21 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f21data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f21data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f21data0`]
module"]
    #[doc(alias = "F21DATA0")]
    pub type F21data0 = crate::Reg<f21data0::F21data0Spec>;
    #[doc = "Filter 21 data 0 register"]
    pub mod f21data0 {
        #[doc = "Register `F21DATA0` reader"]
        pub type R = crate::R<F21data0Spec>;
        #[doc = "Register `F21DATA0` writer"]
        pub type W = crate::W<F21data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F21data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F21data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F21data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F21data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F21data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F21data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F21data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F21data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F21data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F21data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F21data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F21data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F21data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F21data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F21data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F21data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F21data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F21data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F21data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F21data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F21data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F21data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F21data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F21data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F21data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F21data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F21data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F21data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F21data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F21data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F21data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F21data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 21 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f21data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f21data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F21data0Spec;
        impl crate::RegisterSpec for F21data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f21data0::R`](R) reader structure"]
        impl crate::Readable for F21data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f21data0::W`](W) writer structure"]
        impl crate::Writable for F21data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F21DATA0 to value 0"]
        impl crate::Resettable for F21data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F21DATA1 (rw) register accessor: Filter 21 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f21data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f21data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f21data1`]
module"]
    #[doc(alias = "F21DATA1")]
    pub type F21data1 = crate::Reg<f21data1::F21data1Spec>;
    #[doc = "Filter 21 data 1 register"]
    pub mod f21data1 {
        #[doc = "Register `F21DATA1` reader"]
        pub type R = crate::R<F21data1Spec>;
        #[doc = "Register `F21DATA1` writer"]
        pub type W = crate::W<F21data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F21data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F21data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F21data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F21data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F21data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F21data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F21data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F21data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F21data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F21data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F21data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F21data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F21data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F21data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F21data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F21data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F21data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F21data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F21data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F21data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F21data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F21data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F21data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F21data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F21data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F21data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F21data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F21data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F21data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F21data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F21data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F21data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 21 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f21data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f21data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F21data1Spec;
        impl crate::RegisterSpec for F21data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f21data1::R`](R) reader structure"]
        impl crate::Readable for F21data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f21data1::W`](W) writer structure"]
        impl crate::Writable for F21data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F21DATA1 to value 0"]
        impl crate::Resettable for F21data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F22DATA0 (rw) register accessor: Filter 22 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f22data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f22data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f22data0`]
module"]
    #[doc(alias = "F22DATA0")]
    pub type F22data0 = crate::Reg<f22data0::F22data0Spec>;
    #[doc = "Filter 22 data 0 register"]
    pub mod f22data0 {
        #[doc = "Register `F22DATA0` reader"]
        pub type R = crate::R<F22data0Spec>;
        #[doc = "Register `F22DATA0` writer"]
        pub type W = crate::W<F22data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F22data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F22data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F22data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F22data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F22data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F22data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F22data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F22data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F22data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F22data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F22data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F22data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F22data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F22data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F22data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F22data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F22data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F22data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F22data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F22data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F22data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F22data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F22data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F22data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F22data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F22data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F22data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F22data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F22data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F22data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F22data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F22data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 22 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f22data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f22data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F22data0Spec;
        impl crate::RegisterSpec for F22data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f22data0::R`](R) reader structure"]
        impl crate::Readable for F22data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f22data0::W`](W) writer structure"]
        impl crate::Writable for F22data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F22DATA0 to value 0"]
        impl crate::Resettable for F22data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F22DATA1 (rw) register accessor: Filter 22 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f22data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f22data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f22data1`]
module"]
    #[doc(alias = "F22DATA1")]
    pub type F22data1 = crate::Reg<f22data1::F22data1Spec>;
    #[doc = "Filter 22 data 1 register"]
    pub mod f22data1 {
        #[doc = "Register `F22DATA1` reader"]
        pub type R = crate::R<F22data1Spec>;
        #[doc = "Register `F22DATA1` writer"]
        pub type W = crate::W<F22data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F22data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F22data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F22data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F22data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F22data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F22data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F22data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F22data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F22data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F22data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F22data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F22data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F22data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F22data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F22data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F22data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F22data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F22data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F22data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F22data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F22data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F22data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F22data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F22data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F22data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F22data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F22data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F22data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F22data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F22data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F22data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F22data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 22 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f22data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f22data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F22data1Spec;
        impl crate::RegisterSpec for F22data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f22data1::R`](R) reader structure"]
        impl crate::Readable for F22data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f22data1::W`](W) writer structure"]
        impl crate::Writable for F22data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F22DATA1 to value 0"]
        impl crate::Resettable for F22data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F23DATA0 (rw) register accessor: Filter 23 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f23data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f23data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f23data0`]
module"]
    #[doc(alias = "F23DATA0")]
    pub type F23data0 = crate::Reg<f23data0::F23data0Spec>;
    #[doc = "Filter 23 data 0 register"]
    pub mod f23data0 {
        #[doc = "Register `F23DATA0` reader"]
        pub type R = crate::R<F23data0Spec>;
        #[doc = "Register `F23DATA0` writer"]
        pub type W = crate::W<F23data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F23data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F23data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F23data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F23data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F23data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F23data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F23data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F23data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F23data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F23data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F23data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F23data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F23data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F23data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F23data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F23data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F23data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F23data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F23data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F23data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F23data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F23data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F23data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F23data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F23data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F23data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F23data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F23data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F23data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F23data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F23data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F23data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 23 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f23data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f23data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F23data0Spec;
        impl crate::RegisterSpec for F23data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f23data0::R`](R) reader structure"]
        impl crate::Readable for F23data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f23data0::W`](W) writer structure"]
        impl crate::Writable for F23data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F23DATA0 to value 0"]
        impl crate::Resettable for F23data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F23DATA1 (rw) register accessor: Filter 23 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f23data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f23data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f23data1`]
module"]
    #[doc(alias = "F23DATA1")]
    pub type F23data1 = crate::Reg<f23data1::F23data1Spec>;
    #[doc = "Filter 23 data 1 register"]
    pub mod f23data1 {
        #[doc = "Register `F23DATA1` reader"]
        pub type R = crate::R<F23data1Spec>;
        #[doc = "Register `F23DATA1` writer"]
        pub type W = crate::W<F23data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F23data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F23data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F23data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F23data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F23data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F23data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F23data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F23data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F23data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F23data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F23data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F23data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F23data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F23data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F23data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F23data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F23data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F23data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F23data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F23data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F23data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F23data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F23data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F23data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F23data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F23data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F23data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F23data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F23data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F23data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F23data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F23data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 23 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f23data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f23data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F23data1Spec;
        impl crate::RegisterSpec for F23data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f23data1::R`](R) reader structure"]
        impl crate::Readable for F23data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f23data1::W`](W) writer structure"]
        impl crate::Writable for F23data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F23DATA1 to value 0"]
        impl crate::Resettable for F23data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F24DATA0 (rw) register accessor: Filter 24 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f24data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f24data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f24data0`]
module"]
    #[doc(alias = "F24DATA0")]
    pub type F24data0 = crate::Reg<f24data0::F24data0Spec>;
    #[doc = "Filter 24 data 0 register"]
    pub mod f24data0 {
        #[doc = "Register `F24DATA0` reader"]
        pub type R = crate::R<F24data0Spec>;
        #[doc = "Register `F24DATA0` writer"]
        pub type W = crate::W<F24data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F24data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F24data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F24data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F24data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F24data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F24data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F24data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F24data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F24data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F24data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F24data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F24data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F24data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F24data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F24data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F24data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F24data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F24data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F24data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F24data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F24data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F24data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F24data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F24data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F24data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F24data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F24data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F24data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F24data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F24data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F24data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F24data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 24 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f24data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f24data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F24data0Spec;
        impl crate::RegisterSpec for F24data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f24data0::R`](R) reader structure"]
        impl crate::Readable for F24data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f24data0::W`](W) writer structure"]
        impl crate::Writable for F24data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F24DATA0 to value 0"]
        impl crate::Resettable for F24data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F24DATA1 (rw) register accessor: Filter 24 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f24data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f24data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f24data1`]
module"]
    #[doc(alias = "F24DATA1")]
    pub type F24data1 = crate::Reg<f24data1::F24data1Spec>;
    #[doc = "Filter 24 data 1 register"]
    pub mod f24data1 {
        #[doc = "Register `F24DATA1` reader"]
        pub type R = crate::R<F24data1Spec>;
        #[doc = "Register `F24DATA1` writer"]
        pub type W = crate::W<F24data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F24data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F24data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F24data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F24data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F24data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F24data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F24data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F24data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F24data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F24data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F24data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F24data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F24data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F24data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F24data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F24data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F24data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F24data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F24data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F24data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F24data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F24data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F24data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F24data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F24data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F24data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F24data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F24data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F24data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F24data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F24data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F24data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 24 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f24data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f24data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F24data1Spec;
        impl crate::RegisterSpec for F24data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f24data1::R`](R) reader structure"]
        impl crate::Readable for F24data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f24data1::W`](W) writer structure"]
        impl crate::Writable for F24data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F24DATA1 to value 0"]
        impl crate::Resettable for F24data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F25DATA0 (rw) register accessor: Filter 25 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f25data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f25data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f25data0`]
module"]
    #[doc(alias = "F25DATA0")]
    pub type F25data0 = crate::Reg<f25data0::F25data0Spec>;
    #[doc = "Filter 25 data 0 register"]
    pub mod f25data0 {
        #[doc = "Register `F25DATA0` reader"]
        pub type R = crate::R<F25data0Spec>;
        #[doc = "Register `F25DATA0` writer"]
        pub type W = crate::W<F25data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F25data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F25data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F25data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F25data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F25data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F25data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F25data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F25data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F25data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F25data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F25data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F25data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F25data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F25data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F25data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F25data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F25data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F25data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F25data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F25data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F25data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F25data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F25data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F25data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F25data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F25data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F25data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F25data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F25data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F25data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F25data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F25data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 25 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f25data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f25data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F25data0Spec;
        impl crate::RegisterSpec for F25data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f25data0::R`](R) reader structure"]
        impl crate::Readable for F25data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f25data0::W`](W) writer structure"]
        impl crate::Writable for F25data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F25DATA0 to value 0"]
        impl crate::Resettable for F25data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F25DATA1 (rw) register accessor: Filter 25 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f25data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f25data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f25data1`]
module"]
    #[doc(alias = "F25DATA1")]
    pub type F25data1 = crate::Reg<f25data1::F25data1Spec>;
    #[doc = "Filter 25 data 1 register"]
    pub mod f25data1 {
        #[doc = "Register `F25DATA1` reader"]
        pub type R = crate::R<F25data1Spec>;
        #[doc = "Register `F25DATA1` writer"]
        pub type W = crate::W<F25data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F25data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F25data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F25data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F25data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F25data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F25data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F25data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F25data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F25data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F25data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F25data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F25data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F25data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F25data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F25data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F25data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F25data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F25data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F25data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F25data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F25data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F25data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F25data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F25data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F25data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F25data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F25data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F25data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F25data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F25data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F25data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F25data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 25 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f25data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f25data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F25data1Spec;
        impl crate::RegisterSpec for F25data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f25data1::R`](R) reader structure"]
        impl crate::Readable for F25data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f25data1::W`](W) writer structure"]
        impl crate::Writable for F25data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F25DATA1 to value 0"]
        impl crate::Resettable for F25data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F26DATA0 (rw) register accessor: Filter 26 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f26data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f26data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f26data0`]
module"]
    #[doc(alias = "F26DATA0")]
    pub type F26data0 = crate::Reg<f26data0::F26data0Spec>;
    #[doc = "Filter 26 data 0 register"]
    pub mod f26data0 {
        #[doc = "Register `F26DATA0` reader"]
        pub type R = crate::R<F26data0Spec>;
        #[doc = "Register `F26DATA0` writer"]
        pub type W = crate::W<F26data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F26data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F26data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F26data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F26data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F26data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F26data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F26data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F26data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F26data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F26data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F26data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F26data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F26data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F26data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F26data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F26data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F26data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F26data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F26data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F26data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F26data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F26data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F26data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F26data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F26data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F26data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F26data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F26data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F26data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F26data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F26data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F26data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 26 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f26data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f26data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F26data0Spec;
        impl crate::RegisterSpec for F26data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f26data0::R`](R) reader structure"]
        impl crate::Readable for F26data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f26data0::W`](W) writer structure"]
        impl crate::Writable for F26data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F26DATA0 to value 0"]
        impl crate::Resettable for F26data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F26DATA1 (rw) register accessor: Filter 26 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f26data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f26data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f26data1`]
module"]
    #[doc(alias = "F26DATA1")]
    pub type F26data1 = crate::Reg<f26data1::F26data1Spec>;
    #[doc = "Filter 26 data 1 register"]
    pub mod f26data1 {
        #[doc = "Register `F26DATA1` reader"]
        pub type R = crate::R<F26data1Spec>;
        #[doc = "Register `F26DATA1` writer"]
        pub type W = crate::W<F26data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F26data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F26data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F26data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F26data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F26data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F26data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F26data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F26data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F26data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F26data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F26data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F26data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F26data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F26data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F26data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F26data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F26data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F26data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F26data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F26data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F26data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F26data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F26data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F26data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F26data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F26data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F26data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F26data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F26data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F26data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F26data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F26data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 26 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f26data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f26data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F26data1Spec;
        impl crate::RegisterSpec for F26data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f26data1::R`](R) reader structure"]
        impl crate::Readable for F26data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f26data1::W`](W) writer structure"]
        impl crate::Writable for F26data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F26DATA1 to value 0"]
        impl crate::Resettable for F26data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F27DATA0 (rw) register accessor: Filter 27 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f27data0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f27data0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f27data0`]
module"]
    #[doc(alias = "F27DATA0")]
    pub type F27data0 = crate::Reg<f27data0::F27data0Spec>;
    #[doc = "Filter 27 data 0 register"]
    pub mod f27data0 {
        #[doc = "Register `F27DATA0` reader"]
        pub type R = crate::R<F27data0Spec>;
        #[doc = "Register `F27DATA0` writer"]
        pub type W = crate::W<F27data0Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F27data0Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F27data0Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F27data0Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F27data0Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F27data0Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F27data0Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F27data0Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F27data0Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F27data0Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F27data0Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F27data0Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F27data0Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F27data0Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F27data0Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F27data0Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F27data0Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F27data0Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F27data0Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F27data0Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F27data0Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F27data0Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F27data0Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F27data0Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F27data0Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F27data0Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F27data0Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F27data0Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F27data0Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F27data0Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F27data0Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F27data0Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F27data0Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 27 data 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f27data0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f27data0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F27data0Spec;
        impl crate::RegisterSpec for F27data0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f27data0::R`](R) reader structure"]
        impl crate::Readable for F27data0Spec {}
        #[doc = "`write(|w| ..)` method takes [`f27data0::W`](W) writer structure"]
        impl crate::Writable for F27data0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F27DATA0 to value 0"]
        impl crate::Resettable for F27data0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "F27DATA1 (rw) register accessor: Filter 27 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f27data1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f27data1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@f27data1`]
module"]
    #[doc(alias = "F27DATA1")]
    pub type F27data1 = crate::Reg<f27data1::F27data1Spec>;
    #[doc = "Filter 27 data 1 register"]
    pub mod f27data1 {
        #[doc = "Register `F27DATA1` reader"]
        pub type R = crate::R<F27data1Spec>;
        #[doc = "Register `F27DATA1` writer"]
        pub type W = crate::W<F27data1Spec>;
        #[doc = "Field `FD0` reader - Filter bits"]
        pub type Fd0R = crate::BitReader;
        #[doc = "Field `FD0` writer - Filter bits"]
        pub type Fd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD1` reader - Filter bits"]
        pub type Fd1R = crate::BitReader;
        #[doc = "Field `FD1` writer - Filter bits"]
        pub type Fd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD2` reader - Filter bits"]
        pub type Fd2R = crate::BitReader;
        #[doc = "Field `FD2` writer - Filter bits"]
        pub type Fd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD3` reader - Filter bits"]
        pub type Fd3R = crate::BitReader;
        #[doc = "Field `FD3` writer - Filter bits"]
        pub type Fd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD4` reader - Filter bits"]
        pub type Fd4R = crate::BitReader;
        #[doc = "Field `FD4` writer - Filter bits"]
        pub type Fd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD5` reader - Filter bits"]
        pub type Fd5R = crate::BitReader;
        #[doc = "Field `FD5` writer - Filter bits"]
        pub type Fd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD6` reader - Filter bits"]
        pub type Fd6R = crate::BitReader;
        #[doc = "Field `FD6` writer - Filter bits"]
        pub type Fd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD7` reader - Filter bits"]
        pub type Fd7R = crate::BitReader;
        #[doc = "Field `FD7` writer - Filter bits"]
        pub type Fd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD8` reader - Filter bits"]
        pub type Fd8R = crate::BitReader;
        #[doc = "Field `FD8` writer - Filter bits"]
        pub type Fd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD9` reader - Filter bits"]
        pub type Fd9R = crate::BitReader;
        #[doc = "Field `FD9` writer - Filter bits"]
        pub type Fd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD10` reader - Filter bits"]
        pub type Fd10R = crate::BitReader;
        #[doc = "Field `FD10` writer - Filter bits"]
        pub type Fd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD11` reader - Filter bits"]
        pub type Fd11R = crate::BitReader;
        #[doc = "Field `FD11` writer - Filter bits"]
        pub type Fd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD12` reader - Filter bits"]
        pub type Fd12R = crate::BitReader;
        #[doc = "Field `FD12` writer - Filter bits"]
        pub type Fd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD13` reader - Filter bits"]
        pub type Fd13R = crate::BitReader;
        #[doc = "Field `FD13` writer - Filter bits"]
        pub type Fd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD14` reader - Filter bits"]
        pub type Fd14R = crate::BitReader;
        #[doc = "Field `FD14` writer - Filter bits"]
        pub type Fd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD15` reader - Filter bits"]
        pub type Fd15R = crate::BitReader;
        #[doc = "Field `FD15` writer - Filter bits"]
        pub type Fd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD16` reader - Filter bits"]
        pub type Fd16R = crate::BitReader;
        #[doc = "Field `FD16` writer - Filter bits"]
        pub type Fd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD17` reader - Filter bits"]
        pub type Fd17R = crate::BitReader;
        #[doc = "Field `FD17` writer - Filter bits"]
        pub type Fd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD18` reader - Filter bits"]
        pub type Fd18R = crate::BitReader;
        #[doc = "Field `FD18` writer - Filter bits"]
        pub type Fd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD19` reader - Filter bits"]
        pub type Fd19R = crate::BitReader;
        #[doc = "Field `FD19` writer - Filter bits"]
        pub type Fd19W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD20` reader - Filter bits"]
        pub type Fd20R = crate::BitReader;
        #[doc = "Field `FD20` writer - Filter bits"]
        pub type Fd20W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD21` reader - Filter bits"]
        pub type Fd21R = crate::BitReader;
        #[doc = "Field `FD21` writer - Filter bits"]
        pub type Fd21W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD22` reader - Filter bits"]
        pub type Fd22R = crate::BitReader;
        #[doc = "Field `FD22` writer - Filter bits"]
        pub type Fd22W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD23` reader - Filter bits"]
        pub type Fd23R = crate::BitReader;
        #[doc = "Field `FD23` writer - Filter bits"]
        pub type Fd23W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD24` reader - Filter bits"]
        pub type Fd24R = crate::BitReader;
        #[doc = "Field `FD24` writer - Filter bits"]
        pub type Fd24W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD25` reader - Filter bits"]
        pub type Fd25R = crate::BitReader;
        #[doc = "Field `FD25` writer - Filter bits"]
        pub type Fd25W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD26` reader - Filter bits"]
        pub type Fd26R = crate::BitReader;
        #[doc = "Field `FD26` writer - Filter bits"]
        pub type Fd26W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD27` reader - Filter bits"]
        pub type Fd27R = crate::BitReader;
        #[doc = "Field `FD27` writer - Filter bits"]
        pub type Fd27W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD28` reader - Filter bits"]
        pub type Fd28R = crate::BitReader;
        #[doc = "Field `FD28` writer - Filter bits"]
        pub type Fd28W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD29` reader - Filter bits"]
        pub type Fd29R = crate::BitReader;
        #[doc = "Field `FD29` writer - Filter bits"]
        pub type Fd29W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD30` reader - Filter bits"]
        pub type Fd30R = crate::BitReader;
        #[doc = "Field `FD30` writer - Filter bits"]
        pub type Fd30W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FD31` reader - Filter bits"]
        pub type Fd31R = crate::BitReader;
        #[doc = "Field `FD31` writer - Filter bits"]
        pub type Fd31W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            pub fn fd0(&self) -> Fd0R {
                Fd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            pub fn fd1(&self) -> Fd1R {
                Fd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            pub fn fd2(&self) -> Fd2R {
                Fd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            pub fn fd3(&self) -> Fd3R {
                Fd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            pub fn fd4(&self) -> Fd4R {
                Fd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            pub fn fd5(&self) -> Fd5R {
                Fd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            pub fn fd6(&self) -> Fd6R {
                Fd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            pub fn fd7(&self) -> Fd7R {
                Fd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            pub fn fd8(&self) -> Fd8R {
                Fd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            pub fn fd9(&self) -> Fd9R {
                Fd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            pub fn fd10(&self) -> Fd10R {
                Fd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            pub fn fd11(&self) -> Fd11R {
                Fd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            pub fn fd12(&self) -> Fd12R {
                Fd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            pub fn fd13(&self) -> Fd13R {
                Fd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            pub fn fd14(&self) -> Fd14R {
                Fd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            pub fn fd15(&self) -> Fd15R {
                Fd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            pub fn fd16(&self) -> Fd16R {
                Fd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            pub fn fd17(&self) -> Fd17R {
                Fd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            pub fn fd18(&self) -> Fd18R {
                Fd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            pub fn fd19(&self) -> Fd19R {
                Fd19R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            pub fn fd20(&self) -> Fd20R {
                Fd20R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            pub fn fd21(&self) -> Fd21R {
                Fd21R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            pub fn fd22(&self) -> Fd22R {
                Fd22R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            pub fn fd23(&self) -> Fd23R {
                Fd23R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            pub fn fd24(&self) -> Fd24R {
                Fd24R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            pub fn fd25(&self) -> Fd25R {
                Fd25R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            pub fn fd26(&self) -> Fd26R {
                Fd26R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            pub fn fd27(&self) -> Fd27R {
                Fd27R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            pub fn fd28(&self) -> Fd28R {
                Fd28R::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            pub fn fd29(&self) -> Fd29R {
                Fd29R::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            pub fn fd30(&self) -> Fd30R {
                Fd30R::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            pub fn fd31(&self) -> Fd31R {
                Fd31R::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd0(&mut self) -> Fd0W<F27data1Spec> {
                Fd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd1(&mut self) -> Fd1W<F27data1Spec> {
                Fd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd2(&mut self) -> Fd2W<F27data1Spec> {
                Fd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd3(&mut self) -> Fd3W<F27data1Spec> {
                Fd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd4(&mut self) -> Fd4W<F27data1Spec> {
                Fd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd5(&mut self) -> Fd5W<F27data1Spec> {
                Fd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd6(&mut self) -> Fd6W<F27data1Spec> {
                Fd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd7(&mut self) -> Fd7W<F27data1Spec> {
                Fd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd8(&mut self) -> Fd8W<F27data1Spec> {
                Fd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd9(&mut self) -> Fd9W<F27data1Spec> {
                Fd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd10(&mut self) -> Fd10W<F27data1Spec> {
                Fd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd11(&mut self) -> Fd11W<F27data1Spec> {
                Fd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd12(&mut self) -> Fd12W<F27data1Spec> {
                Fd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd13(&mut self) -> Fd13W<F27data1Spec> {
                Fd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd14(&mut self) -> Fd14W<F27data1Spec> {
                Fd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd15(&mut self) -> Fd15W<F27data1Spec> {
                Fd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd16(&mut self) -> Fd16W<F27data1Spec> {
                Fd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd17(&mut self) -> Fd17W<F27data1Spec> {
                Fd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd18(&mut self) -> Fd18W<F27data1Spec> {
                Fd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd19(&mut self) -> Fd19W<F27data1Spec> {
                Fd19W::new(self, 19)
            }
            #[doc = "Bit 20 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd20(&mut self) -> Fd20W<F27data1Spec> {
                Fd20W::new(self, 20)
            }
            #[doc = "Bit 21 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd21(&mut self) -> Fd21W<F27data1Spec> {
                Fd21W::new(self, 21)
            }
            #[doc = "Bit 22 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd22(&mut self) -> Fd22W<F27data1Spec> {
                Fd22W::new(self, 22)
            }
            #[doc = "Bit 23 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd23(&mut self) -> Fd23W<F27data1Spec> {
                Fd23W::new(self, 23)
            }
            #[doc = "Bit 24 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd24(&mut self) -> Fd24W<F27data1Spec> {
                Fd24W::new(self, 24)
            }
            #[doc = "Bit 25 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd25(&mut self) -> Fd25W<F27data1Spec> {
                Fd25W::new(self, 25)
            }
            #[doc = "Bit 26 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd26(&mut self) -> Fd26W<F27data1Spec> {
                Fd26W::new(self, 26)
            }
            #[doc = "Bit 27 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd27(&mut self) -> Fd27W<F27data1Spec> {
                Fd27W::new(self, 27)
            }
            #[doc = "Bit 28 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd28(&mut self) -> Fd28W<F27data1Spec> {
                Fd28W::new(self, 28)
            }
            #[doc = "Bit 29 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd29(&mut self) -> Fd29W<F27data1Spec> {
                Fd29W::new(self, 29)
            }
            #[doc = "Bit 30 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd30(&mut self) -> Fd30W<F27data1Spec> {
                Fd30W::new(self, 30)
            }
            #[doc = "Bit 31 - Filter bits"]
            #[inline(always)]
            #[must_use]
            pub fn fd31(&mut self) -> Fd31W<F27data1Spec> {
                Fd31W::new(self, 31)
            }
        }
        #[doc = "Filter 27 data 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`f27data1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`f27data1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct F27data1Spec;
        impl crate::RegisterSpec for F27data1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`f27data1::R`](R) reader structure"]
        impl crate::Readable for F27data1Spec {}
        #[doc = "`write(|w| ..)` method takes [`f27data1::W`](W) writer structure"]
        impl crate::Writable for F27data1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets F27DATA1 to value 0"]
        impl crate::Resettable for F27data1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "cyclic redundancy check calculation unit"]
pub struct Crc {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Crc {}
impl Crc {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const crc::RegisterBlock = 0x4002_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const crc::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Crc {
    type Target = crc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Crc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Crc").finish()
    }
}
#[doc = "cyclic redundancy check calculation unit"]
pub mod crc {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        data: Data,
        fdata: Fdata,
        ctl: Ctl,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Data register"]
        #[inline(always)]
        pub const fn data(&self) -> &Data {
            &self.data
        }
        #[doc = "0x04 - Free data register"]
        #[inline(always)]
        pub const fn fdata(&self) -> &Fdata {
            &self.fdata
        }
        #[doc = "0x08 - Control register"]
        #[inline(always)]
        pub const fn ctl(&self) -> &Ctl {
            &self.ctl
        }
    }
    #[doc = "DATA (rw) register accessor: Data register\n\nYou can [`read`](crate::Reg::read) this register and get [`data::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data`]
module"]
    #[doc(alias = "DATA")]
    pub type Data = crate::Reg<data::DataSpec>;
    #[doc = "Data register"]
    pub mod data {
        #[doc = "Register `DATA` reader"]
        pub type R = crate::R<DataSpec>;
        #[doc = "Register `DATA` writer"]
        pub type W = crate::W<DataSpec>;
        #[doc = "Field `DATA` reader - CRC calculation result bits"]
        pub type DataR = crate::FieldReader<u32>;
        #[doc = "Field `DATA` writer - CRC calculation result bits"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - CRC calculation result bits"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - CRC calculation result bits"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<DataSpec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Data register\n\nYou can [`read`](crate::Reg::read) this register and get [`data::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DataSpec;
        impl crate::RegisterSpec for DataSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data::R`](R) reader structure"]
        impl crate::Readable for DataSpec {}
        #[doc = "`write(|w| ..)` method takes [`data::W`](W) writer structure"]
        impl crate::Writable for DataSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA to value 0xffff_ffff"]
        impl crate::Resettable for DataSpec {
            const RESET_VALUE: u32 = 0xffff_ffff;
        }
    }
    #[doc = "FDATA (rw) register accessor: Free data register\n\nYou can [`read`](crate::Reg::read) this register and get [`fdata::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fdata::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fdata`]
module"]
    #[doc(alias = "FDATA")]
    pub type Fdata = crate::Reg<fdata::FdataSpec>;
    #[doc = "Free data register"]
    pub mod fdata {
        #[doc = "Register `FDATA` reader"]
        pub type R = crate::R<FdataSpec>;
        #[doc = "Register `FDATA` writer"]
        pub type W = crate::W<FdataSpec>;
        #[doc = "Field `FDATA` reader - Free Data Register bits"]
        pub type FdataR = crate::FieldReader;
        #[doc = "Field `FDATA` writer - Free Data Register bits"]
        pub type FdataW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Free Data Register bits"]
            #[inline(always)]
            pub fn fdata(&self) -> FdataR {
                FdataR::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Free Data Register bits"]
            #[inline(always)]
            #[must_use]
            pub fn fdata(&mut self) -> FdataW<FdataSpec> {
                FdataW::new(self, 0)
            }
        }
        #[doc = "Free data register\n\nYou can [`read`](crate::Reg::read) this register and get [`fdata::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fdata::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct FdataSpec;
        impl crate::RegisterSpec for FdataSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`fdata::R`](R) reader structure"]
        impl crate::Readable for FdataSpec {}
        #[doc = "`write(|w| ..)` method takes [`fdata::W`](W) writer structure"]
        impl crate::Writable for FdataSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets FDATA to value 0"]
        impl crate::Resettable for FdataSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL (rw) register accessor: Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl`]
module"]
    #[doc(alias = "CTL")]
    pub type Ctl = crate::Reg<ctl::CtlSpec>;
    #[doc = "Control register"]
    pub mod ctl {
        #[doc = "Register `CTL` reader"]
        pub type R = crate::R<CtlSpec>;
        #[doc = "Register `CTL` writer"]
        pub type W = crate::W<CtlSpec>;
        #[doc = "Field `RST` reader - reset bit"]
        pub type RstR = crate::BitReader;
        #[doc = "Field `RST` writer - reset bit"]
        pub type RstW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - reset bit"]
            #[inline(always)]
            pub fn rst(&self) -> RstR {
                RstR::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - reset bit"]
            #[inline(always)]
            #[must_use]
            pub fn rst(&mut self) -> RstW<CtlSpec> {
                RstW::new(self, 0)
            }
        }
        #[doc = "Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CtlSpec;
        impl crate::RegisterSpec for CtlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl::R`](R) reader structure"]
        impl crate::Readable for CtlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ctl::W`](W) writer structure"]
        impl crate::Writable for CtlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL to value 0"]
        impl crate::Resettable for CtlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Digital-to-analog converter"]
pub struct Dac {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Dac {}
impl Dac {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dac::RegisterBlock = 0x4000_7400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dac::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Dac {
    type Target = dac::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Dac {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dac").finish()
    }
}
#[doc = "Digital-to-analog converter"]
pub mod dac {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ctl0: Ctl0,
        swt: Swt,
        out0_r12dh: Out0R12dh,
        out0_l12dh: Out0L12dh,
        out0_r8dh: Out0R8dh,
        out1_r12dh: Out1R12dh,
        out1_l12dh: Out1L12dh,
        out1_r8dh: Out1R8dh,
        dacc_r12dh: DaccR12dh,
        dacc_l12dh: DaccL12dh,
        dacc_r8dh: DaccR8dh,
        out0_do: Out0Do,
        out1_do: Out1Do,
    }
    impl RegisterBlock {
        #[doc = "0x00 - DACx control register 0"]
        #[inline(always)]
        pub const fn ctl0(&self) -> &Ctl0 {
            &self.ctl0
        }
        #[doc = "0x04 - DACx software trigger register"]
        #[inline(always)]
        pub const fn swt(&self) -> &Swt {
            &self.swt
        }
        #[doc = "0x08 - DACx_OUT0 12-bit right-aligned data holding register"]
        #[inline(always)]
        pub const fn out0_r12dh(&self) -> &Out0R12dh {
            &self.out0_r12dh
        }
        #[doc = "0x0c - DACx_OUT0 12-bit left-aligned data holding register"]
        #[inline(always)]
        pub const fn out0_l12dh(&self) -> &Out0L12dh {
            &self.out0_l12dh
        }
        #[doc = "0x10 - DACx_OUT0 8-bit right-aligned data holding register"]
        #[inline(always)]
        pub const fn out0_r8dh(&self) -> &Out0R8dh {
            &self.out0_r8dh
        }
        #[doc = "0x14 - DACx_OUT1 12-bit right-aligned data holding register"]
        #[inline(always)]
        pub const fn out1_r12dh(&self) -> &Out1R12dh {
            &self.out1_r12dh
        }
        #[doc = "0x18 - DACx_OUT1 12-bit left-aligned data holding register"]
        #[inline(always)]
        pub const fn out1_l12dh(&self) -> &Out1L12dh {
            &self.out1_l12dh
        }
        #[doc = "0x1c - DACx_OUT1 8-bit right-aligned data holding register"]
        #[inline(always)]
        pub const fn out1_r8dh(&self) -> &Out1R8dh {
            &self.out1_r8dh
        }
        #[doc = "0x20 - DACx concurrent mode 12-bit right-aligned data holding register"]
        #[inline(always)]
        pub const fn dacc_r12dh(&self) -> &DaccR12dh {
            &self.dacc_r12dh
        }
        #[doc = "0x24 - DACx concurrent mode 12-bit left-aligned data holding register"]
        #[inline(always)]
        pub const fn dacc_l12dh(&self) -> &DaccL12dh {
            &self.dacc_l12dh
        }
        #[doc = "0x28 - DACx concurrent mode 8-bit right-aligned data holding register"]
        #[inline(always)]
        pub const fn dacc_r8dh(&self) -> &DaccR8dh {
            &self.dacc_r8dh
        }
        #[doc = "0x2c - DACx_OUT0 data output register"]
        #[inline(always)]
        pub const fn out0_do(&self) -> &Out0Do {
            &self.out0_do
        }
        #[doc = "0x30 - DACx_OUT1 data output register"]
        #[inline(always)]
        pub const fn out1_do(&self) -> &Out1Do {
            &self.out1_do
        }
    }
    #[doc = "CTL0 (rw) register accessor: DACx control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl0`]
module"]
    #[doc(alias = "CTL0")]
    pub type Ctl0 = crate::Reg<ctl0::Ctl0Spec>;
    #[doc = "DACx control register 0"]
    pub mod ctl0 {
        #[doc = "Register `CTL0` reader"]
        pub type R = crate::R<Ctl0Spec>;
        #[doc = "Register `CTL0` writer"]
        pub type W = crate::W<Ctl0Spec>;
        #[doc = "Field `DEN0` reader - DACx_OUT0 enable"]
        pub type Den0R = crate::BitReader;
        #[doc = "Field `DEN0` writer - DACx_OUT0 enable"]
        pub type Den0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DBOFF0` reader - DACx_OUT0 output buffer turn off"]
        pub type Dboff0R = crate::BitReader;
        #[doc = "Field `DBOFF0` writer - DACx_OUT0 output buffer turn off"]
        pub type Dboff0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DTEN0` reader - DACx_OUT0 trigger enable"]
        pub type Dten0R = crate::BitReader;
        #[doc = "Field `DTEN0` writer - DACx_OUT0 trigger enable"]
        pub type Dten0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DTSEL0` reader - DACx_OUT0 trigger selection"]
        pub type Dtsel0R = crate::FieldReader;
        #[doc = "Field `DTSEL0` writer - DACx_OUT0 trigger selection"]
        pub type Dtsel0W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `DWM0` reader - DACx_OUT0 noise wave mode"]
        pub type Dwm0R = crate::FieldReader;
        #[doc = "Field `DWM0` writer - DACx_OUT0 noise wave mode"]
        pub type Dwm0W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `DWBW0` reader - DACx_OUT0 noise wave bit width"]
        pub type Dwbw0R = crate::FieldReader;
        #[doc = "Field `DWBW0` writer - DACx_OUT0 noise wave bit width"]
        pub type Dwbw0W<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DDMAEN0` reader - DACx_OUT0 DMA enable"]
        pub type Ddmaen0R = crate::BitReader;
        #[doc = "Field `DDMAEN0` writer - DACx_OUT0 DMA enable"]
        pub type Ddmaen0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DEN1` reader - DACx_OUT1 enable"]
        pub type Den1R = crate::BitReader;
        #[doc = "Field `DEN1` writer - DACx_OUT1 enable"]
        pub type Den1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DBOFF1` reader - DACx_OUT1 output buffer turn off"]
        pub type Dboff1R = crate::BitReader;
        #[doc = "Field `DBOFF1` writer - DACx_OUT1 output buffer turn off"]
        pub type Dboff1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DTEN1` reader - DACx_OUT1 trigger enable"]
        pub type Dten1R = crate::BitReader;
        #[doc = "Field `DTEN1` writer - DACx_OUT1 trigger enable"]
        pub type Dten1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DTSEL1` reader - DACx_OUT1 trigger selection"]
        pub type Dtsel1R = crate::FieldReader;
        #[doc = "Field `DTSEL1` writer - DACx_OUT1 trigger selection"]
        pub type Dtsel1W<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `DWM1` reader - DACx_OUT1 noise wave mode"]
        pub type Dwm1R = crate::FieldReader;
        #[doc = "Field `DWM1` writer - DACx_OUT1 noise wave mode"]
        pub type Dwm1W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `DWBW1` reader - DACx_OUT1 noise wave bit width"]
        pub type Dwbw1R = crate::FieldReader;
        #[doc = "Field `DWBW1` writer - DACx_OUT1 noise wave bit width"]
        pub type Dwbw1W<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DDMAEN1` reader - DACx_OUT1 DMA enable"]
        pub type Ddmaen1R = crate::BitReader;
        #[doc = "Field `DDMAEN1` writer - DACx_OUT1 DMA enable"]
        pub type Ddmaen1W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - DACx_OUT0 enable"]
            #[inline(always)]
            pub fn den0(&self) -> Den0R {
                Den0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - DACx_OUT0 output buffer turn off"]
            #[inline(always)]
            pub fn dboff0(&self) -> Dboff0R {
                Dboff0R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - DACx_OUT0 trigger enable"]
            #[inline(always)]
            pub fn dten0(&self) -> Dten0R {
                Dten0R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 3:5 - DACx_OUT0 trigger selection"]
            #[inline(always)]
            pub fn dtsel0(&self) -> Dtsel0R {
                Dtsel0R::new(((self.bits >> 3) & 7) as u8)
            }
            #[doc = "Bits 6:7 - DACx_OUT0 noise wave mode"]
            #[inline(always)]
            pub fn dwm0(&self) -> Dwm0R {
                Dwm0R::new(((self.bits >> 6) & 3) as u8)
            }
            #[doc = "Bits 8:11 - DACx_OUT0 noise wave bit width"]
            #[inline(always)]
            pub fn dwbw0(&self) -> Dwbw0R {
                Dwbw0R::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bit 12 - DACx_OUT0 DMA enable"]
            #[inline(always)]
            pub fn ddmaen0(&self) -> Ddmaen0R {
                Ddmaen0R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 16 - DACx_OUT1 enable"]
            #[inline(always)]
            pub fn den1(&self) -> Den1R {
                Den1R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - DACx_OUT1 output buffer turn off"]
            #[inline(always)]
            pub fn dboff1(&self) -> Dboff1R {
                Dboff1R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - DACx_OUT1 trigger enable"]
            #[inline(always)]
            pub fn dten1(&self) -> Dten1R {
                Dten1R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bits 19:21 - DACx_OUT1 trigger selection"]
            #[inline(always)]
            pub fn dtsel1(&self) -> Dtsel1R {
                Dtsel1R::new(((self.bits >> 19) & 7) as u8)
            }
            #[doc = "Bits 22:23 - DACx_OUT1 noise wave mode"]
            #[inline(always)]
            pub fn dwm1(&self) -> Dwm1R {
                Dwm1R::new(((self.bits >> 22) & 3) as u8)
            }
            #[doc = "Bits 24:27 - DACx_OUT1 noise wave bit width"]
            #[inline(always)]
            pub fn dwbw1(&self) -> Dwbw1R {
                Dwbw1R::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bit 28 - DACx_OUT1 DMA enable"]
            #[inline(always)]
            pub fn ddmaen1(&self) -> Ddmaen1R {
                Ddmaen1R::new(((self.bits >> 28) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - DACx_OUT0 enable"]
            #[inline(always)]
            #[must_use]
            pub fn den0(&mut self) -> Den0W<Ctl0Spec> {
                Den0W::new(self, 0)
            }
            #[doc = "Bit 1 - DACx_OUT0 output buffer turn off"]
            #[inline(always)]
            #[must_use]
            pub fn dboff0(&mut self) -> Dboff0W<Ctl0Spec> {
                Dboff0W::new(self, 1)
            }
            #[doc = "Bit 2 - DACx_OUT0 trigger enable"]
            #[inline(always)]
            #[must_use]
            pub fn dten0(&mut self) -> Dten0W<Ctl0Spec> {
                Dten0W::new(self, 2)
            }
            #[doc = "Bits 3:5 - DACx_OUT0 trigger selection"]
            #[inline(always)]
            #[must_use]
            pub fn dtsel0(&mut self) -> Dtsel0W<Ctl0Spec> {
                Dtsel0W::new(self, 3)
            }
            #[doc = "Bits 6:7 - DACx_OUT0 noise wave mode"]
            #[inline(always)]
            #[must_use]
            pub fn dwm0(&mut self) -> Dwm0W<Ctl0Spec> {
                Dwm0W::new(self, 6)
            }
            #[doc = "Bits 8:11 - DACx_OUT0 noise wave bit width"]
            #[inline(always)]
            #[must_use]
            pub fn dwbw0(&mut self) -> Dwbw0W<Ctl0Spec> {
                Dwbw0W::new(self, 8)
            }
            #[doc = "Bit 12 - DACx_OUT0 DMA enable"]
            #[inline(always)]
            #[must_use]
            pub fn ddmaen0(&mut self) -> Ddmaen0W<Ctl0Spec> {
                Ddmaen0W::new(self, 12)
            }
            #[doc = "Bit 16 - DACx_OUT1 enable"]
            #[inline(always)]
            #[must_use]
            pub fn den1(&mut self) -> Den1W<Ctl0Spec> {
                Den1W::new(self, 16)
            }
            #[doc = "Bit 17 - DACx_OUT1 output buffer turn off"]
            #[inline(always)]
            #[must_use]
            pub fn dboff1(&mut self) -> Dboff1W<Ctl0Spec> {
                Dboff1W::new(self, 17)
            }
            #[doc = "Bit 18 - DACx_OUT1 trigger enable"]
            #[inline(always)]
            #[must_use]
            pub fn dten1(&mut self) -> Dten1W<Ctl0Spec> {
                Dten1W::new(self, 18)
            }
            #[doc = "Bits 19:21 - DACx_OUT1 trigger selection"]
            #[inline(always)]
            #[must_use]
            pub fn dtsel1(&mut self) -> Dtsel1W<Ctl0Spec> {
                Dtsel1W::new(self, 19)
            }
            #[doc = "Bits 22:23 - DACx_OUT1 noise wave mode"]
            #[inline(always)]
            #[must_use]
            pub fn dwm1(&mut self) -> Dwm1W<Ctl0Spec> {
                Dwm1W::new(self, 22)
            }
            #[doc = "Bits 24:27 - DACx_OUT1 noise wave bit width"]
            #[inline(always)]
            #[must_use]
            pub fn dwbw1(&mut self) -> Dwbw1W<Ctl0Spec> {
                Dwbw1W::new(self, 24)
            }
            #[doc = "Bit 28 - DACx_OUT1 DMA enable"]
            #[inline(always)]
            #[must_use]
            pub fn ddmaen1(&mut self) -> Ddmaen1W<Ctl0Spec> {
                Ddmaen1W::new(self, 28)
            }
        }
        #[doc = "DACx control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl0Spec;
        impl crate::RegisterSpec for Ctl0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl0::R`](R) reader structure"]
        impl crate::Readable for Ctl0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl0::W`](W) writer structure"]
        impl crate::Writable for Ctl0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL0 to value 0"]
        impl crate::Resettable for Ctl0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "SWT (w) register accessor: DACx software trigger register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swt::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@swt`]
module"]
    #[doc(alias = "SWT")]
    pub type Swt = crate::Reg<swt::SwtSpec>;
    #[doc = "DACx software trigger register"]
    pub mod swt {
        #[doc = "Register `SWT` writer"]
        pub type W = crate::W<SwtSpec>;
        #[doc = "Field `SWTR0` writer - DACx_OUT0 software trigger, cleared by hardware."]
        pub type Swtr0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWTR1` writer - DACx_OUT1 software trigger, cleared by hardware."]
        pub type Swtr1W<'a, REG> = crate::BitWriter<'a, REG>;
        impl W {
            #[doc = "Bit 0 - DACx_OUT0 software trigger, cleared by hardware."]
            #[inline(always)]
            #[must_use]
            pub fn swtr0(&mut self) -> Swtr0W<SwtSpec> {
                Swtr0W::new(self, 0)
            }
            #[doc = "Bit 1 - DACx_OUT1 software trigger, cleared by hardware."]
            #[inline(always)]
            #[must_use]
            pub fn swtr1(&mut self) -> Swtr1W<SwtSpec> {
                Swtr1W::new(self, 1)
            }
        }
        #[doc = "DACx software trigger register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swt::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SwtSpec;
        impl crate::RegisterSpec for SwtSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`swt::W`](W) writer structure"]
        impl crate::Writable for SwtSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SWT to value 0"]
        impl crate::Resettable for SwtSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "OUT0_R12DH (rw) register accessor: DACx_OUT0 12-bit right-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`out0_r12dh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out0_r12dh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out0_r12dh`]
module"]
    #[doc(alias = "OUT0_R12DH")]
    pub type Out0R12dh = crate::Reg<out0_r12dh::Out0R12dhSpec>;
    #[doc = "DACx_OUT0 12-bit right-aligned data holding register"]
    pub mod out0_r12dh {
        #[doc = "Register `OUT0_R12DH` reader"]
        pub type R = crate::R<Out0R12dhSpec>;
        #[doc = "Register `OUT0_R12DH` writer"]
        pub type W = crate::W<Out0R12dhSpec>;
        #[doc = "Field `OUT0_DH` reader - DACx_OUT0 12-bit right-aligned data."]
        pub type Out0DhR = crate::FieldReader<u16>;
        #[doc = "Field `OUT0_DH` writer - DACx_OUT0 12-bit right-aligned data."]
        pub type Out0DhW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - DACx_OUT0 12-bit right-aligned data."]
            #[inline(always)]
            pub fn out0_dh(&self) -> Out0DhR {
                Out0DhR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - DACx_OUT0 12-bit right-aligned data."]
            #[inline(always)]
            #[must_use]
            pub fn out0_dh(&mut self) -> Out0DhW<Out0R12dhSpec> {
                Out0DhW::new(self, 0)
            }
        }
        #[doc = "DACx_OUT0 12-bit right-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`out0_r12dh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out0_r12dh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Out0R12dhSpec;
        impl crate::RegisterSpec for Out0R12dhSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`out0_r12dh::R`](R) reader structure"]
        impl crate::Readable for Out0R12dhSpec {}
        #[doc = "`write(|w| ..)` method takes [`out0_r12dh::W`](W) writer structure"]
        impl crate::Writable for Out0R12dhSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets OUT0_R12DH to value 0"]
        impl crate::Resettable for Out0R12dhSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "OUT0_L12DH (rw) register accessor: DACx_OUT0 12-bit left-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`out0_l12dh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out0_l12dh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out0_l12dh`]
module"]
    #[doc(alias = "OUT0_L12DH")]
    pub type Out0L12dh = crate::Reg<out0_l12dh::Out0L12dhSpec>;
    #[doc = "DACx_OUT0 12-bit left-aligned data holding register"]
    pub mod out0_l12dh {
        #[doc = "Register `OUT0_L12DH` reader"]
        pub type R = crate::R<Out0L12dhSpec>;
        #[doc = "Register `OUT0_L12DH` writer"]
        pub type W = crate::W<Out0L12dhSpec>;
        #[doc = "Field `OUT0_DH` reader - DACx_OUT0 12-bit left-aligned data."]
        pub type Out0DhR = crate::FieldReader<u16>;
        #[doc = "Field `OUT0_DH` writer - DACx_OUT0 12-bit left-aligned data."]
        pub type Out0DhW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 4:15 - DACx_OUT0 12-bit left-aligned data."]
            #[inline(always)]
            pub fn out0_dh(&self) -> Out0DhR {
                Out0DhR::new(((self.bits >> 4) & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 4:15 - DACx_OUT0 12-bit left-aligned data."]
            #[inline(always)]
            #[must_use]
            pub fn out0_dh(&mut self) -> Out0DhW<Out0L12dhSpec> {
                Out0DhW::new(self, 4)
            }
        }
        #[doc = "DACx_OUT0 12-bit left-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`out0_l12dh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out0_l12dh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Out0L12dhSpec;
        impl crate::RegisterSpec for Out0L12dhSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`out0_l12dh::R`](R) reader structure"]
        impl crate::Readable for Out0L12dhSpec {}
        #[doc = "`write(|w| ..)` method takes [`out0_l12dh::W`](W) writer structure"]
        impl crate::Writable for Out0L12dhSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets OUT0_L12DH to value 0"]
        impl crate::Resettable for Out0L12dhSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "OUT0_R8DH (rw) register accessor: DACx_OUT0 8-bit right-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`out0_r8dh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out0_r8dh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out0_r8dh`]
module"]
    #[doc(alias = "OUT0_R8DH")]
    pub type Out0R8dh = crate::Reg<out0_r8dh::Out0R8dhSpec>;
    #[doc = "DACx_OUT0 8-bit right-aligned data holding register"]
    pub mod out0_r8dh {
        #[doc = "Register `OUT0_R8DH` reader"]
        pub type R = crate::R<Out0R8dhSpec>;
        #[doc = "Register `OUT0_R8DH` writer"]
        pub type W = crate::W<Out0R8dhSpec>;
        #[doc = "Field `OUT0_DH` reader - DACx_OUT0 8-bit right-aligned data."]
        pub type Out0DhR = crate::FieldReader;
        #[doc = "Field `OUT0_DH` writer - DACx_OUT0 8-bit right-aligned data."]
        pub type Out0DhW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - DACx_OUT0 8-bit right-aligned data."]
            #[inline(always)]
            pub fn out0_dh(&self) -> Out0DhR {
                Out0DhR::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - DACx_OUT0 8-bit right-aligned data."]
            #[inline(always)]
            #[must_use]
            pub fn out0_dh(&mut self) -> Out0DhW<Out0R8dhSpec> {
                Out0DhW::new(self, 0)
            }
        }
        #[doc = "DACx_OUT0 8-bit right-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`out0_r8dh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out0_r8dh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Out0R8dhSpec;
        impl crate::RegisterSpec for Out0R8dhSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`out0_r8dh::R`](R) reader structure"]
        impl crate::Readable for Out0R8dhSpec {}
        #[doc = "`write(|w| ..)` method takes [`out0_r8dh::W`](W) writer structure"]
        impl crate::Writable for Out0R8dhSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets OUT0_R8DH to value 0"]
        impl crate::Resettable for Out0R8dhSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "OUT1_R12DH (rw) register accessor: DACx_OUT1 12-bit right-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`out1_r12dh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out1_r12dh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out1_r12dh`]
module"]
    #[doc(alias = "OUT1_R12DH")]
    pub type Out1R12dh = crate::Reg<out1_r12dh::Out1R12dhSpec>;
    #[doc = "DACx_OUT1 12-bit right-aligned data holding register"]
    pub mod out1_r12dh {
        #[doc = "Register `OUT1_R12DH` reader"]
        pub type R = crate::R<Out1R12dhSpec>;
        #[doc = "Register `OUT1_R12DH` writer"]
        pub type W = crate::W<Out1R12dhSpec>;
        #[doc = "Field `OUT1_DH` reader - DACx_OUT1 12-bit right-aligned data."]
        pub type Out1DhR = crate::FieldReader<u16>;
        #[doc = "Field `OUT1_DH` writer - DACx_OUT1 12-bit right-aligned data."]
        pub type Out1DhW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - DACx_OUT1 12-bit right-aligned data."]
            #[inline(always)]
            pub fn out1_dh(&self) -> Out1DhR {
                Out1DhR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - DACx_OUT1 12-bit right-aligned data."]
            #[inline(always)]
            #[must_use]
            pub fn out1_dh(&mut self) -> Out1DhW<Out1R12dhSpec> {
                Out1DhW::new(self, 0)
            }
        }
        #[doc = "DACx_OUT1 12-bit right-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`out1_r12dh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out1_r12dh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Out1R12dhSpec;
        impl crate::RegisterSpec for Out1R12dhSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`out1_r12dh::R`](R) reader structure"]
        impl crate::Readable for Out1R12dhSpec {}
        #[doc = "`write(|w| ..)` method takes [`out1_r12dh::W`](W) writer structure"]
        impl crate::Writable for Out1R12dhSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets OUT1_R12DH to value 0"]
        impl crate::Resettable for Out1R12dhSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "OUT1_L12DH (rw) register accessor: DACx_OUT1 12-bit left-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`out1_l12dh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out1_l12dh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out1_l12dh`]
module"]
    #[doc(alias = "OUT1_L12DH")]
    pub type Out1L12dh = crate::Reg<out1_l12dh::Out1L12dhSpec>;
    #[doc = "DACx_OUT1 12-bit left-aligned data holding register"]
    pub mod out1_l12dh {
        #[doc = "Register `OUT1_L12DH` reader"]
        pub type R = crate::R<Out1L12dhSpec>;
        #[doc = "Register `OUT1_L12DH` writer"]
        pub type W = crate::W<Out1L12dhSpec>;
        #[doc = "Field `OUT1_DH` reader - DACx_OUT1 12-bit left-aligned data."]
        pub type Out1DhR = crate::FieldReader<u16>;
        #[doc = "Field `OUT1_DH` writer - DACx_OUT1 12-bit left-aligned data."]
        pub type Out1DhW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 4:15 - DACx_OUT1 12-bit left-aligned data."]
            #[inline(always)]
            pub fn out1_dh(&self) -> Out1DhR {
                Out1DhR::new(((self.bits >> 4) & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 4:15 - DACx_OUT1 12-bit left-aligned data."]
            #[inline(always)]
            #[must_use]
            pub fn out1_dh(&mut self) -> Out1DhW<Out1L12dhSpec> {
                Out1DhW::new(self, 4)
            }
        }
        #[doc = "DACx_OUT1 12-bit left-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`out1_l12dh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out1_l12dh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Out1L12dhSpec;
        impl crate::RegisterSpec for Out1L12dhSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`out1_l12dh::R`](R) reader structure"]
        impl crate::Readable for Out1L12dhSpec {}
        #[doc = "`write(|w| ..)` method takes [`out1_l12dh::W`](W) writer structure"]
        impl crate::Writable for Out1L12dhSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets OUT1_L12DH to value 0"]
        impl crate::Resettable for Out1L12dhSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "OUT1_R8DH (rw) register accessor: DACx_OUT1 8-bit right-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`out1_r8dh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out1_r8dh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out1_r8dh`]
module"]
    #[doc(alias = "OUT1_R8DH")]
    pub type Out1R8dh = crate::Reg<out1_r8dh::Out1R8dhSpec>;
    #[doc = "DACx_OUT1 8-bit right-aligned data holding register"]
    pub mod out1_r8dh {
        #[doc = "Register `OUT1_R8DH` reader"]
        pub type R = crate::R<Out1R8dhSpec>;
        #[doc = "Register `OUT1_R8DH` writer"]
        pub type W = crate::W<Out1R8dhSpec>;
        #[doc = "Field `OUT1_DH` reader - DACx_OUT1 8-bit right-aligned data"]
        pub type Out1DhR = crate::FieldReader;
        #[doc = "Field `OUT1_DH` writer - DACx_OUT1 8-bit right-aligned data"]
        pub type Out1DhW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - DACx_OUT1 8-bit right-aligned data"]
            #[inline(always)]
            pub fn out1_dh(&self) -> Out1DhR {
                Out1DhR::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - DACx_OUT1 8-bit right-aligned data"]
            #[inline(always)]
            #[must_use]
            pub fn out1_dh(&mut self) -> Out1DhW<Out1R8dhSpec> {
                Out1DhW::new(self, 0)
            }
        }
        #[doc = "DACx_OUT1 8-bit right-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`out1_r8dh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`out1_r8dh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Out1R8dhSpec;
        impl crate::RegisterSpec for Out1R8dhSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`out1_r8dh::R`](R) reader structure"]
        impl crate::Readable for Out1R8dhSpec {}
        #[doc = "`write(|w| ..)` method takes [`out1_r8dh::W`](W) writer structure"]
        impl crate::Writable for Out1R8dhSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets OUT1_R8DH to value 0"]
        impl crate::Resettable for Out1R8dhSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DACC_R12DH (rw) register accessor: DACx concurrent mode 12-bit right-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`dacc_r12dh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dacc_r12dh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dacc_r12dh`]
module"]
    #[doc(alias = "DACC_R12DH")]
    pub type DaccR12dh = crate::Reg<dacc_r12dh::DaccR12dhSpec>;
    #[doc = "DACx concurrent mode 12-bit right-aligned data holding register"]
    pub mod dacc_r12dh {
        #[doc = "Register `DACC_R12DH` reader"]
        pub type R = crate::R<DaccR12dhSpec>;
        #[doc = "Register `DACC_R12DH` writer"]
        pub type W = crate::W<DaccR12dhSpec>;
        #[doc = "Field `OUT0_DH` reader - DACx_OUT0 12-bit right-aligned data"]
        pub type Out0DhR = crate::FieldReader<u16>;
        #[doc = "Field `OUT0_DH` writer - DACx_OUT0 12-bit right-aligned data"]
        pub type Out0DhW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        #[doc = "Field `OUT1_DH` reader - DACx_OUT1 12-bit right-aligned data"]
        pub type Out1DhR = crate::FieldReader<u16>;
        #[doc = "Field `OUT1_DH` writer - DACx_OUT1 12-bit right-aligned data"]
        pub type Out1DhW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - DACx_OUT0 12-bit right-aligned data"]
            #[inline(always)]
            pub fn out0_dh(&self) -> Out0DhR {
                Out0DhR::new((self.bits & 0x0fff) as u16)
            }
            #[doc = "Bits 16:27 - DACx_OUT1 12-bit right-aligned data"]
            #[inline(always)]
            pub fn out1_dh(&self) -> Out1DhR {
                Out1DhR::new(((self.bits >> 16) & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - DACx_OUT0 12-bit right-aligned data"]
            #[inline(always)]
            #[must_use]
            pub fn out0_dh(&mut self) -> Out0DhW<DaccR12dhSpec> {
                Out0DhW::new(self, 0)
            }
            #[doc = "Bits 16:27 - DACx_OUT1 12-bit right-aligned data"]
            #[inline(always)]
            #[must_use]
            pub fn out1_dh(&mut self) -> Out1DhW<DaccR12dhSpec> {
                Out1DhW::new(self, 16)
            }
        }
        #[doc = "DACx concurrent mode 12-bit right-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`dacc_r12dh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dacc_r12dh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DaccR12dhSpec;
        impl crate::RegisterSpec for DaccR12dhSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dacc_r12dh::R`](R) reader structure"]
        impl crate::Readable for DaccR12dhSpec {}
        #[doc = "`write(|w| ..)` method takes [`dacc_r12dh::W`](W) writer structure"]
        impl crate::Writable for DaccR12dhSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DACC_R12DH to value 0"]
        impl crate::Resettable for DaccR12dhSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DACC_L12DH (rw) register accessor: DACx concurrent mode 12-bit left-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`dacc_l12dh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dacc_l12dh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dacc_l12dh`]
module"]
    #[doc(alias = "DACC_L12DH")]
    pub type DaccL12dh = crate::Reg<dacc_l12dh::DaccL12dhSpec>;
    #[doc = "DACx concurrent mode 12-bit left-aligned data holding register"]
    pub mod dacc_l12dh {
        #[doc = "Register `DACC_L12DH` reader"]
        pub type R = crate::R<DaccL12dhSpec>;
        #[doc = "Register `DACC_L12DH` writer"]
        pub type W = crate::W<DaccL12dhSpec>;
        #[doc = "Field `OUT0_DH` reader - DACx_OUT0 12-bit left-aligned data"]
        pub type Out0DhR = crate::FieldReader<u16>;
        #[doc = "Field `OUT0_DH` writer - DACx_OUT0 12-bit left-aligned data"]
        pub type Out0DhW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        #[doc = "Field `OUT1_DH` reader - DACx_OUT1 12-bit left-aligned data"]
        pub type Out1DhR = crate::FieldReader<u16>;
        #[doc = "Field `OUT1_DH` writer - DACx_OUT1 12-bit left-aligned data"]
        pub type Out1DhW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 4:15 - DACx_OUT0 12-bit left-aligned data"]
            #[inline(always)]
            pub fn out0_dh(&self) -> Out0DhR {
                Out0DhR::new(((self.bits >> 4) & 0x0fff) as u16)
            }
            #[doc = "Bits 20:31 - DACx_OUT1 12-bit left-aligned data"]
            #[inline(always)]
            pub fn out1_dh(&self) -> Out1DhR {
                Out1DhR::new(((self.bits >> 20) & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 4:15 - DACx_OUT0 12-bit left-aligned data"]
            #[inline(always)]
            #[must_use]
            pub fn out0_dh(&mut self) -> Out0DhW<DaccL12dhSpec> {
                Out0DhW::new(self, 4)
            }
            #[doc = "Bits 20:31 - DACx_OUT1 12-bit left-aligned data"]
            #[inline(always)]
            #[must_use]
            pub fn out1_dh(&mut self) -> Out1DhW<DaccL12dhSpec> {
                Out1DhW::new(self, 20)
            }
        }
        #[doc = "DACx concurrent mode 12-bit left-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`dacc_l12dh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dacc_l12dh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DaccL12dhSpec;
        impl crate::RegisterSpec for DaccL12dhSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dacc_l12dh::R`](R) reader structure"]
        impl crate::Readable for DaccL12dhSpec {}
        #[doc = "`write(|w| ..)` method takes [`dacc_l12dh::W`](W) writer structure"]
        impl crate::Writable for DaccL12dhSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DACC_L12DH to value 0"]
        impl crate::Resettable for DaccL12dhSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DACC_R8DH (rw) register accessor: DACx concurrent mode 8-bit right-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`dacc_r8dh::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dacc_r8dh::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dacc_r8dh`]
module"]
    #[doc(alias = "DACC_R8DH")]
    pub type DaccR8dh = crate::Reg<dacc_r8dh::DaccR8dhSpec>;
    #[doc = "DACx concurrent mode 8-bit right-aligned data holding register"]
    pub mod dacc_r8dh {
        #[doc = "Register `DACC_R8DH` reader"]
        pub type R = crate::R<DaccR8dhSpec>;
        #[doc = "Register `DACC_R8DH` writer"]
        pub type W = crate::W<DaccR8dhSpec>;
        #[doc = "Field `OUT0_DH` reader - DACx_OUT0 8-bit right-aligned data"]
        pub type Out0DhR = crate::FieldReader;
        #[doc = "Field `OUT0_DH` writer - DACx_OUT0 8-bit right-aligned data"]
        pub type Out0DhW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `OUT1_DH` reader - DACx_OUT1 8-bit right-aligned data"]
        pub type Out1DhR = crate::FieldReader;
        #[doc = "Field `OUT1_DH` writer - DACx_OUT1 8-bit right-aligned data"]
        pub type Out1DhW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - DACx_OUT0 8-bit right-aligned data"]
            #[inline(always)]
            pub fn out0_dh(&self) -> Out0DhR {
                Out0DhR::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - DACx_OUT1 8-bit right-aligned data"]
            #[inline(always)]
            pub fn out1_dh(&self) -> Out1DhR {
                Out1DhR::new(((self.bits >> 8) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - DACx_OUT0 8-bit right-aligned data"]
            #[inline(always)]
            #[must_use]
            pub fn out0_dh(&mut self) -> Out0DhW<DaccR8dhSpec> {
                Out0DhW::new(self, 0)
            }
            #[doc = "Bits 8:15 - DACx_OUT1 8-bit right-aligned data"]
            #[inline(always)]
            #[must_use]
            pub fn out1_dh(&mut self) -> Out1DhW<DaccR8dhSpec> {
                Out1DhW::new(self, 8)
            }
        }
        #[doc = "DACx concurrent mode 8-bit right-aligned data holding register\n\nYou can [`read`](crate::Reg::read) this register and get [`dacc_r8dh::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dacc_r8dh::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DaccR8dhSpec;
        impl crate::RegisterSpec for DaccR8dhSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dacc_r8dh::R`](R) reader structure"]
        impl crate::Readable for DaccR8dhSpec {}
        #[doc = "`write(|w| ..)` method takes [`dacc_r8dh::W`](W) writer structure"]
        impl crate::Writable for DaccR8dhSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DACC_R8DH to value 0"]
        impl crate::Resettable for DaccR8dhSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "OUT0_DO (r) register accessor: DACx_OUT0 data output register\n\nYou can [`read`](crate::Reg::read) this register and get [`out0_do::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out0_do`]
module"]
    #[doc(alias = "OUT0_DO")]
    pub type Out0Do = crate::Reg<out0_do::Out0DoSpec>;
    #[doc = "DACx_OUT0 data output register"]
    pub mod out0_do {
        #[doc = "Register `OUT0_DO` reader"]
        pub type R = crate::R<Out0DoSpec>;
        #[doc = "Field `OUT0_DO` reader - DACx_OUT0 12-bit output data"]
        pub type Out0DoR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:11 - DACx_OUT0 12-bit output data"]
            #[inline(always)]
            pub fn out0_do(&self) -> Out0DoR {
                Out0DoR::new((self.bits & 0x0fff) as u16)
            }
        }
        #[doc = "DACx_OUT0 data output register\n\nYou can [`read`](crate::Reg::read) this register and get [`out0_do::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Out0DoSpec;
        impl crate::RegisterSpec for Out0DoSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`out0_do::R`](R) reader structure"]
        impl crate::Readable for Out0DoSpec {}
        #[doc = "`reset()` method sets OUT0_DO to value 0"]
        impl crate::Resettable for Out0DoSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "OUT1_DO (r) register accessor: DACx_OUT1 data output register\n\nYou can [`read`](crate::Reg::read) this register and get [`out1_do::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@out1_do`]
module"]
    #[doc(alias = "OUT1_DO")]
    pub type Out1Do = crate::Reg<out1_do::Out1DoSpec>;
    #[doc = "DACx_OUT1 data output register"]
    pub mod out1_do {
        #[doc = "Register `OUT1_DO` reader"]
        pub type R = crate::R<Out1DoSpec>;
        #[doc = "Field `OUT1_DO` reader - DACx_OUT1 12-bit output data"]
        pub type Out1DoR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:11 - DACx_OUT1 12-bit output data"]
            #[inline(always)]
            pub fn out1_do(&self) -> Out1DoR {
                Out1DoR::new((self.bits & 0x0fff) as u16)
            }
        }
        #[doc = "DACx_OUT1 data output register\n\nYou can [`read`](crate::Reg::read) this register and get [`out1_do::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Out1DoSpec;
        impl crate::RegisterSpec for Out1DoSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`out1_do::R`](R) reader structure"]
        impl crate::Readable for Out1DoSpec {}
        #[doc = "`reset()` method sets OUT1_DO to value 0"]
        impl crate::Resettable for Out1DoSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Debug support"]
pub struct Dbg {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Dbg {}
impl Dbg {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dbg::RegisterBlock = 0xe004_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dbg::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Dbg {
    type Target = dbg::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Dbg {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dbg").finish()
    }
}
#[doc = "Debug support"]
pub mod dbg {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        id: Id,
        ctl: Ctl,
    }
    impl RegisterBlock {
        #[doc = "0x00 - ID code register"]
        #[inline(always)]
        pub const fn id(&self) -> &Id {
            &self.id
        }
        #[doc = "0x04 - Control register 0"]
        #[inline(always)]
        pub const fn ctl(&self) -> &Ctl {
            &self.ctl
        }
    }
    #[doc = "ID (r) register accessor: ID code register\n\nYou can [`read`](crate::Reg::read) this register and get [`id::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@id`]
module"]
    #[doc(alias = "ID")]
    pub type Id = crate::Reg<id::IdSpec>;
    #[doc = "ID code register"]
    pub mod id {
        #[doc = "Register `ID` reader"]
        pub type R = crate::R<IdSpec>;
        #[doc = "Field `ID_CODE` reader - DBG ID code register"]
        pub type IdCodeR = crate::FieldReader<u32>;
        impl R {
            #[doc = "Bits 0:31 - DBG ID code register"]
            #[inline(always)]
            pub fn id_code(&self) -> IdCodeR {
                IdCodeR::new(self.bits)
            }
        }
        #[doc = "ID code register\n\nYou can [`read`](crate::Reg::read) this register and get [`id::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IdSpec;
        impl crate::RegisterSpec for IdSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`id::R`](R) reader structure"]
        impl crate::Readable for IdSpec {}
        #[doc = "`reset()` method sets ID to value 0"]
        impl crate::Resettable for IdSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL (rw) register accessor: Control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl`]
module"]
    #[doc(alias = "CTL")]
    pub type Ctl = crate::Reg<ctl::CtlSpec>;
    #[doc = "Control register 0"]
    pub mod ctl {
        #[doc = "Register `CTL` reader"]
        pub type R = crate::R<CtlSpec>;
        #[doc = "Register `CTL` writer"]
        pub type W = crate::W<CtlSpec>;
        #[doc = "Field `SLP_HOLD` reader - Sleep mode hold register"]
        pub type SlpHoldR = crate::BitReader;
        #[doc = "Field `SLP_HOLD` writer - Sleep mode hold register"]
        pub type SlpHoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DSLP_HOLD` reader - Deep-sleep mode hold register"]
        pub type DslpHoldR = crate::BitReader;
        #[doc = "Field `DSLP_HOLD` writer - Deep-sleep mode hold register"]
        pub type DslpHoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STB_HOLD` reader - Standby mode hold register"]
        pub type StbHoldR = crate::BitReader;
        #[doc = "Field `STB_HOLD` writer - Standby mode hold register"]
        pub type StbHoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TRACE_IOEN` reader - Trace pin allocation enable"]
        pub type TraceIoenR = crate::BitReader;
        #[doc = "Field `TRACE_IOEN` writer - Trace pin allocation enable"]
        pub type TraceIoenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TRACE_MODE` reader - Trace pin allocation mode"]
        pub type TraceModeR = crate::FieldReader;
        #[doc = "Field `TRACE_MODE` writer - Trace pin allocation mode"]
        pub type TraceModeW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `FWDGT_HOLD` reader - FWDGT hold bit"]
        pub type FwdgtHoldR = crate::BitReader;
        #[doc = "Field `FWDGT_HOLD` writer - FWDGT hold bit"]
        pub type FwdgtHoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WWDGT_HOLD` reader - WWDGT hold bit"]
        pub type WwdgtHoldR = crate::BitReader;
        #[doc = "Field `WWDGT_HOLD` writer - WWDGT hold bit"]
        pub type WwdgtHoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER0_HOLD` reader - TIMER 0 hold bit"]
        pub type Timer0HoldR = crate::BitReader;
        #[doc = "Field `TIMER0_HOLD` writer - TIMER 0 hold bit"]
        pub type Timer0HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER1_HOLD` reader - TIMER 1 hold bit"]
        pub type Timer1HoldR = crate::BitReader;
        #[doc = "Field `TIMER1_HOLD` writer - TIMER 1 hold bit"]
        pub type Timer1HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER2_HOLD` reader - TIMER 2 hold bit"]
        pub type Timer2HoldR = crate::BitReader;
        #[doc = "Field `TIMER2_HOLD` writer - TIMER 2 hold bit"]
        pub type Timer2HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER3_HOLD` reader - TIMER 23 hold bit"]
        pub type Timer3HoldR = crate::BitReader;
        #[doc = "Field `TIMER3_HOLD` writer - TIMER 23 hold bit"]
        pub type Timer3HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CAN0_HOLD` reader - CAN0 hold bit"]
        pub type Can0HoldR = crate::BitReader;
        #[doc = "Field `CAN0_HOLD` writer - CAN0 hold bit"]
        pub type Can0HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `I2C0_HOLD` reader - I2C0 hold bit"]
        pub type I2c0HoldR = crate::BitReader;
        #[doc = "Field `I2C0_HOLD` writer - I2C0 hold bit"]
        pub type I2c0HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `I2C1_HOLD` reader - I2C1 hold bit"]
        pub type I2c1HoldR = crate::BitReader;
        #[doc = "Field `I2C1_HOLD` writer - I2C1 hold bit"]
        pub type I2c1HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER4_HOLD` reader - TIMER4_HOLD"]
        pub type Timer4HoldR = crate::BitReader;
        #[doc = "Field `TIMER4_HOLD` writer - TIMER4_HOLD"]
        pub type Timer4HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER5_HOLD` reader - TIMER 5 hold bit"]
        pub type Timer5HoldR = crate::BitReader;
        #[doc = "Field `TIMER5_HOLD` writer - TIMER 5 hold bit"]
        pub type Timer5HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER6_HOLD` reader - TIMER 6 hold bit"]
        pub type Timer6HoldR = crate::BitReader;
        #[doc = "Field `TIMER6_HOLD` writer - TIMER 6 hold bit"]
        pub type Timer6HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER7_HOLD` reader - TIMER 7 hold bit"]
        pub type Timer7HoldR = crate::BitReader;
        #[doc = "Field `TIMER7_HOLD` writer - TIMER 7 hold bit"]
        pub type Timer7HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CAN1_HOLD` reader - CAN1 hold bit"]
        pub type Can1HoldR = crate::BitReader;
        #[doc = "Field `CAN1_HOLD` writer - CAN1 hold bit"]
        pub type Can1HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER11_HOLD` reader - TIMER 11 hold bit"]
        pub type Timer11HoldR = crate::BitReader;
        #[doc = "Field `TIMER11_HOLD` writer - TIMER 11 hold bit"]
        pub type Timer11HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER12_HOLD` reader - TIMER 12 hold bit"]
        pub type Timer12HoldR = crate::BitReader;
        #[doc = "Field `TIMER12_HOLD` writer - TIMER 12 hold bit"]
        pub type Timer12HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER13_HOLD` reader - TIMER 13 hold bit"]
        pub type Timer13HoldR = crate::BitReader;
        #[doc = "Field `TIMER13_HOLD` writer - TIMER 13 hold bit"]
        pub type Timer13HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER8_HOLD` reader - TIMER 8 hold bit"]
        pub type Timer8HoldR = crate::BitReader;
        #[doc = "Field `TIMER8_HOLD` writer - TIMER 8 hold bit"]
        pub type Timer8HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER9_HOLD` reader - TIMER 9 hold bit"]
        pub type Timer9HoldR = crate::BitReader;
        #[doc = "Field `TIMER9_HOLD` writer - TIMER 9 hold bit"]
        pub type Timer9HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER10_HOLD` reader - TIMER 10 hold bit"]
        pub type Timer10HoldR = crate::BitReader;
        #[doc = "Field `TIMER10_HOLD` writer - TIMER 10 hold bit"]
        pub type Timer10HoldW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Sleep mode hold register"]
            #[inline(always)]
            pub fn slp_hold(&self) -> SlpHoldR {
                SlpHoldR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Deep-sleep mode hold register"]
            #[inline(always)]
            pub fn dslp_hold(&self) -> DslpHoldR {
                DslpHoldR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Standby mode hold register"]
            #[inline(always)]
            pub fn stb_hold(&self) -> StbHoldR {
                StbHoldR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 5 - Trace pin allocation enable"]
            #[inline(always)]
            pub fn trace_ioen(&self) -> TraceIoenR {
                TraceIoenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bits 6:7 - Trace pin allocation mode"]
            #[inline(always)]
            pub fn trace_mode(&self) -> TraceModeR {
                TraceModeR::new(((self.bits >> 6) & 3) as u8)
            }
            #[doc = "Bit 8 - FWDGT hold bit"]
            #[inline(always)]
            pub fn fwdgt_hold(&self) -> FwdgtHoldR {
                FwdgtHoldR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - WWDGT hold bit"]
            #[inline(always)]
            pub fn wwdgt_hold(&self) -> WwdgtHoldR {
                WwdgtHoldR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - TIMER 0 hold bit"]
            #[inline(always)]
            pub fn timer0_hold(&self) -> Timer0HoldR {
                Timer0HoldR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - TIMER 1 hold bit"]
            #[inline(always)]
            pub fn timer1_hold(&self) -> Timer1HoldR {
                Timer1HoldR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - TIMER 2 hold bit"]
            #[inline(always)]
            pub fn timer2_hold(&self) -> Timer2HoldR {
                Timer2HoldR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - TIMER 23 hold bit"]
            #[inline(always)]
            pub fn timer3_hold(&self) -> Timer3HoldR {
                Timer3HoldR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - CAN0 hold bit"]
            #[inline(always)]
            pub fn can0_hold(&self) -> Can0HoldR {
                Can0HoldR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - I2C0 hold bit"]
            #[inline(always)]
            pub fn i2c0_hold(&self) -> I2c0HoldR {
                I2c0HoldR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - I2C1 hold bit"]
            #[inline(always)]
            pub fn i2c1_hold(&self) -> I2c1HoldR {
                I2c1HoldR::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - TIMER4_HOLD"]
            #[inline(always)]
            pub fn timer4_hold(&self) -> Timer4HoldR {
                Timer4HoldR::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - TIMER 5 hold bit"]
            #[inline(always)]
            pub fn timer5_hold(&self) -> Timer5HoldR {
                Timer5HoldR::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - TIMER 6 hold bit"]
            #[inline(always)]
            pub fn timer6_hold(&self) -> Timer6HoldR {
                Timer6HoldR::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - TIMER 7 hold bit"]
            #[inline(always)]
            pub fn timer7_hold(&self) -> Timer7HoldR {
                Timer7HoldR::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - CAN1 hold bit"]
            #[inline(always)]
            pub fn can1_hold(&self) -> Can1HoldR {
                Can1HoldR::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 25 - TIMER 11 hold bit"]
            #[inline(always)]
            pub fn timer11_hold(&self) -> Timer11HoldR {
                Timer11HoldR::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - TIMER 12 hold bit"]
            #[inline(always)]
            pub fn timer12_hold(&self) -> Timer12HoldR {
                Timer12HoldR::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - TIMER 13 hold bit"]
            #[inline(always)]
            pub fn timer13_hold(&self) -> Timer13HoldR {
                Timer13HoldR::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - TIMER 8 hold bit"]
            #[inline(always)]
            pub fn timer8_hold(&self) -> Timer8HoldR {
                Timer8HoldR::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - TIMER 9 hold bit"]
            #[inline(always)]
            pub fn timer9_hold(&self) -> Timer9HoldR {
                Timer9HoldR::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - TIMER 10 hold bit"]
            #[inline(always)]
            pub fn timer10_hold(&self) -> Timer10HoldR {
                Timer10HoldR::new(((self.bits >> 30) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Sleep mode hold register"]
            #[inline(always)]
            #[must_use]
            pub fn slp_hold(&mut self) -> SlpHoldW<CtlSpec> {
                SlpHoldW::new(self, 0)
            }
            #[doc = "Bit 1 - Deep-sleep mode hold register"]
            #[inline(always)]
            #[must_use]
            pub fn dslp_hold(&mut self) -> DslpHoldW<CtlSpec> {
                DslpHoldW::new(self, 1)
            }
            #[doc = "Bit 2 - Standby mode hold register"]
            #[inline(always)]
            #[must_use]
            pub fn stb_hold(&mut self) -> StbHoldW<CtlSpec> {
                StbHoldW::new(self, 2)
            }
            #[doc = "Bit 5 - Trace pin allocation enable"]
            #[inline(always)]
            #[must_use]
            pub fn trace_ioen(&mut self) -> TraceIoenW<CtlSpec> {
                TraceIoenW::new(self, 5)
            }
            #[doc = "Bits 6:7 - Trace pin allocation mode"]
            #[inline(always)]
            #[must_use]
            pub fn trace_mode(&mut self) -> TraceModeW<CtlSpec> {
                TraceModeW::new(self, 6)
            }
            #[doc = "Bit 8 - FWDGT hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn fwdgt_hold(&mut self) -> FwdgtHoldW<CtlSpec> {
                FwdgtHoldW::new(self, 8)
            }
            #[doc = "Bit 9 - WWDGT hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn wwdgt_hold(&mut self) -> WwdgtHoldW<CtlSpec> {
                WwdgtHoldW::new(self, 9)
            }
            #[doc = "Bit 10 - TIMER 0 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn timer0_hold(&mut self) -> Timer0HoldW<CtlSpec> {
                Timer0HoldW::new(self, 10)
            }
            #[doc = "Bit 11 - TIMER 1 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn timer1_hold(&mut self) -> Timer1HoldW<CtlSpec> {
                Timer1HoldW::new(self, 11)
            }
            #[doc = "Bit 12 - TIMER 2 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn timer2_hold(&mut self) -> Timer2HoldW<CtlSpec> {
                Timer2HoldW::new(self, 12)
            }
            #[doc = "Bit 13 - TIMER 23 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn timer3_hold(&mut self) -> Timer3HoldW<CtlSpec> {
                Timer3HoldW::new(self, 13)
            }
            #[doc = "Bit 14 - CAN0 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn can0_hold(&mut self) -> Can0HoldW<CtlSpec> {
                Can0HoldW::new(self, 14)
            }
            #[doc = "Bit 15 - I2C0 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn i2c0_hold(&mut self) -> I2c0HoldW<CtlSpec> {
                I2c0HoldW::new(self, 15)
            }
            #[doc = "Bit 16 - I2C1 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn i2c1_hold(&mut self) -> I2c1HoldW<CtlSpec> {
                I2c1HoldW::new(self, 16)
            }
            #[doc = "Bit 17 - TIMER4_HOLD"]
            #[inline(always)]
            #[must_use]
            pub fn timer4_hold(&mut self) -> Timer4HoldW<CtlSpec> {
                Timer4HoldW::new(self, 17)
            }
            #[doc = "Bit 18 - TIMER 5 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn timer5_hold(&mut self) -> Timer5HoldW<CtlSpec> {
                Timer5HoldW::new(self, 18)
            }
            #[doc = "Bit 19 - TIMER 6 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn timer6_hold(&mut self) -> Timer6HoldW<CtlSpec> {
                Timer6HoldW::new(self, 19)
            }
            #[doc = "Bit 20 - TIMER 7 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn timer7_hold(&mut self) -> Timer7HoldW<CtlSpec> {
                Timer7HoldW::new(self, 20)
            }
            #[doc = "Bit 21 - CAN1 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn can1_hold(&mut self) -> Can1HoldW<CtlSpec> {
                Can1HoldW::new(self, 21)
            }
            #[doc = "Bit 25 - TIMER 11 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn timer11_hold(&mut self) -> Timer11HoldW<CtlSpec> {
                Timer11HoldW::new(self, 25)
            }
            #[doc = "Bit 26 - TIMER 12 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn timer12_hold(&mut self) -> Timer12HoldW<CtlSpec> {
                Timer12HoldW::new(self, 26)
            }
            #[doc = "Bit 27 - TIMER 13 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn timer13_hold(&mut self) -> Timer13HoldW<CtlSpec> {
                Timer13HoldW::new(self, 27)
            }
            #[doc = "Bit 28 - TIMER 8 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn timer8_hold(&mut self) -> Timer8HoldW<CtlSpec> {
                Timer8HoldW::new(self, 28)
            }
            #[doc = "Bit 29 - TIMER 9 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn timer9_hold(&mut self) -> Timer9HoldW<CtlSpec> {
                Timer9HoldW::new(self, 29)
            }
            #[doc = "Bit 30 - TIMER 10 hold bit"]
            #[inline(always)]
            #[must_use]
            pub fn timer10_hold(&mut self) -> Timer10HoldW<CtlSpec> {
                Timer10HoldW::new(self, 30)
            }
        }
        #[doc = "Control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CtlSpec;
        impl crate::RegisterSpec for CtlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl::R`](R) reader structure"]
        impl crate::Readable for CtlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ctl::W`](W) writer structure"]
        impl crate::Writable for CtlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL to value 0"]
        impl crate::Resettable for CtlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "DMA controller"]
pub struct Dma0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Dma0 {}
impl Dma0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dma0::RegisterBlock = 0x4002_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dma0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Dma0 {
    type Target = dma0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Dma0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma0").finish()
    }
}
#[doc = "DMA controller"]
pub mod dma0 {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        intf: Intf,
        intc: Intc,
        ch0ctl: Ch0ctl,
        ch0cnt: Ch0cnt,
        ch0paddr: Ch0paddr,
        ch0maddr: Ch0maddr,
        _reserved6: [u8; 0x04],
        ch1ctl: Ch1ctl,
        ch1cnt: Ch1cnt,
        ch1paddr: Ch1paddr,
        ch1maddr: Ch1maddr,
        _reserved10: [u8; 0x04],
        ch2ctl: Ch2ctl,
        ch2cnt: Ch2cnt,
        ch2paddr: Ch2paddr,
        ch2maddr: Ch2maddr,
        _reserved14: [u8; 0x04],
        ch3ctl: Ch3ctl,
        ch3cnt: Ch3cnt,
        ch3paddr: Ch3paddr,
        ch3maddr: Ch3maddr,
        _reserved18: [u8; 0x04],
        ch4ctl: Ch4ctl,
        ch4cnt: Ch4cnt,
        ch4paddr: Ch4paddr,
        ch4maddr: Ch4maddr,
        _reserved22: [u8; 0x04],
        ch5ctl: Ch5ctl,
        ch5cnt: Ch5cnt,
        ch5paddr: Ch5paddr,
        ch5maddr: Ch5maddr,
        _reserved26: [u8; 0x04],
        ch6ctl: Ch6ctl,
        ch6cnt: Ch6cnt,
        ch6paddr: Ch6paddr,
        ch6maddr: Ch6maddr,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Interrupt flag register"]
        #[inline(always)]
        pub const fn intf(&self) -> &Intf {
            &self.intf
        }
        #[doc = "0x04 - Interrupt flag clear register"]
        #[inline(always)]
        pub const fn intc(&self) -> &Intc {
            &self.intc
        }
        #[doc = "0x08 - Channel 0 control register"]
        #[inline(always)]
        pub const fn ch0ctl(&self) -> &Ch0ctl {
            &self.ch0ctl
        }
        #[doc = "0x0c - Channel 0 counter register"]
        #[inline(always)]
        pub const fn ch0cnt(&self) -> &Ch0cnt {
            &self.ch0cnt
        }
        #[doc = "0x10 - Channel 0 peripheral base address register"]
        #[inline(always)]
        pub const fn ch0paddr(&self) -> &Ch0paddr {
            &self.ch0paddr
        }
        #[doc = "0x14 - Channel 0 memory base address register"]
        #[inline(always)]
        pub const fn ch0maddr(&self) -> &Ch0maddr {
            &self.ch0maddr
        }
        #[doc = "0x1c - Channel 1 control register"]
        #[inline(always)]
        pub const fn ch1ctl(&self) -> &Ch1ctl {
            &self.ch1ctl
        }
        #[doc = "0x20 - Channel 1 counter register"]
        #[inline(always)]
        pub const fn ch1cnt(&self) -> &Ch1cnt {
            &self.ch1cnt
        }
        #[doc = "0x24 - Channel 1 peripheral base address register"]
        #[inline(always)]
        pub const fn ch1paddr(&self) -> &Ch1paddr {
            &self.ch1paddr
        }
        #[doc = "0x28 - Channel 1 memory base address register"]
        #[inline(always)]
        pub const fn ch1maddr(&self) -> &Ch1maddr {
            &self.ch1maddr
        }
        #[doc = "0x30 - Channel 2 control register"]
        #[inline(always)]
        pub const fn ch2ctl(&self) -> &Ch2ctl {
            &self.ch2ctl
        }
        #[doc = "0x34 - Channel 2 counter register"]
        #[inline(always)]
        pub const fn ch2cnt(&self) -> &Ch2cnt {
            &self.ch2cnt
        }
        #[doc = "0x38 - Channel 2 peripheral base address register"]
        #[inline(always)]
        pub const fn ch2paddr(&self) -> &Ch2paddr {
            &self.ch2paddr
        }
        #[doc = "0x3c - Channel 2 memory base address register"]
        #[inline(always)]
        pub const fn ch2maddr(&self) -> &Ch2maddr {
            &self.ch2maddr
        }
        #[doc = "0x44 - Channel 3 control register"]
        #[inline(always)]
        pub const fn ch3ctl(&self) -> &Ch3ctl {
            &self.ch3ctl
        }
        #[doc = "0x48 - Channel 3 counter register"]
        #[inline(always)]
        pub const fn ch3cnt(&self) -> &Ch3cnt {
            &self.ch3cnt
        }
        #[doc = "0x4c - Channel 3 peripheral base address register"]
        #[inline(always)]
        pub const fn ch3paddr(&self) -> &Ch3paddr {
            &self.ch3paddr
        }
        #[doc = "0x50 - Channel 3 memory base address register"]
        #[inline(always)]
        pub const fn ch3maddr(&self) -> &Ch3maddr {
            &self.ch3maddr
        }
        #[doc = "0x58 - Channel 4 control register"]
        #[inline(always)]
        pub const fn ch4ctl(&self) -> &Ch4ctl {
            &self.ch4ctl
        }
        #[doc = "0x5c - Channel 4 counter register"]
        #[inline(always)]
        pub const fn ch4cnt(&self) -> &Ch4cnt {
            &self.ch4cnt
        }
        #[doc = "0x60 - Channel 4 peripheral base address register"]
        #[inline(always)]
        pub const fn ch4paddr(&self) -> &Ch4paddr {
            &self.ch4paddr
        }
        #[doc = "0x64 - Channel 4 memory base address register"]
        #[inline(always)]
        pub const fn ch4maddr(&self) -> &Ch4maddr {
            &self.ch4maddr
        }
        #[doc = "0x6c - Channel 5 control register"]
        #[inline(always)]
        pub const fn ch5ctl(&self) -> &Ch5ctl {
            &self.ch5ctl
        }
        #[doc = "0x70 - Channel 5 counter register"]
        #[inline(always)]
        pub const fn ch5cnt(&self) -> &Ch5cnt {
            &self.ch5cnt
        }
        #[doc = "0x74 - Channel 5 peripheral base address register"]
        #[inline(always)]
        pub const fn ch5paddr(&self) -> &Ch5paddr {
            &self.ch5paddr
        }
        #[doc = "0x78 - Channel 5 memory base address register"]
        #[inline(always)]
        pub const fn ch5maddr(&self) -> &Ch5maddr {
            &self.ch5maddr
        }
        #[doc = "0x80 - Channel 6 control register"]
        #[inline(always)]
        pub const fn ch6ctl(&self) -> &Ch6ctl {
            &self.ch6ctl
        }
        #[doc = "0x84 - Channel 6 counter register"]
        #[inline(always)]
        pub const fn ch6cnt(&self) -> &Ch6cnt {
            &self.ch6cnt
        }
        #[doc = "0x88 - Channel 6 peripheral base address register"]
        #[inline(always)]
        pub const fn ch6paddr(&self) -> &Ch6paddr {
            &self.ch6paddr
        }
        #[doc = "0x8c - Channel 6 memory base address register"]
        #[inline(always)]
        pub const fn ch6maddr(&self) -> &Ch6maddr {
            &self.ch6maddr
        }
    }
    #[doc = "INTF (r) register accessor: Interrupt flag register\n\nYou can [`read`](crate::Reg::read) this register and get [`intf::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intf`]
module"]
    #[doc(alias = "INTF")]
    pub type Intf = crate::Reg<intf::IntfSpec>;
    #[doc = "Interrupt flag register"]
    pub mod intf {
        #[doc = "Register `INTF` reader"]
        pub type R = crate::R<IntfSpec>;
        #[doc = "Field `GIF0` reader - Global interrupt flag of channel 0"]
        pub type Gif0R = crate::BitReader;
        #[doc = "Field `FTFIF0` reader - Full Transfer finish flag of channe 0"]
        pub type Ftfif0R = crate::BitReader;
        #[doc = "Field `HTFIF0` reader - Half transfer finish flag of channel 0"]
        pub type Htfif0R = crate::BitReader;
        #[doc = "Field `ERRIF0` reader - Error flag of channel 0"]
        pub type Errif0R = crate::BitReader;
        #[doc = "Field `GIF1` reader - Global interrupt flag of channel 1"]
        pub type Gif1R = crate::BitReader;
        #[doc = "Field `FTFIF1` reader - Full Transfer finish flag of channe 1"]
        pub type Ftfif1R = crate::BitReader;
        #[doc = "Field `HTFIF1` reader - Half transfer finish flag of channel 1"]
        pub type Htfif1R = crate::BitReader;
        #[doc = "Field `ERRIF1` reader - Error flag of channel 1"]
        pub type Errif1R = crate::BitReader;
        #[doc = "Field `GIF2` reader - Global interrupt flag of channel 2"]
        pub type Gif2R = crate::BitReader;
        #[doc = "Field `FTFIF2` reader - Full Transfer finish flag of channe 2"]
        pub type Ftfif2R = crate::BitReader;
        #[doc = "Field `HTFIF2` reader - Half transfer finish flag of channel 2"]
        pub type Htfif2R = crate::BitReader;
        #[doc = "Field `ERRIF2` reader - Error flag of channel 2"]
        pub type Errif2R = crate::BitReader;
        #[doc = "Field `GIF3` reader - Global interrupt flag of channel 3"]
        pub type Gif3R = crate::BitReader;
        #[doc = "Field `FTFIF3` reader - Full Transfer finish flag of channe 3"]
        pub type Ftfif3R = crate::BitReader;
        #[doc = "Field `HTFIF3` reader - Half transfer finish flag of channel 3"]
        pub type Htfif3R = crate::BitReader;
        #[doc = "Field `ERRIF3` reader - Error flag of channel 3"]
        pub type Errif3R = crate::BitReader;
        #[doc = "Field `GIF4` reader - Global interrupt flag of channel 4"]
        pub type Gif4R = crate::BitReader;
        #[doc = "Field `FTFIF4` reader - Full Transfer finish flag of channe 4"]
        pub type Ftfif4R = crate::BitReader;
        #[doc = "Field `HTFIF4` reader - Half transfer finish flag of channel 4"]
        pub type Htfif4R = crate::BitReader;
        #[doc = "Field `ERRIF4` reader - Error flag of channel 4"]
        pub type Errif4R = crate::BitReader;
        #[doc = "Field `GIF5` reader - Global interrupt flag of channel 5"]
        pub type Gif5R = crate::BitReader;
        #[doc = "Field `FTFIF5` reader - Full Transfer finish flag of channe 5"]
        pub type Ftfif5R = crate::BitReader;
        #[doc = "Field `HTFIF5` reader - Half transfer finish flag of channel 5"]
        pub type Htfif5R = crate::BitReader;
        #[doc = "Field `ERRIF5` reader - Error flag of channel 5"]
        pub type Errif5R = crate::BitReader;
        #[doc = "Field `GIF6` reader - Global interrupt flag of channel 6"]
        pub type Gif6R = crate::BitReader;
        #[doc = "Field `FTFIF6` reader - Full Transfer finish flag of channe 6"]
        pub type Ftfif6R = crate::BitReader;
        #[doc = "Field `HTFIF6` reader - Half transfer finish flag of channel 6"]
        pub type Htfif6R = crate::BitReader;
        #[doc = "Field `ERRIF6` reader - Error flag of channel 6"]
        pub type Errif6R = crate::BitReader;
        impl R {
            #[doc = "Bit 0 - Global interrupt flag of channel 0"]
            #[inline(always)]
            pub fn gif0(&self) -> Gif0R {
                Gif0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Full Transfer finish flag of channe 0"]
            #[inline(always)]
            pub fn ftfif0(&self) -> Ftfif0R {
                Ftfif0R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Half transfer finish flag of channel 0"]
            #[inline(always)]
            pub fn htfif0(&self) -> Htfif0R {
                Htfif0R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Error flag of channel 0"]
            #[inline(always)]
            pub fn errif0(&self) -> Errif0R {
                Errif0R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Global interrupt flag of channel 1"]
            #[inline(always)]
            pub fn gif1(&self) -> Gif1R {
                Gif1R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Full Transfer finish flag of channe 1"]
            #[inline(always)]
            pub fn ftfif1(&self) -> Ftfif1R {
                Ftfif1R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Half transfer finish flag of channel 1"]
            #[inline(always)]
            pub fn htfif1(&self) -> Htfif1R {
                Htfif1R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Error flag of channel 1"]
            #[inline(always)]
            pub fn errif1(&self) -> Errif1R {
                Errif1R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Global interrupt flag of channel 2"]
            #[inline(always)]
            pub fn gif2(&self) -> Gif2R {
                Gif2R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Full Transfer finish flag of channe 2"]
            #[inline(always)]
            pub fn ftfif2(&self) -> Ftfif2R {
                Ftfif2R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Half transfer finish flag of channel 2"]
            #[inline(always)]
            pub fn htfif2(&self) -> Htfif2R {
                Htfif2R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Error flag of channel 2"]
            #[inline(always)]
            pub fn errif2(&self) -> Errif2R {
                Errif2R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Global interrupt flag of channel 3"]
            #[inline(always)]
            pub fn gif3(&self) -> Gif3R {
                Gif3R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Full Transfer finish flag of channe 3"]
            #[inline(always)]
            pub fn ftfif3(&self) -> Ftfif3R {
                Ftfif3R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Half transfer finish flag of channel 3"]
            #[inline(always)]
            pub fn htfif3(&self) -> Htfif3R {
                Htfif3R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Error flag of channel 3"]
            #[inline(always)]
            pub fn errif3(&self) -> Errif3R {
                Errif3R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Global interrupt flag of channel 4"]
            #[inline(always)]
            pub fn gif4(&self) -> Gif4R {
                Gif4R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Full Transfer finish flag of channe 4"]
            #[inline(always)]
            pub fn ftfif4(&self) -> Ftfif4R {
                Ftfif4R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Half transfer finish flag of channel 4"]
            #[inline(always)]
            pub fn htfif4(&self) -> Htfif4R {
                Htfif4R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Error flag of channel 4"]
            #[inline(always)]
            pub fn errif4(&self) -> Errif4R {
                Errif4R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Global interrupt flag of channel 5"]
            #[inline(always)]
            pub fn gif5(&self) -> Gif5R {
                Gif5R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Full Transfer finish flag of channe 5"]
            #[inline(always)]
            pub fn ftfif5(&self) -> Ftfif5R {
                Ftfif5R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Half transfer finish flag of channel 5"]
            #[inline(always)]
            pub fn htfif5(&self) -> Htfif5R {
                Htfif5R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Error flag of channel 5"]
            #[inline(always)]
            pub fn errif5(&self) -> Errif5R {
                Errif5R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Global interrupt flag of channel 6"]
            #[inline(always)]
            pub fn gif6(&self) -> Gif6R {
                Gif6R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Full Transfer finish flag of channe 6"]
            #[inline(always)]
            pub fn ftfif6(&self) -> Ftfif6R {
                Ftfif6R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Half transfer finish flag of channel 6"]
            #[inline(always)]
            pub fn htfif6(&self) -> Htfif6R {
                Htfif6R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Error flag of channel 6"]
            #[inline(always)]
            pub fn errif6(&self) -> Errif6R {
                Errif6R::new(((self.bits >> 27) & 1) != 0)
            }
        }
        #[doc = "Interrupt flag register\n\nYou can [`read`](crate::Reg::read) this register and get [`intf::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntfSpec;
        impl crate::RegisterSpec for IntfSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`intf::R`](R) reader structure"]
        impl crate::Readable for IntfSpec {}
        #[doc = "`reset()` method sets INTF to value 0"]
        impl crate::Resettable for IntfSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "INTC (w) register accessor: Interrupt flag clear register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intc::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intc`]
module"]
    #[doc(alias = "INTC")]
    pub type Intc = crate::Reg<intc::IntcSpec>;
    #[doc = "Interrupt flag clear register"]
    pub mod intc {
        #[doc = "Register `INTC` writer"]
        pub type W = crate::W<IntcSpec>;
        #[doc = "Field `GIFC0` writer - Clear global interrupt flag of channel 0"]
        pub type Gifc0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC0` writer - Clear bit for full transfer finish flag of channel 0"]
        pub type Ftfifc0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC0` writer - Clear bit for half transfer finish flag of channel 0"]
        pub type Htfifc0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC0` writer - Clear bit for error flag of channel 0"]
        pub type Errifc0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `GIFC1` writer - Clear global interrupt flag of channel 1"]
        pub type Gifc1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC1` writer - Clear bit for full transfer finish flag of channel 1"]
        pub type Ftfifc1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC1` writer - Clear bit for half transfer finish flag of channel 1"]
        pub type Htfifc1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC1` writer - Clear bit for error flag of channel 1"]
        pub type Errifc1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `GIFC2` writer - Clear global interrupt flag of channel 2"]
        pub type Gifc2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC2` writer - Clear bit for full transfer finish flag of channel 2"]
        pub type Ftfifc2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC2` writer - Clear bit for half transfer finish flag of channel 2"]
        pub type Htfifc2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC2` writer - Clear bit for error flag of channel 2"]
        pub type Errifc2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `GIFC3` writer - Clear global interrupt flag of channel 3"]
        pub type Gifc3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC3` writer - Clear bit for full transfer finish flag of channel 3"]
        pub type Ftfifc3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC3` writer - Clear bit for half transfer finish flag of channel 3"]
        pub type Htfifc3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC3` writer - Clear bit for error flag of channel 3"]
        pub type Errifc3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `GIFC4` writer - Clear global interrupt flag of channel 4"]
        pub type Gifc4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC4` writer - Clear bit for full transfer finish flag of channel 4"]
        pub type Ftfifc4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC4` writer - Clear bit for half transfer finish flag of channel 4"]
        pub type Htfifc4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC4` writer - Clear bit for error flag of channel 4"]
        pub type Errifc4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `GIFC5` writer - Clear global interrupt flag of channel 5"]
        pub type Gifc5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC5` writer - Clear bit for full transfer finish flag of channel 5"]
        pub type Ftfifc5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC5` writer - Clear bit for half transfer finish flag of channel 5"]
        pub type Htfifc5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC5` writer - Clear bit for error flag of channel 5"]
        pub type Errifc5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `GIFC6` writer - Clear global interrupt flag of channel 6"]
        pub type Gifc6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC6` writer - Clear bit for full transfer finish flag of channel 6"]
        pub type Ftfifc6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC6` writer - Clear bit for half transfer finish flag of channel 6"]
        pub type Htfifc6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC6` writer - Clear bit for error flag of channel 6"]
        pub type Errifc6W<'a, REG> = crate::BitWriter<'a, REG>;
        impl W {
            #[doc = "Bit 0 - Clear global interrupt flag of channel 0"]
            #[inline(always)]
            #[must_use]
            pub fn gifc0(&mut self) -> Gifc0W<IntcSpec> {
                Gifc0W::new(self, 0)
            }
            #[doc = "Bit 1 - Clear bit for full transfer finish flag of channel 0"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc0(&mut self) -> Ftfifc0W<IntcSpec> {
                Ftfifc0W::new(self, 1)
            }
            #[doc = "Bit 2 - Clear bit for half transfer finish flag of channel 0"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc0(&mut self) -> Htfifc0W<IntcSpec> {
                Htfifc0W::new(self, 2)
            }
            #[doc = "Bit 3 - Clear bit for error flag of channel 0"]
            #[inline(always)]
            #[must_use]
            pub fn errifc0(&mut self) -> Errifc0W<IntcSpec> {
                Errifc0W::new(self, 3)
            }
            #[doc = "Bit 4 - Clear global interrupt flag of channel 1"]
            #[inline(always)]
            #[must_use]
            pub fn gifc1(&mut self) -> Gifc1W<IntcSpec> {
                Gifc1W::new(self, 4)
            }
            #[doc = "Bit 5 - Clear bit for full transfer finish flag of channel 1"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc1(&mut self) -> Ftfifc1W<IntcSpec> {
                Ftfifc1W::new(self, 5)
            }
            #[doc = "Bit 6 - Clear bit for half transfer finish flag of channel 1"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc1(&mut self) -> Htfifc1W<IntcSpec> {
                Htfifc1W::new(self, 6)
            }
            #[doc = "Bit 7 - Clear bit for error flag of channel 1"]
            #[inline(always)]
            #[must_use]
            pub fn errifc1(&mut self) -> Errifc1W<IntcSpec> {
                Errifc1W::new(self, 7)
            }
            #[doc = "Bit 8 - Clear global interrupt flag of channel 2"]
            #[inline(always)]
            #[must_use]
            pub fn gifc2(&mut self) -> Gifc2W<IntcSpec> {
                Gifc2W::new(self, 8)
            }
            #[doc = "Bit 9 - Clear bit for full transfer finish flag of channel 2"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc2(&mut self) -> Ftfifc2W<IntcSpec> {
                Ftfifc2W::new(self, 9)
            }
            #[doc = "Bit 10 - Clear bit for half transfer finish flag of channel 2"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc2(&mut self) -> Htfifc2W<IntcSpec> {
                Htfifc2W::new(self, 10)
            }
            #[doc = "Bit 11 - Clear bit for error flag of channel 2"]
            #[inline(always)]
            #[must_use]
            pub fn errifc2(&mut self) -> Errifc2W<IntcSpec> {
                Errifc2W::new(self, 11)
            }
            #[doc = "Bit 12 - Clear global interrupt flag of channel 3"]
            #[inline(always)]
            #[must_use]
            pub fn gifc3(&mut self) -> Gifc3W<IntcSpec> {
                Gifc3W::new(self, 12)
            }
            #[doc = "Bit 13 - Clear bit for full transfer finish flag of channel 3"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc3(&mut self) -> Ftfifc3W<IntcSpec> {
                Ftfifc3W::new(self, 13)
            }
            #[doc = "Bit 14 - Clear bit for half transfer finish flag of channel 3"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc3(&mut self) -> Htfifc3W<IntcSpec> {
                Htfifc3W::new(self, 14)
            }
            #[doc = "Bit 15 - Clear bit for error flag of channel 3"]
            #[inline(always)]
            #[must_use]
            pub fn errifc3(&mut self) -> Errifc3W<IntcSpec> {
                Errifc3W::new(self, 15)
            }
            #[doc = "Bit 16 - Clear global interrupt flag of channel 4"]
            #[inline(always)]
            #[must_use]
            pub fn gifc4(&mut self) -> Gifc4W<IntcSpec> {
                Gifc4W::new(self, 16)
            }
            #[doc = "Bit 17 - Clear bit for full transfer finish flag of channel 4"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc4(&mut self) -> Ftfifc4W<IntcSpec> {
                Ftfifc4W::new(self, 17)
            }
            #[doc = "Bit 18 - Clear bit for half transfer finish flag of channel 4"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc4(&mut self) -> Htfifc4W<IntcSpec> {
                Htfifc4W::new(self, 18)
            }
            #[doc = "Bit 19 - Clear bit for error flag of channel 4"]
            #[inline(always)]
            #[must_use]
            pub fn errifc4(&mut self) -> Errifc4W<IntcSpec> {
                Errifc4W::new(self, 19)
            }
            #[doc = "Bit 20 - Clear global interrupt flag of channel 5"]
            #[inline(always)]
            #[must_use]
            pub fn gifc5(&mut self) -> Gifc5W<IntcSpec> {
                Gifc5W::new(self, 20)
            }
            #[doc = "Bit 21 - Clear bit for full transfer finish flag of channel 5"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc5(&mut self) -> Ftfifc5W<IntcSpec> {
                Ftfifc5W::new(self, 21)
            }
            #[doc = "Bit 22 - Clear bit for half transfer finish flag of channel 5"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc5(&mut self) -> Htfifc5W<IntcSpec> {
                Htfifc5W::new(self, 22)
            }
            #[doc = "Bit 23 - Clear bit for error flag of channel 5"]
            #[inline(always)]
            #[must_use]
            pub fn errifc5(&mut self) -> Errifc5W<IntcSpec> {
                Errifc5W::new(self, 23)
            }
            #[doc = "Bit 24 - Clear global interrupt flag of channel 6"]
            #[inline(always)]
            #[must_use]
            pub fn gifc6(&mut self) -> Gifc6W<IntcSpec> {
                Gifc6W::new(self, 24)
            }
            #[doc = "Bit 25 - Clear bit for full transfer finish flag of channel 6"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc6(&mut self) -> Ftfifc6W<IntcSpec> {
                Ftfifc6W::new(self, 25)
            }
            #[doc = "Bit 26 - Clear bit for half transfer finish flag of channel 6"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc6(&mut self) -> Htfifc6W<IntcSpec> {
                Htfifc6W::new(self, 26)
            }
            #[doc = "Bit 27 - Clear bit for error flag of channel 6"]
            #[inline(always)]
            #[must_use]
            pub fn errifc6(&mut self) -> Errifc6W<IntcSpec> {
                Errifc6W::new(self, 27)
            }
        }
        #[doc = "Interrupt flag clear register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intc::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntcSpec;
        impl crate::RegisterSpec for IntcSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`intc::W`](W) writer structure"]
        impl crate::Writable for IntcSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets INTC to value 0"]
        impl crate::Resettable for IntcSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH0CTL (rw) register accessor: Channel 0 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch0ctl`]
module"]
    #[doc(alias = "CH0CTL")]
    pub type Ch0ctl = crate::Reg<ch0ctl::Ch0ctlSpec>;
    #[doc = "Channel 0 control register"]
    pub mod ch0ctl {
        #[doc = "Register `CH0CTL` reader"]
        pub type R = crate::R<Ch0ctlSpec>;
        #[doc = "Register `CH0CTL` writer"]
        pub type W = crate::W<Ch0ctlSpec>;
        #[doc = "Field `CHEN` reader - Channel enable"]
        pub type ChenR = crate::BitReader;
        #[doc = "Field `CHEN` writer - Channel enable"]
        pub type ChenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIE` reader - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieR = crate::BitReader;
        #[doc = "Field `FTFIE` writer - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIE` reader - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieR = crate::BitReader;
        #[doc = "Field `HTFIE` writer - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Enable bit for channel error interrupt"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Enable bit for channel error interrupt"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Transfer direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Transfer direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMEN` reader - Circular mode enable"]
        pub type CmenR = crate::BitReader;
        #[doc = "Field `CMEN` writer - Circular mode enable"]
        pub type CmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PNAGA` reader - Next address generation algorithm of peripheral"]
        pub type PnagaR = crate::BitReader;
        #[doc = "Field `PNAGA` writer - Next address generation algorithm of peripheral"]
        pub type PnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MNAGA` reader - Next address generation algorithm of memory"]
        pub type MnagaR = crate::BitReader;
        #[doc = "Field `MNAGA` writer - Next address generation algorithm of memory"]
        pub type MnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PWIDTH` reader - Transfer data size of peripheral"]
        pub type PwidthR = crate::FieldReader;
        #[doc = "Field `PWIDTH` writer - Transfer data size of peripheral"]
        pub type PwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MWIDTH` reader - Transfer data size of memory"]
        pub type MwidthR = crate::FieldReader;
        #[doc = "Field `MWIDTH` writer - Transfer data size of memory"]
        pub type MwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PRIO` reader - Priority level"]
        pub type PrioR = crate::FieldReader;
        #[doc = "Field `PRIO` writer - Priority level"]
        pub type PrioW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `M2M` reader - Memory to Memory Mode"]
        pub type M2mR = crate::BitReader;
        #[doc = "Field `M2M` writer - Memory to Memory Mode"]
        pub type M2mW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn chen(&self) -> ChenR {
                ChenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            pub fn ftfie(&self) -> FtfieR {
                FtfieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            pub fn htfie(&self) -> HtfieR {
                HtfieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            pub fn cmen(&self) -> CmenR {
                CmenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            pub fn pnaga(&self) -> PnagaR {
                PnagaR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            pub fn mnaga(&self) -> MnagaR {
                MnagaR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            pub fn pwidth(&self) -> PwidthR {
                PwidthR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            pub fn mwidth(&self) -> MwidthR {
                MwidthR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            pub fn prio(&self) -> PrioR {
                PrioR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            pub fn m2m(&self) -> M2mR {
                M2mR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            #[must_use]
            pub fn chen(&mut self) -> ChenW<Ch0ctlSpec> {
                ChenW::new(self, 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn ftfie(&mut self) -> FtfieW<Ch0ctlSpec> {
                FtfieW::new(self, 1)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn htfie(&mut self) -> HtfieW<Ch0ctlSpec> {
                HtfieW::new(self, 2)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ch0ctlSpec> {
                ErrieW::new(self, 3)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ch0ctlSpec> {
                DirW::new(self, 4)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmen(&mut self) -> CmenW<Ch0ctlSpec> {
                CmenW::new(self, 5)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pnaga(&mut self) -> PnagaW<Ch0ctlSpec> {
                PnagaW::new(self, 6)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mnaga(&mut self) -> MnagaW<Ch0ctlSpec> {
                MnagaW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pwidth(&mut self) -> PwidthW<Ch0ctlSpec> {
                PwidthW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mwidth(&mut self) -> MwidthW<Ch0ctlSpec> {
                MwidthW::new(self, 10)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            #[must_use]
            pub fn prio(&mut self) -> PrioW<Ch0ctlSpec> {
                PrioW::new(self, 12)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            #[must_use]
            pub fn m2m(&mut self) -> M2mW<Ch0ctlSpec> {
                M2mW::new(self, 14)
            }
        }
        #[doc = "Channel 0 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch0ctlSpec;
        impl crate::RegisterSpec for Ch0ctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch0ctl::R`](R) reader structure"]
        impl crate::Readable for Ch0ctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch0ctl::W`](W) writer structure"]
        impl crate::Writable for Ch0ctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH0CTL to value 0"]
        impl crate::Resettable for Ch0ctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH0CNT (rw) register accessor: Channel 0 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch0cnt`]
module"]
    #[doc(alias = "CH0CNT")]
    pub type Ch0cnt = crate::Reg<ch0cnt::Ch0cntSpec>;
    #[doc = "Channel 0 counter register"]
    pub mod ch0cnt {
        #[doc = "Register `CH0CNT` reader"]
        pub type R = crate::R<Ch0cntSpec>;
        #[doc = "Register `CH0CNT` writer"]
        pub type W = crate::W<Ch0cntSpec>;
        #[doc = "Field `CNT` reader - Transfer counter"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - Transfer counter"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<Ch0cntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Channel 0 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch0cntSpec;
        impl crate::RegisterSpec for Ch0cntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch0cnt::R`](R) reader structure"]
        impl crate::Readable for Ch0cntSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch0cnt::W`](W) writer structure"]
        impl crate::Writable for Ch0cntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH0CNT to value 0"]
        impl crate::Resettable for Ch0cntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH0PADDR (rw) register accessor: Channel 0 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0paddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0paddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch0paddr`]
module"]
    #[doc(alias = "CH0PADDR")]
    pub type Ch0paddr = crate::Reg<ch0paddr::Ch0paddrSpec>;
    #[doc = "Channel 0 peripheral base address register"]
    pub mod ch0paddr {
        #[doc = "Register `CH0PADDR` reader"]
        pub type R = crate::R<Ch0paddrSpec>;
        #[doc = "Register `CH0PADDR` writer"]
        pub type W = crate::W<Ch0paddrSpec>;
        #[doc = "Field `PADDR` reader - Peripheral base address"]
        pub type PaddrR = crate::FieldReader<u32>;
        #[doc = "Field `PADDR` writer - Peripheral base address"]
        pub type PaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            pub fn paddr(&self) -> PaddrR {
                PaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            #[must_use]
            pub fn paddr(&mut self) -> PaddrW<Ch0paddrSpec> {
                PaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 0 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0paddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0paddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch0paddrSpec;
        impl crate::RegisterSpec for Ch0paddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch0paddr::R`](R) reader structure"]
        impl crate::Readable for Ch0paddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch0paddr::W`](W) writer structure"]
        impl crate::Writable for Ch0paddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH0PADDR to value 0"]
        impl crate::Resettable for Ch0paddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH0MADDR (rw) register accessor: Channel 0 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0maddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0maddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch0maddr`]
module"]
    #[doc(alias = "CH0MADDR")]
    pub type Ch0maddr = crate::Reg<ch0maddr::Ch0maddrSpec>;
    #[doc = "Channel 0 memory base address register"]
    pub mod ch0maddr {
        #[doc = "Register `CH0MADDR` reader"]
        pub type R = crate::R<Ch0maddrSpec>;
        #[doc = "Register `CH0MADDR` writer"]
        pub type W = crate::W<Ch0maddrSpec>;
        #[doc = "Field `MADDR` reader - Memory base address"]
        pub type MaddrR = crate::FieldReader<u32>;
        #[doc = "Field `MADDR` writer - Memory base address"]
        pub type MaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            pub fn maddr(&self) -> MaddrR {
                MaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            #[must_use]
            pub fn maddr(&mut self) -> MaddrW<Ch0maddrSpec> {
                MaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 0 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0maddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0maddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch0maddrSpec;
        impl crate::RegisterSpec for Ch0maddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch0maddr::R`](R) reader structure"]
        impl crate::Readable for Ch0maddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch0maddr::W`](W) writer structure"]
        impl crate::Writable for Ch0maddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH0MADDR to value 0"]
        impl crate::Resettable for Ch0maddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH1CTL (rw) register accessor: Channel 1 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch1ctl`]
module"]
    #[doc(alias = "CH1CTL")]
    pub type Ch1ctl = crate::Reg<ch1ctl::Ch1ctlSpec>;
    #[doc = "Channel 1 control register"]
    pub mod ch1ctl {
        #[doc = "Register `CH1CTL` reader"]
        pub type R = crate::R<Ch1ctlSpec>;
        #[doc = "Register `CH1CTL` writer"]
        pub type W = crate::W<Ch1ctlSpec>;
        #[doc = "Field `CHEN` reader - Channel enable"]
        pub type ChenR = crate::BitReader;
        #[doc = "Field `CHEN` writer - Channel enable"]
        pub type ChenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIE` reader - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieR = crate::BitReader;
        #[doc = "Field `FTFIE` writer - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIE` reader - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieR = crate::BitReader;
        #[doc = "Field `HTFIE` writer - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Enable bit for channel error interrupt"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Enable bit for channel error interrupt"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Transfer direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Transfer direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMEN` reader - Circular mode enable"]
        pub type CmenR = crate::BitReader;
        #[doc = "Field `CMEN` writer - Circular mode enable"]
        pub type CmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PNAGA` reader - Next address generation algorithm of peripheral"]
        pub type PnagaR = crate::BitReader;
        #[doc = "Field `PNAGA` writer - Next address generation algorithm of peripheral"]
        pub type PnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MNAGA` reader - Next address generation algorithm of memory"]
        pub type MnagaR = crate::BitReader;
        #[doc = "Field `MNAGA` writer - Next address generation algorithm of memory"]
        pub type MnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PWIDTH` reader - Transfer data size of peripheral"]
        pub type PwidthR = crate::FieldReader;
        #[doc = "Field `PWIDTH` writer - Transfer data size of peripheral"]
        pub type PwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MWIDTH` reader - Transfer data size of memory"]
        pub type MwidthR = crate::FieldReader;
        #[doc = "Field `MWIDTH` writer - Transfer data size of memory"]
        pub type MwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PRIO` reader - Priority level"]
        pub type PrioR = crate::FieldReader;
        #[doc = "Field `PRIO` writer - Priority level"]
        pub type PrioW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `M2M` reader - Memory to Memory Mode"]
        pub type M2mR = crate::BitReader;
        #[doc = "Field `M2M` writer - Memory to Memory Mode"]
        pub type M2mW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn chen(&self) -> ChenR {
                ChenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            pub fn ftfie(&self) -> FtfieR {
                FtfieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            pub fn htfie(&self) -> HtfieR {
                HtfieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            pub fn cmen(&self) -> CmenR {
                CmenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            pub fn pnaga(&self) -> PnagaR {
                PnagaR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            pub fn mnaga(&self) -> MnagaR {
                MnagaR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            pub fn pwidth(&self) -> PwidthR {
                PwidthR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            pub fn mwidth(&self) -> MwidthR {
                MwidthR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            pub fn prio(&self) -> PrioR {
                PrioR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            pub fn m2m(&self) -> M2mR {
                M2mR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            #[must_use]
            pub fn chen(&mut self) -> ChenW<Ch1ctlSpec> {
                ChenW::new(self, 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn ftfie(&mut self) -> FtfieW<Ch1ctlSpec> {
                FtfieW::new(self, 1)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn htfie(&mut self) -> HtfieW<Ch1ctlSpec> {
                HtfieW::new(self, 2)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ch1ctlSpec> {
                ErrieW::new(self, 3)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ch1ctlSpec> {
                DirW::new(self, 4)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmen(&mut self) -> CmenW<Ch1ctlSpec> {
                CmenW::new(self, 5)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pnaga(&mut self) -> PnagaW<Ch1ctlSpec> {
                PnagaW::new(self, 6)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mnaga(&mut self) -> MnagaW<Ch1ctlSpec> {
                MnagaW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pwidth(&mut self) -> PwidthW<Ch1ctlSpec> {
                PwidthW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mwidth(&mut self) -> MwidthW<Ch1ctlSpec> {
                MwidthW::new(self, 10)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            #[must_use]
            pub fn prio(&mut self) -> PrioW<Ch1ctlSpec> {
                PrioW::new(self, 12)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            #[must_use]
            pub fn m2m(&mut self) -> M2mW<Ch1ctlSpec> {
                M2mW::new(self, 14)
            }
        }
        #[doc = "Channel 1 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch1ctlSpec;
        impl crate::RegisterSpec for Ch1ctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch1ctl::R`](R) reader structure"]
        impl crate::Readable for Ch1ctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch1ctl::W`](W) writer structure"]
        impl crate::Writable for Ch1ctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH1CTL to value 0"]
        impl crate::Resettable for Ch1ctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH1CNT (rw) register accessor: Channel 1 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch1cnt`]
module"]
    #[doc(alias = "CH1CNT")]
    pub type Ch1cnt = crate::Reg<ch1cnt::Ch1cntSpec>;
    #[doc = "Channel 1 counter register"]
    pub mod ch1cnt {
        #[doc = "Register `CH1CNT` reader"]
        pub type R = crate::R<Ch1cntSpec>;
        #[doc = "Register `CH1CNT` writer"]
        pub type W = crate::W<Ch1cntSpec>;
        #[doc = "Field `CNT` reader - Transfer counter"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - Transfer counter"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<Ch1cntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Channel 1 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch1cntSpec;
        impl crate::RegisterSpec for Ch1cntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch1cnt::R`](R) reader structure"]
        impl crate::Readable for Ch1cntSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch1cnt::W`](W) writer structure"]
        impl crate::Writable for Ch1cntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH1CNT to value 0"]
        impl crate::Resettable for Ch1cntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH1PADDR (rw) register accessor: Channel 1 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1paddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1paddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch1paddr`]
module"]
    #[doc(alias = "CH1PADDR")]
    pub type Ch1paddr = crate::Reg<ch1paddr::Ch1paddrSpec>;
    #[doc = "Channel 1 peripheral base address register"]
    pub mod ch1paddr {
        #[doc = "Register `CH1PADDR` reader"]
        pub type R = crate::R<Ch1paddrSpec>;
        #[doc = "Register `CH1PADDR` writer"]
        pub type W = crate::W<Ch1paddrSpec>;
        #[doc = "Field `PADDR` reader - Peripheral base address"]
        pub type PaddrR = crate::FieldReader<u32>;
        #[doc = "Field `PADDR` writer - Peripheral base address"]
        pub type PaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            pub fn paddr(&self) -> PaddrR {
                PaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            #[must_use]
            pub fn paddr(&mut self) -> PaddrW<Ch1paddrSpec> {
                PaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 1 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1paddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1paddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch1paddrSpec;
        impl crate::RegisterSpec for Ch1paddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch1paddr::R`](R) reader structure"]
        impl crate::Readable for Ch1paddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch1paddr::W`](W) writer structure"]
        impl crate::Writable for Ch1paddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH1PADDR to value 0"]
        impl crate::Resettable for Ch1paddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH1MADDR (rw) register accessor: Channel 1 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1maddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1maddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch1maddr`]
module"]
    #[doc(alias = "CH1MADDR")]
    pub type Ch1maddr = crate::Reg<ch1maddr::Ch1maddrSpec>;
    #[doc = "Channel 1 memory base address register"]
    pub mod ch1maddr {
        #[doc = "Register `CH1MADDR` reader"]
        pub type R = crate::R<Ch1maddrSpec>;
        #[doc = "Register `CH1MADDR` writer"]
        pub type W = crate::W<Ch1maddrSpec>;
        #[doc = "Field `MADDR` reader - Memory base address"]
        pub type MaddrR = crate::FieldReader<u32>;
        #[doc = "Field `MADDR` writer - Memory base address"]
        pub type MaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            pub fn maddr(&self) -> MaddrR {
                MaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            #[must_use]
            pub fn maddr(&mut self) -> MaddrW<Ch1maddrSpec> {
                MaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 1 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1maddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1maddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch1maddrSpec;
        impl crate::RegisterSpec for Ch1maddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch1maddr::R`](R) reader structure"]
        impl crate::Readable for Ch1maddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch1maddr::W`](W) writer structure"]
        impl crate::Writable for Ch1maddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH1MADDR to value 0"]
        impl crate::Resettable for Ch1maddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH2CTL (rw) register accessor: Channel 2 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch2ctl`]
module"]
    #[doc(alias = "CH2CTL")]
    pub type Ch2ctl = crate::Reg<ch2ctl::Ch2ctlSpec>;
    #[doc = "Channel 2 control register"]
    pub mod ch2ctl {
        #[doc = "Register `CH2CTL` reader"]
        pub type R = crate::R<Ch2ctlSpec>;
        #[doc = "Register `CH2CTL` writer"]
        pub type W = crate::W<Ch2ctlSpec>;
        #[doc = "Field `CHEN` reader - Channel enable"]
        pub type ChenR = crate::BitReader;
        #[doc = "Field `CHEN` writer - Channel enable"]
        pub type ChenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIE` reader - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieR = crate::BitReader;
        #[doc = "Field `FTFIE` writer - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIE` reader - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieR = crate::BitReader;
        #[doc = "Field `HTFIE` writer - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Enable bit for channel error interrupt"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Enable bit for channel error interrupt"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Transfer direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Transfer direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMEN` reader - Circular mode enable"]
        pub type CmenR = crate::BitReader;
        #[doc = "Field `CMEN` writer - Circular mode enable"]
        pub type CmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PNAGA` reader - Next address generation algorithm of peripheral"]
        pub type PnagaR = crate::BitReader;
        #[doc = "Field `PNAGA` writer - Next address generation algorithm of peripheral"]
        pub type PnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MNAGA` reader - Next address generation algorithm of memory"]
        pub type MnagaR = crate::BitReader;
        #[doc = "Field `MNAGA` writer - Next address generation algorithm of memory"]
        pub type MnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PWIDTH` reader - Transfer data size of peripheral"]
        pub type PwidthR = crate::FieldReader;
        #[doc = "Field `PWIDTH` writer - Transfer data size of peripheral"]
        pub type PwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MWIDTH` reader - Transfer data size of memory"]
        pub type MwidthR = crate::FieldReader;
        #[doc = "Field `MWIDTH` writer - Transfer data size of memory"]
        pub type MwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PRIO` reader - Priority level"]
        pub type PrioR = crate::FieldReader;
        #[doc = "Field `PRIO` writer - Priority level"]
        pub type PrioW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `M2M` reader - Memory to Memory Mode"]
        pub type M2mR = crate::BitReader;
        #[doc = "Field `M2M` writer - Memory to Memory Mode"]
        pub type M2mW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn chen(&self) -> ChenR {
                ChenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            pub fn ftfie(&self) -> FtfieR {
                FtfieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            pub fn htfie(&self) -> HtfieR {
                HtfieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            pub fn cmen(&self) -> CmenR {
                CmenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            pub fn pnaga(&self) -> PnagaR {
                PnagaR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            pub fn mnaga(&self) -> MnagaR {
                MnagaR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            pub fn pwidth(&self) -> PwidthR {
                PwidthR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            pub fn mwidth(&self) -> MwidthR {
                MwidthR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            pub fn prio(&self) -> PrioR {
                PrioR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            pub fn m2m(&self) -> M2mR {
                M2mR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            #[must_use]
            pub fn chen(&mut self) -> ChenW<Ch2ctlSpec> {
                ChenW::new(self, 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn ftfie(&mut self) -> FtfieW<Ch2ctlSpec> {
                FtfieW::new(self, 1)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn htfie(&mut self) -> HtfieW<Ch2ctlSpec> {
                HtfieW::new(self, 2)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ch2ctlSpec> {
                ErrieW::new(self, 3)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ch2ctlSpec> {
                DirW::new(self, 4)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmen(&mut self) -> CmenW<Ch2ctlSpec> {
                CmenW::new(self, 5)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pnaga(&mut self) -> PnagaW<Ch2ctlSpec> {
                PnagaW::new(self, 6)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mnaga(&mut self) -> MnagaW<Ch2ctlSpec> {
                MnagaW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pwidth(&mut self) -> PwidthW<Ch2ctlSpec> {
                PwidthW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mwidth(&mut self) -> MwidthW<Ch2ctlSpec> {
                MwidthW::new(self, 10)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            #[must_use]
            pub fn prio(&mut self) -> PrioW<Ch2ctlSpec> {
                PrioW::new(self, 12)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            #[must_use]
            pub fn m2m(&mut self) -> M2mW<Ch2ctlSpec> {
                M2mW::new(self, 14)
            }
        }
        #[doc = "Channel 2 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch2ctlSpec;
        impl crate::RegisterSpec for Ch2ctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch2ctl::R`](R) reader structure"]
        impl crate::Readable for Ch2ctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch2ctl::W`](W) writer structure"]
        impl crate::Writable for Ch2ctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH2CTL to value 0"]
        impl crate::Resettable for Ch2ctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH2CNT (rw) register accessor: Channel 2 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch2cnt`]
module"]
    #[doc(alias = "CH2CNT")]
    pub type Ch2cnt = crate::Reg<ch2cnt::Ch2cntSpec>;
    #[doc = "Channel 2 counter register"]
    pub mod ch2cnt {
        #[doc = "Register `CH2CNT` reader"]
        pub type R = crate::R<Ch2cntSpec>;
        #[doc = "Register `CH2CNT` writer"]
        pub type W = crate::W<Ch2cntSpec>;
        #[doc = "Field `CNT` reader - Transfer counter"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - Transfer counter"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<Ch2cntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Channel 2 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch2cntSpec;
        impl crate::RegisterSpec for Ch2cntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch2cnt::R`](R) reader structure"]
        impl crate::Readable for Ch2cntSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch2cnt::W`](W) writer structure"]
        impl crate::Writable for Ch2cntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH2CNT to value 0"]
        impl crate::Resettable for Ch2cntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH2PADDR (rw) register accessor: Channel 2 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2paddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2paddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch2paddr`]
module"]
    #[doc(alias = "CH2PADDR")]
    pub type Ch2paddr = crate::Reg<ch2paddr::Ch2paddrSpec>;
    #[doc = "Channel 2 peripheral base address register"]
    pub mod ch2paddr {
        #[doc = "Register `CH2PADDR` reader"]
        pub type R = crate::R<Ch2paddrSpec>;
        #[doc = "Register `CH2PADDR` writer"]
        pub type W = crate::W<Ch2paddrSpec>;
        #[doc = "Field `PADDR` reader - Peripheral base address"]
        pub type PaddrR = crate::FieldReader<u32>;
        #[doc = "Field `PADDR` writer - Peripheral base address"]
        pub type PaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            pub fn paddr(&self) -> PaddrR {
                PaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            #[must_use]
            pub fn paddr(&mut self) -> PaddrW<Ch2paddrSpec> {
                PaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 2 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2paddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2paddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch2paddrSpec;
        impl crate::RegisterSpec for Ch2paddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch2paddr::R`](R) reader structure"]
        impl crate::Readable for Ch2paddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch2paddr::W`](W) writer structure"]
        impl crate::Writable for Ch2paddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH2PADDR to value 0"]
        impl crate::Resettable for Ch2paddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH2MADDR (rw) register accessor: Channel 2 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2maddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2maddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch2maddr`]
module"]
    #[doc(alias = "CH2MADDR")]
    pub type Ch2maddr = crate::Reg<ch2maddr::Ch2maddrSpec>;
    #[doc = "Channel 2 memory base address register"]
    pub mod ch2maddr {
        #[doc = "Register `CH2MADDR` reader"]
        pub type R = crate::R<Ch2maddrSpec>;
        #[doc = "Register `CH2MADDR` writer"]
        pub type W = crate::W<Ch2maddrSpec>;
        #[doc = "Field `MADDR` reader - Memory base address"]
        pub type MaddrR = crate::FieldReader<u32>;
        #[doc = "Field `MADDR` writer - Memory base address"]
        pub type MaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            pub fn maddr(&self) -> MaddrR {
                MaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            #[must_use]
            pub fn maddr(&mut self) -> MaddrW<Ch2maddrSpec> {
                MaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 2 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2maddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2maddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch2maddrSpec;
        impl crate::RegisterSpec for Ch2maddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch2maddr::R`](R) reader structure"]
        impl crate::Readable for Ch2maddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch2maddr::W`](W) writer structure"]
        impl crate::Writable for Ch2maddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH2MADDR to value 0"]
        impl crate::Resettable for Ch2maddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH3CTL (rw) register accessor: Channel 3 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch3ctl`]
module"]
    #[doc(alias = "CH3CTL")]
    pub type Ch3ctl = crate::Reg<ch3ctl::Ch3ctlSpec>;
    #[doc = "Channel 3 control register"]
    pub mod ch3ctl {
        #[doc = "Register `CH3CTL` reader"]
        pub type R = crate::R<Ch3ctlSpec>;
        #[doc = "Register `CH3CTL` writer"]
        pub type W = crate::W<Ch3ctlSpec>;
        #[doc = "Field `CHEN` reader - Channel enable"]
        pub type ChenR = crate::BitReader;
        #[doc = "Field `CHEN` writer - Channel enable"]
        pub type ChenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIE` reader - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieR = crate::BitReader;
        #[doc = "Field `FTFIE` writer - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIE` reader - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieR = crate::BitReader;
        #[doc = "Field `HTFIE` writer - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Enable bit for channel error interrupt"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Enable bit for channel error interrupt"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Transfer direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Transfer direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMEN` reader - Circular mode enable"]
        pub type CmenR = crate::BitReader;
        #[doc = "Field `CMEN` writer - Circular mode enable"]
        pub type CmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PNAGA` reader - Next address generation algorithm of peripheral"]
        pub type PnagaR = crate::BitReader;
        #[doc = "Field `PNAGA` writer - Next address generation algorithm of peripheral"]
        pub type PnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MNAGA` reader - Next address generation algorithm of memory"]
        pub type MnagaR = crate::BitReader;
        #[doc = "Field `MNAGA` writer - Next address generation algorithm of memory"]
        pub type MnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PWIDTH` reader - Transfer data size of peripheral"]
        pub type PwidthR = crate::FieldReader;
        #[doc = "Field `PWIDTH` writer - Transfer data size of peripheral"]
        pub type PwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MWIDTH` reader - Transfer data size of memory"]
        pub type MwidthR = crate::FieldReader;
        #[doc = "Field `MWIDTH` writer - Transfer data size of memory"]
        pub type MwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PRIO` reader - Priority level"]
        pub type PrioR = crate::FieldReader;
        #[doc = "Field `PRIO` writer - Priority level"]
        pub type PrioW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `M2M` reader - Memory to Memory Mode"]
        pub type M2mR = crate::BitReader;
        #[doc = "Field `M2M` writer - Memory to Memory Mode"]
        pub type M2mW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn chen(&self) -> ChenR {
                ChenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            pub fn ftfie(&self) -> FtfieR {
                FtfieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            pub fn htfie(&self) -> HtfieR {
                HtfieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            pub fn cmen(&self) -> CmenR {
                CmenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            pub fn pnaga(&self) -> PnagaR {
                PnagaR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            pub fn mnaga(&self) -> MnagaR {
                MnagaR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            pub fn pwidth(&self) -> PwidthR {
                PwidthR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            pub fn mwidth(&self) -> MwidthR {
                MwidthR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            pub fn prio(&self) -> PrioR {
                PrioR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            pub fn m2m(&self) -> M2mR {
                M2mR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            #[must_use]
            pub fn chen(&mut self) -> ChenW<Ch3ctlSpec> {
                ChenW::new(self, 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn ftfie(&mut self) -> FtfieW<Ch3ctlSpec> {
                FtfieW::new(self, 1)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn htfie(&mut self) -> HtfieW<Ch3ctlSpec> {
                HtfieW::new(self, 2)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ch3ctlSpec> {
                ErrieW::new(self, 3)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ch3ctlSpec> {
                DirW::new(self, 4)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmen(&mut self) -> CmenW<Ch3ctlSpec> {
                CmenW::new(self, 5)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pnaga(&mut self) -> PnagaW<Ch3ctlSpec> {
                PnagaW::new(self, 6)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mnaga(&mut self) -> MnagaW<Ch3ctlSpec> {
                MnagaW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pwidth(&mut self) -> PwidthW<Ch3ctlSpec> {
                PwidthW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mwidth(&mut self) -> MwidthW<Ch3ctlSpec> {
                MwidthW::new(self, 10)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            #[must_use]
            pub fn prio(&mut self) -> PrioW<Ch3ctlSpec> {
                PrioW::new(self, 12)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            #[must_use]
            pub fn m2m(&mut self) -> M2mW<Ch3ctlSpec> {
                M2mW::new(self, 14)
            }
        }
        #[doc = "Channel 3 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch3ctlSpec;
        impl crate::RegisterSpec for Ch3ctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch3ctl::R`](R) reader structure"]
        impl crate::Readable for Ch3ctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch3ctl::W`](W) writer structure"]
        impl crate::Writable for Ch3ctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH3CTL to value 0"]
        impl crate::Resettable for Ch3ctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH3CNT (rw) register accessor: Channel 3 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch3cnt`]
module"]
    #[doc(alias = "CH3CNT")]
    pub type Ch3cnt = crate::Reg<ch3cnt::Ch3cntSpec>;
    #[doc = "Channel 3 counter register"]
    pub mod ch3cnt {
        #[doc = "Register `CH3CNT` reader"]
        pub type R = crate::R<Ch3cntSpec>;
        #[doc = "Register `CH3CNT` writer"]
        pub type W = crate::W<Ch3cntSpec>;
        #[doc = "Field `CNT` reader - Transfer counter"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - Transfer counter"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<Ch3cntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Channel 3 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch3cntSpec;
        impl crate::RegisterSpec for Ch3cntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch3cnt::R`](R) reader structure"]
        impl crate::Readable for Ch3cntSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch3cnt::W`](W) writer structure"]
        impl crate::Writable for Ch3cntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH3CNT to value 0"]
        impl crate::Resettable for Ch3cntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH3PADDR (rw) register accessor: Channel 3 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3paddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3paddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch3paddr`]
module"]
    #[doc(alias = "CH3PADDR")]
    pub type Ch3paddr = crate::Reg<ch3paddr::Ch3paddrSpec>;
    #[doc = "Channel 3 peripheral base address register"]
    pub mod ch3paddr {
        #[doc = "Register `CH3PADDR` reader"]
        pub type R = crate::R<Ch3paddrSpec>;
        #[doc = "Register `CH3PADDR` writer"]
        pub type W = crate::W<Ch3paddrSpec>;
        #[doc = "Field `PADDR` reader - Peripheral base address"]
        pub type PaddrR = crate::FieldReader<u32>;
        #[doc = "Field `PADDR` writer - Peripheral base address"]
        pub type PaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            pub fn paddr(&self) -> PaddrR {
                PaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            #[must_use]
            pub fn paddr(&mut self) -> PaddrW<Ch3paddrSpec> {
                PaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 3 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3paddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3paddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch3paddrSpec;
        impl crate::RegisterSpec for Ch3paddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch3paddr::R`](R) reader structure"]
        impl crate::Readable for Ch3paddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch3paddr::W`](W) writer structure"]
        impl crate::Writable for Ch3paddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH3PADDR to value 0"]
        impl crate::Resettable for Ch3paddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH3MADDR (rw) register accessor: Channel 3 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3maddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3maddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch3maddr`]
module"]
    #[doc(alias = "CH3MADDR")]
    pub type Ch3maddr = crate::Reg<ch3maddr::Ch3maddrSpec>;
    #[doc = "Channel 3 memory base address register"]
    pub mod ch3maddr {
        #[doc = "Register `CH3MADDR` reader"]
        pub type R = crate::R<Ch3maddrSpec>;
        #[doc = "Register `CH3MADDR` writer"]
        pub type W = crate::W<Ch3maddrSpec>;
        #[doc = "Field `MADDR` reader - Memory base address"]
        pub type MaddrR = crate::FieldReader<u32>;
        #[doc = "Field `MADDR` writer - Memory base address"]
        pub type MaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            pub fn maddr(&self) -> MaddrR {
                MaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            #[must_use]
            pub fn maddr(&mut self) -> MaddrW<Ch3maddrSpec> {
                MaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 3 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3maddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3maddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch3maddrSpec;
        impl crate::RegisterSpec for Ch3maddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch3maddr::R`](R) reader structure"]
        impl crate::Readable for Ch3maddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch3maddr::W`](W) writer structure"]
        impl crate::Writable for Ch3maddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH3MADDR to value 0"]
        impl crate::Resettable for Ch3maddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH4CTL (rw) register accessor: Channel 4 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch4ctl`]
module"]
    #[doc(alias = "CH4CTL")]
    pub type Ch4ctl = crate::Reg<ch4ctl::Ch4ctlSpec>;
    #[doc = "Channel 4 control register"]
    pub mod ch4ctl {
        #[doc = "Register `CH4CTL` reader"]
        pub type R = crate::R<Ch4ctlSpec>;
        #[doc = "Register `CH4CTL` writer"]
        pub type W = crate::W<Ch4ctlSpec>;
        #[doc = "Field `CHEN` reader - Channel enable"]
        pub type ChenR = crate::BitReader;
        #[doc = "Field `CHEN` writer - Channel enable"]
        pub type ChenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIE` reader - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieR = crate::BitReader;
        #[doc = "Field `FTFIE` writer - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIE` reader - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieR = crate::BitReader;
        #[doc = "Field `HTFIE` writer - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Enable bit for channel error interrupt"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Enable bit for channel error interrupt"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Transfer direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Transfer direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMEN` reader - Circular mode enable"]
        pub type CmenR = crate::BitReader;
        #[doc = "Field `CMEN` writer - Circular mode enable"]
        pub type CmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PNAGA` reader - Next address generation algorithm of peripheral"]
        pub type PnagaR = crate::BitReader;
        #[doc = "Field `PNAGA` writer - Next address generation algorithm of peripheral"]
        pub type PnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MNAGA` reader - Next address generation algorithm of memory"]
        pub type MnagaR = crate::BitReader;
        #[doc = "Field `MNAGA` writer - Next address generation algorithm of memory"]
        pub type MnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PWIDTH` reader - Transfer data size of peripheral"]
        pub type PwidthR = crate::FieldReader;
        #[doc = "Field `PWIDTH` writer - Transfer data size of peripheral"]
        pub type PwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MWIDTH` reader - Transfer data size of memory"]
        pub type MwidthR = crate::FieldReader;
        #[doc = "Field `MWIDTH` writer - Transfer data size of memory"]
        pub type MwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PRIO` reader - Priority level"]
        pub type PrioR = crate::FieldReader;
        #[doc = "Field `PRIO` writer - Priority level"]
        pub type PrioW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `M2M` reader - Memory to Memory Mode"]
        pub type M2mR = crate::BitReader;
        #[doc = "Field `M2M` writer - Memory to Memory Mode"]
        pub type M2mW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn chen(&self) -> ChenR {
                ChenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            pub fn ftfie(&self) -> FtfieR {
                FtfieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            pub fn htfie(&self) -> HtfieR {
                HtfieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            pub fn cmen(&self) -> CmenR {
                CmenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            pub fn pnaga(&self) -> PnagaR {
                PnagaR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            pub fn mnaga(&self) -> MnagaR {
                MnagaR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            pub fn pwidth(&self) -> PwidthR {
                PwidthR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            pub fn mwidth(&self) -> MwidthR {
                MwidthR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            pub fn prio(&self) -> PrioR {
                PrioR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            pub fn m2m(&self) -> M2mR {
                M2mR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            #[must_use]
            pub fn chen(&mut self) -> ChenW<Ch4ctlSpec> {
                ChenW::new(self, 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn ftfie(&mut self) -> FtfieW<Ch4ctlSpec> {
                FtfieW::new(self, 1)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn htfie(&mut self) -> HtfieW<Ch4ctlSpec> {
                HtfieW::new(self, 2)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ch4ctlSpec> {
                ErrieW::new(self, 3)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ch4ctlSpec> {
                DirW::new(self, 4)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmen(&mut self) -> CmenW<Ch4ctlSpec> {
                CmenW::new(self, 5)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pnaga(&mut self) -> PnagaW<Ch4ctlSpec> {
                PnagaW::new(self, 6)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mnaga(&mut self) -> MnagaW<Ch4ctlSpec> {
                MnagaW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pwidth(&mut self) -> PwidthW<Ch4ctlSpec> {
                PwidthW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mwidth(&mut self) -> MwidthW<Ch4ctlSpec> {
                MwidthW::new(self, 10)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            #[must_use]
            pub fn prio(&mut self) -> PrioW<Ch4ctlSpec> {
                PrioW::new(self, 12)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            #[must_use]
            pub fn m2m(&mut self) -> M2mW<Ch4ctlSpec> {
                M2mW::new(self, 14)
            }
        }
        #[doc = "Channel 4 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch4ctlSpec;
        impl crate::RegisterSpec for Ch4ctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch4ctl::R`](R) reader structure"]
        impl crate::Readable for Ch4ctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch4ctl::W`](W) writer structure"]
        impl crate::Writable for Ch4ctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH4CTL to value 0"]
        impl crate::Resettable for Ch4ctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH4CNT (rw) register accessor: Channel 4 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch4cnt`]
module"]
    #[doc(alias = "CH4CNT")]
    pub type Ch4cnt = crate::Reg<ch4cnt::Ch4cntSpec>;
    #[doc = "Channel 4 counter register"]
    pub mod ch4cnt {
        #[doc = "Register `CH4CNT` reader"]
        pub type R = crate::R<Ch4cntSpec>;
        #[doc = "Register `CH4CNT` writer"]
        pub type W = crate::W<Ch4cntSpec>;
        #[doc = "Field `CNT` reader - Transfer counter"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - Transfer counter"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<Ch4cntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Channel 4 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch4cntSpec;
        impl crate::RegisterSpec for Ch4cntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch4cnt::R`](R) reader structure"]
        impl crate::Readable for Ch4cntSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch4cnt::W`](W) writer structure"]
        impl crate::Writable for Ch4cntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH4CNT to value 0"]
        impl crate::Resettable for Ch4cntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH4PADDR (rw) register accessor: Channel 4 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4paddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4paddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch4paddr`]
module"]
    #[doc(alias = "CH4PADDR")]
    pub type Ch4paddr = crate::Reg<ch4paddr::Ch4paddrSpec>;
    #[doc = "Channel 4 peripheral base address register"]
    pub mod ch4paddr {
        #[doc = "Register `CH4PADDR` reader"]
        pub type R = crate::R<Ch4paddrSpec>;
        #[doc = "Register `CH4PADDR` writer"]
        pub type W = crate::W<Ch4paddrSpec>;
        #[doc = "Field `PADDR` reader - Peripheral base address"]
        pub type PaddrR = crate::FieldReader<u32>;
        #[doc = "Field `PADDR` writer - Peripheral base address"]
        pub type PaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            pub fn paddr(&self) -> PaddrR {
                PaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            #[must_use]
            pub fn paddr(&mut self) -> PaddrW<Ch4paddrSpec> {
                PaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 4 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4paddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4paddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch4paddrSpec;
        impl crate::RegisterSpec for Ch4paddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch4paddr::R`](R) reader structure"]
        impl crate::Readable for Ch4paddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch4paddr::W`](W) writer structure"]
        impl crate::Writable for Ch4paddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH4PADDR to value 0"]
        impl crate::Resettable for Ch4paddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH4MADDR (rw) register accessor: Channel 4 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4maddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4maddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch4maddr`]
module"]
    #[doc(alias = "CH4MADDR")]
    pub type Ch4maddr = crate::Reg<ch4maddr::Ch4maddrSpec>;
    #[doc = "Channel 4 memory base address register"]
    pub mod ch4maddr {
        #[doc = "Register `CH4MADDR` reader"]
        pub type R = crate::R<Ch4maddrSpec>;
        #[doc = "Register `CH4MADDR` writer"]
        pub type W = crate::W<Ch4maddrSpec>;
        #[doc = "Field `MADDR` reader - Memory base address"]
        pub type MaddrR = crate::FieldReader<u32>;
        #[doc = "Field `MADDR` writer - Memory base address"]
        pub type MaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            pub fn maddr(&self) -> MaddrR {
                MaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            #[must_use]
            pub fn maddr(&mut self) -> MaddrW<Ch4maddrSpec> {
                MaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 4 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4maddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4maddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch4maddrSpec;
        impl crate::RegisterSpec for Ch4maddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch4maddr::R`](R) reader structure"]
        impl crate::Readable for Ch4maddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch4maddr::W`](W) writer structure"]
        impl crate::Writable for Ch4maddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH4MADDR to value 0"]
        impl crate::Resettable for Ch4maddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH5CTL (rw) register accessor: Channel 5 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch5ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch5ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch5ctl`]
module"]
    #[doc(alias = "CH5CTL")]
    pub type Ch5ctl = crate::Reg<ch5ctl::Ch5ctlSpec>;
    #[doc = "Channel 5 control register"]
    pub mod ch5ctl {
        #[doc = "Register `CH5CTL` reader"]
        pub type R = crate::R<Ch5ctlSpec>;
        #[doc = "Register `CH5CTL` writer"]
        pub type W = crate::W<Ch5ctlSpec>;
        #[doc = "Field `CHEN` reader - Channel enable"]
        pub type ChenR = crate::BitReader;
        #[doc = "Field `CHEN` writer - Channel enable"]
        pub type ChenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIE` reader - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieR = crate::BitReader;
        #[doc = "Field `FTFIE` writer - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIE` reader - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieR = crate::BitReader;
        #[doc = "Field `HTFIE` writer - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Enable bit for channel error interrupt"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Enable bit for channel error interrupt"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Transfer direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Transfer direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMEN` reader - Circular mode enable"]
        pub type CmenR = crate::BitReader;
        #[doc = "Field `CMEN` writer - Circular mode enable"]
        pub type CmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PNAGA` reader - Next address generation algorithm of peripheral"]
        pub type PnagaR = crate::BitReader;
        #[doc = "Field `PNAGA` writer - Next address generation algorithm of peripheral"]
        pub type PnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MNAGA` reader - Next address generation algorithm of memory"]
        pub type MnagaR = crate::BitReader;
        #[doc = "Field `MNAGA` writer - Next address generation algorithm of memory"]
        pub type MnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PWIDTH` reader - Transfer data size of peripheral"]
        pub type PwidthR = crate::FieldReader;
        #[doc = "Field `PWIDTH` writer - Transfer data size of peripheral"]
        pub type PwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MWIDTH` reader - Transfer data size of memory"]
        pub type MwidthR = crate::FieldReader;
        #[doc = "Field `MWIDTH` writer - Transfer data size of memory"]
        pub type MwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PRIO` reader - Priority level"]
        pub type PrioR = crate::FieldReader;
        #[doc = "Field `PRIO` writer - Priority level"]
        pub type PrioW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `M2M` reader - Memory to Memory Mode"]
        pub type M2mR = crate::BitReader;
        #[doc = "Field `M2M` writer - Memory to Memory Mode"]
        pub type M2mW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn chen(&self) -> ChenR {
                ChenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            pub fn ftfie(&self) -> FtfieR {
                FtfieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            pub fn htfie(&self) -> HtfieR {
                HtfieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            pub fn cmen(&self) -> CmenR {
                CmenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            pub fn pnaga(&self) -> PnagaR {
                PnagaR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            pub fn mnaga(&self) -> MnagaR {
                MnagaR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            pub fn pwidth(&self) -> PwidthR {
                PwidthR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            pub fn mwidth(&self) -> MwidthR {
                MwidthR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            pub fn prio(&self) -> PrioR {
                PrioR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            pub fn m2m(&self) -> M2mR {
                M2mR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            #[must_use]
            pub fn chen(&mut self) -> ChenW<Ch5ctlSpec> {
                ChenW::new(self, 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn ftfie(&mut self) -> FtfieW<Ch5ctlSpec> {
                FtfieW::new(self, 1)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn htfie(&mut self) -> HtfieW<Ch5ctlSpec> {
                HtfieW::new(self, 2)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ch5ctlSpec> {
                ErrieW::new(self, 3)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ch5ctlSpec> {
                DirW::new(self, 4)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmen(&mut self) -> CmenW<Ch5ctlSpec> {
                CmenW::new(self, 5)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pnaga(&mut self) -> PnagaW<Ch5ctlSpec> {
                PnagaW::new(self, 6)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mnaga(&mut self) -> MnagaW<Ch5ctlSpec> {
                MnagaW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pwidth(&mut self) -> PwidthW<Ch5ctlSpec> {
                PwidthW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mwidth(&mut self) -> MwidthW<Ch5ctlSpec> {
                MwidthW::new(self, 10)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            #[must_use]
            pub fn prio(&mut self) -> PrioW<Ch5ctlSpec> {
                PrioW::new(self, 12)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            #[must_use]
            pub fn m2m(&mut self) -> M2mW<Ch5ctlSpec> {
                M2mW::new(self, 14)
            }
        }
        #[doc = "Channel 5 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch5ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch5ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch5ctlSpec;
        impl crate::RegisterSpec for Ch5ctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch5ctl::R`](R) reader structure"]
        impl crate::Readable for Ch5ctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch5ctl::W`](W) writer structure"]
        impl crate::Writable for Ch5ctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH5CTL to value 0"]
        impl crate::Resettable for Ch5ctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH5CNT (rw) register accessor: Channel 5 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch5cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch5cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch5cnt`]
module"]
    #[doc(alias = "CH5CNT")]
    pub type Ch5cnt = crate::Reg<ch5cnt::Ch5cntSpec>;
    #[doc = "Channel 5 counter register"]
    pub mod ch5cnt {
        #[doc = "Register `CH5CNT` reader"]
        pub type R = crate::R<Ch5cntSpec>;
        #[doc = "Register `CH5CNT` writer"]
        pub type W = crate::W<Ch5cntSpec>;
        #[doc = "Field `CNT` reader - Transfer counter"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - Transfer counter"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<Ch5cntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Channel 5 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch5cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch5cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch5cntSpec;
        impl crate::RegisterSpec for Ch5cntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch5cnt::R`](R) reader structure"]
        impl crate::Readable for Ch5cntSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch5cnt::W`](W) writer structure"]
        impl crate::Writable for Ch5cntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH5CNT to value 0"]
        impl crate::Resettable for Ch5cntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH5PADDR (rw) register accessor: Channel 5 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch5paddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch5paddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch5paddr`]
module"]
    #[doc(alias = "CH5PADDR")]
    pub type Ch5paddr = crate::Reg<ch5paddr::Ch5paddrSpec>;
    #[doc = "Channel 5 peripheral base address register"]
    pub mod ch5paddr {
        #[doc = "Register `CH5PADDR` reader"]
        pub type R = crate::R<Ch5paddrSpec>;
        #[doc = "Register `CH5PADDR` writer"]
        pub type W = crate::W<Ch5paddrSpec>;
        #[doc = "Field `PADDR` reader - Peripheral base address"]
        pub type PaddrR = crate::FieldReader<u32>;
        #[doc = "Field `PADDR` writer - Peripheral base address"]
        pub type PaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            pub fn paddr(&self) -> PaddrR {
                PaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            #[must_use]
            pub fn paddr(&mut self) -> PaddrW<Ch5paddrSpec> {
                PaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 5 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch5paddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch5paddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch5paddrSpec;
        impl crate::RegisterSpec for Ch5paddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch5paddr::R`](R) reader structure"]
        impl crate::Readable for Ch5paddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch5paddr::W`](W) writer structure"]
        impl crate::Writable for Ch5paddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH5PADDR to value 0"]
        impl crate::Resettable for Ch5paddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH5MADDR (rw) register accessor: Channel 5 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch5maddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch5maddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch5maddr`]
module"]
    #[doc(alias = "CH5MADDR")]
    pub type Ch5maddr = crate::Reg<ch5maddr::Ch5maddrSpec>;
    #[doc = "Channel 5 memory base address register"]
    pub mod ch5maddr {
        #[doc = "Register `CH5MADDR` reader"]
        pub type R = crate::R<Ch5maddrSpec>;
        #[doc = "Register `CH5MADDR` writer"]
        pub type W = crate::W<Ch5maddrSpec>;
        #[doc = "Field `MADDR` reader - Memory base address"]
        pub type MaddrR = crate::FieldReader<u32>;
        #[doc = "Field `MADDR` writer - Memory base address"]
        pub type MaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            pub fn maddr(&self) -> MaddrR {
                MaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            #[must_use]
            pub fn maddr(&mut self) -> MaddrW<Ch5maddrSpec> {
                MaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 5 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch5maddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch5maddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch5maddrSpec;
        impl crate::RegisterSpec for Ch5maddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch5maddr::R`](R) reader structure"]
        impl crate::Readable for Ch5maddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch5maddr::W`](W) writer structure"]
        impl crate::Writable for Ch5maddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH5MADDR to value 0"]
        impl crate::Resettable for Ch5maddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH6CTL (rw) register accessor: Channel 6 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch6ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch6ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch6ctl`]
module"]
    #[doc(alias = "CH6CTL")]
    pub type Ch6ctl = crate::Reg<ch6ctl::Ch6ctlSpec>;
    #[doc = "Channel 6 control register"]
    pub mod ch6ctl {
        #[doc = "Register `CH6CTL` reader"]
        pub type R = crate::R<Ch6ctlSpec>;
        #[doc = "Register `CH6CTL` writer"]
        pub type W = crate::W<Ch6ctlSpec>;
        #[doc = "Field `CHEN` reader - Channel enable"]
        pub type ChenR = crate::BitReader;
        #[doc = "Field `CHEN` writer - Channel enable"]
        pub type ChenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIE` reader - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieR = crate::BitReader;
        #[doc = "Field `FTFIE` writer - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIE` reader - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieR = crate::BitReader;
        #[doc = "Field `HTFIE` writer - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Enable bit for channel error interrupt"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Enable bit for channel error interrupt"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Transfer direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Transfer direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMEN` reader - Circular mode enable"]
        pub type CmenR = crate::BitReader;
        #[doc = "Field `CMEN` writer - Circular mode enable"]
        pub type CmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PNAGA` reader - Next address generation algorithm of peripheral"]
        pub type PnagaR = crate::BitReader;
        #[doc = "Field `PNAGA` writer - Next address generation algorithm of peripheral"]
        pub type PnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MNAGA` reader - Next address generation algorithm of memory"]
        pub type MnagaR = crate::BitReader;
        #[doc = "Field `MNAGA` writer - Next address generation algorithm of memory"]
        pub type MnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PWIDTH` reader - Transfer data size of peripheral"]
        pub type PwidthR = crate::FieldReader;
        #[doc = "Field `PWIDTH` writer - Transfer data size of peripheral"]
        pub type PwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MWIDTH` reader - Transfer data size of memory"]
        pub type MwidthR = crate::FieldReader;
        #[doc = "Field `MWIDTH` writer - Transfer data size of memory"]
        pub type MwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PRIO` reader - Priority level"]
        pub type PrioR = crate::FieldReader;
        #[doc = "Field `PRIO` writer - Priority level"]
        pub type PrioW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `M2M` reader - Memory to Memory Mode"]
        pub type M2mR = crate::BitReader;
        #[doc = "Field `M2M` writer - Memory to Memory Mode"]
        pub type M2mW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn chen(&self) -> ChenR {
                ChenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            pub fn ftfie(&self) -> FtfieR {
                FtfieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            pub fn htfie(&self) -> HtfieR {
                HtfieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            pub fn cmen(&self) -> CmenR {
                CmenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            pub fn pnaga(&self) -> PnagaR {
                PnagaR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            pub fn mnaga(&self) -> MnagaR {
                MnagaR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            pub fn pwidth(&self) -> PwidthR {
                PwidthR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            pub fn mwidth(&self) -> MwidthR {
                MwidthR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            pub fn prio(&self) -> PrioR {
                PrioR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            pub fn m2m(&self) -> M2mR {
                M2mR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            #[must_use]
            pub fn chen(&mut self) -> ChenW<Ch6ctlSpec> {
                ChenW::new(self, 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn ftfie(&mut self) -> FtfieW<Ch6ctlSpec> {
                FtfieW::new(self, 1)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn htfie(&mut self) -> HtfieW<Ch6ctlSpec> {
                HtfieW::new(self, 2)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ch6ctlSpec> {
                ErrieW::new(self, 3)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ch6ctlSpec> {
                DirW::new(self, 4)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmen(&mut self) -> CmenW<Ch6ctlSpec> {
                CmenW::new(self, 5)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pnaga(&mut self) -> PnagaW<Ch6ctlSpec> {
                PnagaW::new(self, 6)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mnaga(&mut self) -> MnagaW<Ch6ctlSpec> {
                MnagaW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pwidth(&mut self) -> PwidthW<Ch6ctlSpec> {
                PwidthW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mwidth(&mut self) -> MwidthW<Ch6ctlSpec> {
                MwidthW::new(self, 10)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            #[must_use]
            pub fn prio(&mut self) -> PrioW<Ch6ctlSpec> {
                PrioW::new(self, 12)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            #[must_use]
            pub fn m2m(&mut self) -> M2mW<Ch6ctlSpec> {
                M2mW::new(self, 14)
            }
        }
        #[doc = "Channel 6 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch6ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch6ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch6ctlSpec;
        impl crate::RegisterSpec for Ch6ctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch6ctl::R`](R) reader structure"]
        impl crate::Readable for Ch6ctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch6ctl::W`](W) writer structure"]
        impl crate::Writable for Ch6ctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH6CTL to value 0"]
        impl crate::Resettable for Ch6ctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH6CNT (rw) register accessor: Channel 6 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch6cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch6cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch6cnt`]
module"]
    #[doc(alias = "CH6CNT")]
    pub type Ch6cnt = crate::Reg<ch6cnt::Ch6cntSpec>;
    #[doc = "Channel 6 counter register"]
    pub mod ch6cnt {
        #[doc = "Register `CH6CNT` reader"]
        pub type R = crate::R<Ch6cntSpec>;
        #[doc = "Register `CH6CNT` writer"]
        pub type W = crate::W<Ch6cntSpec>;
        #[doc = "Field `CNT` reader - Transfer counter"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - Transfer counter"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<Ch6cntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Channel 6 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch6cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch6cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch6cntSpec;
        impl crate::RegisterSpec for Ch6cntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch6cnt::R`](R) reader structure"]
        impl crate::Readable for Ch6cntSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch6cnt::W`](W) writer structure"]
        impl crate::Writable for Ch6cntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH6CNT to value 0"]
        impl crate::Resettable for Ch6cntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH6PADDR (rw) register accessor: Channel 6 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch6paddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch6paddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch6paddr`]
module"]
    #[doc(alias = "CH6PADDR")]
    pub type Ch6paddr = crate::Reg<ch6paddr::Ch6paddrSpec>;
    #[doc = "Channel 6 peripheral base address register"]
    pub mod ch6paddr {
        #[doc = "Register `CH6PADDR` reader"]
        pub type R = crate::R<Ch6paddrSpec>;
        #[doc = "Register `CH6PADDR` writer"]
        pub type W = crate::W<Ch6paddrSpec>;
        #[doc = "Field `PADDR` reader - Peripheral base address"]
        pub type PaddrR = crate::FieldReader<u32>;
        #[doc = "Field `PADDR` writer - Peripheral base address"]
        pub type PaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            pub fn paddr(&self) -> PaddrR {
                PaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            #[must_use]
            pub fn paddr(&mut self) -> PaddrW<Ch6paddrSpec> {
                PaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 6 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch6paddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch6paddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch6paddrSpec;
        impl crate::RegisterSpec for Ch6paddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch6paddr::R`](R) reader structure"]
        impl crate::Readable for Ch6paddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch6paddr::W`](W) writer structure"]
        impl crate::Writable for Ch6paddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH6PADDR to value 0"]
        impl crate::Resettable for Ch6paddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH6MADDR (rw) register accessor: Channel 6 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch6maddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch6maddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch6maddr`]
module"]
    #[doc(alias = "CH6MADDR")]
    pub type Ch6maddr = crate::Reg<ch6maddr::Ch6maddrSpec>;
    #[doc = "Channel 6 memory base address register"]
    pub mod ch6maddr {
        #[doc = "Register `CH6MADDR` reader"]
        pub type R = crate::R<Ch6maddrSpec>;
        #[doc = "Register `CH6MADDR` writer"]
        pub type W = crate::W<Ch6maddrSpec>;
        #[doc = "Field `MADDR` reader - Memory base address"]
        pub type MaddrR = crate::FieldReader<u32>;
        #[doc = "Field `MADDR` writer - Memory base address"]
        pub type MaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            pub fn maddr(&self) -> MaddrR {
                MaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            #[must_use]
            pub fn maddr(&mut self) -> MaddrW<Ch6maddrSpec> {
                MaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 6 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch6maddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch6maddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch6maddrSpec;
        impl crate::RegisterSpec for Ch6maddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch6maddr::R`](R) reader structure"]
        impl crate::Readable for Ch6maddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch6maddr::W`](W) writer structure"]
        impl crate::Writable for Ch6maddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH6MADDR to value 0"]
        impl crate::Resettable for Ch6maddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Direct memory access controller"]
pub struct Dma1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Dma1 {}
impl Dma1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const dma1::RegisterBlock = 0x4002_0400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const dma1::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Dma1 {
    type Target = dma1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Dma1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Dma1").finish()
    }
}
#[doc = "Direct memory access controller"]
pub mod dma1 {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        intf: Intf,
        intc: Intc,
        ch0ctl: Ch0ctl,
        ch0cnt: Ch0cnt,
        ch0paddr: Ch0paddr,
        ch0maddr: Ch0maddr,
        _reserved6: [u8; 0x04],
        ch1ctl: Ch1ctl,
        ch1cnt: Ch1cnt,
        ch1paddr: Ch1paddr,
        ch1maddr: Ch1maddr,
        _reserved10: [u8; 0x04],
        ch2ctl: Ch2ctl,
        ch2cnt: Ch2cnt,
        ch2paddr: Ch2paddr,
        ch2maddr: Ch2maddr,
        _reserved14: [u8; 0x04],
        ch3ctl: Ch3ctl,
        ch3cnt: Ch3cnt,
        ch3paddr: Ch3paddr,
        ch3maddr: Ch3maddr,
        _reserved18: [u8; 0x04],
        ch4ctl: Ch4ctl,
        ch4cnt: Ch4cnt,
        ch4paddr: Ch4paddr,
        ch4maddr: Ch4maddr,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Interrupt flag register"]
        #[inline(always)]
        pub const fn intf(&self) -> &Intf {
            &self.intf
        }
        #[doc = "0x04 - Interrupt flag clear register"]
        #[inline(always)]
        pub const fn intc(&self) -> &Intc {
            &self.intc
        }
        #[doc = "0x08 - Channel 0 control register"]
        #[inline(always)]
        pub const fn ch0ctl(&self) -> &Ch0ctl {
            &self.ch0ctl
        }
        #[doc = "0x0c - Channel 0 counter register"]
        #[inline(always)]
        pub const fn ch0cnt(&self) -> &Ch0cnt {
            &self.ch0cnt
        }
        #[doc = "0x10 - Channel 0 peripheral base address register"]
        #[inline(always)]
        pub const fn ch0paddr(&self) -> &Ch0paddr {
            &self.ch0paddr
        }
        #[doc = "0x14 - Channel 0 memory base address register"]
        #[inline(always)]
        pub const fn ch0maddr(&self) -> &Ch0maddr {
            &self.ch0maddr
        }
        #[doc = "0x1c - Channel 1 control register"]
        #[inline(always)]
        pub const fn ch1ctl(&self) -> &Ch1ctl {
            &self.ch1ctl
        }
        #[doc = "0x20 - Channel 1 counter register"]
        #[inline(always)]
        pub const fn ch1cnt(&self) -> &Ch1cnt {
            &self.ch1cnt
        }
        #[doc = "0x24 - Channel 1 peripheral base address register"]
        #[inline(always)]
        pub const fn ch1paddr(&self) -> &Ch1paddr {
            &self.ch1paddr
        }
        #[doc = "0x28 - Channel 1 memory base address register"]
        #[inline(always)]
        pub const fn ch1maddr(&self) -> &Ch1maddr {
            &self.ch1maddr
        }
        #[doc = "0x30 - Channel 2 control register"]
        #[inline(always)]
        pub const fn ch2ctl(&self) -> &Ch2ctl {
            &self.ch2ctl
        }
        #[doc = "0x34 - Channel 2 counter register"]
        #[inline(always)]
        pub const fn ch2cnt(&self) -> &Ch2cnt {
            &self.ch2cnt
        }
        #[doc = "0x38 - Channel 2 peripheral base address register"]
        #[inline(always)]
        pub const fn ch2paddr(&self) -> &Ch2paddr {
            &self.ch2paddr
        }
        #[doc = "0x3c - Channel 2 memory base address register"]
        #[inline(always)]
        pub const fn ch2maddr(&self) -> &Ch2maddr {
            &self.ch2maddr
        }
        #[doc = "0x44 - Channel 3 control register"]
        #[inline(always)]
        pub const fn ch3ctl(&self) -> &Ch3ctl {
            &self.ch3ctl
        }
        #[doc = "0x48 - Channel 3 counter register"]
        #[inline(always)]
        pub const fn ch3cnt(&self) -> &Ch3cnt {
            &self.ch3cnt
        }
        #[doc = "0x4c - Channel 3 peripheral base address register"]
        #[inline(always)]
        pub const fn ch3paddr(&self) -> &Ch3paddr {
            &self.ch3paddr
        }
        #[doc = "0x50 - Channel 3 memory base address register"]
        #[inline(always)]
        pub const fn ch3maddr(&self) -> &Ch3maddr {
            &self.ch3maddr
        }
        #[doc = "0x58 - Channel 4 control register"]
        #[inline(always)]
        pub const fn ch4ctl(&self) -> &Ch4ctl {
            &self.ch4ctl
        }
        #[doc = "0x5c - Channel 4 counter register"]
        #[inline(always)]
        pub const fn ch4cnt(&self) -> &Ch4cnt {
            &self.ch4cnt
        }
        #[doc = "0x60 - Channel 4 peripheral base address register"]
        #[inline(always)]
        pub const fn ch4paddr(&self) -> &Ch4paddr {
            &self.ch4paddr
        }
        #[doc = "0x64 - Channel 4 memory base address register"]
        #[inline(always)]
        pub const fn ch4maddr(&self) -> &Ch4maddr {
            &self.ch4maddr
        }
    }
    #[doc = "INTF (r) register accessor: Interrupt flag register\n\nYou can [`read`](crate::Reg::read) this register and get [`intf::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intf`]
module"]
    #[doc(alias = "INTF")]
    pub type Intf = crate::Reg<intf::IntfSpec>;
    #[doc = "Interrupt flag register"]
    pub mod intf {
        #[doc = "Register `INTF` reader"]
        pub type R = crate::R<IntfSpec>;
        #[doc = "Field `GIF0` reader - Global interrupt flag of channel 0"]
        pub type Gif0R = crate::BitReader;
        #[doc = "Field `FTFIF0` reader - Full Transfer finish flag of channe 0"]
        pub type Ftfif0R = crate::BitReader;
        #[doc = "Field `HTFIF0` reader - Half transfer finish flag of channel 0"]
        pub type Htfif0R = crate::BitReader;
        #[doc = "Field `ERRIF0` reader - Error flag of channel 0"]
        pub type Errif0R = crate::BitReader;
        #[doc = "Field `GIF1` reader - Global interrupt flag of channel 1"]
        pub type Gif1R = crate::BitReader;
        #[doc = "Field `FTFIF1` reader - Full Transfer finish flag of channe 1"]
        pub type Ftfif1R = crate::BitReader;
        #[doc = "Field `HTFIF1` reader - Half transfer finish flag of channel 1"]
        pub type Htfif1R = crate::BitReader;
        #[doc = "Field `ERRIF1` reader - Error flag of channel 1"]
        pub type Errif1R = crate::BitReader;
        #[doc = "Field `GIF2` reader - Global interrupt flag of channel 2"]
        pub type Gif2R = crate::BitReader;
        #[doc = "Field `FTFIF2` reader - Full Transfer finish flag of channe 2"]
        pub type Ftfif2R = crate::BitReader;
        #[doc = "Field `HTFIF2` reader - Half transfer finish flag of channel 2"]
        pub type Htfif2R = crate::BitReader;
        #[doc = "Field `ERRIF2` reader - Error flag of channel 2"]
        pub type Errif2R = crate::BitReader;
        #[doc = "Field `GIF3` reader - Global interrupt flag of channel 3"]
        pub type Gif3R = crate::BitReader;
        #[doc = "Field `FTFIF3` reader - Full Transfer finish flag of channe 3"]
        pub type Ftfif3R = crate::BitReader;
        #[doc = "Field `HTFIF3` reader - Half transfer finish flag of channel 3"]
        pub type Htfif3R = crate::BitReader;
        #[doc = "Field `ERRIF3` reader - Error flag of channel 3"]
        pub type Errif3R = crate::BitReader;
        #[doc = "Field `GIF4` reader - Global interrupt flag of channel 4"]
        pub type Gif4R = crate::BitReader;
        #[doc = "Field `FTFIF4` reader - Full Transfer finish flag of channe 4"]
        pub type Ftfif4R = crate::BitReader;
        #[doc = "Field `HTFIF4` reader - Half transfer finish flag of channel 4"]
        pub type Htfif4R = crate::BitReader;
        #[doc = "Field `ERRIF4` reader - Error flag of channel 4"]
        pub type Errif4R = crate::BitReader;
        #[doc = "Field `GIF5` reader - Global interrupt flag of channel 5"]
        pub type Gif5R = crate::BitReader;
        #[doc = "Field `FTFIF5` reader - Full Transfer finish flag of channe 5"]
        pub type Ftfif5R = crate::BitReader;
        #[doc = "Field `HTFIF5` reader - Half transfer finish flag of channel 5"]
        pub type Htfif5R = crate::BitReader;
        #[doc = "Field `ERRIF5` reader - Error flag of channel 5"]
        pub type Errif5R = crate::BitReader;
        #[doc = "Field `GIF6` reader - Global interrupt flag of channel 6"]
        pub type Gif6R = crate::BitReader;
        #[doc = "Field `FTFIF6` reader - Full Transfer finish flag of channe 6"]
        pub type Ftfif6R = crate::BitReader;
        #[doc = "Field `HTFIF6` reader - Half transfer finish flag of channel 6"]
        pub type Htfif6R = crate::BitReader;
        #[doc = "Field `ERRIF6` reader - Error flag of channel 6"]
        pub type Errif6R = crate::BitReader;
        impl R {
            #[doc = "Bit 0 - Global interrupt flag of channel 0"]
            #[inline(always)]
            pub fn gif0(&self) -> Gif0R {
                Gif0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Full Transfer finish flag of channe 0"]
            #[inline(always)]
            pub fn ftfif0(&self) -> Ftfif0R {
                Ftfif0R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Half transfer finish flag of channel 0"]
            #[inline(always)]
            pub fn htfif0(&self) -> Htfif0R {
                Htfif0R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Error flag of channel 0"]
            #[inline(always)]
            pub fn errif0(&self) -> Errif0R {
                Errif0R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Global interrupt flag of channel 1"]
            #[inline(always)]
            pub fn gif1(&self) -> Gif1R {
                Gif1R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Full Transfer finish flag of channe 1"]
            #[inline(always)]
            pub fn ftfif1(&self) -> Ftfif1R {
                Ftfif1R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Half transfer finish flag of channel 1"]
            #[inline(always)]
            pub fn htfif1(&self) -> Htfif1R {
                Htfif1R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Error flag of channel 1"]
            #[inline(always)]
            pub fn errif1(&self) -> Errif1R {
                Errif1R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Global interrupt flag of channel 2"]
            #[inline(always)]
            pub fn gif2(&self) -> Gif2R {
                Gif2R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Full Transfer finish flag of channe 2"]
            #[inline(always)]
            pub fn ftfif2(&self) -> Ftfif2R {
                Ftfif2R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Half transfer finish flag of channel 2"]
            #[inline(always)]
            pub fn htfif2(&self) -> Htfif2R {
                Htfif2R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Error flag of channel 2"]
            #[inline(always)]
            pub fn errif2(&self) -> Errif2R {
                Errif2R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Global interrupt flag of channel 3"]
            #[inline(always)]
            pub fn gif3(&self) -> Gif3R {
                Gif3R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Full Transfer finish flag of channe 3"]
            #[inline(always)]
            pub fn ftfif3(&self) -> Ftfif3R {
                Ftfif3R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Half transfer finish flag of channel 3"]
            #[inline(always)]
            pub fn htfif3(&self) -> Htfif3R {
                Htfif3R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Error flag of channel 3"]
            #[inline(always)]
            pub fn errif3(&self) -> Errif3R {
                Errif3R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Global interrupt flag of channel 4"]
            #[inline(always)]
            pub fn gif4(&self) -> Gif4R {
                Gif4R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Full Transfer finish flag of channe 4"]
            #[inline(always)]
            pub fn ftfif4(&self) -> Ftfif4R {
                Ftfif4R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Half transfer finish flag of channel 4"]
            #[inline(always)]
            pub fn htfif4(&self) -> Htfif4R {
                Htfif4R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Error flag of channel 4"]
            #[inline(always)]
            pub fn errif4(&self) -> Errif4R {
                Errif4R::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Global interrupt flag of channel 5"]
            #[inline(always)]
            pub fn gif5(&self) -> Gif5R {
                Gif5R::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Full Transfer finish flag of channe 5"]
            #[inline(always)]
            pub fn ftfif5(&self) -> Ftfif5R {
                Ftfif5R::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - Half transfer finish flag of channel 5"]
            #[inline(always)]
            pub fn htfif5(&self) -> Htfif5R {
                Htfif5R::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - Error flag of channel 5"]
            #[inline(always)]
            pub fn errif5(&self) -> Errif5R {
                Errif5R::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 24 - Global interrupt flag of channel 6"]
            #[inline(always)]
            pub fn gif6(&self) -> Gif6R {
                Gif6R::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - Full Transfer finish flag of channe 6"]
            #[inline(always)]
            pub fn ftfif6(&self) -> Ftfif6R {
                Ftfif6R::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 26 - Half transfer finish flag of channel 6"]
            #[inline(always)]
            pub fn htfif6(&self) -> Htfif6R {
                Htfif6R::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Error flag of channel 6"]
            #[inline(always)]
            pub fn errif6(&self) -> Errif6R {
                Errif6R::new(((self.bits >> 27) & 1) != 0)
            }
        }
        #[doc = "Interrupt flag register\n\nYou can [`read`](crate::Reg::read) this register and get [`intf::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntfSpec;
        impl crate::RegisterSpec for IntfSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`intf::R`](R) reader structure"]
        impl crate::Readable for IntfSpec {}
        #[doc = "`reset()` method sets INTF to value 0"]
        impl crate::Resettable for IntfSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "INTC (w) register accessor: Interrupt flag clear register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intc::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intc`]
module"]
    #[doc(alias = "INTC")]
    pub type Intc = crate::Reg<intc::IntcSpec>;
    #[doc = "Interrupt flag clear register"]
    pub mod intc {
        #[doc = "Register `INTC` writer"]
        pub type W = crate::W<IntcSpec>;
        #[doc = "Field `GIFC0` writer - Clear global interrupt flag of channel 0"]
        pub type Gifc0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC0` writer - Clear bit for full transfer finish flag of channel 0"]
        pub type Ftfifc0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC0` writer - Clear bit for half transfer finish flag of channel 0"]
        pub type Htfifc0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC0` writer - Clear bit for error flag of channel 0"]
        pub type Errifc0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `GIFC1` writer - Clear global interrupt flag of channel 1"]
        pub type Gifc1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC1` writer - Clear bit for full transfer finish flag of channel 1"]
        pub type Ftfifc1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC1` writer - Clear bit for half transfer finish flag of channel 1"]
        pub type Htfifc1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC1` writer - Clear bit for error flag of channel 1"]
        pub type Errifc1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `GIFC2` writer - Clear global interrupt flag of channel 2"]
        pub type Gifc2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC2` writer - Clear bit for full transfer finish flag of channel 2"]
        pub type Ftfifc2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC2` writer - Clear bit for half transfer finish flag of channel 2"]
        pub type Htfifc2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC2` writer - Clear bit for error flag of channel 2"]
        pub type Errifc2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `GIFC3` writer - Clear global interrupt flag of channel 3"]
        pub type Gifc3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC3` writer - Clear bit for full transfer finish flag of channel 3"]
        pub type Ftfifc3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC3` writer - Clear bit for half transfer finish flag of channel 3"]
        pub type Htfifc3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC3` writer - Clear bit for error flag of channel 3"]
        pub type Errifc3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `GIFC4` writer - Clear global interrupt flag of channel 4"]
        pub type Gifc4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC4` writer - Clear bit for full transfer finish flag of channel 4"]
        pub type Ftfifc4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC4` writer - Clear bit for half transfer finish flag of channel 4"]
        pub type Htfifc4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC4` writer - Clear bit for error flag of channel 4"]
        pub type Errifc4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `GIFC5` writer - Clear global interrupt flag of channel 5"]
        pub type Gifc5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC5` writer - Clear bit for full transfer finish flag of channel 5"]
        pub type Ftfifc5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC5` writer - Clear bit for half transfer finish flag of channel 5"]
        pub type Htfifc5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC5` writer - Clear bit for error flag of channel 5"]
        pub type Errifc5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `GIFC6` writer - Clear global interrupt flag of channel 6"]
        pub type Gifc6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIFC6` writer - Clear bit for full transfer finish flag of channel 6"]
        pub type Ftfifc6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIFC6` writer - Clear bit for half transfer finish flag of channel 6"]
        pub type Htfifc6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIFC6` writer - Clear bit for error flag of channel 6"]
        pub type Errifc6W<'a, REG> = crate::BitWriter<'a, REG>;
        impl W {
            #[doc = "Bit 0 - Clear global interrupt flag of channel 0"]
            #[inline(always)]
            #[must_use]
            pub fn gifc0(&mut self) -> Gifc0W<IntcSpec> {
                Gifc0W::new(self, 0)
            }
            #[doc = "Bit 1 - Clear bit for full transfer finish flag of channel 0"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc0(&mut self) -> Ftfifc0W<IntcSpec> {
                Ftfifc0W::new(self, 1)
            }
            #[doc = "Bit 2 - Clear bit for half transfer finish flag of channel 0"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc0(&mut self) -> Htfifc0W<IntcSpec> {
                Htfifc0W::new(self, 2)
            }
            #[doc = "Bit 3 - Clear bit for error flag of channel 0"]
            #[inline(always)]
            #[must_use]
            pub fn errifc0(&mut self) -> Errifc0W<IntcSpec> {
                Errifc0W::new(self, 3)
            }
            #[doc = "Bit 4 - Clear global interrupt flag of channel 1"]
            #[inline(always)]
            #[must_use]
            pub fn gifc1(&mut self) -> Gifc1W<IntcSpec> {
                Gifc1W::new(self, 4)
            }
            #[doc = "Bit 5 - Clear bit for full transfer finish flag of channel 1"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc1(&mut self) -> Ftfifc1W<IntcSpec> {
                Ftfifc1W::new(self, 5)
            }
            #[doc = "Bit 6 - Clear bit for half transfer finish flag of channel 1"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc1(&mut self) -> Htfifc1W<IntcSpec> {
                Htfifc1W::new(self, 6)
            }
            #[doc = "Bit 7 - Clear bit for error flag of channel 1"]
            #[inline(always)]
            #[must_use]
            pub fn errifc1(&mut self) -> Errifc1W<IntcSpec> {
                Errifc1W::new(self, 7)
            }
            #[doc = "Bit 8 - Clear global interrupt flag of channel 2"]
            #[inline(always)]
            #[must_use]
            pub fn gifc2(&mut self) -> Gifc2W<IntcSpec> {
                Gifc2W::new(self, 8)
            }
            #[doc = "Bit 9 - Clear bit for full transfer finish flag of channel 2"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc2(&mut self) -> Ftfifc2W<IntcSpec> {
                Ftfifc2W::new(self, 9)
            }
            #[doc = "Bit 10 - Clear bit for half transfer finish flag of channel 2"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc2(&mut self) -> Htfifc2W<IntcSpec> {
                Htfifc2W::new(self, 10)
            }
            #[doc = "Bit 11 - Clear bit for error flag of channel 2"]
            #[inline(always)]
            #[must_use]
            pub fn errifc2(&mut self) -> Errifc2W<IntcSpec> {
                Errifc2W::new(self, 11)
            }
            #[doc = "Bit 12 - Clear global interrupt flag of channel 3"]
            #[inline(always)]
            #[must_use]
            pub fn gifc3(&mut self) -> Gifc3W<IntcSpec> {
                Gifc3W::new(self, 12)
            }
            #[doc = "Bit 13 - Clear bit for full transfer finish flag of channel 3"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc3(&mut self) -> Ftfifc3W<IntcSpec> {
                Ftfifc3W::new(self, 13)
            }
            #[doc = "Bit 14 - Clear bit for half transfer finish flag of channel 3"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc3(&mut self) -> Htfifc3W<IntcSpec> {
                Htfifc3W::new(self, 14)
            }
            #[doc = "Bit 15 - Clear bit for error flag of channel 3"]
            #[inline(always)]
            #[must_use]
            pub fn errifc3(&mut self) -> Errifc3W<IntcSpec> {
                Errifc3W::new(self, 15)
            }
            #[doc = "Bit 16 - Clear global interrupt flag of channel 4"]
            #[inline(always)]
            #[must_use]
            pub fn gifc4(&mut self) -> Gifc4W<IntcSpec> {
                Gifc4W::new(self, 16)
            }
            #[doc = "Bit 17 - Clear bit for full transfer finish flag of channel 4"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc4(&mut self) -> Ftfifc4W<IntcSpec> {
                Ftfifc4W::new(self, 17)
            }
            #[doc = "Bit 18 - Clear bit for half transfer finish flag of channel 4"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc4(&mut self) -> Htfifc4W<IntcSpec> {
                Htfifc4W::new(self, 18)
            }
            #[doc = "Bit 19 - Clear bit for error flag of channel 4"]
            #[inline(always)]
            #[must_use]
            pub fn errifc4(&mut self) -> Errifc4W<IntcSpec> {
                Errifc4W::new(self, 19)
            }
            #[doc = "Bit 20 - Clear global interrupt flag of channel 5"]
            #[inline(always)]
            #[must_use]
            pub fn gifc5(&mut self) -> Gifc5W<IntcSpec> {
                Gifc5W::new(self, 20)
            }
            #[doc = "Bit 21 - Clear bit for full transfer finish flag of channel 5"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc5(&mut self) -> Ftfifc5W<IntcSpec> {
                Ftfifc5W::new(self, 21)
            }
            #[doc = "Bit 22 - Clear bit for half transfer finish flag of channel 5"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc5(&mut self) -> Htfifc5W<IntcSpec> {
                Htfifc5W::new(self, 22)
            }
            #[doc = "Bit 23 - Clear bit for error flag of channel 5"]
            #[inline(always)]
            #[must_use]
            pub fn errifc5(&mut self) -> Errifc5W<IntcSpec> {
                Errifc5W::new(self, 23)
            }
            #[doc = "Bit 24 - Clear global interrupt flag of channel 6"]
            #[inline(always)]
            #[must_use]
            pub fn gifc6(&mut self) -> Gifc6W<IntcSpec> {
                Gifc6W::new(self, 24)
            }
            #[doc = "Bit 25 - Clear bit for full transfer finish flag of channel 6"]
            #[inline(always)]
            #[must_use]
            pub fn ftfifc6(&mut self) -> Ftfifc6W<IntcSpec> {
                Ftfifc6W::new(self, 25)
            }
            #[doc = "Bit 26 - Clear bit for half transfer finish flag of channel 6"]
            #[inline(always)]
            #[must_use]
            pub fn htfifc6(&mut self) -> Htfifc6W<IntcSpec> {
                Htfifc6W::new(self, 26)
            }
            #[doc = "Bit 27 - Clear bit for error flag of channel 6"]
            #[inline(always)]
            #[must_use]
            pub fn errifc6(&mut self) -> Errifc6W<IntcSpec> {
                Errifc6W::new(self, 27)
            }
        }
        #[doc = "Interrupt flag clear register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intc::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntcSpec;
        impl crate::RegisterSpec for IntcSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`intc::W`](W) writer structure"]
        impl crate::Writable for IntcSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets INTC to value 0"]
        impl crate::Resettable for IntcSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH0CTL (rw) register accessor: Channel 0 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch0ctl`]
module"]
    #[doc(alias = "CH0CTL")]
    pub type Ch0ctl = crate::Reg<ch0ctl::Ch0ctlSpec>;
    #[doc = "Channel 0 control register"]
    pub mod ch0ctl {
        #[doc = "Register `CH0CTL` reader"]
        pub type R = crate::R<Ch0ctlSpec>;
        #[doc = "Register `CH0CTL` writer"]
        pub type W = crate::W<Ch0ctlSpec>;
        #[doc = "Field `CHEN` reader - Channel enable"]
        pub type ChenR = crate::BitReader;
        #[doc = "Field `CHEN` writer - Channel enable"]
        pub type ChenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIE` reader - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieR = crate::BitReader;
        #[doc = "Field `FTFIE` writer - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIE` reader - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieR = crate::BitReader;
        #[doc = "Field `HTFIE` writer - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Enable bit for channel error interrupt"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Enable bit for channel error interrupt"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Transfer direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Transfer direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMEN` reader - Circular mode enable"]
        pub type CmenR = crate::BitReader;
        #[doc = "Field `CMEN` writer - Circular mode enable"]
        pub type CmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PNAGA` reader - Next address generation algorithm of peripheral"]
        pub type PnagaR = crate::BitReader;
        #[doc = "Field `PNAGA` writer - Next address generation algorithm of peripheral"]
        pub type PnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MNAGA` reader - Next address generation algorithm of memory"]
        pub type MnagaR = crate::BitReader;
        #[doc = "Field `MNAGA` writer - Next address generation algorithm of memory"]
        pub type MnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PWIDTH` reader - Transfer data size of peripheral"]
        pub type PwidthR = crate::FieldReader;
        #[doc = "Field `PWIDTH` writer - Transfer data size of peripheral"]
        pub type PwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MWIDTH` reader - Transfer data size of memory"]
        pub type MwidthR = crate::FieldReader;
        #[doc = "Field `MWIDTH` writer - Transfer data size of memory"]
        pub type MwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PRIO` reader - Priority level"]
        pub type PrioR = crate::FieldReader;
        #[doc = "Field `PRIO` writer - Priority level"]
        pub type PrioW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `M2M` reader - Memory to Memory Mode"]
        pub type M2mR = crate::BitReader;
        #[doc = "Field `M2M` writer - Memory to Memory Mode"]
        pub type M2mW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn chen(&self) -> ChenR {
                ChenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            pub fn ftfie(&self) -> FtfieR {
                FtfieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            pub fn htfie(&self) -> HtfieR {
                HtfieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            pub fn cmen(&self) -> CmenR {
                CmenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            pub fn pnaga(&self) -> PnagaR {
                PnagaR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            pub fn mnaga(&self) -> MnagaR {
                MnagaR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            pub fn pwidth(&self) -> PwidthR {
                PwidthR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            pub fn mwidth(&self) -> MwidthR {
                MwidthR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            pub fn prio(&self) -> PrioR {
                PrioR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            pub fn m2m(&self) -> M2mR {
                M2mR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            #[must_use]
            pub fn chen(&mut self) -> ChenW<Ch0ctlSpec> {
                ChenW::new(self, 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn ftfie(&mut self) -> FtfieW<Ch0ctlSpec> {
                FtfieW::new(self, 1)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn htfie(&mut self) -> HtfieW<Ch0ctlSpec> {
                HtfieW::new(self, 2)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ch0ctlSpec> {
                ErrieW::new(self, 3)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ch0ctlSpec> {
                DirW::new(self, 4)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmen(&mut self) -> CmenW<Ch0ctlSpec> {
                CmenW::new(self, 5)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pnaga(&mut self) -> PnagaW<Ch0ctlSpec> {
                PnagaW::new(self, 6)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mnaga(&mut self) -> MnagaW<Ch0ctlSpec> {
                MnagaW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pwidth(&mut self) -> PwidthW<Ch0ctlSpec> {
                PwidthW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mwidth(&mut self) -> MwidthW<Ch0ctlSpec> {
                MwidthW::new(self, 10)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            #[must_use]
            pub fn prio(&mut self) -> PrioW<Ch0ctlSpec> {
                PrioW::new(self, 12)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            #[must_use]
            pub fn m2m(&mut self) -> M2mW<Ch0ctlSpec> {
                M2mW::new(self, 14)
            }
        }
        #[doc = "Channel 0 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch0ctlSpec;
        impl crate::RegisterSpec for Ch0ctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch0ctl::R`](R) reader structure"]
        impl crate::Readable for Ch0ctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch0ctl::W`](W) writer structure"]
        impl crate::Writable for Ch0ctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH0CTL to value 0"]
        impl crate::Resettable for Ch0ctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH0CNT (rw) register accessor: Channel 0 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch0cnt`]
module"]
    #[doc(alias = "CH0CNT")]
    pub type Ch0cnt = crate::Reg<ch0cnt::Ch0cntSpec>;
    #[doc = "Channel 0 counter register"]
    pub mod ch0cnt {
        #[doc = "Register `CH0CNT` reader"]
        pub type R = crate::R<Ch0cntSpec>;
        #[doc = "Register `CH0CNT` writer"]
        pub type W = crate::W<Ch0cntSpec>;
        #[doc = "Field `CNT` reader - Transfer counter"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - Transfer counter"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<Ch0cntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Channel 0 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch0cntSpec;
        impl crate::RegisterSpec for Ch0cntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch0cnt::R`](R) reader structure"]
        impl crate::Readable for Ch0cntSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch0cnt::W`](W) writer structure"]
        impl crate::Writable for Ch0cntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH0CNT to value 0"]
        impl crate::Resettable for Ch0cntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH0PADDR (rw) register accessor: Channel 0 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0paddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0paddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch0paddr`]
module"]
    #[doc(alias = "CH0PADDR")]
    pub type Ch0paddr = crate::Reg<ch0paddr::Ch0paddrSpec>;
    #[doc = "Channel 0 peripheral base address register"]
    pub mod ch0paddr {
        #[doc = "Register `CH0PADDR` reader"]
        pub type R = crate::R<Ch0paddrSpec>;
        #[doc = "Register `CH0PADDR` writer"]
        pub type W = crate::W<Ch0paddrSpec>;
        #[doc = "Field `PADDR` reader - Peripheral base address"]
        pub type PaddrR = crate::FieldReader<u32>;
        #[doc = "Field `PADDR` writer - Peripheral base address"]
        pub type PaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            pub fn paddr(&self) -> PaddrR {
                PaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            #[must_use]
            pub fn paddr(&mut self) -> PaddrW<Ch0paddrSpec> {
                PaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 0 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0paddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0paddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch0paddrSpec;
        impl crate::RegisterSpec for Ch0paddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch0paddr::R`](R) reader structure"]
        impl crate::Readable for Ch0paddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch0paddr::W`](W) writer structure"]
        impl crate::Writable for Ch0paddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH0PADDR to value 0"]
        impl crate::Resettable for Ch0paddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH0MADDR (rw) register accessor: Channel 0 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0maddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0maddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch0maddr`]
module"]
    #[doc(alias = "CH0MADDR")]
    pub type Ch0maddr = crate::Reg<ch0maddr::Ch0maddrSpec>;
    #[doc = "Channel 0 memory base address register"]
    pub mod ch0maddr {
        #[doc = "Register `CH0MADDR` reader"]
        pub type R = crate::R<Ch0maddrSpec>;
        #[doc = "Register `CH0MADDR` writer"]
        pub type W = crate::W<Ch0maddrSpec>;
        #[doc = "Field `MADDR` reader - Memory base address"]
        pub type MaddrR = crate::FieldReader<u32>;
        #[doc = "Field `MADDR` writer - Memory base address"]
        pub type MaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            pub fn maddr(&self) -> MaddrR {
                MaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            #[must_use]
            pub fn maddr(&mut self) -> MaddrW<Ch0maddrSpec> {
                MaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 0 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0maddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0maddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch0maddrSpec;
        impl crate::RegisterSpec for Ch0maddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch0maddr::R`](R) reader structure"]
        impl crate::Readable for Ch0maddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch0maddr::W`](W) writer structure"]
        impl crate::Writable for Ch0maddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH0MADDR to value 0"]
        impl crate::Resettable for Ch0maddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH1CTL (rw) register accessor: Channel 1 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch1ctl`]
module"]
    #[doc(alias = "CH1CTL")]
    pub type Ch1ctl = crate::Reg<ch1ctl::Ch1ctlSpec>;
    #[doc = "Channel 1 control register"]
    pub mod ch1ctl {
        #[doc = "Register `CH1CTL` reader"]
        pub type R = crate::R<Ch1ctlSpec>;
        #[doc = "Register `CH1CTL` writer"]
        pub type W = crate::W<Ch1ctlSpec>;
        #[doc = "Field `CHEN` reader - Channel enable"]
        pub type ChenR = crate::BitReader;
        #[doc = "Field `CHEN` writer - Channel enable"]
        pub type ChenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIE` reader - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieR = crate::BitReader;
        #[doc = "Field `FTFIE` writer - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIE` reader - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieR = crate::BitReader;
        #[doc = "Field `HTFIE` writer - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Enable bit for channel error interrupt"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Enable bit for channel error interrupt"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Transfer direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Transfer direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMEN` reader - Circular mode enable"]
        pub type CmenR = crate::BitReader;
        #[doc = "Field `CMEN` writer - Circular mode enable"]
        pub type CmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PNAGA` reader - Next address generation algorithm of peripheral"]
        pub type PnagaR = crate::BitReader;
        #[doc = "Field `PNAGA` writer - Next address generation algorithm of peripheral"]
        pub type PnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MNAGA` reader - Next address generation algorithm of memory"]
        pub type MnagaR = crate::BitReader;
        #[doc = "Field `MNAGA` writer - Next address generation algorithm of memory"]
        pub type MnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PWIDTH` reader - Transfer data size of peripheral"]
        pub type PwidthR = crate::FieldReader;
        #[doc = "Field `PWIDTH` writer - Transfer data size of peripheral"]
        pub type PwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MWIDTH` reader - Transfer data size of memory"]
        pub type MwidthR = crate::FieldReader;
        #[doc = "Field `MWIDTH` writer - Transfer data size of memory"]
        pub type MwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PRIO` reader - Priority level"]
        pub type PrioR = crate::FieldReader;
        #[doc = "Field `PRIO` writer - Priority level"]
        pub type PrioW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `M2M` reader - Memory to Memory Mode"]
        pub type M2mR = crate::BitReader;
        #[doc = "Field `M2M` writer - Memory to Memory Mode"]
        pub type M2mW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn chen(&self) -> ChenR {
                ChenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            pub fn ftfie(&self) -> FtfieR {
                FtfieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            pub fn htfie(&self) -> HtfieR {
                HtfieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            pub fn cmen(&self) -> CmenR {
                CmenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            pub fn pnaga(&self) -> PnagaR {
                PnagaR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            pub fn mnaga(&self) -> MnagaR {
                MnagaR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            pub fn pwidth(&self) -> PwidthR {
                PwidthR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            pub fn mwidth(&self) -> MwidthR {
                MwidthR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            pub fn prio(&self) -> PrioR {
                PrioR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            pub fn m2m(&self) -> M2mR {
                M2mR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            #[must_use]
            pub fn chen(&mut self) -> ChenW<Ch1ctlSpec> {
                ChenW::new(self, 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn ftfie(&mut self) -> FtfieW<Ch1ctlSpec> {
                FtfieW::new(self, 1)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn htfie(&mut self) -> HtfieW<Ch1ctlSpec> {
                HtfieW::new(self, 2)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ch1ctlSpec> {
                ErrieW::new(self, 3)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ch1ctlSpec> {
                DirW::new(self, 4)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmen(&mut self) -> CmenW<Ch1ctlSpec> {
                CmenW::new(self, 5)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pnaga(&mut self) -> PnagaW<Ch1ctlSpec> {
                PnagaW::new(self, 6)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mnaga(&mut self) -> MnagaW<Ch1ctlSpec> {
                MnagaW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pwidth(&mut self) -> PwidthW<Ch1ctlSpec> {
                PwidthW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mwidth(&mut self) -> MwidthW<Ch1ctlSpec> {
                MwidthW::new(self, 10)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            #[must_use]
            pub fn prio(&mut self) -> PrioW<Ch1ctlSpec> {
                PrioW::new(self, 12)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            #[must_use]
            pub fn m2m(&mut self) -> M2mW<Ch1ctlSpec> {
                M2mW::new(self, 14)
            }
        }
        #[doc = "Channel 1 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch1ctlSpec;
        impl crate::RegisterSpec for Ch1ctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch1ctl::R`](R) reader structure"]
        impl crate::Readable for Ch1ctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch1ctl::W`](W) writer structure"]
        impl crate::Writable for Ch1ctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH1CTL to value 0"]
        impl crate::Resettable for Ch1ctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH1CNT (rw) register accessor: Channel 1 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch1cnt`]
module"]
    #[doc(alias = "CH1CNT")]
    pub type Ch1cnt = crate::Reg<ch1cnt::Ch1cntSpec>;
    #[doc = "Channel 1 counter register"]
    pub mod ch1cnt {
        #[doc = "Register `CH1CNT` reader"]
        pub type R = crate::R<Ch1cntSpec>;
        #[doc = "Register `CH1CNT` writer"]
        pub type W = crate::W<Ch1cntSpec>;
        #[doc = "Field `CNT` reader - Transfer counter"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - Transfer counter"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<Ch1cntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Channel 1 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch1cntSpec;
        impl crate::RegisterSpec for Ch1cntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch1cnt::R`](R) reader structure"]
        impl crate::Readable for Ch1cntSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch1cnt::W`](W) writer structure"]
        impl crate::Writable for Ch1cntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH1CNT to value 0"]
        impl crate::Resettable for Ch1cntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH1PADDR (rw) register accessor: Channel 1 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1paddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1paddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch1paddr`]
module"]
    #[doc(alias = "CH1PADDR")]
    pub type Ch1paddr = crate::Reg<ch1paddr::Ch1paddrSpec>;
    #[doc = "Channel 1 peripheral base address register"]
    pub mod ch1paddr {
        #[doc = "Register `CH1PADDR` reader"]
        pub type R = crate::R<Ch1paddrSpec>;
        #[doc = "Register `CH1PADDR` writer"]
        pub type W = crate::W<Ch1paddrSpec>;
        #[doc = "Field `PADDR` reader - Peripheral base address"]
        pub type PaddrR = crate::FieldReader<u32>;
        #[doc = "Field `PADDR` writer - Peripheral base address"]
        pub type PaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            pub fn paddr(&self) -> PaddrR {
                PaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            #[must_use]
            pub fn paddr(&mut self) -> PaddrW<Ch1paddrSpec> {
                PaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 1 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1paddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1paddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch1paddrSpec;
        impl crate::RegisterSpec for Ch1paddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch1paddr::R`](R) reader structure"]
        impl crate::Readable for Ch1paddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch1paddr::W`](W) writer structure"]
        impl crate::Writable for Ch1paddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH1PADDR to value 0"]
        impl crate::Resettable for Ch1paddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH1MADDR (rw) register accessor: Channel 1 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1maddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1maddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch1maddr`]
module"]
    #[doc(alias = "CH1MADDR")]
    pub type Ch1maddr = crate::Reg<ch1maddr::Ch1maddrSpec>;
    #[doc = "Channel 1 memory base address register"]
    pub mod ch1maddr {
        #[doc = "Register `CH1MADDR` reader"]
        pub type R = crate::R<Ch1maddrSpec>;
        #[doc = "Register `CH1MADDR` writer"]
        pub type W = crate::W<Ch1maddrSpec>;
        #[doc = "Field `MADDR` reader - Memory base address"]
        pub type MaddrR = crate::FieldReader<u32>;
        #[doc = "Field `MADDR` writer - Memory base address"]
        pub type MaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            pub fn maddr(&self) -> MaddrR {
                MaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            #[must_use]
            pub fn maddr(&mut self) -> MaddrW<Ch1maddrSpec> {
                MaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 1 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1maddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1maddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch1maddrSpec;
        impl crate::RegisterSpec for Ch1maddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch1maddr::R`](R) reader structure"]
        impl crate::Readable for Ch1maddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch1maddr::W`](W) writer structure"]
        impl crate::Writable for Ch1maddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH1MADDR to value 0"]
        impl crate::Resettable for Ch1maddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH2CTL (rw) register accessor: Channel 2 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch2ctl`]
module"]
    #[doc(alias = "CH2CTL")]
    pub type Ch2ctl = crate::Reg<ch2ctl::Ch2ctlSpec>;
    #[doc = "Channel 2 control register"]
    pub mod ch2ctl {
        #[doc = "Register `CH2CTL` reader"]
        pub type R = crate::R<Ch2ctlSpec>;
        #[doc = "Register `CH2CTL` writer"]
        pub type W = crate::W<Ch2ctlSpec>;
        #[doc = "Field `CHEN` reader - Channel enable"]
        pub type ChenR = crate::BitReader;
        #[doc = "Field `CHEN` writer - Channel enable"]
        pub type ChenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIE` reader - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieR = crate::BitReader;
        #[doc = "Field `FTFIE` writer - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIE` reader - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieR = crate::BitReader;
        #[doc = "Field `HTFIE` writer - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Enable bit for channel error interrupt"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Enable bit for channel error interrupt"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Transfer direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Transfer direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMEN` reader - Circular mode enable"]
        pub type CmenR = crate::BitReader;
        #[doc = "Field `CMEN` writer - Circular mode enable"]
        pub type CmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PNAGA` reader - Next address generation algorithm of peripheral"]
        pub type PnagaR = crate::BitReader;
        #[doc = "Field `PNAGA` writer - Next address generation algorithm of peripheral"]
        pub type PnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MNAGA` reader - Next address generation algorithm of memory"]
        pub type MnagaR = crate::BitReader;
        #[doc = "Field `MNAGA` writer - Next address generation algorithm of memory"]
        pub type MnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PWIDTH` reader - Transfer data size of peripheral"]
        pub type PwidthR = crate::FieldReader;
        #[doc = "Field `PWIDTH` writer - Transfer data size of peripheral"]
        pub type PwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MWIDTH` reader - Transfer data size of memory"]
        pub type MwidthR = crate::FieldReader;
        #[doc = "Field `MWIDTH` writer - Transfer data size of memory"]
        pub type MwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PRIO` reader - Priority level"]
        pub type PrioR = crate::FieldReader;
        #[doc = "Field `PRIO` writer - Priority level"]
        pub type PrioW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `M2M` reader - Memory to Memory Mode"]
        pub type M2mR = crate::BitReader;
        #[doc = "Field `M2M` writer - Memory to Memory Mode"]
        pub type M2mW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn chen(&self) -> ChenR {
                ChenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            pub fn ftfie(&self) -> FtfieR {
                FtfieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            pub fn htfie(&self) -> HtfieR {
                HtfieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            pub fn cmen(&self) -> CmenR {
                CmenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            pub fn pnaga(&self) -> PnagaR {
                PnagaR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            pub fn mnaga(&self) -> MnagaR {
                MnagaR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            pub fn pwidth(&self) -> PwidthR {
                PwidthR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            pub fn mwidth(&self) -> MwidthR {
                MwidthR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            pub fn prio(&self) -> PrioR {
                PrioR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            pub fn m2m(&self) -> M2mR {
                M2mR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            #[must_use]
            pub fn chen(&mut self) -> ChenW<Ch2ctlSpec> {
                ChenW::new(self, 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn ftfie(&mut self) -> FtfieW<Ch2ctlSpec> {
                FtfieW::new(self, 1)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn htfie(&mut self) -> HtfieW<Ch2ctlSpec> {
                HtfieW::new(self, 2)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ch2ctlSpec> {
                ErrieW::new(self, 3)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ch2ctlSpec> {
                DirW::new(self, 4)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmen(&mut self) -> CmenW<Ch2ctlSpec> {
                CmenW::new(self, 5)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pnaga(&mut self) -> PnagaW<Ch2ctlSpec> {
                PnagaW::new(self, 6)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mnaga(&mut self) -> MnagaW<Ch2ctlSpec> {
                MnagaW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pwidth(&mut self) -> PwidthW<Ch2ctlSpec> {
                PwidthW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mwidth(&mut self) -> MwidthW<Ch2ctlSpec> {
                MwidthW::new(self, 10)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            #[must_use]
            pub fn prio(&mut self) -> PrioW<Ch2ctlSpec> {
                PrioW::new(self, 12)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            #[must_use]
            pub fn m2m(&mut self) -> M2mW<Ch2ctlSpec> {
                M2mW::new(self, 14)
            }
        }
        #[doc = "Channel 2 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch2ctlSpec;
        impl crate::RegisterSpec for Ch2ctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch2ctl::R`](R) reader structure"]
        impl crate::Readable for Ch2ctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch2ctl::W`](W) writer structure"]
        impl crate::Writable for Ch2ctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH2CTL to value 0"]
        impl crate::Resettable for Ch2ctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH2CNT (rw) register accessor: Channel 2 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch2cnt`]
module"]
    #[doc(alias = "CH2CNT")]
    pub type Ch2cnt = crate::Reg<ch2cnt::Ch2cntSpec>;
    #[doc = "Channel 2 counter register"]
    pub mod ch2cnt {
        #[doc = "Register `CH2CNT` reader"]
        pub type R = crate::R<Ch2cntSpec>;
        #[doc = "Register `CH2CNT` writer"]
        pub type W = crate::W<Ch2cntSpec>;
        #[doc = "Field `CNT` reader - Transfer counter"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - Transfer counter"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<Ch2cntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Channel 2 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch2cntSpec;
        impl crate::RegisterSpec for Ch2cntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch2cnt::R`](R) reader structure"]
        impl crate::Readable for Ch2cntSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch2cnt::W`](W) writer structure"]
        impl crate::Writable for Ch2cntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH2CNT to value 0"]
        impl crate::Resettable for Ch2cntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH2PADDR (rw) register accessor: Channel 2 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2paddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2paddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch2paddr`]
module"]
    #[doc(alias = "CH2PADDR")]
    pub type Ch2paddr = crate::Reg<ch2paddr::Ch2paddrSpec>;
    #[doc = "Channel 2 peripheral base address register"]
    pub mod ch2paddr {
        #[doc = "Register `CH2PADDR` reader"]
        pub type R = crate::R<Ch2paddrSpec>;
        #[doc = "Register `CH2PADDR` writer"]
        pub type W = crate::W<Ch2paddrSpec>;
        #[doc = "Field `PADDR` reader - Peripheral base address"]
        pub type PaddrR = crate::FieldReader<u32>;
        #[doc = "Field `PADDR` writer - Peripheral base address"]
        pub type PaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            pub fn paddr(&self) -> PaddrR {
                PaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            #[must_use]
            pub fn paddr(&mut self) -> PaddrW<Ch2paddrSpec> {
                PaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 2 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2paddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2paddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch2paddrSpec;
        impl crate::RegisterSpec for Ch2paddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch2paddr::R`](R) reader structure"]
        impl crate::Readable for Ch2paddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch2paddr::W`](W) writer structure"]
        impl crate::Writable for Ch2paddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH2PADDR to value 0"]
        impl crate::Resettable for Ch2paddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH2MADDR (rw) register accessor: Channel 2 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2maddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2maddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch2maddr`]
module"]
    #[doc(alias = "CH2MADDR")]
    pub type Ch2maddr = crate::Reg<ch2maddr::Ch2maddrSpec>;
    #[doc = "Channel 2 memory base address register"]
    pub mod ch2maddr {
        #[doc = "Register `CH2MADDR` reader"]
        pub type R = crate::R<Ch2maddrSpec>;
        #[doc = "Register `CH2MADDR` writer"]
        pub type W = crate::W<Ch2maddrSpec>;
        #[doc = "Field `MADDR` reader - Memory base address"]
        pub type MaddrR = crate::FieldReader<u32>;
        #[doc = "Field `MADDR` writer - Memory base address"]
        pub type MaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            pub fn maddr(&self) -> MaddrR {
                MaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            #[must_use]
            pub fn maddr(&mut self) -> MaddrW<Ch2maddrSpec> {
                MaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 2 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2maddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2maddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch2maddrSpec;
        impl crate::RegisterSpec for Ch2maddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch2maddr::R`](R) reader structure"]
        impl crate::Readable for Ch2maddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch2maddr::W`](W) writer structure"]
        impl crate::Writable for Ch2maddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH2MADDR to value 0"]
        impl crate::Resettable for Ch2maddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH3CTL (rw) register accessor: Channel 3 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch3ctl`]
module"]
    #[doc(alias = "CH3CTL")]
    pub type Ch3ctl = crate::Reg<ch3ctl::Ch3ctlSpec>;
    #[doc = "Channel 3 control register"]
    pub mod ch3ctl {
        #[doc = "Register `CH3CTL` reader"]
        pub type R = crate::R<Ch3ctlSpec>;
        #[doc = "Register `CH3CTL` writer"]
        pub type W = crate::W<Ch3ctlSpec>;
        #[doc = "Field `CHEN` reader - Channel enable"]
        pub type ChenR = crate::BitReader;
        #[doc = "Field `CHEN` writer - Channel enable"]
        pub type ChenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIE` reader - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieR = crate::BitReader;
        #[doc = "Field `FTFIE` writer - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIE` reader - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieR = crate::BitReader;
        #[doc = "Field `HTFIE` writer - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Enable bit for channel error interrupt"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Enable bit for channel error interrupt"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Transfer direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Transfer direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMEN` reader - Circular mode enable"]
        pub type CmenR = crate::BitReader;
        #[doc = "Field `CMEN` writer - Circular mode enable"]
        pub type CmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PNAGA` reader - Next address generation algorithm of peripheral"]
        pub type PnagaR = crate::BitReader;
        #[doc = "Field `PNAGA` writer - Next address generation algorithm of peripheral"]
        pub type PnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MNAGA` reader - Next address generation algorithm of memory"]
        pub type MnagaR = crate::BitReader;
        #[doc = "Field `MNAGA` writer - Next address generation algorithm of memory"]
        pub type MnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PWIDTH` reader - Transfer data size of peripheral"]
        pub type PwidthR = crate::FieldReader;
        #[doc = "Field `PWIDTH` writer - Transfer data size of peripheral"]
        pub type PwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MWIDTH` reader - Transfer data size of memory"]
        pub type MwidthR = crate::FieldReader;
        #[doc = "Field `MWIDTH` writer - Transfer data size of memory"]
        pub type MwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PRIO` reader - Priority level"]
        pub type PrioR = crate::FieldReader;
        #[doc = "Field `PRIO` writer - Priority level"]
        pub type PrioW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `M2M` reader - Memory to Memory Mode"]
        pub type M2mR = crate::BitReader;
        #[doc = "Field `M2M` writer - Memory to Memory Mode"]
        pub type M2mW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn chen(&self) -> ChenR {
                ChenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            pub fn ftfie(&self) -> FtfieR {
                FtfieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            pub fn htfie(&self) -> HtfieR {
                HtfieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            pub fn cmen(&self) -> CmenR {
                CmenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            pub fn pnaga(&self) -> PnagaR {
                PnagaR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            pub fn mnaga(&self) -> MnagaR {
                MnagaR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            pub fn pwidth(&self) -> PwidthR {
                PwidthR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            pub fn mwidth(&self) -> MwidthR {
                MwidthR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            pub fn prio(&self) -> PrioR {
                PrioR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            pub fn m2m(&self) -> M2mR {
                M2mR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            #[must_use]
            pub fn chen(&mut self) -> ChenW<Ch3ctlSpec> {
                ChenW::new(self, 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn ftfie(&mut self) -> FtfieW<Ch3ctlSpec> {
                FtfieW::new(self, 1)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn htfie(&mut self) -> HtfieW<Ch3ctlSpec> {
                HtfieW::new(self, 2)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ch3ctlSpec> {
                ErrieW::new(self, 3)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ch3ctlSpec> {
                DirW::new(self, 4)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmen(&mut self) -> CmenW<Ch3ctlSpec> {
                CmenW::new(self, 5)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pnaga(&mut self) -> PnagaW<Ch3ctlSpec> {
                PnagaW::new(self, 6)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mnaga(&mut self) -> MnagaW<Ch3ctlSpec> {
                MnagaW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pwidth(&mut self) -> PwidthW<Ch3ctlSpec> {
                PwidthW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mwidth(&mut self) -> MwidthW<Ch3ctlSpec> {
                MwidthW::new(self, 10)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            #[must_use]
            pub fn prio(&mut self) -> PrioW<Ch3ctlSpec> {
                PrioW::new(self, 12)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            #[must_use]
            pub fn m2m(&mut self) -> M2mW<Ch3ctlSpec> {
                M2mW::new(self, 14)
            }
        }
        #[doc = "Channel 3 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch3ctlSpec;
        impl crate::RegisterSpec for Ch3ctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch3ctl::R`](R) reader structure"]
        impl crate::Readable for Ch3ctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch3ctl::W`](W) writer structure"]
        impl crate::Writable for Ch3ctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH3CTL to value 0"]
        impl crate::Resettable for Ch3ctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH3CNT (rw) register accessor: Channel 3 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch3cnt`]
module"]
    #[doc(alias = "CH3CNT")]
    pub type Ch3cnt = crate::Reg<ch3cnt::Ch3cntSpec>;
    #[doc = "Channel 3 counter register"]
    pub mod ch3cnt {
        #[doc = "Register `CH3CNT` reader"]
        pub type R = crate::R<Ch3cntSpec>;
        #[doc = "Register `CH3CNT` writer"]
        pub type W = crate::W<Ch3cntSpec>;
        #[doc = "Field `CNT` reader - Transfer counter"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - Transfer counter"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<Ch3cntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Channel 3 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch3cntSpec;
        impl crate::RegisterSpec for Ch3cntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch3cnt::R`](R) reader structure"]
        impl crate::Readable for Ch3cntSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch3cnt::W`](W) writer structure"]
        impl crate::Writable for Ch3cntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH3CNT to value 0"]
        impl crate::Resettable for Ch3cntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH3PADDR (rw) register accessor: Channel 3 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3paddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3paddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch3paddr`]
module"]
    #[doc(alias = "CH3PADDR")]
    pub type Ch3paddr = crate::Reg<ch3paddr::Ch3paddrSpec>;
    #[doc = "Channel 3 peripheral base address register"]
    pub mod ch3paddr {
        #[doc = "Register `CH3PADDR` reader"]
        pub type R = crate::R<Ch3paddrSpec>;
        #[doc = "Register `CH3PADDR` writer"]
        pub type W = crate::W<Ch3paddrSpec>;
        #[doc = "Field `PADDR` reader - Peripheral base address"]
        pub type PaddrR = crate::FieldReader<u32>;
        #[doc = "Field `PADDR` writer - Peripheral base address"]
        pub type PaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            pub fn paddr(&self) -> PaddrR {
                PaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            #[must_use]
            pub fn paddr(&mut self) -> PaddrW<Ch3paddrSpec> {
                PaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 3 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3paddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3paddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch3paddrSpec;
        impl crate::RegisterSpec for Ch3paddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch3paddr::R`](R) reader structure"]
        impl crate::Readable for Ch3paddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch3paddr::W`](W) writer structure"]
        impl crate::Writable for Ch3paddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH3PADDR to value 0"]
        impl crate::Resettable for Ch3paddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH3MADDR (rw) register accessor: Channel 3 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3maddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3maddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch3maddr`]
module"]
    #[doc(alias = "CH3MADDR")]
    pub type Ch3maddr = crate::Reg<ch3maddr::Ch3maddrSpec>;
    #[doc = "Channel 3 memory base address register"]
    pub mod ch3maddr {
        #[doc = "Register `CH3MADDR` reader"]
        pub type R = crate::R<Ch3maddrSpec>;
        #[doc = "Register `CH3MADDR` writer"]
        pub type W = crate::W<Ch3maddrSpec>;
        #[doc = "Field `MADDR` reader - Memory base address"]
        pub type MaddrR = crate::FieldReader<u32>;
        #[doc = "Field `MADDR` writer - Memory base address"]
        pub type MaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            pub fn maddr(&self) -> MaddrR {
                MaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            #[must_use]
            pub fn maddr(&mut self) -> MaddrW<Ch3maddrSpec> {
                MaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 3 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3maddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3maddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch3maddrSpec;
        impl crate::RegisterSpec for Ch3maddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch3maddr::R`](R) reader structure"]
        impl crate::Readable for Ch3maddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch3maddr::W`](W) writer structure"]
        impl crate::Writable for Ch3maddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH3MADDR to value 0"]
        impl crate::Resettable for Ch3maddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH4CTL (rw) register accessor: Channel 4 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch4ctl`]
module"]
    #[doc(alias = "CH4CTL")]
    pub type Ch4ctl = crate::Reg<ch4ctl::Ch4ctlSpec>;
    #[doc = "Channel 4 control register"]
    pub mod ch4ctl {
        #[doc = "Register `CH4CTL` reader"]
        pub type R = crate::R<Ch4ctlSpec>;
        #[doc = "Register `CH4CTL` writer"]
        pub type W = crate::W<Ch4ctlSpec>;
        #[doc = "Field `CHEN` reader - Channel enable"]
        pub type ChenR = crate::BitReader;
        #[doc = "Field `CHEN` writer - Channel enable"]
        pub type ChenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTFIE` reader - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieR = crate::BitReader;
        #[doc = "Field `FTFIE` writer - Enable bit for channel full transfer finish interrupt"]
        pub type FtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HTFIE` reader - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieR = crate::BitReader;
        #[doc = "Field `HTFIE` writer - Enable bit for channel half transfer finish interrupt"]
        pub type HtfieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Enable bit for channel error interrupt"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Enable bit for channel error interrupt"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Transfer direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Transfer direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMEN` reader - Circular mode enable"]
        pub type CmenR = crate::BitReader;
        #[doc = "Field `CMEN` writer - Circular mode enable"]
        pub type CmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PNAGA` reader - Next address generation algorithm of peripheral"]
        pub type PnagaR = crate::BitReader;
        #[doc = "Field `PNAGA` writer - Next address generation algorithm of peripheral"]
        pub type PnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MNAGA` reader - Next address generation algorithm of memory"]
        pub type MnagaR = crate::BitReader;
        #[doc = "Field `MNAGA` writer - Next address generation algorithm of memory"]
        pub type MnagaW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PWIDTH` reader - Transfer data size of peripheral"]
        pub type PwidthR = crate::FieldReader;
        #[doc = "Field `PWIDTH` writer - Transfer data size of peripheral"]
        pub type PwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MWIDTH` reader - Transfer data size of memory"]
        pub type MwidthR = crate::FieldReader;
        #[doc = "Field `MWIDTH` writer - Transfer data size of memory"]
        pub type MwidthW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PRIO` reader - Priority level"]
        pub type PrioR = crate::FieldReader;
        #[doc = "Field `PRIO` writer - Priority level"]
        pub type PrioW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `M2M` reader - Memory to Memory Mode"]
        pub type M2mR = crate::BitReader;
        #[doc = "Field `M2M` writer - Memory to Memory Mode"]
        pub type M2mW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            pub fn chen(&self) -> ChenR {
                ChenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            pub fn ftfie(&self) -> FtfieR {
                FtfieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            pub fn htfie(&self) -> HtfieR {
                HtfieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            pub fn cmen(&self) -> CmenR {
                CmenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            pub fn pnaga(&self) -> PnagaR {
                PnagaR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            pub fn mnaga(&self) -> MnagaR {
                MnagaR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            pub fn pwidth(&self) -> PwidthR {
                PwidthR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            pub fn mwidth(&self) -> MwidthR {
                MwidthR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            pub fn prio(&self) -> PrioR {
                PrioR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            pub fn m2m(&self) -> M2mR {
                M2mR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel enable"]
            #[inline(always)]
            #[must_use]
            pub fn chen(&mut self) -> ChenW<Ch4ctlSpec> {
                ChenW::new(self, 0)
            }
            #[doc = "Bit 1 - Enable bit for channel full transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn ftfie(&mut self) -> FtfieW<Ch4ctlSpec> {
                FtfieW::new(self, 1)
            }
            #[doc = "Bit 2 - Enable bit for channel half transfer finish interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn htfie(&mut self) -> HtfieW<Ch4ctlSpec> {
                HtfieW::new(self, 2)
            }
            #[doc = "Bit 3 - Enable bit for channel error interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ch4ctlSpec> {
                ErrieW::new(self, 3)
            }
            #[doc = "Bit 4 - Transfer direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ch4ctlSpec> {
                DirW::new(self, 4)
            }
            #[doc = "Bit 5 - Circular mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmen(&mut self) -> CmenW<Ch4ctlSpec> {
                CmenW::new(self, 5)
            }
            #[doc = "Bit 6 - Next address generation algorithm of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pnaga(&mut self) -> PnagaW<Ch4ctlSpec> {
                PnagaW::new(self, 6)
            }
            #[doc = "Bit 7 - Next address generation algorithm of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mnaga(&mut self) -> MnagaW<Ch4ctlSpec> {
                MnagaW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Transfer data size of peripheral"]
            #[inline(always)]
            #[must_use]
            pub fn pwidth(&mut self) -> PwidthW<Ch4ctlSpec> {
                PwidthW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Transfer data size of memory"]
            #[inline(always)]
            #[must_use]
            pub fn mwidth(&mut self) -> MwidthW<Ch4ctlSpec> {
                MwidthW::new(self, 10)
            }
            #[doc = "Bits 12:13 - Priority level"]
            #[inline(always)]
            #[must_use]
            pub fn prio(&mut self) -> PrioW<Ch4ctlSpec> {
                PrioW::new(self, 12)
            }
            #[doc = "Bit 14 - Memory to Memory Mode"]
            #[inline(always)]
            #[must_use]
            pub fn m2m(&mut self) -> M2mW<Ch4ctlSpec> {
                M2mW::new(self, 14)
            }
        }
        #[doc = "Channel 4 control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch4ctlSpec;
        impl crate::RegisterSpec for Ch4ctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch4ctl::R`](R) reader structure"]
        impl crate::Readable for Ch4ctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch4ctl::W`](W) writer structure"]
        impl crate::Writable for Ch4ctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH4CTL to value 0"]
        impl crate::Resettable for Ch4ctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH4CNT (rw) register accessor: Channel 4 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch4cnt`]
module"]
    #[doc(alias = "CH4CNT")]
    pub type Ch4cnt = crate::Reg<ch4cnt::Ch4cntSpec>;
    #[doc = "Channel 4 counter register"]
    pub mod ch4cnt {
        #[doc = "Register `CH4CNT` reader"]
        pub type R = crate::R<Ch4cntSpec>;
        #[doc = "Register `CH4CNT` writer"]
        pub type W = crate::W<Ch4cntSpec>;
        #[doc = "Field `CNT` reader - Transfer counter"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - Transfer counter"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Transfer counter"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<Ch4cntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Channel 4 counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch4cntSpec;
        impl crate::RegisterSpec for Ch4cntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch4cnt::R`](R) reader structure"]
        impl crate::Readable for Ch4cntSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch4cnt::W`](W) writer structure"]
        impl crate::Writable for Ch4cntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH4CNT to value 0"]
        impl crate::Resettable for Ch4cntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH4PADDR (rw) register accessor: Channel 4 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4paddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4paddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch4paddr`]
module"]
    #[doc(alias = "CH4PADDR")]
    pub type Ch4paddr = crate::Reg<ch4paddr::Ch4paddrSpec>;
    #[doc = "Channel 4 peripheral base address register"]
    pub mod ch4paddr {
        #[doc = "Register `CH4PADDR` reader"]
        pub type R = crate::R<Ch4paddrSpec>;
        #[doc = "Register `CH4PADDR` writer"]
        pub type W = crate::W<Ch4paddrSpec>;
        #[doc = "Field `PADDR` reader - Peripheral base address"]
        pub type PaddrR = crate::FieldReader<u32>;
        #[doc = "Field `PADDR` writer - Peripheral base address"]
        pub type PaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            pub fn paddr(&self) -> PaddrR {
                PaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Peripheral base address"]
            #[inline(always)]
            #[must_use]
            pub fn paddr(&mut self) -> PaddrW<Ch4paddrSpec> {
                PaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 4 peripheral base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4paddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4paddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch4paddrSpec;
        impl crate::RegisterSpec for Ch4paddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch4paddr::R`](R) reader structure"]
        impl crate::Readable for Ch4paddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch4paddr::W`](W) writer structure"]
        impl crate::Writable for Ch4paddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH4PADDR to value 0"]
        impl crate::Resettable for Ch4paddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH4MADDR (rw) register accessor: Channel 4 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4maddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4maddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch4maddr`]
module"]
    #[doc(alias = "CH4MADDR")]
    pub type Ch4maddr = crate::Reg<ch4maddr::Ch4maddrSpec>;
    #[doc = "Channel 4 memory base address register"]
    pub mod ch4maddr {
        #[doc = "Register `CH4MADDR` reader"]
        pub type R = crate::R<Ch4maddrSpec>;
        #[doc = "Register `CH4MADDR` writer"]
        pub type W = crate::W<Ch4maddrSpec>;
        #[doc = "Field `MADDR` reader - Memory base address"]
        pub type MaddrR = crate::FieldReader<u32>;
        #[doc = "Field `MADDR` writer - Memory base address"]
        pub type MaddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            pub fn maddr(&self) -> MaddrR {
                MaddrR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Memory base address"]
            #[inline(always)]
            #[must_use]
            pub fn maddr(&mut self) -> MaddrW<Ch4maddrSpec> {
                MaddrW::new(self, 0)
            }
        }
        #[doc = "Channel 4 memory base address register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch4maddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch4maddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch4maddrSpec;
        impl crate::RegisterSpec for Ch4maddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch4maddr::R`](R) reader structure"]
        impl crate::Readable for Ch4maddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch4maddr::W`](W) writer structure"]
        impl crate::Writable for Ch4maddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH4MADDR to value 0"]
        impl crate::Resettable for Ch4maddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "External memory controller"]
pub struct Exmc {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Exmc {}
impl Exmc {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const exmc::RegisterBlock = 0xa000_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const exmc::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Exmc {
    type Target = exmc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Exmc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Exmc").finish()
    }
}
#[doc = "External memory controller"]
pub mod exmc {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        snctl0: Snctl0,
        sntcfg0: Sntcfg0,
        snctl1: Snctl1,
        sntcfg1: Sntcfg1,
        snctl2: Snctl2,
        sntcfg2: Sntcfg2,
        snctl3: Snctl3,
        sntcfg3: Sntcfg3,
        _reserved8: [u8; 0x40],
        npctl1: Npctl1,
        npinten1: Npinten1,
        npctcfg1: Npctcfg1,
        npatcfg1: Npatcfg1,
        _reserved12: [u8; 0x04],
        necc1: Necc1,
        _reserved13: [u8; 0x08],
        npctl2: Npctl2,
        npinten2: Npinten2,
        npctcfg2: Npctcfg2,
        npatcfg2: Npatcfg2,
        _reserved17: [u8; 0x04],
        necc2: Necc2,
        _reserved18: [u8; 0x08],
        npctl3: Npctl3,
        npinten3: Npinten3,
        npctcfg3: Npctcfg3,
        npatcfg3: Npatcfg3,
        piotcfg3: Piotcfg3,
        _reserved23: [u8; 0x50],
        snwtcfg0: Snwtcfg0,
        _reserved24: [u8; 0x04],
        snwtcfg1: Snwtcfg1,
        _reserved25: [u8; 0x04],
        snwtcfg2: Snwtcfg2,
        _reserved26: [u8; 0x04],
        snwtcfg3: Snwtcfg3,
    }
    impl RegisterBlock {
        #[doc = "0x00 - SRAM/NOR flash control register 0"]
        #[inline(always)]
        pub const fn snctl0(&self) -> &Snctl0 {
            &self.snctl0
        }
        #[doc = "0x04 - SRAM/NOR flash timing configuration register 0"]
        #[inline(always)]
        pub const fn sntcfg0(&self) -> &Sntcfg0 {
            &self.sntcfg0
        }
        #[doc = "0x08 - SRAM/NOR flash control register 1"]
        #[inline(always)]
        pub const fn snctl1(&self) -> &Snctl1 {
            &self.snctl1
        }
        #[doc = "0x0c - SRAM/NOR flash timing configuration register 1"]
        #[inline(always)]
        pub const fn sntcfg1(&self) -> &Sntcfg1 {
            &self.sntcfg1
        }
        #[doc = "0x10 - SRAM/NOR flash control register 2"]
        #[inline(always)]
        pub const fn snctl2(&self) -> &Snctl2 {
            &self.snctl2
        }
        #[doc = "0x14 - SRAM/NOR flash timing configuration register 2"]
        #[inline(always)]
        pub const fn sntcfg2(&self) -> &Sntcfg2 {
            &self.sntcfg2
        }
        #[doc = "0x18 - SRAM/NOR flash control register 3"]
        #[inline(always)]
        pub const fn snctl3(&self) -> &Snctl3 {
            &self.snctl3
        }
        #[doc = "0x1c - SRAM/NOR flash timing configuration register 3"]
        #[inline(always)]
        pub const fn sntcfg3(&self) -> &Sntcfg3 {
            &self.sntcfg3
        }
        #[doc = "0x60 - NAND flash/PC card control register 1"]
        #[inline(always)]
        pub const fn npctl1(&self) -> &Npctl1 {
            &self.npctl1
        }
        #[doc = "0x64 - NAND flash/PC card interrupt enable register 1"]
        #[inline(always)]
        pub const fn npinten1(&self) -> &Npinten1 {
            &self.npinten1
        }
        #[doc = "0x68 - NAND flash/PC card common space timing configuration register 1"]
        #[inline(always)]
        pub const fn npctcfg1(&self) -> &Npctcfg1 {
            &self.npctcfg1
        }
        #[doc = "0x6c - NAND flash/PC card attribute space timing configuration register 1"]
        #[inline(always)]
        pub const fn npatcfg1(&self) -> &Npatcfg1 {
            &self.npatcfg1
        }
        #[doc = "0x74 - NAND flash ECC register 1"]
        #[inline(always)]
        pub const fn necc1(&self) -> &Necc1 {
            &self.necc1
        }
        #[doc = "0x80 - NAND flash/PC card control register 2"]
        #[inline(always)]
        pub const fn npctl2(&self) -> &Npctl2 {
            &self.npctl2
        }
        #[doc = "0x84 - NAND flash/PC card interrupt enable register 2"]
        #[inline(always)]
        pub const fn npinten2(&self) -> &Npinten2 {
            &self.npinten2
        }
        #[doc = "0x88 - NAND flash/PC card common space timing configuration register 2"]
        #[inline(always)]
        pub const fn npctcfg2(&self) -> &Npctcfg2 {
            &self.npctcfg2
        }
        #[doc = "0x8c - NAND flash/PC card attribute space timing configuration register 2"]
        #[inline(always)]
        pub const fn npatcfg2(&self) -> &Npatcfg2 {
            &self.npatcfg2
        }
        #[doc = "0x94 - NAND flash ECC register 2"]
        #[inline(always)]
        pub const fn necc2(&self) -> &Necc2 {
            &self.necc2
        }
        #[doc = "0xa0 - NAND flash/PC card control register 3"]
        #[inline(always)]
        pub const fn npctl3(&self) -> &Npctl3 {
            &self.npctl3
        }
        #[doc = "0xa4 - NAND flash/PC card interrupt enable register 3"]
        #[inline(always)]
        pub const fn npinten3(&self) -> &Npinten3 {
            &self.npinten3
        }
        #[doc = "0xa8 - NAND flash/PC card common space timing configuration register 3"]
        #[inline(always)]
        pub const fn npctcfg3(&self) -> &Npctcfg3 {
            &self.npctcfg3
        }
        #[doc = "0xac - NAND flash/PC card attribute space timing configuration register 3"]
        #[inline(always)]
        pub const fn npatcfg3(&self) -> &Npatcfg3 {
            &self.npatcfg3
        }
        #[doc = "0xb0 - PC card I/O space timing configuration register"]
        #[inline(always)]
        pub const fn piotcfg3(&self) -> &Piotcfg3 {
            &self.piotcfg3
        }
        #[doc = "0x104 - SRAM/NOR flash write timing configuration register 0"]
        #[inline(always)]
        pub const fn snwtcfg0(&self) -> &Snwtcfg0 {
            &self.snwtcfg0
        }
        #[doc = "0x10c - SRAM/NOR flash write timing configuration register 1"]
        #[inline(always)]
        pub const fn snwtcfg1(&self) -> &Snwtcfg1 {
            &self.snwtcfg1
        }
        #[doc = "0x114 - SRAM/NOR flash write timing configuration register 2"]
        #[inline(always)]
        pub const fn snwtcfg2(&self) -> &Snwtcfg2 {
            &self.snwtcfg2
        }
        #[doc = "0x11c - SRAM/NOR flash write timing configuration register 3"]
        #[inline(always)]
        pub const fn snwtcfg3(&self) -> &Snwtcfg3 {
            &self.snwtcfg3
        }
    }
    #[doc = "SNCTL0 (rw) register accessor: SRAM/NOR flash control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`snctl0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snctl0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@snctl0`]
module"]
    #[doc(alias = "SNCTL0")]
    pub type Snctl0 = crate::Reg<snctl0::Snctl0Spec>;
    #[doc = "SRAM/NOR flash control register 0"]
    pub mod snctl0 {
        #[doc = "Register `SNCTL0` reader"]
        pub type R = crate::R<Snctl0Spec>;
        #[doc = "Register `SNCTL0` writer"]
        pub type W = crate::W<Snctl0Spec>;
        #[doc = "Field `NRBKEN` reader - NOR bank enable"]
        pub type NrbkenR = crate::BitReader;
        #[doc = "Field `NRBKEN` writer - NOR bank enable"]
        pub type NrbkenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRMUX` reader - NOR bank memory address/data multiplexing"]
        pub type NrmuxR = crate::BitReader;
        #[doc = "Field `NRMUX` writer - NOR bank memory address/data multiplexing"]
        pub type NrmuxW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRTP` reader - NOR bank memory type"]
        pub type NrtpR = crate::FieldReader;
        #[doc = "Field `NRTP` writer - NOR bank memory type"]
        pub type NrtpW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `NRW` reader - NOR bank memory data bus width"]
        pub type NrwR = crate::FieldReader;
        #[doc = "Field `NRW` writer - NOR bank memory data bus width"]
        pub type NrwW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `NREN` reader - NOR Flash access enable"]
        pub type NrenR = crate::BitReader;
        #[doc = "Field `NREN` writer - NOR Flash access enable"]
        pub type NrenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SBRSTEN` reader - Synchronous burst enable"]
        pub type SbrstenR = crate::BitReader;
        #[doc = "Field `SBRSTEN` writer - Synchronous burst enable"]
        pub type SbrstenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRWTPOL` reader - NWAIT signal polarity"]
        pub type NrwtpolR = crate::BitReader;
        #[doc = "Field `NRWTPOL` writer - NWAIT signal polarity"]
        pub type NrwtpolW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WRAPEN` reader - Wrapped burst mode enable"]
        pub type WrapenR = crate::BitReader;
        #[doc = "Field `WRAPEN` writer - Wrapped burst mode enable"]
        pub type WrapenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRWTCFG` reader - NWAIT signal configuration, only work in synchronous mode"]
        pub type NrwtcfgR = crate::BitReader;
        #[doc = "Field `NRWTCFG` writer - NWAIT signal configuration, only work in synchronous mode"]
        pub type NrwtcfgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WREN` reader - Write enable"]
        pub type WrenR = crate::BitReader;
        #[doc = "Field `WREN` writer - Write enable"]
        pub type WrenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRWTEN` reader - NWAIT signal enable"]
        pub type NrwtenR = crate::BitReader;
        #[doc = "Field `NRWTEN` writer - NWAIT signal enable"]
        pub type NrwtenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EXMODEN` reader - Extended mode enable"]
        pub type ExmodenR = crate::BitReader;
        #[doc = "Field `EXMODEN` writer - Extended mode enable"]
        pub type ExmodenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ASYNCWAIT` reader - Asynchronous wait"]
        pub type AsyncwaitR = crate::BitReader;
        #[doc = "Field `ASYNCWAIT` writer - Asynchronous wait"]
        pub type AsyncwaitW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SYNCWR` reader - Synchronous write"]
        pub type SyncwrR = crate::BitReader;
        #[doc = "Field `SYNCWR` writer - Synchronous write"]
        pub type SyncwrW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - NOR bank enable"]
            #[inline(always)]
            pub fn nrbken(&self) -> NrbkenR {
                NrbkenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - NOR bank memory address/data multiplexing"]
            #[inline(always)]
            pub fn nrmux(&self) -> NrmuxR {
                NrmuxR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bits 2:3 - NOR bank memory type"]
            #[inline(always)]
            pub fn nrtp(&self) -> NrtpR {
                NrtpR::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:5 - NOR bank memory data bus width"]
            #[inline(always)]
            pub fn nrw(&self) -> NrwR {
                NrwR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - NOR Flash access enable"]
            #[inline(always)]
            pub fn nren(&self) -> NrenR {
                NrenR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 8 - Synchronous burst enable"]
            #[inline(always)]
            pub fn sbrsten(&self) -> SbrstenR {
                SbrstenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - NWAIT signal polarity"]
            #[inline(always)]
            pub fn nrwtpol(&self) -> NrwtpolR {
                NrwtpolR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Wrapped burst mode enable"]
            #[inline(always)]
            pub fn wrapen(&self) -> WrapenR {
                WrapenR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - NWAIT signal configuration, only work in synchronous mode"]
            #[inline(always)]
            pub fn nrwtcfg(&self) -> NrwtcfgR {
                NrwtcfgR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Write enable"]
            #[inline(always)]
            pub fn wren(&self) -> WrenR {
                WrenR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - NWAIT signal enable"]
            #[inline(always)]
            pub fn nrwten(&self) -> NrwtenR {
                NrwtenR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Extended mode enable"]
            #[inline(always)]
            pub fn exmoden(&self) -> ExmodenR {
                ExmodenR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Asynchronous wait"]
            #[inline(always)]
            pub fn asyncwait(&self) -> AsyncwaitR {
                AsyncwaitR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 19 - Synchronous write"]
            #[inline(always)]
            pub fn syncwr(&self) -> SyncwrR {
                SyncwrR::new(((self.bits >> 19) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - NOR bank enable"]
            #[inline(always)]
            #[must_use]
            pub fn nrbken(&mut self) -> NrbkenW<Snctl0Spec> {
                NrbkenW::new(self, 0)
            }
            #[doc = "Bit 1 - NOR bank memory address/data multiplexing"]
            #[inline(always)]
            #[must_use]
            pub fn nrmux(&mut self) -> NrmuxW<Snctl0Spec> {
                NrmuxW::new(self, 1)
            }
            #[doc = "Bits 2:3 - NOR bank memory type"]
            #[inline(always)]
            #[must_use]
            pub fn nrtp(&mut self) -> NrtpW<Snctl0Spec> {
                NrtpW::new(self, 2)
            }
            #[doc = "Bits 4:5 - NOR bank memory data bus width"]
            #[inline(always)]
            #[must_use]
            pub fn nrw(&mut self) -> NrwW<Snctl0Spec> {
                NrwW::new(self, 4)
            }
            #[doc = "Bit 6 - NOR Flash access enable"]
            #[inline(always)]
            #[must_use]
            pub fn nren(&mut self) -> NrenW<Snctl0Spec> {
                NrenW::new(self, 6)
            }
            #[doc = "Bit 8 - Synchronous burst enable"]
            #[inline(always)]
            #[must_use]
            pub fn sbrsten(&mut self) -> SbrstenW<Snctl0Spec> {
                SbrstenW::new(self, 8)
            }
            #[doc = "Bit 9 - NWAIT signal polarity"]
            #[inline(always)]
            #[must_use]
            pub fn nrwtpol(&mut self) -> NrwtpolW<Snctl0Spec> {
                NrwtpolW::new(self, 9)
            }
            #[doc = "Bit 10 - Wrapped burst mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn wrapen(&mut self) -> WrapenW<Snctl0Spec> {
                WrapenW::new(self, 10)
            }
            #[doc = "Bit 11 - NWAIT signal configuration, only work in synchronous mode"]
            #[inline(always)]
            #[must_use]
            pub fn nrwtcfg(&mut self) -> NrwtcfgW<Snctl0Spec> {
                NrwtcfgW::new(self, 11)
            }
            #[doc = "Bit 12 - Write enable"]
            #[inline(always)]
            #[must_use]
            pub fn wren(&mut self) -> WrenW<Snctl0Spec> {
                WrenW::new(self, 12)
            }
            #[doc = "Bit 13 - NWAIT signal enable"]
            #[inline(always)]
            #[must_use]
            pub fn nrwten(&mut self) -> NrwtenW<Snctl0Spec> {
                NrwtenW::new(self, 13)
            }
            #[doc = "Bit 14 - Extended mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn exmoden(&mut self) -> ExmodenW<Snctl0Spec> {
                ExmodenW::new(self, 14)
            }
            #[doc = "Bit 15 - Asynchronous wait"]
            #[inline(always)]
            #[must_use]
            pub fn asyncwait(&mut self) -> AsyncwaitW<Snctl0Spec> {
                AsyncwaitW::new(self, 15)
            }
            #[doc = "Bit 19 - Synchronous write"]
            #[inline(always)]
            #[must_use]
            pub fn syncwr(&mut self) -> SyncwrW<Snctl0Spec> {
                SyncwrW::new(self, 19)
            }
        }
        #[doc = "SRAM/NOR flash control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`snctl0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snctl0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Snctl0Spec;
        impl crate::RegisterSpec for Snctl0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`snctl0::R`](R) reader structure"]
        impl crate::Readable for Snctl0Spec {}
        #[doc = "`write(|w| ..)` method takes [`snctl0::W`](W) writer structure"]
        impl crate::Writable for Snctl0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SNCTL0 to value 0x30db"]
        impl crate::Resettable for Snctl0Spec {
            const RESET_VALUE: u32 = 0x30db;
        }
    }
    #[doc = "SNTCFG0 (rw) register accessor: SRAM/NOR flash timing configuration register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`sntcfg0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sntcfg0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sntcfg0`]
module"]
    #[doc(alias = "SNTCFG0")]
    pub type Sntcfg0 = crate::Reg<sntcfg0::Sntcfg0Spec>;
    #[doc = "SRAM/NOR flash timing configuration register 0"]
    pub mod sntcfg0 {
        #[doc = "Register `SNTCFG0` reader"]
        pub type R = crate::R<Sntcfg0Spec>;
        #[doc = "Register `SNTCFG0` writer"]
        pub type W = crate::W<Sntcfg0Spec>;
        #[doc = "Field `ASET` reader - Address setup time"]
        pub type AsetR = crate::FieldReader;
        #[doc = "Field `ASET` writer - Address setup time"]
        pub type AsetW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `AHLD` reader - Address hold time"]
        pub type AhldR = crate::FieldReader;
        #[doc = "Field `AHLD` writer - Address hold time"]
        pub type AhldW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DSET` reader - Data setup time"]
        pub type DsetR = crate::FieldReader;
        #[doc = "Field `DSET` writer - Data setup time"]
        pub type DsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `BUSLAT` reader - Bus latency"]
        pub type BuslatR = crate::FieldReader;
        #[doc = "Field `BUSLAT` writer - Bus latency"]
        pub type BuslatW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `CKDIV` reader - Synchronous clock divide ratio"]
        pub type CkdivR = crate::FieldReader;
        #[doc = "Field `CKDIV` writer - Synchronous clock divide ratio"]
        pub type CkdivW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DLAT` reader - Data latency for NOR Flash"]
        pub type DlatR = crate::FieldReader;
        #[doc = "Field `DLAT` writer - Data latency for NOR Flash"]
        pub type DlatW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `ASYNCMOD` reader - Asynchronous access mode"]
        pub type AsyncmodR = crate::FieldReader;
        #[doc = "Field `ASYNCMOD` writer - Asynchronous access mode"]
        pub type AsyncmodW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            pub fn aset(&self) -> AsetR {
                AsetR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            pub fn ahld(&self) -> AhldR {
                AhldR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            pub fn dset(&self) -> DsetR {
                DsetR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:19 - Bus latency"]
            #[inline(always)]
            pub fn buslat(&self) -> BuslatR {
                BuslatR::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            pub fn ckdiv(&self) -> CkdivR {
                CkdivR::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Data latency for NOR Flash"]
            #[inline(always)]
            pub fn dlat(&self) -> DlatR {
                DlatR::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            pub fn asyncmod(&self) -> AsyncmodR {
                AsyncmodR::new(((self.bits >> 28) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            #[must_use]
            pub fn aset(&mut self) -> AsetW<Sntcfg0Spec> {
                AsetW::new(self, 0)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            #[must_use]
            pub fn ahld(&mut self) -> AhldW<Sntcfg0Spec> {
                AhldW::new(self, 4)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            #[must_use]
            pub fn dset(&mut self) -> DsetW<Sntcfg0Spec> {
                DsetW::new(self, 8)
            }
            #[doc = "Bits 16:19 - Bus latency"]
            #[inline(always)]
            #[must_use]
            pub fn buslat(&mut self) -> BuslatW<Sntcfg0Spec> {
                BuslatW::new(self, 16)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            #[must_use]
            pub fn ckdiv(&mut self) -> CkdivW<Sntcfg0Spec> {
                CkdivW::new(self, 20)
            }
            #[doc = "Bits 24:27 - Data latency for NOR Flash"]
            #[inline(always)]
            #[must_use]
            pub fn dlat(&mut self) -> DlatW<Sntcfg0Spec> {
                DlatW::new(self, 24)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            #[must_use]
            pub fn asyncmod(&mut self) -> AsyncmodW<Sntcfg0Spec> {
                AsyncmodW::new(self, 28)
            }
        }
        #[doc = "SRAM/NOR flash timing configuration register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`sntcfg0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sntcfg0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Sntcfg0Spec;
        impl crate::RegisterSpec for Sntcfg0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sntcfg0::R`](R) reader structure"]
        impl crate::Readable for Sntcfg0Spec {}
        #[doc = "`write(|w| ..)` method takes [`sntcfg0::W`](W) writer structure"]
        impl crate::Writable for Sntcfg0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SNTCFG0 to value 0x0fff_ffff"]
        impl crate::Resettable for Sntcfg0Spec {
            const RESET_VALUE: u32 = 0x0fff_ffff;
        }
    }
    #[doc = "SNCTL1 (rw) register accessor: SRAM/NOR flash control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`snctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@snctl1`]
module"]
    #[doc(alias = "SNCTL1")]
    pub type Snctl1 = crate::Reg<snctl1::Snctl1Spec>;
    #[doc = "SRAM/NOR flash control register 1"]
    pub mod snctl1 {
        #[doc = "Register `SNCTL1` reader"]
        pub type R = crate::R<Snctl1Spec>;
        #[doc = "Register `SNCTL1` writer"]
        pub type W = crate::W<Snctl1Spec>;
        #[doc = "Field `NRBKEN` reader - NOR bank enable"]
        pub type NrbkenR = crate::BitReader;
        #[doc = "Field `NRBKEN` writer - NOR bank enable"]
        pub type NrbkenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRMUX` reader - NOR bank memory address/data multiplexing"]
        pub type NrmuxR = crate::BitReader;
        #[doc = "Field `NRMUX` writer - NOR bank memory address/data multiplexing"]
        pub type NrmuxW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRTP` reader - NOR bank memory type"]
        pub type NrtpR = crate::FieldReader;
        #[doc = "Field `NRTP` writer - NOR bank memory type"]
        pub type NrtpW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `NRW` reader - NOR bank memory data bus width"]
        pub type NrwR = crate::FieldReader;
        #[doc = "Field `NRW` writer - NOR bank memory data bus width"]
        pub type NrwW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `NREN` reader - NOR Flash access enable"]
        pub type NrenR = crate::BitReader;
        #[doc = "Field `NREN` writer - NOR Flash access enable"]
        pub type NrenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SBRSTEN` reader - Synchronous burst enable"]
        pub type SbrstenR = crate::BitReader;
        #[doc = "Field `SBRSTEN` writer - Synchronous burst enable"]
        pub type SbrstenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRWTPOL` reader - NWAIT signal polarity"]
        pub type NrwtpolR = crate::BitReader;
        #[doc = "Field `NRWTPOL` writer - NWAIT signal polarity"]
        pub type NrwtpolW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WRAPEN` reader - Wrapped burst mode enable"]
        pub type WrapenR = crate::BitReader;
        #[doc = "Field `WRAPEN` writer - Wrapped burst mode enable"]
        pub type WrapenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRWTCFG` reader - NWAIT signal configuration, only work in synchronous mode"]
        pub type NrwtcfgR = crate::BitReader;
        #[doc = "Field `NRWTCFG` writer - NWAIT signal configuration, only work in synchronous mode"]
        pub type NrwtcfgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WREN` reader - Write enable"]
        pub type WrenR = crate::BitReader;
        #[doc = "Field `WREN` writer - Write enable"]
        pub type WrenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRWTEN` reader - NWAIT signal enable"]
        pub type NrwtenR = crate::BitReader;
        #[doc = "Field `NRWTEN` writer - NWAIT signal enable"]
        pub type NrwtenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EXMODEN` reader - Extended mode enable"]
        pub type ExmodenR = crate::BitReader;
        #[doc = "Field `EXMODEN` writer - Extended mode enable"]
        pub type ExmodenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ASYNCWAIT` reader - Asynchronous wait"]
        pub type AsyncwaitR = crate::BitReader;
        #[doc = "Field `ASYNCWAIT` writer - Asynchronous wait"]
        pub type AsyncwaitW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SYNCWR` reader - Synchronous write"]
        pub type SyncwrR = crate::BitReader;
        #[doc = "Field `SYNCWR` writer - Synchronous write"]
        pub type SyncwrW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - NOR bank enable"]
            #[inline(always)]
            pub fn nrbken(&self) -> NrbkenR {
                NrbkenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - NOR bank memory address/data multiplexing"]
            #[inline(always)]
            pub fn nrmux(&self) -> NrmuxR {
                NrmuxR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bits 2:3 - NOR bank memory type"]
            #[inline(always)]
            pub fn nrtp(&self) -> NrtpR {
                NrtpR::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:5 - NOR bank memory data bus width"]
            #[inline(always)]
            pub fn nrw(&self) -> NrwR {
                NrwR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - NOR Flash access enable"]
            #[inline(always)]
            pub fn nren(&self) -> NrenR {
                NrenR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 8 - Synchronous burst enable"]
            #[inline(always)]
            pub fn sbrsten(&self) -> SbrstenR {
                SbrstenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - NWAIT signal polarity"]
            #[inline(always)]
            pub fn nrwtpol(&self) -> NrwtpolR {
                NrwtpolR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Wrapped burst mode enable"]
            #[inline(always)]
            pub fn wrapen(&self) -> WrapenR {
                WrapenR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - NWAIT signal configuration, only work in synchronous mode"]
            #[inline(always)]
            pub fn nrwtcfg(&self) -> NrwtcfgR {
                NrwtcfgR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Write enable"]
            #[inline(always)]
            pub fn wren(&self) -> WrenR {
                WrenR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - NWAIT signal enable"]
            #[inline(always)]
            pub fn nrwten(&self) -> NrwtenR {
                NrwtenR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Extended mode enable"]
            #[inline(always)]
            pub fn exmoden(&self) -> ExmodenR {
                ExmodenR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Asynchronous wait"]
            #[inline(always)]
            pub fn asyncwait(&self) -> AsyncwaitR {
                AsyncwaitR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 19 - Synchronous write"]
            #[inline(always)]
            pub fn syncwr(&self) -> SyncwrR {
                SyncwrR::new(((self.bits >> 19) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - NOR bank enable"]
            #[inline(always)]
            #[must_use]
            pub fn nrbken(&mut self) -> NrbkenW<Snctl1Spec> {
                NrbkenW::new(self, 0)
            }
            #[doc = "Bit 1 - NOR bank memory address/data multiplexing"]
            #[inline(always)]
            #[must_use]
            pub fn nrmux(&mut self) -> NrmuxW<Snctl1Spec> {
                NrmuxW::new(self, 1)
            }
            #[doc = "Bits 2:3 - NOR bank memory type"]
            #[inline(always)]
            #[must_use]
            pub fn nrtp(&mut self) -> NrtpW<Snctl1Spec> {
                NrtpW::new(self, 2)
            }
            #[doc = "Bits 4:5 - NOR bank memory data bus width"]
            #[inline(always)]
            #[must_use]
            pub fn nrw(&mut self) -> NrwW<Snctl1Spec> {
                NrwW::new(self, 4)
            }
            #[doc = "Bit 6 - NOR Flash access enable"]
            #[inline(always)]
            #[must_use]
            pub fn nren(&mut self) -> NrenW<Snctl1Spec> {
                NrenW::new(self, 6)
            }
            #[doc = "Bit 8 - Synchronous burst enable"]
            #[inline(always)]
            #[must_use]
            pub fn sbrsten(&mut self) -> SbrstenW<Snctl1Spec> {
                SbrstenW::new(self, 8)
            }
            #[doc = "Bit 9 - NWAIT signal polarity"]
            #[inline(always)]
            #[must_use]
            pub fn nrwtpol(&mut self) -> NrwtpolW<Snctl1Spec> {
                NrwtpolW::new(self, 9)
            }
            #[doc = "Bit 10 - Wrapped burst mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn wrapen(&mut self) -> WrapenW<Snctl1Spec> {
                WrapenW::new(self, 10)
            }
            #[doc = "Bit 11 - NWAIT signal configuration, only work in synchronous mode"]
            #[inline(always)]
            #[must_use]
            pub fn nrwtcfg(&mut self) -> NrwtcfgW<Snctl1Spec> {
                NrwtcfgW::new(self, 11)
            }
            #[doc = "Bit 12 - Write enable"]
            #[inline(always)]
            #[must_use]
            pub fn wren(&mut self) -> WrenW<Snctl1Spec> {
                WrenW::new(self, 12)
            }
            #[doc = "Bit 13 - NWAIT signal enable"]
            #[inline(always)]
            #[must_use]
            pub fn nrwten(&mut self) -> NrwtenW<Snctl1Spec> {
                NrwtenW::new(self, 13)
            }
            #[doc = "Bit 14 - Extended mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn exmoden(&mut self) -> ExmodenW<Snctl1Spec> {
                ExmodenW::new(self, 14)
            }
            #[doc = "Bit 15 - Asynchronous wait"]
            #[inline(always)]
            #[must_use]
            pub fn asyncwait(&mut self) -> AsyncwaitW<Snctl1Spec> {
                AsyncwaitW::new(self, 15)
            }
            #[doc = "Bit 19 - Synchronous write"]
            #[inline(always)]
            #[must_use]
            pub fn syncwr(&mut self) -> SyncwrW<Snctl1Spec> {
                SyncwrW::new(self, 19)
            }
        }
        #[doc = "SRAM/NOR flash control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`snctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Snctl1Spec;
        impl crate::RegisterSpec for Snctl1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`snctl1::R`](R) reader structure"]
        impl crate::Readable for Snctl1Spec {}
        #[doc = "`write(|w| ..)` method takes [`snctl1::W`](W) writer structure"]
        impl crate::Writable for Snctl1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SNCTL1 to value 0x30d2"]
        impl crate::Resettable for Snctl1Spec {
            const RESET_VALUE: u32 = 0x30d2;
        }
    }
    #[doc = "SNTCFG1 (rw) register accessor: SRAM/NOR flash timing configuration register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`sntcfg1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sntcfg1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sntcfg1`]
module"]
    #[doc(alias = "SNTCFG1")]
    pub type Sntcfg1 = crate::Reg<sntcfg1::Sntcfg1Spec>;
    #[doc = "SRAM/NOR flash timing configuration register 1"]
    pub mod sntcfg1 {
        #[doc = "Register `SNTCFG1` reader"]
        pub type R = crate::R<Sntcfg1Spec>;
        #[doc = "Register `SNTCFG1` writer"]
        pub type W = crate::W<Sntcfg1Spec>;
        #[doc = "Field `ASET` reader - Address setup time"]
        pub type AsetR = crate::FieldReader;
        #[doc = "Field `ASET` writer - Address setup time"]
        pub type AsetW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `AHLD` reader - Address hold time"]
        pub type AhldR = crate::FieldReader;
        #[doc = "Field `AHLD` writer - Address hold time"]
        pub type AhldW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DSET` reader - Data setup time"]
        pub type DsetR = crate::FieldReader;
        #[doc = "Field `DSET` writer - Data setup time"]
        pub type DsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `BUSLAT` reader - Bus latency"]
        pub type BuslatR = crate::FieldReader;
        #[doc = "Field `BUSLAT` writer - Bus latency"]
        pub type BuslatW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `CKDIV` reader - Synchronous clock divide ratio"]
        pub type CkdivR = crate::FieldReader;
        #[doc = "Field `CKDIV` writer - Synchronous clock divide ratio"]
        pub type CkdivW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DLAT` reader - Data latency for NOR Flash"]
        pub type DlatR = crate::FieldReader;
        #[doc = "Field `DLAT` writer - Data latency for NOR Flash"]
        pub type DlatW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `ASYNCMOD` reader - Asynchronous access mode"]
        pub type AsyncmodR = crate::FieldReader;
        #[doc = "Field `ASYNCMOD` writer - Asynchronous access mode"]
        pub type AsyncmodW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            pub fn aset(&self) -> AsetR {
                AsetR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            pub fn ahld(&self) -> AhldR {
                AhldR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            pub fn dset(&self) -> DsetR {
                DsetR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:19 - Bus latency"]
            #[inline(always)]
            pub fn buslat(&self) -> BuslatR {
                BuslatR::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            pub fn ckdiv(&self) -> CkdivR {
                CkdivR::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Data latency for NOR Flash"]
            #[inline(always)]
            pub fn dlat(&self) -> DlatR {
                DlatR::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            pub fn asyncmod(&self) -> AsyncmodR {
                AsyncmodR::new(((self.bits >> 28) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            #[must_use]
            pub fn aset(&mut self) -> AsetW<Sntcfg1Spec> {
                AsetW::new(self, 0)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            #[must_use]
            pub fn ahld(&mut self) -> AhldW<Sntcfg1Spec> {
                AhldW::new(self, 4)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            #[must_use]
            pub fn dset(&mut self) -> DsetW<Sntcfg1Spec> {
                DsetW::new(self, 8)
            }
            #[doc = "Bits 16:19 - Bus latency"]
            #[inline(always)]
            #[must_use]
            pub fn buslat(&mut self) -> BuslatW<Sntcfg1Spec> {
                BuslatW::new(self, 16)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            #[must_use]
            pub fn ckdiv(&mut self) -> CkdivW<Sntcfg1Spec> {
                CkdivW::new(self, 20)
            }
            #[doc = "Bits 24:27 - Data latency for NOR Flash"]
            #[inline(always)]
            #[must_use]
            pub fn dlat(&mut self) -> DlatW<Sntcfg1Spec> {
                DlatW::new(self, 24)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            #[must_use]
            pub fn asyncmod(&mut self) -> AsyncmodW<Sntcfg1Spec> {
                AsyncmodW::new(self, 28)
            }
        }
        #[doc = "SRAM/NOR flash timing configuration register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`sntcfg1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sntcfg1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Sntcfg1Spec;
        impl crate::RegisterSpec for Sntcfg1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sntcfg1::R`](R) reader structure"]
        impl crate::Readable for Sntcfg1Spec {}
        #[doc = "`write(|w| ..)` method takes [`sntcfg1::W`](W) writer structure"]
        impl crate::Writable for Sntcfg1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SNTCFG1 to value 0x0fff_ffff"]
        impl crate::Resettable for Sntcfg1Spec {
            const RESET_VALUE: u32 = 0x0fff_ffff;
        }
    }
    #[doc = "SNCTL2 (rw) register accessor: SRAM/NOR flash control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`snctl2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snctl2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@snctl2`]
module"]
    #[doc(alias = "SNCTL2")]
    pub type Snctl2 = crate::Reg<snctl2::Snctl2Spec>;
    #[doc = "SRAM/NOR flash control register 2"]
    pub mod snctl2 {
        #[doc = "Register `SNCTL2` reader"]
        pub type R = crate::R<Snctl2Spec>;
        #[doc = "Register `SNCTL2` writer"]
        pub type W = crate::W<Snctl2Spec>;
        #[doc = "Field `NRBKEN` reader - NOR bank enable"]
        pub type NrbkenR = crate::BitReader;
        #[doc = "Field `NRBKEN` writer - NOR bank enable"]
        pub type NrbkenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRMUX` reader - NOR bank memory address/data multiplexing"]
        pub type NrmuxR = crate::BitReader;
        #[doc = "Field `NRMUX` writer - NOR bank memory address/data multiplexing"]
        pub type NrmuxW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRTP` reader - NOR bank memory type"]
        pub type NrtpR = crate::FieldReader;
        #[doc = "Field `NRTP` writer - NOR bank memory type"]
        pub type NrtpW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `NRW` reader - NOR bank memory data bus width"]
        pub type NrwR = crate::FieldReader;
        #[doc = "Field `NRW` writer - NOR bank memory data bus width"]
        pub type NrwW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `NREN` reader - NOR Flash access enable"]
        pub type NrenR = crate::BitReader;
        #[doc = "Field `NREN` writer - NOR Flash access enable"]
        pub type NrenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SBRSTEN` reader - Synchronous burst enable"]
        pub type SbrstenR = crate::BitReader;
        #[doc = "Field `SBRSTEN` writer - Synchronous burst enable"]
        pub type SbrstenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRWTPOL` reader - NWAIT signal polarity"]
        pub type NrwtpolR = crate::BitReader;
        #[doc = "Field `NRWTPOL` writer - NWAIT signal polarity"]
        pub type NrwtpolW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WRAPEN` reader - Wrapped burst mode enable"]
        pub type WrapenR = crate::BitReader;
        #[doc = "Field `WRAPEN` writer - Wrapped burst mode enable"]
        pub type WrapenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRWTCFG` reader - NWAIT signal configuration, only work in synchronous mode"]
        pub type NrwtcfgR = crate::BitReader;
        #[doc = "Field `NRWTCFG` writer - NWAIT signal configuration, only work in synchronous mode"]
        pub type NrwtcfgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WREN` reader - Write enable"]
        pub type WrenR = crate::BitReader;
        #[doc = "Field `WREN` writer - Write enable"]
        pub type WrenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRWTEN` reader - NWAIT signal enable"]
        pub type NrwtenR = crate::BitReader;
        #[doc = "Field `NRWTEN` writer - NWAIT signal enable"]
        pub type NrwtenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EXMODEN` reader - Extended mode enable"]
        pub type ExmodenR = crate::BitReader;
        #[doc = "Field `EXMODEN` writer - Extended mode enable"]
        pub type ExmodenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ASYNCWAIT` reader - Asynchronous wait"]
        pub type AsyncwaitR = crate::BitReader;
        #[doc = "Field `ASYNCWAIT` writer - Asynchronous wait"]
        pub type AsyncwaitW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CPS` reader - CRAM page size"]
        pub type CpsR = crate::FieldReader;
        #[doc = "Field `CPS` writer - CRAM page size"]
        pub type CpsW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SYNCWR` reader - Synchronous write"]
        pub type SyncwrR = crate::BitReader;
        #[doc = "Field `SYNCWR` writer - Synchronous write"]
        pub type SyncwrW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - NOR bank enable"]
            #[inline(always)]
            pub fn nrbken(&self) -> NrbkenR {
                NrbkenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - NOR bank memory address/data multiplexing"]
            #[inline(always)]
            pub fn nrmux(&self) -> NrmuxR {
                NrmuxR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bits 2:3 - NOR bank memory type"]
            #[inline(always)]
            pub fn nrtp(&self) -> NrtpR {
                NrtpR::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:5 - NOR bank memory data bus width"]
            #[inline(always)]
            pub fn nrw(&self) -> NrwR {
                NrwR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - NOR Flash access enable"]
            #[inline(always)]
            pub fn nren(&self) -> NrenR {
                NrenR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 8 - Synchronous burst enable"]
            #[inline(always)]
            pub fn sbrsten(&self) -> SbrstenR {
                SbrstenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - NWAIT signal polarity"]
            #[inline(always)]
            pub fn nrwtpol(&self) -> NrwtpolR {
                NrwtpolR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Wrapped burst mode enable"]
            #[inline(always)]
            pub fn wrapen(&self) -> WrapenR {
                WrapenR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - NWAIT signal configuration, only work in synchronous mode"]
            #[inline(always)]
            pub fn nrwtcfg(&self) -> NrwtcfgR {
                NrwtcfgR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Write enable"]
            #[inline(always)]
            pub fn wren(&self) -> WrenR {
                WrenR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - NWAIT signal enable"]
            #[inline(always)]
            pub fn nrwten(&self) -> NrwtenR {
                NrwtenR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Extended mode enable"]
            #[inline(always)]
            pub fn exmoden(&self) -> ExmodenR {
                ExmodenR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Asynchronous wait"]
            #[inline(always)]
            pub fn asyncwait(&self) -> AsyncwaitR {
                AsyncwaitR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bits 16:18 - CRAM page size"]
            #[inline(always)]
            pub fn cps(&self) -> CpsR {
                CpsR::new(((self.bits >> 16) & 7) as u8)
            }
            #[doc = "Bit 19 - Synchronous write"]
            #[inline(always)]
            pub fn syncwr(&self) -> SyncwrR {
                SyncwrR::new(((self.bits >> 19) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - NOR bank enable"]
            #[inline(always)]
            #[must_use]
            pub fn nrbken(&mut self) -> NrbkenW<Snctl2Spec> {
                NrbkenW::new(self, 0)
            }
            #[doc = "Bit 1 - NOR bank memory address/data multiplexing"]
            #[inline(always)]
            #[must_use]
            pub fn nrmux(&mut self) -> NrmuxW<Snctl2Spec> {
                NrmuxW::new(self, 1)
            }
            #[doc = "Bits 2:3 - NOR bank memory type"]
            #[inline(always)]
            #[must_use]
            pub fn nrtp(&mut self) -> NrtpW<Snctl2Spec> {
                NrtpW::new(self, 2)
            }
            #[doc = "Bits 4:5 - NOR bank memory data bus width"]
            #[inline(always)]
            #[must_use]
            pub fn nrw(&mut self) -> NrwW<Snctl2Spec> {
                NrwW::new(self, 4)
            }
            #[doc = "Bit 6 - NOR Flash access enable"]
            #[inline(always)]
            #[must_use]
            pub fn nren(&mut self) -> NrenW<Snctl2Spec> {
                NrenW::new(self, 6)
            }
            #[doc = "Bit 8 - Synchronous burst enable"]
            #[inline(always)]
            #[must_use]
            pub fn sbrsten(&mut self) -> SbrstenW<Snctl2Spec> {
                SbrstenW::new(self, 8)
            }
            #[doc = "Bit 9 - NWAIT signal polarity"]
            #[inline(always)]
            #[must_use]
            pub fn nrwtpol(&mut self) -> NrwtpolW<Snctl2Spec> {
                NrwtpolW::new(self, 9)
            }
            #[doc = "Bit 10 - Wrapped burst mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn wrapen(&mut self) -> WrapenW<Snctl2Spec> {
                WrapenW::new(self, 10)
            }
            #[doc = "Bit 11 - NWAIT signal configuration, only work in synchronous mode"]
            #[inline(always)]
            #[must_use]
            pub fn nrwtcfg(&mut self) -> NrwtcfgW<Snctl2Spec> {
                NrwtcfgW::new(self, 11)
            }
            #[doc = "Bit 12 - Write enable"]
            #[inline(always)]
            #[must_use]
            pub fn wren(&mut self) -> WrenW<Snctl2Spec> {
                WrenW::new(self, 12)
            }
            #[doc = "Bit 13 - NWAIT signal enable"]
            #[inline(always)]
            #[must_use]
            pub fn nrwten(&mut self) -> NrwtenW<Snctl2Spec> {
                NrwtenW::new(self, 13)
            }
            #[doc = "Bit 14 - Extended mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn exmoden(&mut self) -> ExmodenW<Snctl2Spec> {
                ExmodenW::new(self, 14)
            }
            #[doc = "Bit 15 - Asynchronous wait"]
            #[inline(always)]
            #[must_use]
            pub fn asyncwait(&mut self) -> AsyncwaitW<Snctl2Spec> {
                AsyncwaitW::new(self, 15)
            }
            #[doc = "Bits 16:18 - CRAM page size"]
            #[inline(always)]
            #[must_use]
            pub fn cps(&mut self) -> CpsW<Snctl2Spec> {
                CpsW::new(self, 16)
            }
            #[doc = "Bit 19 - Synchronous write"]
            #[inline(always)]
            #[must_use]
            pub fn syncwr(&mut self) -> SyncwrW<Snctl2Spec> {
                SyncwrW::new(self, 19)
            }
        }
        #[doc = "SRAM/NOR flash control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`snctl2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snctl2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Snctl2Spec;
        impl crate::RegisterSpec for Snctl2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`snctl2::R`](R) reader structure"]
        impl crate::Readable for Snctl2Spec {}
        #[doc = "`write(|w| ..)` method takes [`snctl2::W`](W) writer structure"]
        impl crate::Writable for Snctl2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SNCTL2 to value 0x30d2"]
        impl crate::Resettable for Snctl2Spec {
            const RESET_VALUE: u32 = 0x30d2;
        }
    }
    #[doc = "SNTCFG2 (rw) register accessor: SRAM/NOR flash timing configuration register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`sntcfg2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sntcfg2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sntcfg2`]
module"]
    #[doc(alias = "SNTCFG2")]
    pub type Sntcfg2 = crate::Reg<sntcfg2::Sntcfg2Spec>;
    #[doc = "SRAM/NOR flash timing configuration register 2"]
    pub mod sntcfg2 {
        #[doc = "Register `SNTCFG2` reader"]
        pub type R = crate::R<Sntcfg2Spec>;
        #[doc = "Register `SNTCFG2` writer"]
        pub type W = crate::W<Sntcfg2Spec>;
        #[doc = "Field `ASET` reader - Address setup time"]
        pub type AsetR = crate::FieldReader;
        #[doc = "Field `ASET` writer - Address setup time"]
        pub type AsetW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `AHLD` reader - Address hold time"]
        pub type AhldR = crate::FieldReader;
        #[doc = "Field `AHLD` writer - Address hold time"]
        pub type AhldW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DSET` reader - Data setup time"]
        pub type DsetR = crate::FieldReader;
        #[doc = "Field `DSET` writer - Data setup time"]
        pub type DsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `BUSLAT` reader - Bus latency"]
        pub type BuslatR = crate::FieldReader;
        #[doc = "Field `BUSLAT` writer - Bus latency"]
        pub type BuslatW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `CKDIV` reader - Synchronous clock divide ratio"]
        pub type CkdivR = crate::FieldReader;
        #[doc = "Field `CKDIV` writer - Synchronous clock divide ratio"]
        pub type CkdivW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DLAT` reader - Data latency for NOR Flash"]
        pub type DlatR = crate::FieldReader;
        #[doc = "Field `DLAT` writer - Data latency for NOR Flash"]
        pub type DlatW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `ASYNCMOD` reader - Asynchronous access mode"]
        pub type AsyncmodR = crate::FieldReader;
        #[doc = "Field `ASYNCMOD` writer - Asynchronous access mode"]
        pub type AsyncmodW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            pub fn aset(&self) -> AsetR {
                AsetR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            pub fn ahld(&self) -> AhldR {
                AhldR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            pub fn dset(&self) -> DsetR {
                DsetR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:19 - Bus latency"]
            #[inline(always)]
            pub fn buslat(&self) -> BuslatR {
                BuslatR::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            pub fn ckdiv(&self) -> CkdivR {
                CkdivR::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Data latency for NOR Flash"]
            #[inline(always)]
            pub fn dlat(&self) -> DlatR {
                DlatR::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            pub fn asyncmod(&self) -> AsyncmodR {
                AsyncmodR::new(((self.bits >> 28) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            #[must_use]
            pub fn aset(&mut self) -> AsetW<Sntcfg2Spec> {
                AsetW::new(self, 0)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            #[must_use]
            pub fn ahld(&mut self) -> AhldW<Sntcfg2Spec> {
                AhldW::new(self, 4)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            #[must_use]
            pub fn dset(&mut self) -> DsetW<Sntcfg2Spec> {
                DsetW::new(self, 8)
            }
            #[doc = "Bits 16:19 - Bus latency"]
            #[inline(always)]
            #[must_use]
            pub fn buslat(&mut self) -> BuslatW<Sntcfg2Spec> {
                BuslatW::new(self, 16)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            #[must_use]
            pub fn ckdiv(&mut self) -> CkdivW<Sntcfg2Spec> {
                CkdivW::new(self, 20)
            }
            #[doc = "Bits 24:27 - Data latency for NOR Flash"]
            #[inline(always)]
            #[must_use]
            pub fn dlat(&mut self) -> DlatW<Sntcfg2Spec> {
                DlatW::new(self, 24)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            #[must_use]
            pub fn asyncmod(&mut self) -> AsyncmodW<Sntcfg2Spec> {
                AsyncmodW::new(self, 28)
            }
        }
        #[doc = "SRAM/NOR flash timing configuration register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`sntcfg2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sntcfg2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Sntcfg2Spec;
        impl crate::RegisterSpec for Sntcfg2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sntcfg2::R`](R) reader structure"]
        impl crate::Readable for Sntcfg2Spec {}
        #[doc = "`write(|w| ..)` method takes [`sntcfg2::W`](W) writer structure"]
        impl crate::Writable for Sntcfg2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SNTCFG2 to value 0x0fff_ffff"]
        impl crate::Resettable for Sntcfg2Spec {
            const RESET_VALUE: u32 = 0x0fff_ffff;
        }
    }
    #[doc = "SNCTL3 (rw) register accessor: SRAM/NOR flash control register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`snctl3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snctl3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@snctl3`]
module"]
    #[doc(alias = "SNCTL3")]
    pub type Snctl3 = crate::Reg<snctl3::Snctl3Spec>;
    #[doc = "SRAM/NOR flash control register 3"]
    pub mod snctl3 {
        #[doc = "Register `SNCTL3` reader"]
        pub type R = crate::R<Snctl3Spec>;
        #[doc = "Register `SNCTL3` writer"]
        pub type W = crate::W<Snctl3Spec>;
        #[doc = "Field `NRBKEN` reader - NOR bank enable"]
        pub type NrbkenR = crate::BitReader;
        #[doc = "Field `NRBKEN` writer - NOR bank enable"]
        pub type NrbkenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRMUX` reader - NOR bank memory address/data multiplexing"]
        pub type NrmuxR = crate::BitReader;
        #[doc = "Field `NRMUX` writer - NOR bank memory address/data multiplexing"]
        pub type NrmuxW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRTP` reader - NOR bank memory type"]
        pub type NrtpR = crate::FieldReader;
        #[doc = "Field `NRTP` writer - NOR bank memory type"]
        pub type NrtpW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `NRW` reader - NOR bank memory data bus width"]
        pub type NrwR = crate::FieldReader;
        #[doc = "Field `NRW` writer - NOR bank memory data bus width"]
        pub type NrwW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `NREN` reader - NOR Flash access enable"]
        pub type NrenR = crate::BitReader;
        #[doc = "Field `NREN` writer - NOR Flash access enable"]
        pub type NrenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SBRSTEN` reader - Synchronous burst enable"]
        pub type SbrstenR = crate::BitReader;
        #[doc = "Field `SBRSTEN` writer - Synchronous burst enable"]
        pub type SbrstenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRWTPOL` reader - NWAIT signal polarity"]
        pub type NrwtpolR = crate::BitReader;
        #[doc = "Field `NRWTPOL` writer - NWAIT signal polarity"]
        pub type NrwtpolW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WRAPEN` reader - Wrapped burst mode enable"]
        pub type WrapenR = crate::BitReader;
        #[doc = "Field `WRAPEN` writer - Wrapped burst mode enable"]
        pub type WrapenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRWTCFG` reader - NWAIT signal configuration, only work in synchronous mode"]
        pub type NrwtcfgR = crate::BitReader;
        #[doc = "Field `NRWTCFG` writer - NWAIT signal configuration, only work in synchronous mode"]
        pub type NrwtcfgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WREN` reader - Write enable"]
        pub type WrenR = crate::BitReader;
        #[doc = "Field `WREN` writer - Write enable"]
        pub type WrenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NRWTEN` reader - NWAIT signal enable"]
        pub type NrwtenR = crate::BitReader;
        #[doc = "Field `NRWTEN` writer - NWAIT signal enable"]
        pub type NrwtenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EXMODEN` reader - Extended mode enable"]
        pub type ExmodenR = crate::BitReader;
        #[doc = "Field `EXMODEN` writer - Extended mode enable"]
        pub type ExmodenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ASYNCWAIT` reader - Asynchronous wait"]
        pub type AsyncwaitR = crate::BitReader;
        #[doc = "Field `ASYNCWAIT` writer - Asynchronous wait"]
        pub type AsyncwaitW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CPS` reader - CRAM page size"]
        pub type CpsR = crate::FieldReader;
        #[doc = "Field `CPS` writer - CRAM page size"]
        pub type CpsW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SYNCWR` reader - Synchronous write"]
        pub type SyncwrR = crate::BitReader;
        #[doc = "Field `SYNCWR` writer - Synchronous write"]
        pub type SyncwrW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - NOR bank enable"]
            #[inline(always)]
            pub fn nrbken(&self) -> NrbkenR {
                NrbkenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - NOR bank memory address/data multiplexing"]
            #[inline(always)]
            pub fn nrmux(&self) -> NrmuxR {
                NrmuxR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bits 2:3 - NOR bank memory type"]
            #[inline(always)]
            pub fn nrtp(&self) -> NrtpR {
                NrtpR::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:5 - NOR bank memory data bus width"]
            #[inline(always)]
            pub fn nrw(&self) -> NrwR {
                NrwR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - NOR Flash access enable"]
            #[inline(always)]
            pub fn nren(&self) -> NrenR {
                NrenR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 8 - Synchronous burst enable"]
            #[inline(always)]
            pub fn sbrsten(&self) -> SbrstenR {
                SbrstenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - NWAIT signal polarity"]
            #[inline(always)]
            pub fn nrwtpol(&self) -> NrwtpolR {
                NrwtpolR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Wrapped burst mode enable"]
            #[inline(always)]
            pub fn wrapen(&self) -> WrapenR {
                WrapenR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - NWAIT signal configuration, only work in synchronous mode"]
            #[inline(always)]
            pub fn nrwtcfg(&self) -> NrwtcfgR {
                NrwtcfgR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Write enable"]
            #[inline(always)]
            pub fn wren(&self) -> WrenR {
                WrenR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - NWAIT signal enable"]
            #[inline(always)]
            pub fn nrwten(&self) -> NrwtenR {
                NrwtenR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Extended mode enable"]
            #[inline(always)]
            pub fn exmoden(&self) -> ExmodenR {
                ExmodenR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Asynchronous wait"]
            #[inline(always)]
            pub fn asyncwait(&self) -> AsyncwaitR {
                AsyncwaitR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bits 16:18 - CRAM page size"]
            #[inline(always)]
            pub fn cps(&self) -> CpsR {
                CpsR::new(((self.bits >> 16) & 7) as u8)
            }
            #[doc = "Bit 19 - Synchronous write"]
            #[inline(always)]
            pub fn syncwr(&self) -> SyncwrR {
                SyncwrR::new(((self.bits >> 19) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - NOR bank enable"]
            #[inline(always)]
            #[must_use]
            pub fn nrbken(&mut self) -> NrbkenW<Snctl3Spec> {
                NrbkenW::new(self, 0)
            }
            #[doc = "Bit 1 - NOR bank memory address/data multiplexing"]
            #[inline(always)]
            #[must_use]
            pub fn nrmux(&mut self) -> NrmuxW<Snctl3Spec> {
                NrmuxW::new(self, 1)
            }
            #[doc = "Bits 2:3 - NOR bank memory type"]
            #[inline(always)]
            #[must_use]
            pub fn nrtp(&mut self) -> NrtpW<Snctl3Spec> {
                NrtpW::new(self, 2)
            }
            #[doc = "Bits 4:5 - NOR bank memory data bus width"]
            #[inline(always)]
            #[must_use]
            pub fn nrw(&mut self) -> NrwW<Snctl3Spec> {
                NrwW::new(self, 4)
            }
            #[doc = "Bit 6 - NOR Flash access enable"]
            #[inline(always)]
            #[must_use]
            pub fn nren(&mut self) -> NrenW<Snctl3Spec> {
                NrenW::new(self, 6)
            }
            #[doc = "Bit 8 - Synchronous burst enable"]
            #[inline(always)]
            #[must_use]
            pub fn sbrsten(&mut self) -> SbrstenW<Snctl3Spec> {
                SbrstenW::new(self, 8)
            }
            #[doc = "Bit 9 - NWAIT signal polarity"]
            #[inline(always)]
            #[must_use]
            pub fn nrwtpol(&mut self) -> NrwtpolW<Snctl3Spec> {
                NrwtpolW::new(self, 9)
            }
            #[doc = "Bit 10 - Wrapped burst mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn wrapen(&mut self) -> WrapenW<Snctl3Spec> {
                WrapenW::new(self, 10)
            }
            #[doc = "Bit 11 - NWAIT signal configuration, only work in synchronous mode"]
            #[inline(always)]
            #[must_use]
            pub fn nrwtcfg(&mut self) -> NrwtcfgW<Snctl3Spec> {
                NrwtcfgW::new(self, 11)
            }
            #[doc = "Bit 12 - Write enable"]
            #[inline(always)]
            #[must_use]
            pub fn wren(&mut self) -> WrenW<Snctl3Spec> {
                WrenW::new(self, 12)
            }
            #[doc = "Bit 13 - NWAIT signal enable"]
            #[inline(always)]
            #[must_use]
            pub fn nrwten(&mut self) -> NrwtenW<Snctl3Spec> {
                NrwtenW::new(self, 13)
            }
            #[doc = "Bit 14 - Extended mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn exmoden(&mut self) -> ExmodenW<Snctl3Spec> {
                ExmodenW::new(self, 14)
            }
            #[doc = "Bit 15 - Asynchronous wait"]
            #[inline(always)]
            #[must_use]
            pub fn asyncwait(&mut self) -> AsyncwaitW<Snctl3Spec> {
                AsyncwaitW::new(self, 15)
            }
            #[doc = "Bits 16:18 - CRAM page size"]
            #[inline(always)]
            #[must_use]
            pub fn cps(&mut self) -> CpsW<Snctl3Spec> {
                CpsW::new(self, 16)
            }
            #[doc = "Bit 19 - Synchronous write"]
            #[inline(always)]
            #[must_use]
            pub fn syncwr(&mut self) -> SyncwrW<Snctl3Spec> {
                SyncwrW::new(self, 19)
            }
        }
        #[doc = "SRAM/NOR flash control register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`snctl3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snctl3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Snctl3Spec;
        impl crate::RegisterSpec for Snctl3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`snctl3::R`](R) reader structure"]
        impl crate::Readable for Snctl3Spec {}
        #[doc = "`write(|w| ..)` method takes [`snctl3::W`](W) writer structure"]
        impl crate::Writable for Snctl3Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SNCTL3 to value 0x30d2"]
        impl crate::Resettable for Snctl3Spec {
            const RESET_VALUE: u32 = 0x30d2;
        }
    }
    #[doc = "SNTCFG3 (rw) register accessor: SRAM/NOR flash timing configuration register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`sntcfg3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sntcfg3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@sntcfg3`]
module"]
    #[doc(alias = "SNTCFG3")]
    pub type Sntcfg3 = crate::Reg<sntcfg3::Sntcfg3Spec>;
    #[doc = "SRAM/NOR flash timing configuration register 3"]
    pub mod sntcfg3 {
        #[doc = "Register `SNTCFG3` reader"]
        pub type R = crate::R<Sntcfg3Spec>;
        #[doc = "Register `SNTCFG3` writer"]
        pub type W = crate::W<Sntcfg3Spec>;
        #[doc = "Field `ASET` reader - Address setup time"]
        pub type AsetR = crate::FieldReader;
        #[doc = "Field `ASET` writer - Address setup time"]
        pub type AsetW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `AHLD` reader - Address hold time"]
        pub type AhldR = crate::FieldReader;
        #[doc = "Field `AHLD` writer - Address hold time"]
        pub type AhldW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DSET` reader - Data setup time"]
        pub type DsetR = crate::FieldReader;
        #[doc = "Field `DSET` writer - Data setup time"]
        pub type DsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `BUSLAT` reader - Bus latency"]
        pub type BuslatR = crate::FieldReader;
        #[doc = "Field `BUSLAT` writer - Bus latency"]
        pub type BuslatW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `CKDIV` reader - Synchronous clock divide ratio"]
        pub type CkdivR = crate::FieldReader;
        #[doc = "Field `CKDIV` writer - Synchronous clock divide ratio"]
        pub type CkdivW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DLAT` reader - Data latency for NOR Flash"]
        pub type DlatR = crate::FieldReader;
        #[doc = "Field `DLAT` writer - Data latency for NOR Flash"]
        pub type DlatW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `ASYNCMOD` reader - Asynchronous access mode"]
        pub type AsyncmodR = crate::FieldReader;
        #[doc = "Field `ASYNCMOD` writer - Asynchronous access mode"]
        pub type AsyncmodW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            pub fn aset(&self) -> AsetR {
                AsetR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            pub fn ahld(&self) -> AhldR {
                AhldR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            pub fn dset(&self) -> DsetR {
                DsetR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:19 - Bus latency"]
            #[inline(always)]
            pub fn buslat(&self) -> BuslatR {
                BuslatR::new(((self.bits >> 16) & 0x0f) as u8)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            pub fn ckdiv(&self) -> CkdivR {
                CkdivR::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Data latency for NOR Flash"]
            #[inline(always)]
            pub fn dlat(&self) -> DlatR {
                DlatR::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            pub fn asyncmod(&self) -> AsyncmodR {
                AsyncmodR::new(((self.bits >> 28) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            #[must_use]
            pub fn aset(&mut self) -> AsetW<Sntcfg3Spec> {
                AsetW::new(self, 0)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            #[must_use]
            pub fn ahld(&mut self) -> AhldW<Sntcfg3Spec> {
                AhldW::new(self, 4)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            #[must_use]
            pub fn dset(&mut self) -> DsetW<Sntcfg3Spec> {
                DsetW::new(self, 8)
            }
            #[doc = "Bits 16:19 - Bus latency"]
            #[inline(always)]
            #[must_use]
            pub fn buslat(&mut self) -> BuslatW<Sntcfg3Spec> {
                BuslatW::new(self, 16)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            #[must_use]
            pub fn ckdiv(&mut self) -> CkdivW<Sntcfg3Spec> {
                CkdivW::new(self, 20)
            }
            #[doc = "Bits 24:27 - Data latency for NOR Flash"]
            #[inline(always)]
            #[must_use]
            pub fn dlat(&mut self) -> DlatW<Sntcfg3Spec> {
                DlatW::new(self, 24)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            #[must_use]
            pub fn asyncmod(&mut self) -> AsyncmodW<Sntcfg3Spec> {
                AsyncmodW::new(self, 28)
            }
        }
        #[doc = "SRAM/NOR flash timing configuration register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`sntcfg3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`sntcfg3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Sntcfg3Spec;
        impl crate::RegisterSpec for Sntcfg3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`sntcfg3::R`](R) reader structure"]
        impl crate::Readable for Sntcfg3Spec {}
        #[doc = "`write(|w| ..)` method takes [`sntcfg3::W`](W) writer structure"]
        impl crate::Writable for Sntcfg3Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SNTCFG3 to value 0x0fff_ffff"]
        impl crate::Resettable for Sntcfg3Spec {
            const RESET_VALUE: u32 = 0x0fff_ffff;
        }
    }
    #[doc = "SNWTCFG0 (rw) register accessor: SRAM/NOR flash write timing configuration register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`snwtcfg0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snwtcfg0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@snwtcfg0`]
module"]
    #[doc(alias = "SNWTCFG0")]
    pub type Snwtcfg0 = crate::Reg<snwtcfg0::Snwtcfg0Spec>;
    #[doc = "SRAM/NOR flash write timing configuration register 0"]
    pub mod snwtcfg0 {
        #[doc = "Register `SNWTCFG0` reader"]
        pub type R = crate::R<Snwtcfg0Spec>;
        #[doc = "Register `SNWTCFG0` writer"]
        pub type W = crate::W<Snwtcfg0Spec>;
        #[doc = "Field `WASET` reader - Address setup time"]
        pub type WasetR = crate::FieldReader;
        #[doc = "Field `WASET` writer - Address setup time"]
        pub type WasetW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `WAHLD` reader - Address hold time"]
        pub type WahldR = crate::FieldReader;
        #[doc = "Field `WAHLD` writer - Address hold time"]
        pub type WahldW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `WDSET` reader - Data setup time"]
        pub type WdsetR = crate::FieldReader;
        #[doc = "Field `WDSET` writer - Data setup time"]
        pub type WdsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `CKDIV` reader - Synchronous clock divide ratio"]
        pub type CkdivR = crate::FieldReader;
        #[doc = "Field `CKDIV` writer - Synchronous clock divide ratio"]
        pub type CkdivW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DLAT` reader - Data latency for NOR flash"]
        pub type DlatR = crate::FieldReader;
        #[doc = "Field `DLAT` writer - Data latency for NOR flash"]
        pub type DlatW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `WASYNCMOD` reader - Asynchronous access mode"]
        pub type WasyncmodR = crate::FieldReader;
        #[doc = "Field `WASYNCMOD` writer - Asynchronous access mode"]
        pub type WasyncmodW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            pub fn waset(&self) -> WasetR {
                WasetR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            pub fn wahld(&self) -> WahldR {
                WahldR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            pub fn wdset(&self) -> WdsetR {
                WdsetR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            pub fn ckdiv(&self) -> CkdivR {
                CkdivR::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Data latency for NOR flash"]
            #[inline(always)]
            pub fn dlat(&self) -> DlatR {
                DlatR::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            pub fn wasyncmod(&self) -> WasyncmodR {
                WasyncmodR::new(((self.bits >> 28) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            #[must_use]
            pub fn waset(&mut self) -> WasetW<Snwtcfg0Spec> {
                WasetW::new(self, 0)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            #[must_use]
            pub fn wahld(&mut self) -> WahldW<Snwtcfg0Spec> {
                WahldW::new(self, 4)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            #[must_use]
            pub fn wdset(&mut self) -> WdsetW<Snwtcfg0Spec> {
                WdsetW::new(self, 8)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            #[must_use]
            pub fn ckdiv(&mut self) -> CkdivW<Snwtcfg0Spec> {
                CkdivW::new(self, 20)
            }
            #[doc = "Bits 24:27 - Data latency for NOR flash"]
            #[inline(always)]
            #[must_use]
            pub fn dlat(&mut self) -> DlatW<Snwtcfg0Spec> {
                DlatW::new(self, 24)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            #[must_use]
            pub fn wasyncmod(&mut self) -> WasyncmodW<Snwtcfg0Spec> {
                WasyncmodW::new(self, 28)
            }
        }
        #[doc = "SRAM/NOR flash write timing configuration register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`snwtcfg0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snwtcfg0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Snwtcfg0Spec;
        impl crate::RegisterSpec for Snwtcfg0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`snwtcfg0::R`](R) reader structure"]
        impl crate::Readable for Snwtcfg0Spec {}
        #[doc = "`write(|w| ..)` method takes [`snwtcfg0::W`](W) writer structure"]
        impl crate::Writable for Snwtcfg0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SNWTCFG0 to value 0x0fff_ffff"]
        impl crate::Resettable for Snwtcfg0Spec {
            const RESET_VALUE: u32 = 0x0fff_ffff;
        }
    }
    #[doc = "SNWTCFG1 (rw) register accessor: SRAM/NOR flash write timing configuration register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`snwtcfg1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snwtcfg1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@snwtcfg1`]
module"]
    #[doc(alias = "SNWTCFG1")]
    pub type Snwtcfg1 = crate::Reg<snwtcfg1::Snwtcfg1Spec>;
    #[doc = "SRAM/NOR flash write timing configuration register 1"]
    pub mod snwtcfg1 {
        #[doc = "Register `SNWTCFG1` reader"]
        pub type R = crate::R<Snwtcfg1Spec>;
        #[doc = "Register `SNWTCFG1` writer"]
        pub type W = crate::W<Snwtcfg1Spec>;
        #[doc = "Field `WASET` reader - Address setup time"]
        pub type WasetR = crate::FieldReader;
        #[doc = "Field `WASET` writer - Address setup time"]
        pub type WasetW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `WAHLD` reader - Address hold time"]
        pub type WahldR = crate::FieldReader;
        #[doc = "Field `WAHLD` writer - Address hold time"]
        pub type WahldW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `WDSET` reader - Data setup time"]
        pub type WdsetR = crate::FieldReader;
        #[doc = "Field `WDSET` writer - Data setup time"]
        pub type WdsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `CKDIV` reader - Synchronous clock divide ratio"]
        pub type CkdivR = crate::FieldReader;
        #[doc = "Field `CKDIV` writer - Synchronous clock divide ratio"]
        pub type CkdivW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DLAT` reader - Data latency for NOR flash"]
        pub type DlatR = crate::FieldReader;
        #[doc = "Field `DLAT` writer - Data latency for NOR flash"]
        pub type DlatW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `WASYNCMOD` reader - Asynchronous access mode"]
        pub type WasyncmodR = crate::FieldReader;
        #[doc = "Field `WASYNCMOD` writer - Asynchronous access mode"]
        pub type WasyncmodW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            pub fn waset(&self) -> WasetR {
                WasetR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            pub fn wahld(&self) -> WahldR {
                WahldR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            pub fn wdset(&self) -> WdsetR {
                WdsetR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            pub fn ckdiv(&self) -> CkdivR {
                CkdivR::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Data latency for NOR flash"]
            #[inline(always)]
            pub fn dlat(&self) -> DlatR {
                DlatR::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            pub fn wasyncmod(&self) -> WasyncmodR {
                WasyncmodR::new(((self.bits >> 28) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            #[must_use]
            pub fn waset(&mut self) -> WasetW<Snwtcfg1Spec> {
                WasetW::new(self, 0)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            #[must_use]
            pub fn wahld(&mut self) -> WahldW<Snwtcfg1Spec> {
                WahldW::new(self, 4)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            #[must_use]
            pub fn wdset(&mut self) -> WdsetW<Snwtcfg1Spec> {
                WdsetW::new(self, 8)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            #[must_use]
            pub fn ckdiv(&mut self) -> CkdivW<Snwtcfg1Spec> {
                CkdivW::new(self, 20)
            }
            #[doc = "Bits 24:27 - Data latency for NOR flash"]
            #[inline(always)]
            #[must_use]
            pub fn dlat(&mut self) -> DlatW<Snwtcfg1Spec> {
                DlatW::new(self, 24)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            #[must_use]
            pub fn wasyncmod(&mut self) -> WasyncmodW<Snwtcfg1Spec> {
                WasyncmodW::new(self, 28)
            }
        }
        #[doc = "SRAM/NOR flash write timing configuration register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`snwtcfg1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snwtcfg1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Snwtcfg1Spec;
        impl crate::RegisterSpec for Snwtcfg1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`snwtcfg1::R`](R) reader structure"]
        impl crate::Readable for Snwtcfg1Spec {}
        #[doc = "`write(|w| ..)` method takes [`snwtcfg1::W`](W) writer structure"]
        impl crate::Writable for Snwtcfg1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SNWTCFG1 to value 0x0fff_ffff"]
        impl crate::Resettable for Snwtcfg1Spec {
            const RESET_VALUE: u32 = 0x0fff_ffff;
        }
    }
    #[doc = "SNWTCFG2 (rw) register accessor: SRAM/NOR flash write timing configuration register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`snwtcfg2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snwtcfg2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@snwtcfg2`]
module"]
    #[doc(alias = "SNWTCFG2")]
    pub type Snwtcfg2 = crate::Reg<snwtcfg2::Snwtcfg2Spec>;
    #[doc = "SRAM/NOR flash write timing configuration register 2"]
    pub mod snwtcfg2 {
        #[doc = "Register `SNWTCFG2` reader"]
        pub type R = crate::R<Snwtcfg2Spec>;
        #[doc = "Register `SNWTCFG2` writer"]
        pub type W = crate::W<Snwtcfg2Spec>;
        #[doc = "Field `WASET` reader - Address setup time"]
        pub type WasetR = crate::FieldReader;
        #[doc = "Field `WASET` writer - Address setup time"]
        pub type WasetW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `WAHLD` reader - Address hold time"]
        pub type WahldR = crate::FieldReader;
        #[doc = "Field `WAHLD` writer - Address hold time"]
        pub type WahldW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `WDSET` reader - Data setup time"]
        pub type WdsetR = crate::FieldReader;
        #[doc = "Field `WDSET` writer - Data setup time"]
        pub type WdsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `CKDIV` reader - Synchronous clock divide ratio"]
        pub type CkdivR = crate::FieldReader;
        #[doc = "Field `CKDIV` writer - Synchronous clock divide ratio"]
        pub type CkdivW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DLAT` reader - Data latency for NOR flash"]
        pub type DlatR = crate::FieldReader;
        #[doc = "Field `DLAT` writer - Data latency for NOR flash"]
        pub type DlatW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `WASYNCMOD` reader - Asynchronous access mode"]
        pub type WasyncmodR = crate::FieldReader;
        #[doc = "Field `WASYNCMOD` writer - Asynchronous access mode"]
        pub type WasyncmodW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            pub fn waset(&self) -> WasetR {
                WasetR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            pub fn wahld(&self) -> WahldR {
                WahldR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            pub fn wdset(&self) -> WdsetR {
                WdsetR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            pub fn ckdiv(&self) -> CkdivR {
                CkdivR::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Data latency for NOR flash"]
            #[inline(always)]
            pub fn dlat(&self) -> DlatR {
                DlatR::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            pub fn wasyncmod(&self) -> WasyncmodR {
                WasyncmodR::new(((self.bits >> 28) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            #[must_use]
            pub fn waset(&mut self) -> WasetW<Snwtcfg2Spec> {
                WasetW::new(self, 0)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            #[must_use]
            pub fn wahld(&mut self) -> WahldW<Snwtcfg2Spec> {
                WahldW::new(self, 4)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            #[must_use]
            pub fn wdset(&mut self) -> WdsetW<Snwtcfg2Spec> {
                WdsetW::new(self, 8)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            #[must_use]
            pub fn ckdiv(&mut self) -> CkdivW<Snwtcfg2Spec> {
                CkdivW::new(self, 20)
            }
            #[doc = "Bits 24:27 - Data latency for NOR flash"]
            #[inline(always)]
            #[must_use]
            pub fn dlat(&mut self) -> DlatW<Snwtcfg2Spec> {
                DlatW::new(self, 24)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            #[must_use]
            pub fn wasyncmod(&mut self) -> WasyncmodW<Snwtcfg2Spec> {
                WasyncmodW::new(self, 28)
            }
        }
        #[doc = "SRAM/NOR flash write timing configuration register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`snwtcfg2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snwtcfg2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Snwtcfg2Spec;
        impl crate::RegisterSpec for Snwtcfg2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`snwtcfg2::R`](R) reader structure"]
        impl crate::Readable for Snwtcfg2Spec {}
        #[doc = "`write(|w| ..)` method takes [`snwtcfg2::W`](W) writer structure"]
        impl crate::Writable for Snwtcfg2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SNWTCFG2 to value 0x0fff_ffff"]
        impl crate::Resettable for Snwtcfg2Spec {
            const RESET_VALUE: u32 = 0x0fff_ffff;
        }
    }
    #[doc = "SNWTCFG3 (rw) register accessor: SRAM/NOR flash write timing configuration register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`snwtcfg3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snwtcfg3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@snwtcfg3`]
module"]
    #[doc(alias = "SNWTCFG3")]
    pub type Snwtcfg3 = crate::Reg<snwtcfg3::Snwtcfg3Spec>;
    #[doc = "SRAM/NOR flash write timing configuration register 3"]
    pub mod snwtcfg3 {
        #[doc = "Register `SNWTCFG3` reader"]
        pub type R = crate::R<Snwtcfg3Spec>;
        #[doc = "Register `SNWTCFG3` writer"]
        pub type W = crate::W<Snwtcfg3Spec>;
        #[doc = "Field `WASET` reader - Address setup time"]
        pub type WasetR = crate::FieldReader;
        #[doc = "Field `WASET` writer - Address setup time"]
        pub type WasetW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `WAHLD` reader - Address hold time"]
        pub type WahldR = crate::FieldReader;
        #[doc = "Field `WAHLD` writer - Address hold time"]
        pub type WahldW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `WDSET` reader - Data setup time"]
        pub type WdsetR = crate::FieldReader;
        #[doc = "Field `WDSET` writer - Data setup time"]
        pub type WdsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `CKDIV` reader - Synchronous clock divide ratio"]
        pub type CkdivR = crate::FieldReader;
        #[doc = "Field `CKDIV` writer - Synchronous clock divide ratio"]
        pub type CkdivW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `DLAT` reader - Data latency for NOR flash"]
        pub type DlatR = crate::FieldReader;
        #[doc = "Field `DLAT` writer - Data latency for NOR flash"]
        pub type DlatW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `WASYNCMOD` reader - Asynchronous access mode"]
        pub type WasyncmodR = crate::FieldReader;
        #[doc = "Field `WASYNCMOD` writer - Asynchronous access mode"]
        pub type WasyncmodW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            pub fn waset(&self) -> WasetR {
                WasetR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            pub fn wahld(&self) -> WahldR {
                WahldR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            pub fn wdset(&self) -> WdsetR {
                WdsetR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            pub fn ckdiv(&self) -> CkdivR {
                CkdivR::new(((self.bits >> 20) & 0x0f) as u8)
            }
            #[doc = "Bits 24:27 - Data latency for NOR flash"]
            #[inline(always)]
            pub fn dlat(&self) -> DlatR {
                DlatR::new(((self.bits >> 24) & 0x0f) as u8)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            pub fn wasyncmod(&self) -> WasyncmodR {
                WasyncmodR::new(((self.bits >> 28) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Address setup time"]
            #[inline(always)]
            #[must_use]
            pub fn waset(&mut self) -> WasetW<Snwtcfg3Spec> {
                WasetW::new(self, 0)
            }
            #[doc = "Bits 4:7 - Address hold time"]
            #[inline(always)]
            #[must_use]
            pub fn wahld(&mut self) -> WahldW<Snwtcfg3Spec> {
                WahldW::new(self, 4)
            }
            #[doc = "Bits 8:15 - Data setup time"]
            #[inline(always)]
            #[must_use]
            pub fn wdset(&mut self) -> WdsetW<Snwtcfg3Spec> {
                WdsetW::new(self, 8)
            }
            #[doc = "Bits 20:23 - Synchronous clock divide ratio"]
            #[inline(always)]
            #[must_use]
            pub fn ckdiv(&mut self) -> CkdivW<Snwtcfg3Spec> {
                CkdivW::new(self, 20)
            }
            #[doc = "Bits 24:27 - Data latency for NOR flash"]
            #[inline(always)]
            #[must_use]
            pub fn dlat(&mut self) -> DlatW<Snwtcfg3Spec> {
                DlatW::new(self, 24)
            }
            #[doc = "Bits 28:29 - Asynchronous access mode"]
            #[inline(always)]
            #[must_use]
            pub fn wasyncmod(&mut self) -> WasyncmodW<Snwtcfg3Spec> {
                WasyncmodW::new(self, 28)
            }
        }
        #[doc = "SRAM/NOR flash write timing configuration register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`snwtcfg3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`snwtcfg3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Snwtcfg3Spec;
        impl crate::RegisterSpec for Snwtcfg3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`snwtcfg3::R`](R) reader structure"]
        impl crate::Readable for Snwtcfg3Spec {}
        #[doc = "`write(|w| ..)` method takes [`snwtcfg3::W`](W) writer structure"]
        impl crate::Writable for Snwtcfg3Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SNWTCFG3 to value 0x0fff_ffff"]
        impl crate::Resettable for Snwtcfg3Spec {
            const RESET_VALUE: u32 = 0x0fff_ffff;
        }
    }
    #[doc = "NPCTL1 (rw) register accessor: NAND flash/PC card control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`npctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@npctl1`]
module"]
    #[doc(alias = "NPCTL1")]
    pub type Npctl1 = crate::Reg<npctl1::Npctl1Spec>;
    #[doc = "NAND flash/PC card control register 1"]
    pub mod npctl1 {
        #[doc = "Register `NPCTL1` reader"]
        pub type R = crate::R<Npctl1Spec>;
        #[doc = "Register `NPCTL1` writer"]
        pub type W = crate::W<Npctl1Spec>;
        #[doc = "Field `NDWTEN` reader - Wait feature enable"]
        pub type NdwtenR = crate::BitReader;
        #[doc = "Field `NDWTEN` writer - Wait feature enable"]
        pub type NdwtenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NDBKEN` reader - NAND bank enable"]
        pub type NdbkenR = crate::BitReader;
        #[doc = "Field `NDBKEN` writer - NAND bank enable"]
        pub type NdbkenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NDTP` reader - NAND bank memory type"]
        pub type NdtpR = crate::BitReader;
        #[doc = "Field `NDTP` writer - NAND bank memory type"]
        pub type NdtpW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NDW` reader - NAND bank memory data bus width"]
        pub type NdwR = crate::FieldReader;
        #[doc = "Field `NDW` writer - NAND bank memory data bus width"]
        pub type NdwW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `ECCEN` reader - ECC enable"]
        pub type EccenR = crate::BitReader;
        #[doc = "Field `ECCEN` writer - ECC enable"]
        pub type EccenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CTR` reader - CLE to RE delay"]
        pub type CtrR = crate::FieldReader;
        #[doc = "Field `CTR` writer - CLE to RE delay"]
        pub type CtrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `ATR` reader - ALE to RE delay"]
        pub type AtrR = crate::FieldReader;
        #[doc = "Field `ATR` writer - ALE to RE delay"]
        pub type AtrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `ECCSZ` reader - ECC size"]
        pub type EccszR = crate::FieldReader;
        #[doc = "Field `ECCSZ` writer - ECC size"]
        pub type EccszW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        impl R {
            #[doc = "Bit 1 - Wait feature enable"]
            #[inline(always)]
            pub fn ndwten(&self) -> NdwtenR {
                NdwtenR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - NAND bank enable"]
            #[inline(always)]
            pub fn ndbken(&self) -> NdbkenR {
                NdbkenR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - NAND bank memory type"]
            #[inline(always)]
            pub fn ndtp(&self) -> NdtpR {
                NdtpR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:5 - NAND bank memory data bus width"]
            #[inline(always)]
            pub fn ndw(&self) -> NdwR {
                NdwR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - ECC enable"]
            #[inline(always)]
            pub fn eccen(&self) -> EccenR {
                EccenR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bits 9:12 - CLE to RE delay"]
            #[inline(always)]
            pub fn ctr(&self) -> CtrR {
                CtrR::new(((self.bits >> 9) & 0x0f) as u8)
            }
            #[doc = "Bits 13:16 - ALE to RE delay"]
            #[inline(always)]
            pub fn atr(&self) -> AtrR {
                AtrR::new(((self.bits >> 13) & 0x0f) as u8)
            }
            #[doc = "Bits 17:19 - ECC size"]
            #[inline(always)]
            pub fn eccsz(&self) -> EccszR {
                EccszR::new(((self.bits >> 17) & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bit 1 - Wait feature enable"]
            #[inline(always)]
            #[must_use]
            pub fn ndwten(&mut self) -> NdwtenW<Npctl1Spec> {
                NdwtenW::new(self, 1)
            }
            #[doc = "Bit 2 - NAND bank enable"]
            #[inline(always)]
            #[must_use]
            pub fn ndbken(&mut self) -> NdbkenW<Npctl1Spec> {
                NdbkenW::new(self, 2)
            }
            #[doc = "Bit 3 - NAND bank memory type"]
            #[inline(always)]
            #[must_use]
            pub fn ndtp(&mut self) -> NdtpW<Npctl1Spec> {
                NdtpW::new(self, 3)
            }
            #[doc = "Bits 4:5 - NAND bank memory data bus width"]
            #[inline(always)]
            #[must_use]
            pub fn ndw(&mut self) -> NdwW<Npctl1Spec> {
                NdwW::new(self, 4)
            }
            #[doc = "Bit 6 - ECC enable"]
            #[inline(always)]
            #[must_use]
            pub fn eccen(&mut self) -> EccenW<Npctl1Spec> {
                EccenW::new(self, 6)
            }
            #[doc = "Bits 9:12 - CLE to RE delay"]
            #[inline(always)]
            #[must_use]
            pub fn ctr(&mut self) -> CtrW<Npctl1Spec> {
                CtrW::new(self, 9)
            }
            #[doc = "Bits 13:16 - ALE to RE delay"]
            #[inline(always)]
            #[must_use]
            pub fn atr(&mut self) -> AtrW<Npctl1Spec> {
                AtrW::new(self, 13)
            }
            #[doc = "Bits 17:19 - ECC size"]
            #[inline(always)]
            #[must_use]
            pub fn eccsz(&mut self) -> EccszW<Npctl1Spec> {
                EccszW::new(self, 17)
            }
        }
        #[doc = "NAND flash/PC card control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`npctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Npctl1Spec;
        impl crate::RegisterSpec for Npctl1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`npctl1::R`](R) reader structure"]
        impl crate::Readable for Npctl1Spec {}
        #[doc = "`write(|w| ..)` method takes [`npctl1::W`](W) writer structure"]
        impl crate::Writable for Npctl1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets NPCTL1 to value 0x18"]
        impl crate::Resettable for Npctl1Spec {
            const RESET_VALUE: u32 = 0x18;
        }
    }
    #[doc = "NPCTL2 (rw) register accessor: NAND flash/PC card control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`npctl2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npctl2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@npctl2`]
module"]
    #[doc(alias = "NPCTL2")]
    pub type Npctl2 = crate::Reg<npctl2::Npctl2Spec>;
    #[doc = "NAND flash/PC card control register 2"]
    pub mod npctl2 {
        #[doc = "Register `NPCTL2` reader"]
        pub type R = crate::R<Npctl2Spec>;
        #[doc = "Register `NPCTL2` writer"]
        pub type W = crate::W<Npctl2Spec>;
        #[doc = "Field `NDWTEN` reader - Wait feature enable"]
        pub type NdwtenR = crate::BitReader;
        #[doc = "Field `NDWTEN` writer - Wait feature enable"]
        pub type NdwtenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NDBKEN` reader - NAND bank enable"]
        pub type NdbkenR = crate::BitReader;
        #[doc = "Field `NDBKEN` writer - NAND bank enable"]
        pub type NdbkenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NDTP` reader - NAND bank memory type"]
        pub type NdtpR = crate::BitReader;
        #[doc = "Field `NDTP` writer - NAND bank memory type"]
        pub type NdtpW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NDW` reader - NAND bank memory data bus width"]
        pub type NdwR = crate::FieldReader;
        #[doc = "Field `NDW` writer - NAND bank memory data bus width"]
        pub type NdwW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `ECCEN` reader - ECC enable"]
        pub type EccenR = crate::BitReader;
        #[doc = "Field `ECCEN` writer - ECC enable"]
        pub type EccenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CTR` reader - CLE to RE delay"]
        pub type CtrR = crate::FieldReader;
        #[doc = "Field `CTR` writer - CLE to RE delay"]
        pub type CtrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `ATR` reader - ALE to RE delay"]
        pub type AtrR = crate::FieldReader;
        #[doc = "Field `ATR` writer - ALE to RE delay"]
        pub type AtrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `ECCSZ` reader - ECC size"]
        pub type EccszR = crate::FieldReader;
        #[doc = "Field `ECCSZ` writer - ECC size"]
        pub type EccszW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        impl R {
            #[doc = "Bit 1 - Wait feature enable"]
            #[inline(always)]
            pub fn ndwten(&self) -> NdwtenR {
                NdwtenR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - NAND bank enable"]
            #[inline(always)]
            pub fn ndbken(&self) -> NdbkenR {
                NdbkenR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - NAND bank memory type"]
            #[inline(always)]
            pub fn ndtp(&self) -> NdtpR {
                NdtpR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:5 - NAND bank memory data bus width"]
            #[inline(always)]
            pub fn ndw(&self) -> NdwR {
                NdwR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - ECC enable"]
            #[inline(always)]
            pub fn eccen(&self) -> EccenR {
                EccenR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bits 9:12 - CLE to RE delay"]
            #[inline(always)]
            pub fn ctr(&self) -> CtrR {
                CtrR::new(((self.bits >> 9) & 0x0f) as u8)
            }
            #[doc = "Bits 13:16 - ALE to RE delay"]
            #[inline(always)]
            pub fn atr(&self) -> AtrR {
                AtrR::new(((self.bits >> 13) & 0x0f) as u8)
            }
            #[doc = "Bits 17:19 - ECC size"]
            #[inline(always)]
            pub fn eccsz(&self) -> EccszR {
                EccszR::new(((self.bits >> 17) & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bit 1 - Wait feature enable"]
            #[inline(always)]
            #[must_use]
            pub fn ndwten(&mut self) -> NdwtenW<Npctl2Spec> {
                NdwtenW::new(self, 1)
            }
            #[doc = "Bit 2 - NAND bank enable"]
            #[inline(always)]
            #[must_use]
            pub fn ndbken(&mut self) -> NdbkenW<Npctl2Spec> {
                NdbkenW::new(self, 2)
            }
            #[doc = "Bit 3 - NAND bank memory type"]
            #[inline(always)]
            #[must_use]
            pub fn ndtp(&mut self) -> NdtpW<Npctl2Spec> {
                NdtpW::new(self, 3)
            }
            #[doc = "Bits 4:5 - NAND bank memory data bus width"]
            #[inline(always)]
            #[must_use]
            pub fn ndw(&mut self) -> NdwW<Npctl2Spec> {
                NdwW::new(self, 4)
            }
            #[doc = "Bit 6 - ECC enable"]
            #[inline(always)]
            #[must_use]
            pub fn eccen(&mut self) -> EccenW<Npctl2Spec> {
                EccenW::new(self, 6)
            }
            #[doc = "Bits 9:12 - CLE to RE delay"]
            #[inline(always)]
            #[must_use]
            pub fn ctr(&mut self) -> CtrW<Npctl2Spec> {
                CtrW::new(self, 9)
            }
            #[doc = "Bits 13:16 - ALE to RE delay"]
            #[inline(always)]
            #[must_use]
            pub fn atr(&mut self) -> AtrW<Npctl2Spec> {
                AtrW::new(self, 13)
            }
            #[doc = "Bits 17:19 - ECC size"]
            #[inline(always)]
            #[must_use]
            pub fn eccsz(&mut self) -> EccszW<Npctl2Spec> {
                EccszW::new(self, 17)
            }
        }
        #[doc = "NAND flash/PC card control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`npctl2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npctl2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Npctl2Spec;
        impl crate::RegisterSpec for Npctl2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`npctl2::R`](R) reader structure"]
        impl crate::Readable for Npctl2Spec {}
        #[doc = "`write(|w| ..)` method takes [`npctl2::W`](W) writer structure"]
        impl crate::Writable for Npctl2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets NPCTL2 to value 0x18"]
        impl crate::Resettable for Npctl2Spec {
            const RESET_VALUE: u32 = 0x18;
        }
    }
    #[doc = "NPCTL3 (rw) register accessor: NAND flash/PC card control register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`npctl3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npctl3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@npctl3`]
module"]
    #[doc(alias = "NPCTL3")]
    pub type Npctl3 = crate::Reg<npctl3::Npctl3Spec>;
    #[doc = "NAND flash/PC card control register 3"]
    pub mod npctl3 {
        #[doc = "Register `NPCTL3` reader"]
        pub type R = crate::R<Npctl3Spec>;
        #[doc = "Register `NPCTL3` writer"]
        pub type W = crate::W<Npctl3Spec>;
        #[doc = "Field `NDWTEN` reader - Wait feature enable"]
        pub type NdwtenR = crate::BitReader;
        #[doc = "Field `NDWTEN` writer - Wait feature enable"]
        pub type NdwtenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NDBKEN` reader - NAND bank enable"]
        pub type NdbkenR = crate::BitReader;
        #[doc = "Field `NDBKEN` writer - NAND bank enable"]
        pub type NdbkenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NDTP` reader - NAND bank memory type"]
        pub type NdtpR = crate::BitReader;
        #[doc = "Field `NDTP` writer - NAND bank memory type"]
        pub type NdtpW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NDW` reader - NAND bank memory data bus width"]
        pub type NdwR = crate::FieldReader;
        #[doc = "Field `NDW` writer - NAND bank memory data bus width"]
        pub type NdwW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `ECCEN` reader - ECC enable"]
        pub type EccenR = crate::BitReader;
        #[doc = "Field `ECCEN` writer - ECC enable"]
        pub type EccenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CTR` reader - CLE to RE delay"]
        pub type CtrR = crate::FieldReader;
        #[doc = "Field `CTR` writer - CLE to RE delay"]
        pub type CtrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `ATR` reader - ALE to RE delay"]
        pub type AtrR = crate::FieldReader;
        #[doc = "Field `ATR` writer - ALE to RE delay"]
        pub type AtrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `ECCSZ` reader - ECC size"]
        pub type EccszR = crate::FieldReader;
        #[doc = "Field `ECCSZ` writer - ECC size"]
        pub type EccszW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        impl R {
            #[doc = "Bit 1 - Wait feature enable"]
            #[inline(always)]
            pub fn ndwten(&self) -> NdwtenR {
                NdwtenR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - NAND bank enable"]
            #[inline(always)]
            pub fn ndbken(&self) -> NdbkenR {
                NdbkenR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - NAND bank memory type"]
            #[inline(always)]
            pub fn ndtp(&self) -> NdtpR {
                NdtpR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:5 - NAND bank memory data bus width"]
            #[inline(always)]
            pub fn ndw(&self) -> NdwR {
                NdwR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - ECC enable"]
            #[inline(always)]
            pub fn eccen(&self) -> EccenR {
                EccenR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bits 9:12 - CLE to RE delay"]
            #[inline(always)]
            pub fn ctr(&self) -> CtrR {
                CtrR::new(((self.bits >> 9) & 0x0f) as u8)
            }
            #[doc = "Bits 13:16 - ALE to RE delay"]
            #[inline(always)]
            pub fn atr(&self) -> AtrR {
                AtrR::new(((self.bits >> 13) & 0x0f) as u8)
            }
            #[doc = "Bits 17:19 - ECC size"]
            #[inline(always)]
            pub fn eccsz(&self) -> EccszR {
                EccszR::new(((self.bits >> 17) & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bit 1 - Wait feature enable"]
            #[inline(always)]
            #[must_use]
            pub fn ndwten(&mut self) -> NdwtenW<Npctl3Spec> {
                NdwtenW::new(self, 1)
            }
            #[doc = "Bit 2 - NAND bank enable"]
            #[inline(always)]
            #[must_use]
            pub fn ndbken(&mut self) -> NdbkenW<Npctl3Spec> {
                NdbkenW::new(self, 2)
            }
            #[doc = "Bit 3 - NAND bank memory type"]
            #[inline(always)]
            #[must_use]
            pub fn ndtp(&mut self) -> NdtpW<Npctl3Spec> {
                NdtpW::new(self, 3)
            }
            #[doc = "Bits 4:5 - NAND bank memory data bus width"]
            #[inline(always)]
            #[must_use]
            pub fn ndw(&mut self) -> NdwW<Npctl3Spec> {
                NdwW::new(self, 4)
            }
            #[doc = "Bit 6 - ECC enable"]
            #[inline(always)]
            #[must_use]
            pub fn eccen(&mut self) -> EccenW<Npctl3Spec> {
                EccenW::new(self, 6)
            }
            #[doc = "Bits 9:12 - CLE to RE delay"]
            #[inline(always)]
            #[must_use]
            pub fn ctr(&mut self) -> CtrW<Npctl3Spec> {
                CtrW::new(self, 9)
            }
            #[doc = "Bits 13:16 - ALE to RE delay"]
            #[inline(always)]
            #[must_use]
            pub fn atr(&mut self) -> AtrW<Npctl3Spec> {
                AtrW::new(self, 13)
            }
            #[doc = "Bits 17:19 - ECC size"]
            #[inline(always)]
            #[must_use]
            pub fn eccsz(&mut self) -> EccszW<Npctl3Spec> {
                EccszW::new(self, 17)
            }
        }
        #[doc = "NAND flash/PC card control register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`npctl3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npctl3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Npctl3Spec;
        impl crate::RegisterSpec for Npctl3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`npctl3::R`](R) reader structure"]
        impl crate::Readable for Npctl3Spec {}
        #[doc = "`write(|w| ..)` method takes [`npctl3::W`](W) writer structure"]
        impl crate::Writable for Npctl3Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets NPCTL3 to value 0x18"]
        impl crate::Resettable for Npctl3Spec {
            const RESET_VALUE: u32 = 0x18;
        }
    }
    #[doc = "NPINTEN1 (rw) register accessor: NAND flash/PC card interrupt enable register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`npinten1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npinten1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@npinten1`]
module"]
    #[doc(alias = "NPINTEN1")]
    pub type Npinten1 = crate::Reg<npinten1::Npinten1Spec>;
    #[doc = "NAND flash/PC card interrupt enable register 1"]
    pub mod npinten1 {
        #[doc = "Register `NPINTEN1` reader"]
        pub type R = crate::R<Npinten1Spec>;
        #[doc = "Register `NPINTEN1` writer"]
        pub type W = crate::W<Npinten1Spec>;
        #[doc = "Field `INTRS` reader - Interrupt rising edge status"]
        pub type IntrsR = crate::BitReader;
        #[doc = "Field `INTRS` writer - Interrupt rising edge status"]
        pub type IntrsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTHS` reader - Interrupt high-level status"]
        pub type InthsR = crate::BitReader;
        #[doc = "Field `INTHS` writer - Interrupt high-level status"]
        pub type InthsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTFS` reader - Interrupt falling edge status"]
        pub type IntfsR = crate::BitReader;
        #[doc = "Field `INTFS` writer - Interrupt falling edge status"]
        pub type IntfsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTREN` reader - Interrupt rising edge detection enable bit"]
        pub type IntrenR = crate::BitReader;
        #[doc = "Field `INTREN` writer - Interrupt rising edge detection enable bit"]
        pub type IntrenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTHEN` reader - Interrupt high-level detection enable"]
        pub type InthenR = crate::BitReader;
        #[doc = "Field `INTHEN` writer - Interrupt high-level detection enable"]
        pub type InthenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTFEN` reader - Interrupt falling edge detection enable"]
        pub type IntfenR = crate::BitReader;
        #[doc = "Field `INTFEN` writer - Interrupt falling edge detection enable"]
        pub type IntfenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FFEPT` reader - FIFO empty flag"]
        pub type FfeptR = crate::BitReader;
        #[doc = "Field `FFEPT` writer - FIFO empty flag"]
        pub type FfeptW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Interrupt rising edge status"]
            #[inline(always)]
            pub fn intrs(&self) -> IntrsR {
                IntrsR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Interrupt high-level status"]
            #[inline(always)]
            pub fn inths(&self) -> InthsR {
                InthsR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Interrupt falling edge status"]
            #[inline(always)]
            pub fn intfs(&self) -> IntfsR {
                IntfsR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Interrupt rising edge detection enable bit"]
            #[inline(always)]
            pub fn intren(&self) -> IntrenR {
                IntrenR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Interrupt high-level detection enable"]
            #[inline(always)]
            pub fn inthen(&self) -> InthenR {
                InthenR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Interrupt falling edge detection enable"]
            #[inline(always)]
            pub fn intfen(&self) -> IntfenR {
                IntfenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - FIFO empty flag"]
            #[inline(always)]
            pub fn ffept(&self) -> FfeptR {
                FfeptR::new(((self.bits >> 6) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Interrupt rising edge status"]
            #[inline(always)]
            #[must_use]
            pub fn intrs(&mut self) -> IntrsW<Npinten1Spec> {
                IntrsW::new(self, 0)
            }
            #[doc = "Bit 1 - Interrupt high-level status"]
            #[inline(always)]
            #[must_use]
            pub fn inths(&mut self) -> InthsW<Npinten1Spec> {
                InthsW::new(self, 1)
            }
            #[doc = "Bit 2 - Interrupt falling edge status"]
            #[inline(always)]
            #[must_use]
            pub fn intfs(&mut self) -> IntfsW<Npinten1Spec> {
                IntfsW::new(self, 2)
            }
            #[doc = "Bit 3 - Interrupt rising edge detection enable bit"]
            #[inline(always)]
            #[must_use]
            pub fn intren(&mut self) -> IntrenW<Npinten1Spec> {
                IntrenW::new(self, 3)
            }
            #[doc = "Bit 4 - Interrupt high-level detection enable"]
            #[inline(always)]
            #[must_use]
            pub fn inthen(&mut self) -> InthenW<Npinten1Spec> {
                InthenW::new(self, 4)
            }
            #[doc = "Bit 5 - Interrupt falling edge detection enable"]
            #[inline(always)]
            #[must_use]
            pub fn intfen(&mut self) -> IntfenW<Npinten1Spec> {
                IntfenW::new(self, 5)
            }
            #[doc = "Bit 6 - FIFO empty flag"]
            #[inline(always)]
            #[must_use]
            pub fn ffept(&mut self) -> FfeptW<Npinten1Spec> {
                FfeptW::new(self, 6)
            }
        }
        #[doc = "NAND flash/PC card interrupt enable register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`npinten1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npinten1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Npinten1Spec;
        impl crate::RegisterSpec for Npinten1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`npinten1::R`](R) reader structure"]
        impl crate::Readable for Npinten1Spec {}
        #[doc = "`write(|w| ..)` method takes [`npinten1::W`](W) writer structure"]
        impl crate::Writable for Npinten1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets NPINTEN1 to value 0x40"]
        impl crate::Resettable for Npinten1Spec {
            const RESET_VALUE: u32 = 0x40;
        }
    }
    #[doc = "NPINTEN2 (rw) register accessor: NAND flash/PC card interrupt enable register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`npinten2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npinten2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@npinten2`]
module"]
    #[doc(alias = "NPINTEN2")]
    pub type Npinten2 = crate::Reg<npinten2::Npinten2Spec>;
    #[doc = "NAND flash/PC card interrupt enable register 2"]
    pub mod npinten2 {
        #[doc = "Register `NPINTEN2` reader"]
        pub type R = crate::R<Npinten2Spec>;
        #[doc = "Register `NPINTEN2` writer"]
        pub type W = crate::W<Npinten2Spec>;
        #[doc = "Field `INTRS` reader - Interrupt rising edge status"]
        pub type IntrsR = crate::BitReader;
        #[doc = "Field `INTRS` writer - Interrupt rising edge status"]
        pub type IntrsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTHS` reader - Interrupt high-level status"]
        pub type InthsR = crate::BitReader;
        #[doc = "Field `INTHS` writer - Interrupt high-level status"]
        pub type InthsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTFS` reader - Interrupt falling edge status"]
        pub type IntfsR = crate::BitReader;
        #[doc = "Field `INTFS` writer - Interrupt falling edge status"]
        pub type IntfsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTREN` reader - Interrupt rising edge detection enable bit"]
        pub type IntrenR = crate::BitReader;
        #[doc = "Field `INTREN` writer - Interrupt rising edge detection enable bit"]
        pub type IntrenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTHEN` reader - Interrupt high-level detection enable"]
        pub type InthenR = crate::BitReader;
        #[doc = "Field `INTHEN` writer - Interrupt high-level detection enable"]
        pub type InthenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTFEN` reader - Interrupt falling edge detection enable"]
        pub type IntfenR = crate::BitReader;
        #[doc = "Field `INTFEN` writer - Interrupt falling edge detection enable"]
        pub type IntfenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FFEPT` reader - FIFO empty flag"]
        pub type FfeptR = crate::BitReader;
        #[doc = "Field `FFEPT` writer - FIFO empty flag"]
        pub type FfeptW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Interrupt rising edge status"]
            #[inline(always)]
            pub fn intrs(&self) -> IntrsR {
                IntrsR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Interrupt high-level status"]
            #[inline(always)]
            pub fn inths(&self) -> InthsR {
                InthsR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Interrupt falling edge status"]
            #[inline(always)]
            pub fn intfs(&self) -> IntfsR {
                IntfsR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Interrupt rising edge detection enable bit"]
            #[inline(always)]
            pub fn intren(&self) -> IntrenR {
                IntrenR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Interrupt high-level detection enable"]
            #[inline(always)]
            pub fn inthen(&self) -> InthenR {
                InthenR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Interrupt falling edge detection enable"]
            #[inline(always)]
            pub fn intfen(&self) -> IntfenR {
                IntfenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - FIFO empty flag"]
            #[inline(always)]
            pub fn ffept(&self) -> FfeptR {
                FfeptR::new(((self.bits >> 6) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Interrupt rising edge status"]
            #[inline(always)]
            #[must_use]
            pub fn intrs(&mut self) -> IntrsW<Npinten2Spec> {
                IntrsW::new(self, 0)
            }
            #[doc = "Bit 1 - Interrupt high-level status"]
            #[inline(always)]
            #[must_use]
            pub fn inths(&mut self) -> InthsW<Npinten2Spec> {
                InthsW::new(self, 1)
            }
            #[doc = "Bit 2 - Interrupt falling edge status"]
            #[inline(always)]
            #[must_use]
            pub fn intfs(&mut self) -> IntfsW<Npinten2Spec> {
                IntfsW::new(self, 2)
            }
            #[doc = "Bit 3 - Interrupt rising edge detection enable bit"]
            #[inline(always)]
            #[must_use]
            pub fn intren(&mut self) -> IntrenW<Npinten2Spec> {
                IntrenW::new(self, 3)
            }
            #[doc = "Bit 4 - Interrupt high-level detection enable"]
            #[inline(always)]
            #[must_use]
            pub fn inthen(&mut self) -> InthenW<Npinten2Spec> {
                InthenW::new(self, 4)
            }
            #[doc = "Bit 5 - Interrupt falling edge detection enable"]
            #[inline(always)]
            #[must_use]
            pub fn intfen(&mut self) -> IntfenW<Npinten2Spec> {
                IntfenW::new(self, 5)
            }
            #[doc = "Bit 6 - FIFO empty flag"]
            #[inline(always)]
            #[must_use]
            pub fn ffept(&mut self) -> FfeptW<Npinten2Spec> {
                FfeptW::new(self, 6)
            }
        }
        #[doc = "NAND flash/PC card interrupt enable register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`npinten2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npinten2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Npinten2Spec;
        impl crate::RegisterSpec for Npinten2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`npinten2::R`](R) reader structure"]
        impl crate::Readable for Npinten2Spec {}
        #[doc = "`write(|w| ..)` method takes [`npinten2::W`](W) writer structure"]
        impl crate::Writable for Npinten2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets NPINTEN2 to value 0x40"]
        impl crate::Resettable for Npinten2Spec {
            const RESET_VALUE: u32 = 0x40;
        }
    }
    #[doc = "NPINTEN3 (rw) register accessor: NAND flash/PC card interrupt enable register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`npinten3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npinten3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@npinten3`]
module"]
    #[doc(alias = "NPINTEN3")]
    pub type Npinten3 = crate::Reg<npinten3::Npinten3Spec>;
    #[doc = "NAND flash/PC card interrupt enable register 3"]
    pub mod npinten3 {
        #[doc = "Register `NPINTEN3` reader"]
        pub type R = crate::R<Npinten3Spec>;
        #[doc = "Register `NPINTEN3` writer"]
        pub type W = crate::W<Npinten3Spec>;
        #[doc = "Field `INTRS` reader - Interrupt rising edge status"]
        pub type IntrsR = crate::BitReader;
        #[doc = "Field `INTRS` writer - Interrupt rising edge status"]
        pub type IntrsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTHS` reader - Interrupt high-level status"]
        pub type InthsR = crate::BitReader;
        #[doc = "Field `INTHS` writer - Interrupt high-level status"]
        pub type InthsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTFS` reader - Interrupt falling edge status"]
        pub type IntfsR = crate::BitReader;
        #[doc = "Field `INTFS` writer - Interrupt falling edge status"]
        pub type IntfsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTREN` reader - Interrupt rising edge detection enable bit"]
        pub type IntrenR = crate::BitReader;
        #[doc = "Field `INTREN` writer - Interrupt rising edge detection enable bit"]
        pub type IntrenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTHEN` reader - Interrupt high-level detection enable"]
        pub type InthenR = crate::BitReader;
        #[doc = "Field `INTHEN` writer - Interrupt high-level detection enable"]
        pub type InthenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTFEN` reader - Interrupt falling edge detection enable"]
        pub type IntfenR = crate::BitReader;
        #[doc = "Field `INTFEN` writer - Interrupt falling edge detection enable"]
        pub type IntfenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FFEPT` reader - FIFO empty flag"]
        pub type FfeptR = crate::BitReader;
        #[doc = "Field `FFEPT` writer - FIFO empty flag"]
        pub type FfeptW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Interrupt rising edge status"]
            #[inline(always)]
            pub fn intrs(&self) -> IntrsR {
                IntrsR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Interrupt high-level status"]
            #[inline(always)]
            pub fn inths(&self) -> InthsR {
                InthsR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Interrupt falling edge status"]
            #[inline(always)]
            pub fn intfs(&self) -> IntfsR {
                IntfsR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Interrupt rising edge detection enable bit"]
            #[inline(always)]
            pub fn intren(&self) -> IntrenR {
                IntrenR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Interrupt high-level detection enable"]
            #[inline(always)]
            pub fn inthen(&self) -> InthenR {
                InthenR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Interrupt falling edge detection enable"]
            #[inline(always)]
            pub fn intfen(&self) -> IntfenR {
                IntfenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - FIFO empty flag"]
            #[inline(always)]
            pub fn ffept(&self) -> FfeptR {
                FfeptR::new(((self.bits >> 6) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Interrupt rising edge status"]
            #[inline(always)]
            #[must_use]
            pub fn intrs(&mut self) -> IntrsW<Npinten3Spec> {
                IntrsW::new(self, 0)
            }
            #[doc = "Bit 1 - Interrupt high-level status"]
            #[inline(always)]
            #[must_use]
            pub fn inths(&mut self) -> InthsW<Npinten3Spec> {
                InthsW::new(self, 1)
            }
            #[doc = "Bit 2 - Interrupt falling edge status"]
            #[inline(always)]
            #[must_use]
            pub fn intfs(&mut self) -> IntfsW<Npinten3Spec> {
                IntfsW::new(self, 2)
            }
            #[doc = "Bit 3 - Interrupt rising edge detection enable bit"]
            #[inline(always)]
            #[must_use]
            pub fn intren(&mut self) -> IntrenW<Npinten3Spec> {
                IntrenW::new(self, 3)
            }
            #[doc = "Bit 4 - Interrupt high-level detection enable"]
            #[inline(always)]
            #[must_use]
            pub fn inthen(&mut self) -> InthenW<Npinten3Spec> {
                InthenW::new(self, 4)
            }
            #[doc = "Bit 5 - Interrupt falling edge detection enable"]
            #[inline(always)]
            #[must_use]
            pub fn intfen(&mut self) -> IntfenW<Npinten3Spec> {
                IntfenW::new(self, 5)
            }
            #[doc = "Bit 6 - FIFO empty flag"]
            #[inline(always)]
            #[must_use]
            pub fn ffept(&mut self) -> FfeptW<Npinten3Spec> {
                FfeptW::new(self, 6)
            }
        }
        #[doc = "NAND flash/PC card interrupt enable register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`npinten3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npinten3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Npinten3Spec;
        impl crate::RegisterSpec for Npinten3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`npinten3::R`](R) reader structure"]
        impl crate::Readable for Npinten3Spec {}
        #[doc = "`write(|w| ..)` method takes [`npinten3::W`](W) writer structure"]
        impl crate::Writable for Npinten3Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets NPINTEN3 to value 0x40"]
        impl crate::Resettable for Npinten3Spec {
            const RESET_VALUE: u32 = 0x40;
        }
    }
    #[doc = "NPCTCFG1 (rw) register accessor: NAND flash/PC card common space timing configuration register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`npctcfg1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npctcfg1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@npctcfg1`]
module"]
    #[doc(alias = "NPCTCFG1")]
    pub type Npctcfg1 = crate::Reg<npctcfg1::Npctcfg1Spec>;
    #[doc = "NAND flash/PC card common space timing configuration register 1"]
    pub mod npctcfg1 {
        #[doc = "Register `NPCTCFG1` reader"]
        pub type R = crate::R<Npctcfg1Spec>;
        #[doc = "Register `NPCTCFG1` writer"]
        pub type W = crate::W<Npctcfg1Spec>;
        #[doc = "Field `COMSET` reader - Common memory setup time"]
        pub type ComsetR = crate::FieldReader;
        #[doc = "Field `COMSET` writer - Common memory setup time"]
        pub type ComsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `COMWAIT` reader - Common memory wait time"]
        pub type ComwaitR = crate::FieldReader;
        #[doc = "Field `COMWAIT` writer - Common memory wait time"]
        pub type ComwaitW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `COMHLD` reader - Common memory hold time"]
        pub type ComhldR = crate::FieldReader;
        #[doc = "Field `COMHLD` writer - Common memory hold time"]
        pub type ComhldW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `COMHIZ` reader - Common memory data bus HiZ time"]
        pub type ComhizR = crate::FieldReader;
        #[doc = "Field `COMHIZ` writer - Common memory data bus HiZ time"]
        pub type ComhizW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Common memory setup time"]
            #[inline(always)]
            pub fn comset(&self) -> ComsetR {
                ComsetR::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Common memory wait time"]
            #[inline(always)]
            pub fn comwait(&self) -> ComwaitR {
                ComwaitR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Common memory hold time"]
            #[inline(always)]
            pub fn comhld(&self) -> ComhldR {
                ComhldR::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Common memory data bus HiZ time"]
            #[inline(always)]
            pub fn comhiz(&self) -> ComhizR {
                ComhizR::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Common memory setup time"]
            #[inline(always)]
            #[must_use]
            pub fn comset(&mut self) -> ComsetW<Npctcfg1Spec> {
                ComsetW::new(self, 0)
            }
            #[doc = "Bits 8:15 - Common memory wait time"]
            #[inline(always)]
            #[must_use]
            pub fn comwait(&mut self) -> ComwaitW<Npctcfg1Spec> {
                ComwaitW::new(self, 8)
            }
            #[doc = "Bits 16:23 - Common memory hold time"]
            #[inline(always)]
            #[must_use]
            pub fn comhld(&mut self) -> ComhldW<Npctcfg1Spec> {
                ComhldW::new(self, 16)
            }
            #[doc = "Bits 24:31 - Common memory data bus HiZ time"]
            #[inline(always)]
            #[must_use]
            pub fn comhiz(&mut self) -> ComhizW<Npctcfg1Spec> {
                ComhizW::new(self, 24)
            }
        }
        #[doc = "NAND flash/PC card common space timing configuration register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`npctcfg1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npctcfg1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Npctcfg1Spec;
        impl crate::RegisterSpec for Npctcfg1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`npctcfg1::R`](R) reader structure"]
        impl crate::Readable for Npctcfg1Spec {}
        #[doc = "`write(|w| ..)` method takes [`npctcfg1::W`](W) writer structure"]
        impl crate::Writable for Npctcfg1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets NPCTCFG1 to value 0xfcfc_fcfc"]
        impl crate::Resettable for Npctcfg1Spec {
            const RESET_VALUE: u32 = 0xfcfc_fcfc;
        }
    }
    #[doc = "NPCTCFG2 (rw) register accessor: NAND flash/PC card common space timing configuration register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`npctcfg2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npctcfg2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@npctcfg2`]
module"]
    #[doc(alias = "NPCTCFG2")]
    pub type Npctcfg2 = crate::Reg<npctcfg2::Npctcfg2Spec>;
    #[doc = "NAND flash/PC card common space timing configuration register 2"]
    pub mod npctcfg2 {
        #[doc = "Register `NPCTCFG2` reader"]
        pub type R = crate::R<Npctcfg2Spec>;
        #[doc = "Register `NPCTCFG2` writer"]
        pub type W = crate::W<Npctcfg2Spec>;
        #[doc = "Field `COMSET` reader - Common memory setup time"]
        pub type ComsetR = crate::FieldReader;
        #[doc = "Field `COMSET` writer - Common memory setup time"]
        pub type ComsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `COMWAIT` reader - Common memory wait time"]
        pub type ComwaitR = crate::FieldReader;
        #[doc = "Field `COMWAIT` writer - Common memory wait time"]
        pub type ComwaitW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `COMHLD` reader - Common memory hold time"]
        pub type ComhldR = crate::FieldReader;
        #[doc = "Field `COMHLD` writer - Common memory hold time"]
        pub type ComhldW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `COMHIZ` reader - Common memory data bus HiZ time"]
        pub type ComhizR = crate::FieldReader;
        #[doc = "Field `COMHIZ` writer - Common memory data bus HiZ time"]
        pub type ComhizW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Common memory setup time"]
            #[inline(always)]
            pub fn comset(&self) -> ComsetR {
                ComsetR::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Common memory wait time"]
            #[inline(always)]
            pub fn comwait(&self) -> ComwaitR {
                ComwaitR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Common memory hold time"]
            #[inline(always)]
            pub fn comhld(&self) -> ComhldR {
                ComhldR::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Common memory data bus HiZ time"]
            #[inline(always)]
            pub fn comhiz(&self) -> ComhizR {
                ComhizR::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Common memory setup time"]
            #[inline(always)]
            #[must_use]
            pub fn comset(&mut self) -> ComsetW<Npctcfg2Spec> {
                ComsetW::new(self, 0)
            }
            #[doc = "Bits 8:15 - Common memory wait time"]
            #[inline(always)]
            #[must_use]
            pub fn comwait(&mut self) -> ComwaitW<Npctcfg2Spec> {
                ComwaitW::new(self, 8)
            }
            #[doc = "Bits 16:23 - Common memory hold time"]
            #[inline(always)]
            #[must_use]
            pub fn comhld(&mut self) -> ComhldW<Npctcfg2Spec> {
                ComhldW::new(self, 16)
            }
            #[doc = "Bits 24:31 - Common memory data bus HiZ time"]
            #[inline(always)]
            #[must_use]
            pub fn comhiz(&mut self) -> ComhizW<Npctcfg2Spec> {
                ComhizW::new(self, 24)
            }
        }
        #[doc = "NAND flash/PC card common space timing configuration register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`npctcfg2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npctcfg2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Npctcfg2Spec;
        impl crate::RegisterSpec for Npctcfg2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`npctcfg2::R`](R) reader structure"]
        impl crate::Readable for Npctcfg2Spec {}
        #[doc = "`write(|w| ..)` method takes [`npctcfg2::W`](W) writer structure"]
        impl crate::Writable for Npctcfg2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets NPCTCFG2 to value 0xfcfc_fcfc"]
        impl crate::Resettable for Npctcfg2Spec {
            const RESET_VALUE: u32 = 0xfcfc_fcfc;
        }
    }
    #[doc = "NPCTCFG3 (rw) register accessor: NAND flash/PC card common space timing configuration register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`npctcfg3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npctcfg3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@npctcfg3`]
module"]
    #[doc(alias = "NPCTCFG3")]
    pub type Npctcfg3 = crate::Reg<npctcfg3::Npctcfg3Spec>;
    #[doc = "NAND flash/PC card common space timing configuration register 3"]
    pub mod npctcfg3 {
        #[doc = "Register `NPCTCFG3` reader"]
        pub type R = crate::R<Npctcfg3Spec>;
        #[doc = "Register `NPCTCFG3` writer"]
        pub type W = crate::W<Npctcfg3Spec>;
        #[doc = "Field `COMSET` reader - Common memory setup time"]
        pub type ComsetR = crate::FieldReader;
        #[doc = "Field `COMSET` writer - Common memory setup time"]
        pub type ComsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `COMWAIT` reader - Common memory wait time"]
        pub type ComwaitR = crate::FieldReader;
        #[doc = "Field `COMWAIT` writer - Common memory wait time"]
        pub type ComwaitW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `COMHLD` reader - Common memory hold time"]
        pub type ComhldR = crate::FieldReader;
        #[doc = "Field `COMHLD` writer - Common memory hold time"]
        pub type ComhldW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `COMHIZ` reader - Common memory data bus HiZ time"]
        pub type ComhizR = crate::FieldReader;
        #[doc = "Field `COMHIZ` writer - Common memory data bus HiZ time"]
        pub type ComhizW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Common memory setup time"]
            #[inline(always)]
            pub fn comset(&self) -> ComsetR {
                ComsetR::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Common memory wait time"]
            #[inline(always)]
            pub fn comwait(&self) -> ComwaitR {
                ComwaitR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Common memory hold time"]
            #[inline(always)]
            pub fn comhld(&self) -> ComhldR {
                ComhldR::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Common memory data bus HiZ time"]
            #[inline(always)]
            pub fn comhiz(&self) -> ComhizR {
                ComhizR::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Common memory setup time"]
            #[inline(always)]
            #[must_use]
            pub fn comset(&mut self) -> ComsetW<Npctcfg3Spec> {
                ComsetW::new(self, 0)
            }
            #[doc = "Bits 8:15 - Common memory wait time"]
            #[inline(always)]
            #[must_use]
            pub fn comwait(&mut self) -> ComwaitW<Npctcfg3Spec> {
                ComwaitW::new(self, 8)
            }
            #[doc = "Bits 16:23 - Common memory hold time"]
            #[inline(always)]
            #[must_use]
            pub fn comhld(&mut self) -> ComhldW<Npctcfg3Spec> {
                ComhldW::new(self, 16)
            }
            #[doc = "Bits 24:31 - Common memory data bus HiZ time"]
            #[inline(always)]
            #[must_use]
            pub fn comhiz(&mut self) -> ComhizW<Npctcfg3Spec> {
                ComhizW::new(self, 24)
            }
        }
        #[doc = "NAND flash/PC card common space timing configuration register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`npctcfg3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npctcfg3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Npctcfg3Spec;
        impl crate::RegisterSpec for Npctcfg3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`npctcfg3::R`](R) reader structure"]
        impl crate::Readable for Npctcfg3Spec {}
        #[doc = "`write(|w| ..)` method takes [`npctcfg3::W`](W) writer structure"]
        impl crate::Writable for Npctcfg3Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets NPCTCFG3 to value 0xfcfc_fcfc"]
        impl crate::Resettable for Npctcfg3Spec {
            const RESET_VALUE: u32 = 0xfcfc_fcfc;
        }
    }
    #[doc = "NPATCFG1 (rw) register accessor: NAND flash/PC card attribute space timing configuration register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`npatcfg1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npatcfg1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@npatcfg1`]
module"]
    #[doc(alias = "NPATCFG1")]
    pub type Npatcfg1 = crate::Reg<npatcfg1::Npatcfg1Spec>;
    #[doc = "NAND flash/PC card attribute space timing configuration register 1"]
    pub mod npatcfg1 {
        #[doc = "Register `NPATCFG1` reader"]
        pub type R = crate::R<Npatcfg1Spec>;
        #[doc = "Register `NPATCFG1` writer"]
        pub type W = crate::W<Npatcfg1Spec>;
        #[doc = "Field `ATTSET` reader - Attribute memory setup time"]
        pub type AttsetR = crate::FieldReader;
        #[doc = "Field `ATTSET` writer - Attribute memory setup time"]
        pub type AttsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `ATTWAIT` reader - Attribute memory wait time"]
        pub type AttwaitR = crate::FieldReader;
        #[doc = "Field `ATTWAIT` writer - Attribute memory wait time"]
        pub type AttwaitW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `ATTHLD` reader - Attribute memory hold time"]
        pub type AtthldR = crate::FieldReader;
        #[doc = "Field `ATTHLD` writer - Attribute memory hold time"]
        pub type AtthldW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `ATTHIZ` reader - Attribute memory data bus HiZ time"]
        pub type AtthizR = crate::FieldReader;
        #[doc = "Field `ATTHIZ` writer - Attribute memory data bus HiZ time"]
        pub type AtthizW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Attribute memory setup time"]
            #[inline(always)]
            pub fn attset(&self) -> AttsetR {
                AttsetR::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Attribute memory wait time"]
            #[inline(always)]
            pub fn attwait(&self) -> AttwaitR {
                AttwaitR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Attribute memory hold time"]
            #[inline(always)]
            pub fn atthld(&self) -> AtthldR {
                AtthldR::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Attribute memory data bus HiZ time"]
            #[inline(always)]
            pub fn atthiz(&self) -> AtthizR {
                AtthizR::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Attribute memory setup time"]
            #[inline(always)]
            #[must_use]
            pub fn attset(&mut self) -> AttsetW<Npatcfg1Spec> {
                AttsetW::new(self, 0)
            }
            #[doc = "Bits 8:15 - Attribute memory wait time"]
            #[inline(always)]
            #[must_use]
            pub fn attwait(&mut self) -> AttwaitW<Npatcfg1Spec> {
                AttwaitW::new(self, 8)
            }
            #[doc = "Bits 16:23 - Attribute memory hold time"]
            #[inline(always)]
            #[must_use]
            pub fn atthld(&mut self) -> AtthldW<Npatcfg1Spec> {
                AtthldW::new(self, 16)
            }
            #[doc = "Bits 24:31 - Attribute memory data bus HiZ time"]
            #[inline(always)]
            #[must_use]
            pub fn atthiz(&mut self) -> AtthizW<Npatcfg1Spec> {
                AtthizW::new(self, 24)
            }
        }
        #[doc = "NAND flash/PC card attribute space timing configuration register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`npatcfg1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npatcfg1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Npatcfg1Spec;
        impl crate::RegisterSpec for Npatcfg1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`npatcfg1::R`](R) reader structure"]
        impl crate::Readable for Npatcfg1Spec {}
        #[doc = "`write(|w| ..)` method takes [`npatcfg1::W`](W) writer structure"]
        impl crate::Writable for Npatcfg1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets NPATCFG1 to value 0xfcfc_fcfc"]
        impl crate::Resettable for Npatcfg1Spec {
            const RESET_VALUE: u32 = 0xfcfc_fcfc;
        }
    }
    #[doc = "NPATCFG2 (rw) register accessor: NAND flash/PC card attribute space timing configuration register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`npatcfg2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npatcfg2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@npatcfg2`]
module"]
    #[doc(alias = "NPATCFG2")]
    pub type Npatcfg2 = crate::Reg<npatcfg2::Npatcfg2Spec>;
    #[doc = "NAND flash/PC card attribute space timing configuration register 2"]
    pub mod npatcfg2 {
        #[doc = "Register `NPATCFG2` reader"]
        pub type R = crate::R<Npatcfg2Spec>;
        #[doc = "Register `NPATCFG2` writer"]
        pub type W = crate::W<Npatcfg2Spec>;
        #[doc = "Field `ATTSET` reader - Attribute memory setup time"]
        pub type AttsetR = crate::FieldReader;
        #[doc = "Field `ATTSET` writer - Attribute memory setup time"]
        pub type AttsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `ATTWAIT` reader - Attribute memory wait time"]
        pub type AttwaitR = crate::FieldReader;
        #[doc = "Field `ATTWAIT` writer - Attribute memory wait time"]
        pub type AttwaitW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `ATTHLD` reader - Attribute memory hold time"]
        pub type AtthldR = crate::FieldReader;
        #[doc = "Field `ATTHLD` writer - Attribute memory hold time"]
        pub type AtthldW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `ATTHIZ` reader - Attribute memory data bus HiZ time"]
        pub type AtthizR = crate::FieldReader;
        #[doc = "Field `ATTHIZ` writer - Attribute memory data bus HiZ time"]
        pub type AtthizW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Attribute memory setup time"]
            #[inline(always)]
            pub fn attset(&self) -> AttsetR {
                AttsetR::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Attribute memory wait time"]
            #[inline(always)]
            pub fn attwait(&self) -> AttwaitR {
                AttwaitR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Attribute memory hold time"]
            #[inline(always)]
            pub fn atthld(&self) -> AtthldR {
                AtthldR::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Attribute memory data bus HiZ time"]
            #[inline(always)]
            pub fn atthiz(&self) -> AtthizR {
                AtthizR::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Attribute memory setup time"]
            #[inline(always)]
            #[must_use]
            pub fn attset(&mut self) -> AttsetW<Npatcfg2Spec> {
                AttsetW::new(self, 0)
            }
            #[doc = "Bits 8:15 - Attribute memory wait time"]
            #[inline(always)]
            #[must_use]
            pub fn attwait(&mut self) -> AttwaitW<Npatcfg2Spec> {
                AttwaitW::new(self, 8)
            }
            #[doc = "Bits 16:23 - Attribute memory hold time"]
            #[inline(always)]
            #[must_use]
            pub fn atthld(&mut self) -> AtthldW<Npatcfg2Spec> {
                AtthldW::new(self, 16)
            }
            #[doc = "Bits 24:31 - Attribute memory data bus HiZ time"]
            #[inline(always)]
            #[must_use]
            pub fn atthiz(&mut self) -> AtthizW<Npatcfg2Spec> {
                AtthizW::new(self, 24)
            }
        }
        #[doc = "NAND flash/PC card attribute space timing configuration register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`npatcfg2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npatcfg2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Npatcfg2Spec;
        impl crate::RegisterSpec for Npatcfg2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`npatcfg2::R`](R) reader structure"]
        impl crate::Readable for Npatcfg2Spec {}
        #[doc = "`write(|w| ..)` method takes [`npatcfg2::W`](W) writer structure"]
        impl crate::Writable for Npatcfg2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets NPATCFG2 to value 0xfcfc_fcfc"]
        impl crate::Resettable for Npatcfg2Spec {
            const RESET_VALUE: u32 = 0xfcfc_fcfc;
        }
    }
    #[doc = "NPATCFG3 (rw) register accessor: NAND flash/PC card attribute space timing configuration register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`npatcfg3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npatcfg3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@npatcfg3`]
module"]
    #[doc(alias = "NPATCFG3")]
    pub type Npatcfg3 = crate::Reg<npatcfg3::Npatcfg3Spec>;
    #[doc = "NAND flash/PC card attribute space timing configuration register 3"]
    pub mod npatcfg3 {
        #[doc = "Register `NPATCFG3` reader"]
        pub type R = crate::R<Npatcfg3Spec>;
        #[doc = "Register `NPATCFG3` writer"]
        pub type W = crate::W<Npatcfg3Spec>;
        #[doc = "Field `ATTSET` reader - Attribute memory setup time"]
        pub type AttsetR = crate::FieldReader;
        #[doc = "Field `ATTSET` writer - Attribute memory setup time"]
        pub type AttsetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `ATTWAIT` reader - Attribute memory wait time"]
        pub type AttwaitR = crate::FieldReader;
        #[doc = "Field `ATTWAIT` writer - Attribute memory wait time"]
        pub type AttwaitW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `ATTHLD` reader - Attribute memory hold time"]
        pub type AtthldR = crate::FieldReader;
        #[doc = "Field `ATTHLD` writer - Attribute memory hold time"]
        pub type AtthldW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `ATTHIZ` reader - Attribute memory data bus HiZ time"]
        pub type AtthizR = crate::FieldReader;
        #[doc = "Field `ATTHIZ` writer - Attribute memory data bus HiZ time"]
        pub type AtthizW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Attribute memory setup time"]
            #[inline(always)]
            pub fn attset(&self) -> AttsetR {
                AttsetR::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Attribute memory wait time"]
            #[inline(always)]
            pub fn attwait(&self) -> AttwaitR {
                AttwaitR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - Attribute memory hold time"]
            #[inline(always)]
            pub fn atthld(&self) -> AtthldR {
                AtthldR::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - Attribute memory data bus HiZ time"]
            #[inline(always)]
            pub fn atthiz(&self) -> AtthizR {
                AtthizR::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Attribute memory setup time"]
            #[inline(always)]
            #[must_use]
            pub fn attset(&mut self) -> AttsetW<Npatcfg3Spec> {
                AttsetW::new(self, 0)
            }
            #[doc = "Bits 8:15 - Attribute memory wait time"]
            #[inline(always)]
            #[must_use]
            pub fn attwait(&mut self) -> AttwaitW<Npatcfg3Spec> {
                AttwaitW::new(self, 8)
            }
            #[doc = "Bits 16:23 - Attribute memory hold time"]
            #[inline(always)]
            #[must_use]
            pub fn atthld(&mut self) -> AtthldW<Npatcfg3Spec> {
                AtthldW::new(self, 16)
            }
            #[doc = "Bits 24:31 - Attribute memory data bus HiZ time"]
            #[inline(always)]
            #[must_use]
            pub fn atthiz(&mut self) -> AtthizW<Npatcfg3Spec> {
                AtthizW::new(self, 24)
            }
        }
        #[doc = "NAND flash/PC card attribute space timing configuration register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`npatcfg3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`npatcfg3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Npatcfg3Spec;
        impl crate::RegisterSpec for Npatcfg3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`npatcfg3::R`](R) reader structure"]
        impl crate::Readable for Npatcfg3Spec {}
        #[doc = "`write(|w| ..)` method takes [`npatcfg3::W`](W) writer structure"]
        impl crate::Writable for Npatcfg3Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets NPATCFG3 to value 0xfcfc_fcfc"]
        impl crate::Resettable for Npatcfg3Spec {
            const RESET_VALUE: u32 = 0xfcfc_fcfc;
        }
    }
    #[doc = "PIOTCFG3 (rw) register accessor: PC card I/O space timing configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`piotcfg3::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`piotcfg3::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@piotcfg3`]
module"]
    #[doc(alias = "PIOTCFG3")]
    pub type Piotcfg3 = crate::Reg<piotcfg3::Piotcfg3Spec>;
    #[doc = "PC card I/O space timing configuration register"]
    pub mod piotcfg3 {
        #[doc = "Register `PIOTCFG3` reader"]
        pub type R = crate::R<Piotcfg3Spec>;
        #[doc = "Register `PIOTCFG3` writer"]
        pub type W = crate::W<Piotcfg3Spec>;
        #[doc = "Field `IOSET` reader - IO space setup time"]
        pub type IosetR = crate::FieldReader;
        #[doc = "Field `IOSET` writer - IO space setup time"]
        pub type IosetW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `IOWAIT` reader - IO space wait time"]
        pub type IowaitR = crate::FieldReader;
        #[doc = "Field `IOWAIT` writer - IO space wait time"]
        pub type IowaitW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `IOHLD` reader - IO space hold time"]
        pub type IohldR = crate::FieldReader;
        #[doc = "Field `IOHLD` writer - IO space hold time"]
        pub type IohldW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `IOHIZ` reader - IO space data bus HiZ time"]
        pub type IohizR = crate::FieldReader;
        #[doc = "Field `IOHIZ` writer - IO space data bus HiZ time"]
        pub type IohizW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - IO space setup time"]
            #[inline(always)]
            pub fn ioset(&self) -> IosetR {
                IosetR::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - IO space wait time"]
            #[inline(always)]
            pub fn iowait(&self) -> IowaitR {
                IowaitR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bits 16:23 - IO space hold time"]
            #[inline(always)]
            pub fn iohld(&self) -> IohldR {
                IohldR::new(((self.bits >> 16) & 0xff) as u8)
            }
            #[doc = "Bits 24:31 - IO space data bus HiZ time"]
            #[inline(always)]
            pub fn iohiz(&self) -> IohizR {
                IohizR::new(((self.bits >> 24) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - IO space setup time"]
            #[inline(always)]
            #[must_use]
            pub fn ioset(&mut self) -> IosetW<Piotcfg3Spec> {
                IosetW::new(self, 0)
            }
            #[doc = "Bits 8:15 - IO space wait time"]
            #[inline(always)]
            #[must_use]
            pub fn iowait(&mut self) -> IowaitW<Piotcfg3Spec> {
                IowaitW::new(self, 8)
            }
            #[doc = "Bits 16:23 - IO space hold time"]
            #[inline(always)]
            #[must_use]
            pub fn iohld(&mut self) -> IohldW<Piotcfg3Spec> {
                IohldW::new(self, 16)
            }
            #[doc = "Bits 24:31 - IO space data bus HiZ time"]
            #[inline(always)]
            #[must_use]
            pub fn iohiz(&mut self) -> IohizW<Piotcfg3Spec> {
                IohizW::new(self, 24)
            }
        }
        #[doc = "PC card I/O space timing configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`piotcfg3::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`piotcfg3::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Piotcfg3Spec;
        impl crate::RegisterSpec for Piotcfg3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`piotcfg3::R`](R) reader structure"]
        impl crate::Readable for Piotcfg3Spec {}
        #[doc = "`write(|w| ..)` method takes [`piotcfg3::W`](W) writer structure"]
        impl crate::Writable for Piotcfg3Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets PIOTCFG3 to value 0xfcfc_fcfc"]
        impl crate::Resettable for Piotcfg3Spec {
            const RESET_VALUE: u32 = 0xfcfc_fcfc;
        }
    }
    #[doc = "NECC1 (r) register accessor: NAND flash ECC register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`necc1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@necc1`]
module"]
    #[doc(alias = "NECC1")]
    pub type Necc1 = crate::Reg<necc1::Necc1Spec>;
    #[doc = "NAND flash ECC register 1"]
    pub mod necc1 {
        #[doc = "Register `NECC1` reader"]
        pub type R = crate::R<Necc1Spec>;
        #[doc = "Field `ECC` reader - ECC result"]
        pub type EccR = crate::FieldReader<u32>;
        impl R {
            #[doc = "Bits 0:31 - ECC result"]
            #[inline(always)]
            pub fn ecc(&self) -> EccR {
                EccR::new(self.bits)
            }
        }
        #[doc = "NAND flash ECC register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`necc1::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Necc1Spec;
        impl crate::RegisterSpec for Necc1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`necc1::R`](R) reader structure"]
        impl crate::Readable for Necc1Spec {}
        #[doc = "`reset()` method sets NECC1 to value 0"]
        impl crate::Resettable for Necc1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "NECC2 (r) register accessor: NAND flash ECC register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`necc2::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@necc2`]
module"]
    #[doc(alias = "NECC2")]
    pub type Necc2 = crate::Reg<necc2::Necc2Spec>;
    #[doc = "NAND flash ECC register 2"]
    pub mod necc2 {
        #[doc = "Register `NECC2` reader"]
        pub type R = crate::R<Necc2Spec>;
        #[doc = "Field `ECC` reader - ECC result"]
        pub type EccR = crate::FieldReader<u32>;
        impl R {
            #[doc = "Bits 0:31 - ECC result"]
            #[inline(always)]
            pub fn ecc(&self) -> EccR {
                EccR::new(self.bits)
            }
        }
        #[doc = "NAND flash ECC register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`necc2::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Necc2Spec;
        impl crate::RegisterSpec for Necc2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`necc2::R`](R) reader structure"]
        impl crate::Readable for Necc2Spec {}
        #[doc = "`reset()` method sets NECC2 to value 0"]
        impl crate::Resettable for Necc2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "External interrupt/event controller"]
pub struct Exti {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Exti {}
impl Exti {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const exti::RegisterBlock = 0x4001_0400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const exti::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Exti {
    type Target = exti::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Exti {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Exti").finish()
    }
}
#[doc = "External interrupt/event controller"]
pub mod exti {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        inten: Inten,
        even: Even,
        rten: Rten,
        ften: Ften,
        swiev: Swiev,
        pd: Pd,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Interrupt enable register (EXTI_INTEN)"]
        #[inline(always)]
        pub const fn inten(&self) -> &Inten {
            &self.inten
        }
        #[doc = "0x04 - Event enable register (EXTI_EVEN)"]
        #[inline(always)]
        pub const fn even(&self) -> &Even {
            &self.even
        }
        #[doc = "0x08 - Rising Edge Trigger Enable register (EXTI_RTEN)"]
        #[inline(always)]
        pub const fn rten(&self) -> &Rten {
            &self.rten
        }
        #[doc = "0x0c - Falling Egde Trigger Enable register (EXTI_FTEN)"]
        #[inline(always)]
        pub const fn ften(&self) -> &Ften {
            &self.ften
        }
        #[doc = "0x10 - Software interrupt event register (EXTI_SWIEV)"]
        #[inline(always)]
        pub const fn swiev(&self) -> &Swiev {
            &self.swiev
        }
        #[doc = "0x14 - Pending register (EXTI_PD)"]
        #[inline(always)]
        pub const fn pd(&self) -> &Pd {
            &self.pd
        }
    }
    #[doc = "INTEN (rw) register accessor: Interrupt enable register (EXTI_INTEN)\n\nYou can [`read`](crate::Reg::read) this register and get [`inten::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`inten::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inten`]
module"]
    #[doc(alias = "INTEN")]
    pub type Inten = crate::Reg<inten::IntenSpec>;
    #[doc = "Interrupt enable register (EXTI_INTEN)"]
    pub mod inten {
        #[doc = "Register `INTEN` reader"]
        pub type R = crate::R<IntenSpec>;
        #[doc = "Register `INTEN` writer"]
        pub type W = crate::W<IntenSpec>;
        #[doc = "Field `INTEN0` reader - Enable Interrupt on line 0"]
        pub type Inten0R = crate::BitReader;
        #[doc = "Field `INTEN0` writer - Enable Interrupt on line 0"]
        pub type Inten0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN1` reader - Enable Interrupt on line 1"]
        pub type Inten1R = crate::BitReader;
        #[doc = "Field `INTEN1` writer - Enable Interrupt on line 1"]
        pub type Inten1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN2` reader - Enable Interrupt on line 2"]
        pub type Inten2R = crate::BitReader;
        #[doc = "Field `INTEN2` writer - Enable Interrupt on line 2"]
        pub type Inten2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN3` reader - Enable Interrupt on line 3"]
        pub type Inten3R = crate::BitReader;
        #[doc = "Field `INTEN3` writer - Enable Interrupt on line 3"]
        pub type Inten3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN4` reader - Enable Interrupt on line 4"]
        pub type Inten4R = crate::BitReader;
        #[doc = "Field `INTEN4` writer - Enable Interrupt on line 4"]
        pub type Inten4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN5` reader - Enable Interrupt on line 5"]
        pub type Inten5R = crate::BitReader;
        #[doc = "Field `INTEN5` writer - Enable Interrupt on line 5"]
        pub type Inten5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN6` reader - Enable Interrupt on line 6"]
        pub type Inten6R = crate::BitReader;
        #[doc = "Field `INTEN6` writer - Enable Interrupt on line 6"]
        pub type Inten6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN7` reader - Enable Interrupt on line 7"]
        pub type Inten7R = crate::BitReader;
        #[doc = "Field `INTEN7` writer - Enable Interrupt on line 7"]
        pub type Inten7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN8` reader - Enable Interrupt on line 8"]
        pub type Inten8R = crate::BitReader;
        #[doc = "Field `INTEN8` writer - Enable Interrupt on line 8"]
        pub type Inten8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN9` reader - Enable Interrupt on line 9"]
        pub type Inten9R = crate::BitReader;
        #[doc = "Field `INTEN9` writer - Enable Interrupt on line 9"]
        pub type Inten9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN10` reader - Enable Interrupt on line 10"]
        pub type Inten10R = crate::BitReader;
        #[doc = "Field `INTEN10` writer - Enable Interrupt on line 10"]
        pub type Inten10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN11` reader - Enable Interrupt on line 11"]
        pub type Inten11R = crate::BitReader;
        #[doc = "Field `INTEN11` writer - Enable Interrupt on line 11"]
        pub type Inten11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN12` reader - Enable Interrupt on line 12"]
        pub type Inten12R = crate::BitReader;
        #[doc = "Field `INTEN12` writer - Enable Interrupt on line 12"]
        pub type Inten12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN13` reader - Enable Interrupt on line 13"]
        pub type Inten13R = crate::BitReader;
        #[doc = "Field `INTEN13` writer - Enable Interrupt on line 13"]
        pub type Inten13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN14` reader - Enable Interrupt on line 14"]
        pub type Inten14R = crate::BitReader;
        #[doc = "Field `INTEN14` writer - Enable Interrupt on line 14"]
        pub type Inten14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN15` reader - Enable Interrupt on line 15"]
        pub type Inten15R = crate::BitReader;
        #[doc = "Field `INTEN15` writer - Enable Interrupt on line 15"]
        pub type Inten15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN16` reader - Enable Interrupt on line 16"]
        pub type Inten16R = crate::BitReader;
        #[doc = "Field `INTEN16` writer - Enable Interrupt on line 16"]
        pub type Inten16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN17` reader - Enable Interrupt on line 17"]
        pub type Inten17R = crate::BitReader;
        #[doc = "Field `INTEN17` writer - Enable Interrupt on line 17"]
        pub type Inten17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN18` reader - Enable Interrupt on line 18"]
        pub type Inten18R = crate::BitReader;
        #[doc = "Field `INTEN18` writer - Enable Interrupt on line 18"]
        pub type Inten18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `INTEN19` reader - Enable Interrupt on line 19"]
        pub type Inten19R = crate::BitReader;
        #[doc = "Field `INTEN19` writer - Enable Interrupt on line 19"]
        pub type Inten19W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Enable Interrupt on line 0"]
            #[inline(always)]
            pub fn inten0(&self) -> Inten0R {
                Inten0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable Interrupt on line 1"]
            #[inline(always)]
            pub fn inten1(&self) -> Inten1R {
                Inten1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable Interrupt on line 2"]
            #[inline(always)]
            pub fn inten2(&self) -> Inten2R {
                Inten2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable Interrupt on line 3"]
            #[inline(always)]
            pub fn inten3(&self) -> Inten3R {
                Inten3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Enable Interrupt on line 4"]
            #[inline(always)]
            pub fn inten4(&self) -> Inten4R {
                Inten4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Enable Interrupt on line 5"]
            #[inline(always)]
            pub fn inten5(&self) -> Inten5R {
                Inten5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Enable Interrupt on line 6"]
            #[inline(always)]
            pub fn inten6(&self) -> Inten6R {
                Inten6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Enable Interrupt on line 7"]
            #[inline(always)]
            pub fn inten7(&self) -> Inten7R {
                Inten7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Enable Interrupt on line 8"]
            #[inline(always)]
            pub fn inten8(&self) -> Inten8R {
                Inten8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Enable Interrupt on line 9"]
            #[inline(always)]
            pub fn inten9(&self) -> Inten9R {
                Inten9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Enable Interrupt on line 10"]
            #[inline(always)]
            pub fn inten10(&self) -> Inten10R {
                Inten10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Enable Interrupt on line 11"]
            #[inline(always)]
            pub fn inten11(&self) -> Inten11R {
                Inten11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Enable Interrupt on line 12"]
            #[inline(always)]
            pub fn inten12(&self) -> Inten12R {
                Inten12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Enable Interrupt on line 13"]
            #[inline(always)]
            pub fn inten13(&self) -> Inten13R {
                Inten13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Enable Interrupt on line 14"]
            #[inline(always)]
            pub fn inten14(&self) -> Inten14R {
                Inten14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Enable Interrupt on line 15"]
            #[inline(always)]
            pub fn inten15(&self) -> Inten15R {
                Inten15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Enable Interrupt on line 16"]
            #[inline(always)]
            pub fn inten16(&self) -> Inten16R {
                Inten16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Enable Interrupt on line 17"]
            #[inline(always)]
            pub fn inten17(&self) -> Inten17R {
                Inten17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Enable Interrupt on line 18"]
            #[inline(always)]
            pub fn inten18(&self) -> Inten18R {
                Inten18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Enable Interrupt on line 19"]
            #[inline(always)]
            pub fn inten19(&self) -> Inten19R {
                Inten19R::new(((self.bits >> 19) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Enable Interrupt on line 0"]
            #[inline(always)]
            #[must_use]
            pub fn inten0(&mut self) -> Inten0W<IntenSpec> {
                Inten0W::new(self, 0)
            }
            #[doc = "Bit 1 - Enable Interrupt on line 1"]
            #[inline(always)]
            #[must_use]
            pub fn inten1(&mut self) -> Inten1W<IntenSpec> {
                Inten1W::new(self, 1)
            }
            #[doc = "Bit 2 - Enable Interrupt on line 2"]
            #[inline(always)]
            #[must_use]
            pub fn inten2(&mut self) -> Inten2W<IntenSpec> {
                Inten2W::new(self, 2)
            }
            #[doc = "Bit 3 - Enable Interrupt on line 3"]
            #[inline(always)]
            #[must_use]
            pub fn inten3(&mut self) -> Inten3W<IntenSpec> {
                Inten3W::new(self, 3)
            }
            #[doc = "Bit 4 - Enable Interrupt on line 4"]
            #[inline(always)]
            #[must_use]
            pub fn inten4(&mut self) -> Inten4W<IntenSpec> {
                Inten4W::new(self, 4)
            }
            #[doc = "Bit 5 - Enable Interrupt on line 5"]
            #[inline(always)]
            #[must_use]
            pub fn inten5(&mut self) -> Inten5W<IntenSpec> {
                Inten5W::new(self, 5)
            }
            #[doc = "Bit 6 - Enable Interrupt on line 6"]
            #[inline(always)]
            #[must_use]
            pub fn inten6(&mut self) -> Inten6W<IntenSpec> {
                Inten6W::new(self, 6)
            }
            #[doc = "Bit 7 - Enable Interrupt on line 7"]
            #[inline(always)]
            #[must_use]
            pub fn inten7(&mut self) -> Inten7W<IntenSpec> {
                Inten7W::new(self, 7)
            }
            #[doc = "Bit 8 - Enable Interrupt on line 8"]
            #[inline(always)]
            #[must_use]
            pub fn inten8(&mut self) -> Inten8W<IntenSpec> {
                Inten8W::new(self, 8)
            }
            #[doc = "Bit 9 - Enable Interrupt on line 9"]
            #[inline(always)]
            #[must_use]
            pub fn inten9(&mut self) -> Inten9W<IntenSpec> {
                Inten9W::new(self, 9)
            }
            #[doc = "Bit 10 - Enable Interrupt on line 10"]
            #[inline(always)]
            #[must_use]
            pub fn inten10(&mut self) -> Inten10W<IntenSpec> {
                Inten10W::new(self, 10)
            }
            #[doc = "Bit 11 - Enable Interrupt on line 11"]
            #[inline(always)]
            #[must_use]
            pub fn inten11(&mut self) -> Inten11W<IntenSpec> {
                Inten11W::new(self, 11)
            }
            #[doc = "Bit 12 - Enable Interrupt on line 12"]
            #[inline(always)]
            #[must_use]
            pub fn inten12(&mut self) -> Inten12W<IntenSpec> {
                Inten12W::new(self, 12)
            }
            #[doc = "Bit 13 - Enable Interrupt on line 13"]
            #[inline(always)]
            #[must_use]
            pub fn inten13(&mut self) -> Inten13W<IntenSpec> {
                Inten13W::new(self, 13)
            }
            #[doc = "Bit 14 - Enable Interrupt on line 14"]
            #[inline(always)]
            #[must_use]
            pub fn inten14(&mut self) -> Inten14W<IntenSpec> {
                Inten14W::new(self, 14)
            }
            #[doc = "Bit 15 - Enable Interrupt on line 15"]
            #[inline(always)]
            #[must_use]
            pub fn inten15(&mut self) -> Inten15W<IntenSpec> {
                Inten15W::new(self, 15)
            }
            #[doc = "Bit 16 - Enable Interrupt on line 16"]
            #[inline(always)]
            #[must_use]
            pub fn inten16(&mut self) -> Inten16W<IntenSpec> {
                Inten16W::new(self, 16)
            }
            #[doc = "Bit 17 - Enable Interrupt on line 17"]
            #[inline(always)]
            #[must_use]
            pub fn inten17(&mut self) -> Inten17W<IntenSpec> {
                Inten17W::new(self, 17)
            }
            #[doc = "Bit 18 - Enable Interrupt on line 18"]
            #[inline(always)]
            #[must_use]
            pub fn inten18(&mut self) -> Inten18W<IntenSpec> {
                Inten18W::new(self, 18)
            }
            #[doc = "Bit 19 - Enable Interrupt on line 19"]
            #[inline(always)]
            #[must_use]
            pub fn inten19(&mut self) -> Inten19W<IntenSpec> {
                Inten19W::new(self, 19)
            }
        }
        #[doc = "Interrupt enable register (EXTI_INTEN)\n\nYou can [`read`](crate::Reg::read) this register and get [`inten::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`inten::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntenSpec;
        impl crate::RegisterSpec for IntenSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inten::R`](R) reader structure"]
        impl crate::Readable for IntenSpec {}
        #[doc = "`write(|w| ..)` method takes [`inten::W`](W) writer structure"]
        impl crate::Writable for IntenSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets INTEN to value 0"]
        impl crate::Resettable for IntenSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "EVEN (rw) register accessor: Event enable register (EXTI_EVEN)\n\nYou can [`read`](crate::Reg::read) this register and get [`even::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`even::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@even`]
module"]
    #[doc(alias = "EVEN")]
    pub type Even = crate::Reg<even::EvenSpec>;
    #[doc = "Event enable register (EXTI_EVEN)"]
    pub mod even {
        #[doc = "Register `EVEN` reader"]
        pub type R = crate::R<EvenSpec>;
        #[doc = "Register `EVEN` writer"]
        pub type W = crate::W<EvenSpec>;
        #[doc = "Field `EVEN0` reader - Enable Event on line 0"]
        pub type Even0R = crate::BitReader;
        #[doc = "Field `EVEN0` writer - Enable Event on line 0"]
        pub type Even0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN1` reader - Enable Event on line 1"]
        pub type Even1R = crate::BitReader;
        #[doc = "Field `EVEN1` writer - Enable Event on line 1"]
        pub type Even1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN2` reader - Enable Event on line 2"]
        pub type Even2R = crate::BitReader;
        #[doc = "Field `EVEN2` writer - Enable Event on line 2"]
        pub type Even2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN3` reader - Enable Event on line 3"]
        pub type Even3R = crate::BitReader;
        #[doc = "Field `EVEN3` writer - Enable Event on line 3"]
        pub type Even3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN4` reader - Enable Event on line 4"]
        pub type Even4R = crate::BitReader;
        #[doc = "Field `EVEN4` writer - Enable Event on line 4"]
        pub type Even4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN5` reader - Enable Event on line 5"]
        pub type Even5R = crate::BitReader;
        #[doc = "Field `EVEN5` writer - Enable Event on line 5"]
        pub type Even5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN6` reader - Enable Event on line 6"]
        pub type Even6R = crate::BitReader;
        #[doc = "Field `EVEN6` writer - Enable Event on line 6"]
        pub type Even6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN7` reader - Enable Event on line 7"]
        pub type Even7R = crate::BitReader;
        #[doc = "Field `EVEN7` writer - Enable Event on line 7"]
        pub type Even7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN8` reader - Enable Event on line 8"]
        pub type Even8R = crate::BitReader;
        #[doc = "Field `EVEN8` writer - Enable Event on line 8"]
        pub type Even8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN9` reader - Enable Event on line 9"]
        pub type Even9R = crate::BitReader;
        #[doc = "Field `EVEN9` writer - Enable Event on line 9"]
        pub type Even9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN10` reader - Enable Event on line 10"]
        pub type Even10R = crate::BitReader;
        #[doc = "Field `EVEN10` writer - Enable Event on line 10"]
        pub type Even10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN11` reader - Enable Event on line 11"]
        pub type Even11R = crate::BitReader;
        #[doc = "Field `EVEN11` writer - Enable Event on line 11"]
        pub type Even11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN12` reader - Enable Event on line 12"]
        pub type Even12R = crate::BitReader;
        #[doc = "Field `EVEN12` writer - Enable Event on line 12"]
        pub type Even12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN13` reader - Enable Event on line 13"]
        pub type Even13R = crate::BitReader;
        #[doc = "Field `EVEN13` writer - Enable Event on line 13"]
        pub type Even13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN14` reader - Enable Event on line 14"]
        pub type Even14R = crate::BitReader;
        #[doc = "Field `EVEN14` writer - Enable Event on line 14"]
        pub type Even14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN15` reader - Enable Event on line 15"]
        pub type Even15R = crate::BitReader;
        #[doc = "Field `EVEN15` writer - Enable Event on line 15"]
        pub type Even15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN16` reader - Enable Event on line 16"]
        pub type Even16R = crate::BitReader;
        #[doc = "Field `EVEN16` writer - Enable Event on line 16"]
        pub type Even16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN17` reader - Enable Event on line 17"]
        pub type Even17R = crate::BitReader;
        #[doc = "Field `EVEN17` writer - Enable Event on line 17"]
        pub type Even17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN18` reader - Enable Event on line 18"]
        pub type Even18R = crate::BitReader;
        #[doc = "Field `EVEN18` writer - Enable Event on line 18"]
        pub type Even18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVEN19` reader - Enable Event on line 19"]
        pub type Even19R = crate::BitReader;
        #[doc = "Field `EVEN19` writer - Enable Event on line 19"]
        pub type Even19W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Enable Event on line 0"]
            #[inline(always)]
            pub fn even0(&self) -> Even0R {
                Even0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Enable Event on line 1"]
            #[inline(always)]
            pub fn even1(&self) -> Even1R {
                Even1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Enable Event on line 2"]
            #[inline(always)]
            pub fn even2(&self) -> Even2R {
                Even2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Enable Event on line 3"]
            #[inline(always)]
            pub fn even3(&self) -> Even3R {
                Even3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Enable Event on line 4"]
            #[inline(always)]
            pub fn even4(&self) -> Even4R {
                Even4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Enable Event on line 5"]
            #[inline(always)]
            pub fn even5(&self) -> Even5R {
                Even5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Enable Event on line 6"]
            #[inline(always)]
            pub fn even6(&self) -> Even6R {
                Even6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Enable Event on line 7"]
            #[inline(always)]
            pub fn even7(&self) -> Even7R {
                Even7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Enable Event on line 8"]
            #[inline(always)]
            pub fn even8(&self) -> Even8R {
                Even8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Enable Event on line 9"]
            #[inline(always)]
            pub fn even9(&self) -> Even9R {
                Even9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Enable Event on line 10"]
            #[inline(always)]
            pub fn even10(&self) -> Even10R {
                Even10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Enable Event on line 11"]
            #[inline(always)]
            pub fn even11(&self) -> Even11R {
                Even11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Enable Event on line 12"]
            #[inline(always)]
            pub fn even12(&self) -> Even12R {
                Even12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Enable Event on line 13"]
            #[inline(always)]
            pub fn even13(&self) -> Even13R {
                Even13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Enable Event on line 14"]
            #[inline(always)]
            pub fn even14(&self) -> Even14R {
                Even14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Enable Event on line 15"]
            #[inline(always)]
            pub fn even15(&self) -> Even15R {
                Even15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Enable Event on line 16"]
            #[inline(always)]
            pub fn even16(&self) -> Even16R {
                Even16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Enable Event on line 17"]
            #[inline(always)]
            pub fn even17(&self) -> Even17R {
                Even17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Enable Event on line 18"]
            #[inline(always)]
            pub fn even18(&self) -> Even18R {
                Even18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Enable Event on line 19"]
            #[inline(always)]
            pub fn even19(&self) -> Even19R {
                Even19R::new(((self.bits >> 19) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Enable Event on line 0"]
            #[inline(always)]
            #[must_use]
            pub fn even0(&mut self) -> Even0W<EvenSpec> {
                Even0W::new(self, 0)
            }
            #[doc = "Bit 1 - Enable Event on line 1"]
            #[inline(always)]
            #[must_use]
            pub fn even1(&mut self) -> Even1W<EvenSpec> {
                Even1W::new(self, 1)
            }
            #[doc = "Bit 2 - Enable Event on line 2"]
            #[inline(always)]
            #[must_use]
            pub fn even2(&mut self) -> Even2W<EvenSpec> {
                Even2W::new(self, 2)
            }
            #[doc = "Bit 3 - Enable Event on line 3"]
            #[inline(always)]
            #[must_use]
            pub fn even3(&mut self) -> Even3W<EvenSpec> {
                Even3W::new(self, 3)
            }
            #[doc = "Bit 4 - Enable Event on line 4"]
            #[inline(always)]
            #[must_use]
            pub fn even4(&mut self) -> Even4W<EvenSpec> {
                Even4W::new(self, 4)
            }
            #[doc = "Bit 5 - Enable Event on line 5"]
            #[inline(always)]
            #[must_use]
            pub fn even5(&mut self) -> Even5W<EvenSpec> {
                Even5W::new(self, 5)
            }
            #[doc = "Bit 6 - Enable Event on line 6"]
            #[inline(always)]
            #[must_use]
            pub fn even6(&mut self) -> Even6W<EvenSpec> {
                Even6W::new(self, 6)
            }
            #[doc = "Bit 7 - Enable Event on line 7"]
            #[inline(always)]
            #[must_use]
            pub fn even7(&mut self) -> Even7W<EvenSpec> {
                Even7W::new(self, 7)
            }
            #[doc = "Bit 8 - Enable Event on line 8"]
            #[inline(always)]
            #[must_use]
            pub fn even8(&mut self) -> Even8W<EvenSpec> {
                Even8W::new(self, 8)
            }
            #[doc = "Bit 9 - Enable Event on line 9"]
            #[inline(always)]
            #[must_use]
            pub fn even9(&mut self) -> Even9W<EvenSpec> {
                Even9W::new(self, 9)
            }
            #[doc = "Bit 10 - Enable Event on line 10"]
            #[inline(always)]
            #[must_use]
            pub fn even10(&mut self) -> Even10W<EvenSpec> {
                Even10W::new(self, 10)
            }
            #[doc = "Bit 11 - Enable Event on line 11"]
            #[inline(always)]
            #[must_use]
            pub fn even11(&mut self) -> Even11W<EvenSpec> {
                Even11W::new(self, 11)
            }
            #[doc = "Bit 12 - Enable Event on line 12"]
            #[inline(always)]
            #[must_use]
            pub fn even12(&mut self) -> Even12W<EvenSpec> {
                Even12W::new(self, 12)
            }
            #[doc = "Bit 13 - Enable Event on line 13"]
            #[inline(always)]
            #[must_use]
            pub fn even13(&mut self) -> Even13W<EvenSpec> {
                Even13W::new(self, 13)
            }
            #[doc = "Bit 14 - Enable Event on line 14"]
            #[inline(always)]
            #[must_use]
            pub fn even14(&mut self) -> Even14W<EvenSpec> {
                Even14W::new(self, 14)
            }
            #[doc = "Bit 15 - Enable Event on line 15"]
            #[inline(always)]
            #[must_use]
            pub fn even15(&mut self) -> Even15W<EvenSpec> {
                Even15W::new(self, 15)
            }
            #[doc = "Bit 16 - Enable Event on line 16"]
            #[inline(always)]
            #[must_use]
            pub fn even16(&mut self) -> Even16W<EvenSpec> {
                Even16W::new(self, 16)
            }
            #[doc = "Bit 17 - Enable Event on line 17"]
            #[inline(always)]
            #[must_use]
            pub fn even17(&mut self) -> Even17W<EvenSpec> {
                Even17W::new(self, 17)
            }
            #[doc = "Bit 18 - Enable Event on line 18"]
            #[inline(always)]
            #[must_use]
            pub fn even18(&mut self) -> Even18W<EvenSpec> {
                Even18W::new(self, 18)
            }
            #[doc = "Bit 19 - Enable Event on line 19"]
            #[inline(always)]
            #[must_use]
            pub fn even19(&mut self) -> Even19W<EvenSpec> {
                Even19W::new(self, 19)
            }
        }
        #[doc = "Event enable register (EXTI_EVEN)\n\nYou can [`read`](crate::Reg::read) this register and get [`even::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`even::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct EvenSpec;
        impl crate::RegisterSpec for EvenSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`even::R`](R) reader structure"]
        impl crate::Readable for EvenSpec {}
        #[doc = "`write(|w| ..)` method takes [`even::W`](W) writer structure"]
        impl crate::Writable for EvenSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EVEN to value 0"]
        impl crate::Resettable for EvenSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RTEN (rw) register accessor: Rising Edge Trigger Enable register (EXTI_RTEN)\n\nYou can [`read`](crate::Reg::read) this register and get [`rten::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rten::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rten`]
module"]
    #[doc(alias = "RTEN")]
    pub type Rten = crate::Reg<rten::RtenSpec>;
    #[doc = "Rising Edge Trigger Enable register (EXTI_RTEN)"]
    pub mod rten {
        #[doc = "Register `RTEN` reader"]
        pub type R = crate::R<RtenSpec>;
        #[doc = "Register `RTEN` writer"]
        pub type W = crate::W<RtenSpec>;
        #[doc = "Field `RTEN0` reader - Rising edge trigger enable of line 0"]
        pub type Rten0R = crate::BitReader;
        #[doc = "Field `RTEN0` writer - Rising edge trigger enable of line 0"]
        pub type Rten0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN1` reader - Rising edge trigger enable of line 1"]
        pub type Rten1R = crate::BitReader;
        #[doc = "Field `RTEN1` writer - Rising edge trigger enable of line 1"]
        pub type Rten1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN2` reader - Rising edge trigger enable of line 2"]
        pub type Rten2R = crate::BitReader;
        #[doc = "Field `RTEN2` writer - Rising edge trigger enable of line 2"]
        pub type Rten2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN3` reader - Rising edge trigger enable of line 3"]
        pub type Rten3R = crate::BitReader;
        #[doc = "Field `RTEN3` writer - Rising edge trigger enable of line 3"]
        pub type Rten3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN4` reader - Rising edge trigger enable of line 4"]
        pub type Rten4R = crate::BitReader;
        #[doc = "Field `RTEN4` writer - Rising edge trigger enable of line 4"]
        pub type Rten4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN5` reader - Rising edge trigger enable of line 5"]
        pub type Rten5R = crate::BitReader;
        #[doc = "Field `RTEN5` writer - Rising edge trigger enable of line 5"]
        pub type Rten5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN6` reader - Rising edge trigger enable of line 6"]
        pub type Rten6R = crate::BitReader;
        #[doc = "Field `RTEN6` writer - Rising edge trigger enable of line 6"]
        pub type Rten6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN7` reader - Rising edge trigger enable of line 7"]
        pub type Rten7R = crate::BitReader;
        #[doc = "Field `RTEN7` writer - Rising edge trigger enable of line 7"]
        pub type Rten7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN8` reader - Rising edge trigger enable of line 8"]
        pub type Rten8R = crate::BitReader;
        #[doc = "Field `RTEN8` writer - Rising edge trigger enable of line 8"]
        pub type Rten8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN9` reader - Rising edge trigger enable of line 9"]
        pub type Rten9R = crate::BitReader;
        #[doc = "Field `RTEN9` writer - Rising edge trigger enable of line 9"]
        pub type Rten9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN10` reader - Rising edge trigger enable of line 10"]
        pub type Rten10R = crate::BitReader;
        #[doc = "Field `RTEN10` writer - Rising edge trigger enable of line 10"]
        pub type Rten10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN11` reader - Rising edge trigger enable of line 11"]
        pub type Rten11R = crate::BitReader;
        #[doc = "Field `RTEN11` writer - Rising edge trigger enable of line 11"]
        pub type Rten11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN12` reader - Rising edge trigger enable of line 12"]
        pub type Rten12R = crate::BitReader;
        #[doc = "Field `RTEN12` writer - Rising edge trigger enable of line 12"]
        pub type Rten12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN13` reader - Rising edge trigger enable of line 13"]
        pub type Rten13R = crate::BitReader;
        #[doc = "Field `RTEN13` writer - Rising edge trigger enable of line 13"]
        pub type Rten13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN14` reader - Rising edge trigger enable of line 14"]
        pub type Rten14R = crate::BitReader;
        #[doc = "Field `RTEN14` writer - Rising edge trigger enable of line 14"]
        pub type Rten14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN15` reader - Rising edge trigger enable of line 15"]
        pub type Rten15R = crate::BitReader;
        #[doc = "Field `RTEN15` writer - Rising edge trigger enable of line 15"]
        pub type Rten15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN16` reader - Rising edge trigger enable of line 16"]
        pub type Rten16R = crate::BitReader;
        #[doc = "Field `RTEN16` writer - Rising edge trigger enable of line 16"]
        pub type Rten16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN17` reader - Rising edge trigger enable of line 17"]
        pub type Rten17R = crate::BitReader;
        #[doc = "Field `RTEN17` writer - Rising edge trigger enable of line 17"]
        pub type Rten17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN18` reader - Rising edge trigger enable of line 18"]
        pub type Rten18R = crate::BitReader;
        #[doc = "Field `RTEN18` writer - Rising edge trigger enable of line 18"]
        pub type Rten18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTEN19` reader - Rising edge trigger enable of line 19"]
        pub type Rten19R = crate::BitReader;
        #[doc = "Field `RTEN19` writer - Rising edge trigger enable of line 19"]
        pub type Rten19W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Rising edge trigger enable of line 0"]
            #[inline(always)]
            pub fn rten0(&self) -> Rten0R {
                Rten0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Rising edge trigger enable of line 1"]
            #[inline(always)]
            pub fn rten1(&self) -> Rten1R {
                Rten1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Rising edge trigger enable of line 2"]
            #[inline(always)]
            pub fn rten2(&self) -> Rten2R {
                Rten2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Rising edge trigger enable of line 3"]
            #[inline(always)]
            pub fn rten3(&self) -> Rten3R {
                Rten3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Rising edge trigger enable of line 4"]
            #[inline(always)]
            pub fn rten4(&self) -> Rten4R {
                Rten4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Rising edge trigger enable of line 5"]
            #[inline(always)]
            pub fn rten5(&self) -> Rten5R {
                Rten5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Rising edge trigger enable of line 6"]
            #[inline(always)]
            pub fn rten6(&self) -> Rten6R {
                Rten6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Rising edge trigger enable of line 7"]
            #[inline(always)]
            pub fn rten7(&self) -> Rten7R {
                Rten7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Rising edge trigger enable of line 8"]
            #[inline(always)]
            pub fn rten8(&self) -> Rten8R {
                Rten8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Rising edge trigger enable of line 9"]
            #[inline(always)]
            pub fn rten9(&self) -> Rten9R {
                Rten9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Rising edge trigger enable of line 10"]
            #[inline(always)]
            pub fn rten10(&self) -> Rten10R {
                Rten10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Rising edge trigger enable of line 11"]
            #[inline(always)]
            pub fn rten11(&self) -> Rten11R {
                Rten11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Rising edge trigger enable of line 12"]
            #[inline(always)]
            pub fn rten12(&self) -> Rten12R {
                Rten12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Rising edge trigger enable of line 13"]
            #[inline(always)]
            pub fn rten13(&self) -> Rten13R {
                Rten13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Rising edge trigger enable of line 14"]
            #[inline(always)]
            pub fn rten14(&self) -> Rten14R {
                Rten14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Rising edge trigger enable of line 15"]
            #[inline(always)]
            pub fn rten15(&self) -> Rten15R {
                Rten15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Rising edge trigger enable of line 16"]
            #[inline(always)]
            pub fn rten16(&self) -> Rten16R {
                Rten16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Rising edge trigger enable of line 17"]
            #[inline(always)]
            pub fn rten17(&self) -> Rten17R {
                Rten17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Rising edge trigger enable of line 18"]
            #[inline(always)]
            pub fn rten18(&self) -> Rten18R {
                Rten18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Rising edge trigger enable of line 19"]
            #[inline(always)]
            pub fn rten19(&self) -> Rten19R {
                Rten19R::new(((self.bits >> 19) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Rising edge trigger enable of line 0"]
            #[inline(always)]
            #[must_use]
            pub fn rten0(&mut self) -> Rten0W<RtenSpec> {
                Rten0W::new(self, 0)
            }
            #[doc = "Bit 1 - Rising edge trigger enable of line 1"]
            #[inline(always)]
            #[must_use]
            pub fn rten1(&mut self) -> Rten1W<RtenSpec> {
                Rten1W::new(self, 1)
            }
            #[doc = "Bit 2 - Rising edge trigger enable of line 2"]
            #[inline(always)]
            #[must_use]
            pub fn rten2(&mut self) -> Rten2W<RtenSpec> {
                Rten2W::new(self, 2)
            }
            #[doc = "Bit 3 - Rising edge trigger enable of line 3"]
            #[inline(always)]
            #[must_use]
            pub fn rten3(&mut self) -> Rten3W<RtenSpec> {
                Rten3W::new(self, 3)
            }
            #[doc = "Bit 4 - Rising edge trigger enable of line 4"]
            #[inline(always)]
            #[must_use]
            pub fn rten4(&mut self) -> Rten4W<RtenSpec> {
                Rten4W::new(self, 4)
            }
            #[doc = "Bit 5 - Rising edge trigger enable of line 5"]
            #[inline(always)]
            #[must_use]
            pub fn rten5(&mut self) -> Rten5W<RtenSpec> {
                Rten5W::new(self, 5)
            }
            #[doc = "Bit 6 - Rising edge trigger enable of line 6"]
            #[inline(always)]
            #[must_use]
            pub fn rten6(&mut self) -> Rten6W<RtenSpec> {
                Rten6W::new(self, 6)
            }
            #[doc = "Bit 7 - Rising edge trigger enable of line 7"]
            #[inline(always)]
            #[must_use]
            pub fn rten7(&mut self) -> Rten7W<RtenSpec> {
                Rten7W::new(self, 7)
            }
            #[doc = "Bit 8 - Rising edge trigger enable of line 8"]
            #[inline(always)]
            #[must_use]
            pub fn rten8(&mut self) -> Rten8W<RtenSpec> {
                Rten8W::new(self, 8)
            }
            #[doc = "Bit 9 - Rising edge trigger enable of line 9"]
            #[inline(always)]
            #[must_use]
            pub fn rten9(&mut self) -> Rten9W<RtenSpec> {
                Rten9W::new(self, 9)
            }
            #[doc = "Bit 10 - Rising edge trigger enable of line 10"]
            #[inline(always)]
            #[must_use]
            pub fn rten10(&mut self) -> Rten10W<RtenSpec> {
                Rten10W::new(self, 10)
            }
            #[doc = "Bit 11 - Rising edge trigger enable of line 11"]
            #[inline(always)]
            #[must_use]
            pub fn rten11(&mut self) -> Rten11W<RtenSpec> {
                Rten11W::new(self, 11)
            }
            #[doc = "Bit 12 - Rising edge trigger enable of line 12"]
            #[inline(always)]
            #[must_use]
            pub fn rten12(&mut self) -> Rten12W<RtenSpec> {
                Rten12W::new(self, 12)
            }
            #[doc = "Bit 13 - Rising edge trigger enable of line 13"]
            #[inline(always)]
            #[must_use]
            pub fn rten13(&mut self) -> Rten13W<RtenSpec> {
                Rten13W::new(self, 13)
            }
            #[doc = "Bit 14 - Rising edge trigger enable of line 14"]
            #[inline(always)]
            #[must_use]
            pub fn rten14(&mut self) -> Rten14W<RtenSpec> {
                Rten14W::new(self, 14)
            }
            #[doc = "Bit 15 - Rising edge trigger enable of line 15"]
            #[inline(always)]
            #[must_use]
            pub fn rten15(&mut self) -> Rten15W<RtenSpec> {
                Rten15W::new(self, 15)
            }
            #[doc = "Bit 16 - Rising edge trigger enable of line 16"]
            #[inline(always)]
            #[must_use]
            pub fn rten16(&mut self) -> Rten16W<RtenSpec> {
                Rten16W::new(self, 16)
            }
            #[doc = "Bit 17 - Rising edge trigger enable of line 17"]
            #[inline(always)]
            #[must_use]
            pub fn rten17(&mut self) -> Rten17W<RtenSpec> {
                Rten17W::new(self, 17)
            }
            #[doc = "Bit 18 - Rising edge trigger enable of line 18"]
            #[inline(always)]
            #[must_use]
            pub fn rten18(&mut self) -> Rten18W<RtenSpec> {
                Rten18W::new(self, 18)
            }
            #[doc = "Bit 19 - Rising edge trigger enable of line 19"]
            #[inline(always)]
            #[must_use]
            pub fn rten19(&mut self) -> Rten19W<RtenSpec> {
                Rten19W::new(self, 19)
            }
        }
        #[doc = "Rising Edge Trigger Enable register (EXTI_RTEN)\n\nYou can [`read`](crate::Reg::read) this register and get [`rten::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rten::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RtenSpec;
        impl crate::RegisterSpec for RtenSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rten::R`](R) reader structure"]
        impl crate::Readable for RtenSpec {}
        #[doc = "`write(|w| ..)` method takes [`rten::W`](W) writer structure"]
        impl crate::Writable for RtenSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets RTEN to value 0"]
        impl crate::Resettable for RtenSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "FTEN (rw) register accessor: Falling Egde Trigger Enable register (EXTI_FTEN)\n\nYou can [`read`](crate::Reg::read) this register and get [`ften::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ften::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ften`]
module"]
    #[doc(alias = "FTEN")]
    pub type Ften = crate::Reg<ften::FtenSpec>;
    #[doc = "Falling Egde Trigger Enable register (EXTI_FTEN)"]
    pub mod ften {
        #[doc = "Register `FTEN` reader"]
        pub type R = crate::R<FtenSpec>;
        #[doc = "Register `FTEN` writer"]
        pub type W = crate::W<FtenSpec>;
        #[doc = "Field `FTEN0` reader - Falling edge trigger enable of line 0"]
        pub type Ften0R = crate::BitReader;
        #[doc = "Field `FTEN0` writer - Falling edge trigger enable of line 0"]
        pub type Ften0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN1` reader - Falling edge trigger enable of line 1"]
        pub type Ften1R = crate::BitReader;
        #[doc = "Field `FTEN1` writer - Falling edge trigger enable of line 1"]
        pub type Ften1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN2` reader - Falling edge trigger enable of line 2"]
        pub type Ften2R = crate::BitReader;
        #[doc = "Field `FTEN2` writer - Falling edge trigger enable of line 2"]
        pub type Ften2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN3` reader - Falling edge trigger enable of line 3"]
        pub type Ften3R = crate::BitReader;
        #[doc = "Field `FTEN3` writer - Falling edge trigger enable of line 3"]
        pub type Ften3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN4` reader - Falling edge trigger enable of line 4"]
        pub type Ften4R = crate::BitReader;
        #[doc = "Field `FTEN4` writer - Falling edge trigger enable of line 4"]
        pub type Ften4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN5` reader - Falling edge trigger enable of line 5"]
        pub type Ften5R = crate::BitReader;
        #[doc = "Field `FTEN5` writer - Falling edge trigger enable of line 5"]
        pub type Ften5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN6` reader - Falling edge trigger enable of line 6"]
        pub type Ften6R = crate::BitReader;
        #[doc = "Field `FTEN6` writer - Falling edge trigger enable of line 6"]
        pub type Ften6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN7` reader - Falling edge trigger enable of line 7"]
        pub type Ften7R = crate::BitReader;
        #[doc = "Field `FTEN7` writer - Falling edge trigger enable of line 7"]
        pub type Ften7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN8` reader - Falling edge trigger enable of line 8"]
        pub type Ften8R = crate::BitReader;
        #[doc = "Field `FTEN8` writer - Falling edge trigger enable of line 8"]
        pub type Ften8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN9` reader - Falling edge trigger enable of line 9"]
        pub type Ften9R = crate::BitReader;
        #[doc = "Field `FTEN9` writer - Falling edge trigger enable of line 9"]
        pub type Ften9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN10` reader - Falling edge trigger enable of line 10"]
        pub type Ften10R = crate::BitReader;
        #[doc = "Field `FTEN10` writer - Falling edge trigger enable of line 10"]
        pub type Ften10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN11` reader - Falling edge trigger enable of line 11"]
        pub type Ften11R = crate::BitReader;
        #[doc = "Field `FTEN11` writer - Falling edge trigger enable of line 11"]
        pub type Ften11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN12` reader - Falling edge trigger enable of line 12"]
        pub type Ften12R = crate::BitReader;
        #[doc = "Field `FTEN12` writer - Falling edge trigger enable of line 12"]
        pub type Ften12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN13` reader - Falling edge trigger enable of line 13"]
        pub type Ften13R = crate::BitReader;
        #[doc = "Field `FTEN13` writer - Falling edge trigger enable of line 13"]
        pub type Ften13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN14` reader - Falling edge trigger enable of line 14"]
        pub type Ften14R = crate::BitReader;
        #[doc = "Field `FTEN14` writer - Falling edge trigger enable of line 14"]
        pub type Ften14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN15` reader - Falling edge trigger enable of line 15"]
        pub type Ften15R = crate::BitReader;
        #[doc = "Field `FTEN15` writer - Falling edge trigger enable of line 15"]
        pub type Ften15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN16` reader - Falling edge trigger enable of line 16"]
        pub type Ften16R = crate::BitReader;
        #[doc = "Field `FTEN16` writer - Falling edge trigger enable of line 16"]
        pub type Ften16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN17` reader - Falling edge trigger enable of line 17"]
        pub type Ften17R = crate::BitReader;
        #[doc = "Field `FTEN17` writer - Falling edge trigger enable of line 17"]
        pub type Ften17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN18` reader - Falling edge trigger enable of line 18"]
        pub type Ften18R = crate::BitReader;
        #[doc = "Field `FTEN18` writer - Falling edge trigger enable of line 18"]
        pub type Ften18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FTEN19` reader - Falling edge trigger enable of line 19"]
        pub type Ften19R = crate::BitReader;
        #[doc = "Field `FTEN19` writer - Falling edge trigger enable of line 19"]
        pub type Ften19W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Falling edge trigger enable of line 0"]
            #[inline(always)]
            pub fn ften0(&self) -> Ften0R {
                Ften0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Falling edge trigger enable of line 1"]
            #[inline(always)]
            pub fn ften1(&self) -> Ften1R {
                Ften1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Falling edge trigger enable of line 2"]
            #[inline(always)]
            pub fn ften2(&self) -> Ften2R {
                Ften2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Falling edge trigger enable of line 3"]
            #[inline(always)]
            pub fn ften3(&self) -> Ften3R {
                Ften3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Falling edge trigger enable of line 4"]
            #[inline(always)]
            pub fn ften4(&self) -> Ften4R {
                Ften4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Falling edge trigger enable of line 5"]
            #[inline(always)]
            pub fn ften5(&self) -> Ften5R {
                Ften5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Falling edge trigger enable of line 6"]
            #[inline(always)]
            pub fn ften6(&self) -> Ften6R {
                Ften6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Falling edge trigger enable of line 7"]
            #[inline(always)]
            pub fn ften7(&self) -> Ften7R {
                Ften7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Falling edge trigger enable of line 8"]
            #[inline(always)]
            pub fn ften8(&self) -> Ften8R {
                Ften8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Falling edge trigger enable of line 9"]
            #[inline(always)]
            pub fn ften9(&self) -> Ften9R {
                Ften9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Falling edge trigger enable of line 10"]
            #[inline(always)]
            pub fn ften10(&self) -> Ften10R {
                Ften10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Falling edge trigger enable of line 11"]
            #[inline(always)]
            pub fn ften11(&self) -> Ften11R {
                Ften11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Falling edge trigger enable of line 12"]
            #[inline(always)]
            pub fn ften12(&self) -> Ften12R {
                Ften12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Falling edge trigger enable of line 13"]
            #[inline(always)]
            pub fn ften13(&self) -> Ften13R {
                Ften13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Falling edge trigger enable of line 14"]
            #[inline(always)]
            pub fn ften14(&self) -> Ften14R {
                Ften14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Falling edge trigger enable of line 15"]
            #[inline(always)]
            pub fn ften15(&self) -> Ften15R {
                Ften15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Falling edge trigger enable of line 16"]
            #[inline(always)]
            pub fn ften16(&self) -> Ften16R {
                Ften16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Falling edge trigger enable of line 17"]
            #[inline(always)]
            pub fn ften17(&self) -> Ften17R {
                Ften17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Falling edge trigger enable of line 18"]
            #[inline(always)]
            pub fn ften18(&self) -> Ften18R {
                Ften18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Falling edge trigger enable of line 19"]
            #[inline(always)]
            pub fn ften19(&self) -> Ften19R {
                Ften19R::new(((self.bits >> 19) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Falling edge trigger enable of line 0"]
            #[inline(always)]
            #[must_use]
            pub fn ften0(&mut self) -> Ften0W<FtenSpec> {
                Ften0W::new(self, 0)
            }
            #[doc = "Bit 1 - Falling edge trigger enable of line 1"]
            #[inline(always)]
            #[must_use]
            pub fn ften1(&mut self) -> Ften1W<FtenSpec> {
                Ften1W::new(self, 1)
            }
            #[doc = "Bit 2 - Falling edge trigger enable of line 2"]
            #[inline(always)]
            #[must_use]
            pub fn ften2(&mut self) -> Ften2W<FtenSpec> {
                Ften2W::new(self, 2)
            }
            #[doc = "Bit 3 - Falling edge trigger enable of line 3"]
            #[inline(always)]
            #[must_use]
            pub fn ften3(&mut self) -> Ften3W<FtenSpec> {
                Ften3W::new(self, 3)
            }
            #[doc = "Bit 4 - Falling edge trigger enable of line 4"]
            #[inline(always)]
            #[must_use]
            pub fn ften4(&mut self) -> Ften4W<FtenSpec> {
                Ften4W::new(self, 4)
            }
            #[doc = "Bit 5 - Falling edge trigger enable of line 5"]
            #[inline(always)]
            #[must_use]
            pub fn ften5(&mut self) -> Ften5W<FtenSpec> {
                Ften5W::new(self, 5)
            }
            #[doc = "Bit 6 - Falling edge trigger enable of line 6"]
            #[inline(always)]
            #[must_use]
            pub fn ften6(&mut self) -> Ften6W<FtenSpec> {
                Ften6W::new(self, 6)
            }
            #[doc = "Bit 7 - Falling edge trigger enable of line 7"]
            #[inline(always)]
            #[must_use]
            pub fn ften7(&mut self) -> Ften7W<FtenSpec> {
                Ften7W::new(self, 7)
            }
            #[doc = "Bit 8 - Falling edge trigger enable of line 8"]
            #[inline(always)]
            #[must_use]
            pub fn ften8(&mut self) -> Ften8W<FtenSpec> {
                Ften8W::new(self, 8)
            }
            #[doc = "Bit 9 - Falling edge trigger enable of line 9"]
            #[inline(always)]
            #[must_use]
            pub fn ften9(&mut self) -> Ften9W<FtenSpec> {
                Ften9W::new(self, 9)
            }
            #[doc = "Bit 10 - Falling edge trigger enable of line 10"]
            #[inline(always)]
            #[must_use]
            pub fn ften10(&mut self) -> Ften10W<FtenSpec> {
                Ften10W::new(self, 10)
            }
            #[doc = "Bit 11 - Falling edge trigger enable of line 11"]
            #[inline(always)]
            #[must_use]
            pub fn ften11(&mut self) -> Ften11W<FtenSpec> {
                Ften11W::new(self, 11)
            }
            #[doc = "Bit 12 - Falling edge trigger enable of line 12"]
            #[inline(always)]
            #[must_use]
            pub fn ften12(&mut self) -> Ften12W<FtenSpec> {
                Ften12W::new(self, 12)
            }
            #[doc = "Bit 13 - Falling edge trigger enable of line 13"]
            #[inline(always)]
            #[must_use]
            pub fn ften13(&mut self) -> Ften13W<FtenSpec> {
                Ften13W::new(self, 13)
            }
            #[doc = "Bit 14 - Falling edge trigger enable of line 14"]
            #[inline(always)]
            #[must_use]
            pub fn ften14(&mut self) -> Ften14W<FtenSpec> {
                Ften14W::new(self, 14)
            }
            #[doc = "Bit 15 - Falling edge trigger enable of line 15"]
            #[inline(always)]
            #[must_use]
            pub fn ften15(&mut self) -> Ften15W<FtenSpec> {
                Ften15W::new(self, 15)
            }
            #[doc = "Bit 16 - Falling edge trigger enable of line 16"]
            #[inline(always)]
            #[must_use]
            pub fn ften16(&mut self) -> Ften16W<FtenSpec> {
                Ften16W::new(self, 16)
            }
            #[doc = "Bit 17 - Falling edge trigger enable of line 17"]
            #[inline(always)]
            #[must_use]
            pub fn ften17(&mut self) -> Ften17W<FtenSpec> {
                Ften17W::new(self, 17)
            }
            #[doc = "Bit 18 - Falling edge trigger enable of line 18"]
            #[inline(always)]
            #[must_use]
            pub fn ften18(&mut self) -> Ften18W<FtenSpec> {
                Ften18W::new(self, 18)
            }
            #[doc = "Bit 19 - Falling edge trigger enable of line 19"]
            #[inline(always)]
            #[must_use]
            pub fn ften19(&mut self) -> Ften19W<FtenSpec> {
                Ften19W::new(self, 19)
            }
        }
        #[doc = "Falling Egde Trigger Enable register (EXTI_FTEN)\n\nYou can [`read`](crate::Reg::read) this register and get [`ften::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ften::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct FtenSpec;
        impl crate::RegisterSpec for FtenSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ften::R`](R) reader structure"]
        impl crate::Readable for FtenSpec {}
        #[doc = "`write(|w| ..)` method takes [`ften::W`](W) writer structure"]
        impl crate::Writable for FtenSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets FTEN to value 0"]
        impl crate::Resettable for FtenSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "SWIEV (rw) register accessor: Software interrupt event register (EXTI_SWIEV)\n\nYou can [`read`](crate::Reg::read) this register and get [`swiev::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swiev::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@swiev`]
module"]
    #[doc(alias = "SWIEV")]
    pub type Swiev = crate::Reg<swiev::SwievSpec>;
    #[doc = "Software interrupt event register (EXTI_SWIEV)"]
    pub mod swiev {
        #[doc = "Register `SWIEV` reader"]
        pub type R = crate::R<SwievSpec>;
        #[doc = "Register `SWIEV` writer"]
        pub type W = crate::W<SwievSpec>;
        #[doc = "Field `SWIEV0` reader - Interrupt/Event software trigger on line 0"]
        pub type Swiev0R = crate::BitReader;
        #[doc = "Field `SWIEV0` writer - Interrupt/Event software trigger on line 0"]
        pub type Swiev0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV1` reader - Interrupt/Event software trigger on line 1"]
        pub type Swiev1R = crate::BitReader;
        #[doc = "Field `SWIEV1` writer - Interrupt/Event software trigger on line 1"]
        pub type Swiev1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV2` reader - Interrupt/Event software trigger on line 2"]
        pub type Swiev2R = crate::BitReader;
        #[doc = "Field `SWIEV2` writer - Interrupt/Event software trigger on line 2"]
        pub type Swiev2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV3` reader - Interrupt/Event software trigger on line 3"]
        pub type Swiev3R = crate::BitReader;
        #[doc = "Field `SWIEV3` writer - Interrupt/Event software trigger on line 3"]
        pub type Swiev3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV4` reader - Interrupt/Event software trigger on line 4"]
        pub type Swiev4R = crate::BitReader;
        #[doc = "Field `SWIEV4` writer - Interrupt/Event software trigger on line 4"]
        pub type Swiev4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV5` reader - Interrupt/Event software trigger on line 5"]
        pub type Swiev5R = crate::BitReader;
        #[doc = "Field `SWIEV5` writer - Interrupt/Event software trigger on line 5"]
        pub type Swiev5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV6` reader - Interrupt/Event software trigger on line 6"]
        pub type Swiev6R = crate::BitReader;
        #[doc = "Field `SWIEV6` writer - Interrupt/Event software trigger on line 6"]
        pub type Swiev6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV7` reader - Interrupt/Event software trigger on line 7"]
        pub type Swiev7R = crate::BitReader;
        #[doc = "Field `SWIEV7` writer - Interrupt/Event software trigger on line 7"]
        pub type Swiev7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV8` reader - Interrupt/Event software trigger on line 8"]
        pub type Swiev8R = crate::BitReader;
        #[doc = "Field `SWIEV8` writer - Interrupt/Event software trigger on line 8"]
        pub type Swiev8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV9` reader - Interrupt/Event software trigger on line 9"]
        pub type Swiev9R = crate::BitReader;
        #[doc = "Field `SWIEV9` writer - Interrupt/Event software trigger on line 9"]
        pub type Swiev9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV10` reader - Interrupt/Event software trigger on line 10"]
        pub type Swiev10R = crate::BitReader;
        #[doc = "Field `SWIEV10` writer - Interrupt/Event software trigger on line 10"]
        pub type Swiev10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV11` reader - Interrupt/Event software trigger on line 11"]
        pub type Swiev11R = crate::BitReader;
        #[doc = "Field `SWIEV11` writer - Interrupt/Event software trigger on line 11"]
        pub type Swiev11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV12` reader - Interrupt/Event software trigger on line 12"]
        pub type Swiev12R = crate::BitReader;
        #[doc = "Field `SWIEV12` writer - Interrupt/Event software trigger on line 12"]
        pub type Swiev12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV13` reader - Interrupt/Event software trigger on line 13"]
        pub type Swiev13R = crate::BitReader;
        #[doc = "Field `SWIEV13` writer - Interrupt/Event software trigger on line 13"]
        pub type Swiev13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV14` reader - Interrupt/Event software trigger on line 14"]
        pub type Swiev14R = crate::BitReader;
        #[doc = "Field `SWIEV14` writer - Interrupt/Event software trigger on line 14"]
        pub type Swiev14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV15` reader - Interrupt/Event software trigger on line 15"]
        pub type Swiev15R = crate::BitReader;
        #[doc = "Field `SWIEV15` writer - Interrupt/Event software trigger on line 15"]
        pub type Swiev15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV16` reader - Interrupt/Event software trigger on line 16"]
        pub type Swiev16R = crate::BitReader;
        #[doc = "Field `SWIEV16` writer - Interrupt/Event software trigger on line 16"]
        pub type Swiev16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV17` reader - Interrupt/Event software trigger on line 17"]
        pub type Swiev17R = crate::BitReader;
        #[doc = "Field `SWIEV17` writer - Interrupt/Event software trigger on line 17"]
        pub type Swiev17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV18` reader - Interrupt/Event software trigger on line 18"]
        pub type Swiev18R = crate::BitReader;
        #[doc = "Field `SWIEV18` writer - Interrupt/Event software trigger on line 18"]
        pub type Swiev18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWIEV19` reader - Interrupt/Event software trigger on line 19"]
        pub type Swiev19R = crate::BitReader;
        #[doc = "Field `SWIEV19` writer - Interrupt/Event software trigger on line 19"]
        pub type Swiev19W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Interrupt/Event software trigger on line 0"]
            #[inline(always)]
            pub fn swiev0(&self) -> Swiev0R {
                Swiev0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Interrupt/Event software trigger on line 1"]
            #[inline(always)]
            pub fn swiev1(&self) -> Swiev1R {
                Swiev1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Interrupt/Event software trigger on line 2"]
            #[inline(always)]
            pub fn swiev2(&self) -> Swiev2R {
                Swiev2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Interrupt/Event software trigger on line 3"]
            #[inline(always)]
            pub fn swiev3(&self) -> Swiev3R {
                Swiev3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Interrupt/Event software trigger on line 4"]
            #[inline(always)]
            pub fn swiev4(&self) -> Swiev4R {
                Swiev4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Interrupt/Event software trigger on line 5"]
            #[inline(always)]
            pub fn swiev5(&self) -> Swiev5R {
                Swiev5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Interrupt/Event software trigger on line 6"]
            #[inline(always)]
            pub fn swiev6(&self) -> Swiev6R {
                Swiev6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Interrupt/Event software trigger on line 7"]
            #[inline(always)]
            pub fn swiev7(&self) -> Swiev7R {
                Swiev7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Interrupt/Event software trigger on line 8"]
            #[inline(always)]
            pub fn swiev8(&self) -> Swiev8R {
                Swiev8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Interrupt/Event software trigger on line 9"]
            #[inline(always)]
            pub fn swiev9(&self) -> Swiev9R {
                Swiev9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Interrupt/Event software trigger on line 10"]
            #[inline(always)]
            pub fn swiev10(&self) -> Swiev10R {
                Swiev10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Interrupt/Event software trigger on line 11"]
            #[inline(always)]
            pub fn swiev11(&self) -> Swiev11R {
                Swiev11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Interrupt/Event software trigger on line 12"]
            #[inline(always)]
            pub fn swiev12(&self) -> Swiev12R {
                Swiev12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Interrupt/Event software trigger on line 13"]
            #[inline(always)]
            pub fn swiev13(&self) -> Swiev13R {
                Swiev13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Interrupt/Event software trigger on line 14"]
            #[inline(always)]
            pub fn swiev14(&self) -> Swiev14R {
                Swiev14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Interrupt/Event software trigger on line 15"]
            #[inline(always)]
            pub fn swiev15(&self) -> Swiev15R {
                Swiev15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Interrupt/Event software trigger on line 16"]
            #[inline(always)]
            pub fn swiev16(&self) -> Swiev16R {
                Swiev16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Interrupt/Event software trigger on line 17"]
            #[inline(always)]
            pub fn swiev17(&self) -> Swiev17R {
                Swiev17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Interrupt/Event software trigger on line 18"]
            #[inline(always)]
            pub fn swiev18(&self) -> Swiev18R {
                Swiev18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Interrupt/Event software trigger on line 19"]
            #[inline(always)]
            pub fn swiev19(&self) -> Swiev19R {
                Swiev19R::new(((self.bits >> 19) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Interrupt/Event software trigger on line 0"]
            #[inline(always)]
            #[must_use]
            pub fn swiev0(&mut self) -> Swiev0W<SwievSpec> {
                Swiev0W::new(self, 0)
            }
            #[doc = "Bit 1 - Interrupt/Event software trigger on line 1"]
            #[inline(always)]
            #[must_use]
            pub fn swiev1(&mut self) -> Swiev1W<SwievSpec> {
                Swiev1W::new(self, 1)
            }
            #[doc = "Bit 2 - Interrupt/Event software trigger on line 2"]
            #[inline(always)]
            #[must_use]
            pub fn swiev2(&mut self) -> Swiev2W<SwievSpec> {
                Swiev2W::new(self, 2)
            }
            #[doc = "Bit 3 - Interrupt/Event software trigger on line 3"]
            #[inline(always)]
            #[must_use]
            pub fn swiev3(&mut self) -> Swiev3W<SwievSpec> {
                Swiev3W::new(self, 3)
            }
            #[doc = "Bit 4 - Interrupt/Event software trigger on line 4"]
            #[inline(always)]
            #[must_use]
            pub fn swiev4(&mut self) -> Swiev4W<SwievSpec> {
                Swiev4W::new(self, 4)
            }
            #[doc = "Bit 5 - Interrupt/Event software trigger on line 5"]
            #[inline(always)]
            #[must_use]
            pub fn swiev5(&mut self) -> Swiev5W<SwievSpec> {
                Swiev5W::new(self, 5)
            }
            #[doc = "Bit 6 - Interrupt/Event software trigger on line 6"]
            #[inline(always)]
            #[must_use]
            pub fn swiev6(&mut self) -> Swiev6W<SwievSpec> {
                Swiev6W::new(self, 6)
            }
            #[doc = "Bit 7 - Interrupt/Event software trigger on line 7"]
            #[inline(always)]
            #[must_use]
            pub fn swiev7(&mut self) -> Swiev7W<SwievSpec> {
                Swiev7W::new(self, 7)
            }
            #[doc = "Bit 8 - Interrupt/Event software trigger on line 8"]
            #[inline(always)]
            #[must_use]
            pub fn swiev8(&mut self) -> Swiev8W<SwievSpec> {
                Swiev8W::new(self, 8)
            }
            #[doc = "Bit 9 - Interrupt/Event software trigger on line 9"]
            #[inline(always)]
            #[must_use]
            pub fn swiev9(&mut self) -> Swiev9W<SwievSpec> {
                Swiev9W::new(self, 9)
            }
            #[doc = "Bit 10 - Interrupt/Event software trigger on line 10"]
            #[inline(always)]
            #[must_use]
            pub fn swiev10(&mut self) -> Swiev10W<SwievSpec> {
                Swiev10W::new(self, 10)
            }
            #[doc = "Bit 11 - Interrupt/Event software trigger on line 11"]
            #[inline(always)]
            #[must_use]
            pub fn swiev11(&mut self) -> Swiev11W<SwievSpec> {
                Swiev11W::new(self, 11)
            }
            #[doc = "Bit 12 - Interrupt/Event software trigger on line 12"]
            #[inline(always)]
            #[must_use]
            pub fn swiev12(&mut self) -> Swiev12W<SwievSpec> {
                Swiev12W::new(self, 12)
            }
            #[doc = "Bit 13 - Interrupt/Event software trigger on line 13"]
            #[inline(always)]
            #[must_use]
            pub fn swiev13(&mut self) -> Swiev13W<SwievSpec> {
                Swiev13W::new(self, 13)
            }
            #[doc = "Bit 14 - Interrupt/Event software trigger on line 14"]
            #[inline(always)]
            #[must_use]
            pub fn swiev14(&mut self) -> Swiev14W<SwievSpec> {
                Swiev14W::new(self, 14)
            }
            #[doc = "Bit 15 - Interrupt/Event software trigger on line 15"]
            #[inline(always)]
            #[must_use]
            pub fn swiev15(&mut self) -> Swiev15W<SwievSpec> {
                Swiev15W::new(self, 15)
            }
            #[doc = "Bit 16 - Interrupt/Event software trigger on line 16"]
            #[inline(always)]
            #[must_use]
            pub fn swiev16(&mut self) -> Swiev16W<SwievSpec> {
                Swiev16W::new(self, 16)
            }
            #[doc = "Bit 17 - Interrupt/Event software trigger on line 17"]
            #[inline(always)]
            #[must_use]
            pub fn swiev17(&mut self) -> Swiev17W<SwievSpec> {
                Swiev17W::new(self, 17)
            }
            #[doc = "Bit 18 - Interrupt/Event software trigger on line 18"]
            #[inline(always)]
            #[must_use]
            pub fn swiev18(&mut self) -> Swiev18W<SwievSpec> {
                Swiev18W::new(self, 18)
            }
            #[doc = "Bit 19 - Interrupt/Event software trigger on line 19"]
            #[inline(always)]
            #[must_use]
            pub fn swiev19(&mut self) -> Swiev19W<SwievSpec> {
                Swiev19W::new(self, 19)
            }
        }
        #[doc = "Software interrupt event register (EXTI_SWIEV)\n\nYou can [`read`](crate::Reg::read) this register and get [`swiev::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swiev::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SwievSpec;
        impl crate::RegisterSpec for SwievSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`swiev::R`](R) reader structure"]
        impl crate::Readable for SwievSpec {}
        #[doc = "`write(|w| ..)` method takes [`swiev::W`](W) writer structure"]
        impl crate::Writable for SwievSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SWIEV to value 0"]
        impl crate::Resettable for SwievSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "PD (rw) register accessor: Pending register (EXTI_PD)\n\nYou can [`read`](crate::Reg::read) this register and get [`pd::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pd::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pd`]
module"]
    #[doc(alias = "PD")]
    pub type Pd = crate::Reg<pd::PdSpec>;
    #[doc = "Pending register (EXTI_PD)"]
    pub mod pd {
        #[doc = "Register `PD` reader"]
        pub type R = crate::R<PdSpec>;
        #[doc = "Register `PD` writer"]
        pub type W = crate::W<PdSpec>;
        #[doc = "Field `PD0` reader - Interrupt pending status of line 0"]
        pub type Pd0R = crate::BitReader;
        #[doc = "Field `PD0` writer - Interrupt pending status of line 0"]
        pub type Pd0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD1` reader - Interrupt pending status of line 1"]
        pub type Pd1R = crate::BitReader;
        #[doc = "Field `PD1` writer - Interrupt pending status of line 1"]
        pub type Pd1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD2` reader - Interrupt pending status of line 2"]
        pub type Pd2R = crate::BitReader;
        #[doc = "Field `PD2` writer - Interrupt pending status of line 2"]
        pub type Pd2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD3` reader - Interrupt pending status of line 3"]
        pub type Pd3R = crate::BitReader;
        #[doc = "Field `PD3` writer - Interrupt pending status of line 3"]
        pub type Pd3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD4` reader - Interrupt pending status of line 4"]
        pub type Pd4R = crate::BitReader;
        #[doc = "Field `PD4` writer - Interrupt pending status of line 4"]
        pub type Pd4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD5` reader - Interrupt pending status of line 5"]
        pub type Pd5R = crate::BitReader;
        #[doc = "Field `PD5` writer - Interrupt pending status of line 5"]
        pub type Pd5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD6` reader - Interrupt pending status of line 6"]
        pub type Pd6R = crate::BitReader;
        #[doc = "Field `PD6` writer - Interrupt pending status of line 6"]
        pub type Pd6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD7` reader - Interrupt pending status of line 7"]
        pub type Pd7R = crate::BitReader;
        #[doc = "Field `PD7` writer - Interrupt pending status of line 7"]
        pub type Pd7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD8` reader - Interrupt pending status of line 8"]
        pub type Pd8R = crate::BitReader;
        #[doc = "Field `PD8` writer - Interrupt pending status of line 8"]
        pub type Pd8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD9` reader - Interrupt pending status of line 9"]
        pub type Pd9R = crate::BitReader;
        #[doc = "Field `PD9` writer - Interrupt pending status of line 9"]
        pub type Pd9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD10` reader - Interrupt pending status of line 10"]
        pub type Pd10R = crate::BitReader;
        #[doc = "Field `PD10` writer - Interrupt pending status of line 10"]
        pub type Pd10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD11` reader - Interrupt pending status of line 11"]
        pub type Pd11R = crate::BitReader;
        #[doc = "Field `PD11` writer - Interrupt pending status of line 11"]
        pub type Pd11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD12` reader - Interrupt pending status of line 12"]
        pub type Pd12R = crate::BitReader;
        #[doc = "Field `PD12` writer - Interrupt pending status of line 12"]
        pub type Pd12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD13` reader - Interrupt pending status of line 13"]
        pub type Pd13R = crate::BitReader;
        #[doc = "Field `PD13` writer - Interrupt pending status of line 13"]
        pub type Pd13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD14` reader - Interrupt pending status of line 14"]
        pub type Pd14R = crate::BitReader;
        #[doc = "Field `PD14` writer - Interrupt pending status of line 14"]
        pub type Pd14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD15` reader - Interrupt pending status of line 15"]
        pub type Pd15R = crate::BitReader;
        #[doc = "Field `PD15` writer - Interrupt pending status of line 15"]
        pub type Pd15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD16` reader - Interrupt pending status of line 16"]
        pub type Pd16R = crate::BitReader;
        #[doc = "Field `PD16` writer - Interrupt pending status of line 16"]
        pub type Pd16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD17` reader - Interrupt pending status of line 17"]
        pub type Pd17R = crate::BitReader;
        #[doc = "Field `PD17` writer - Interrupt pending status of line 17"]
        pub type Pd17W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD18` reader - Interrupt pending status of line 18"]
        pub type Pd18R = crate::BitReader;
        #[doc = "Field `PD18` writer - Interrupt pending status of line 18"]
        pub type Pd18W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PD19` reader - Interrupt pending status of line 19"]
        pub type Pd19R = crate::BitReader;
        #[doc = "Field `PD19` writer - Interrupt pending status of line 19"]
        pub type Pd19W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Interrupt pending status of line 0"]
            #[inline(always)]
            pub fn pd0(&self) -> Pd0R {
                Pd0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Interrupt pending status of line 1"]
            #[inline(always)]
            pub fn pd1(&self) -> Pd1R {
                Pd1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Interrupt pending status of line 2"]
            #[inline(always)]
            pub fn pd2(&self) -> Pd2R {
                Pd2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Interrupt pending status of line 3"]
            #[inline(always)]
            pub fn pd3(&self) -> Pd3R {
                Pd3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Interrupt pending status of line 4"]
            #[inline(always)]
            pub fn pd4(&self) -> Pd4R {
                Pd4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Interrupt pending status of line 5"]
            #[inline(always)]
            pub fn pd5(&self) -> Pd5R {
                Pd5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Interrupt pending status of line 6"]
            #[inline(always)]
            pub fn pd6(&self) -> Pd6R {
                Pd6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Interrupt pending status of line 7"]
            #[inline(always)]
            pub fn pd7(&self) -> Pd7R {
                Pd7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Interrupt pending status of line 8"]
            #[inline(always)]
            pub fn pd8(&self) -> Pd8R {
                Pd8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Interrupt pending status of line 9"]
            #[inline(always)]
            pub fn pd9(&self) -> Pd9R {
                Pd9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Interrupt pending status of line 10"]
            #[inline(always)]
            pub fn pd10(&self) -> Pd10R {
                Pd10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Interrupt pending status of line 11"]
            #[inline(always)]
            pub fn pd11(&self) -> Pd11R {
                Pd11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Interrupt pending status of line 12"]
            #[inline(always)]
            pub fn pd12(&self) -> Pd12R {
                Pd12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Interrupt pending status of line 13"]
            #[inline(always)]
            pub fn pd13(&self) -> Pd13R {
                Pd13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Interrupt pending status of line 14"]
            #[inline(always)]
            pub fn pd14(&self) -> Pd14R {
                Pd14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Interrupt pending status of line 15"]
            #[inline(always)]
            pub fn pd15(&self) -> Pd15R {
                Pd15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Interrupt pending status of line 16"]
            #[inline(always)]
            pub fn pd16(&self) -> Pd16R {
                Pd16R::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Interrupt pending status of line 17"]
            #[inline(always)]
            pub fn pd17(&self) -> Pd17R {
                Pd17R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Interrupt pending status of line 18"]
            #[inline(always)]
            pub fn pd18(&self) -> Pd18R {
                Pd18R::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Interrupt pending status of line 19"]
            #[inline(always)]
            pub fn pd19(&self) -> Pd19R {
                Pd19R::new(((self.bits >> 19) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Interrupt pending status of line 0"]
            #[inline(always)]
            #[must_use]
            pub fn pd0(&mut self) -> Pd0W<PdSpec> {
                Pd0W::new(self, 0)
            }
            #[doc = "Bit 1 - Interrupt pending status of line 1"]
            #[inline(always)]
            #[must_use]
            pub fn pd1(&mut self) -> Pd1W<PdSpec> {
                Pd1W::new(self, 1)
            }
            #[doc = "Bit 2 - Interrupt pending status of line 2"]
            #[inline(always)]
            #[must_use]
            pub fn pd2(&mut self) -> Pd2W<PdSpec> {
                Pd2W::new(self, 2)
            }
            #[doc = "Bit 3 - Interrupt pending status of line 3"]
            #[inline(always)]
            #[must_use]
            pub fn pd3(&mut self) -> Pd3W<PdSpec> {
                Pd3W::new(self, 3)
            }
            #[doc = "Bit 4 - Interrupt pending status of line 4"]
            #[inline(always)]
            #[must_use]
            pub fn pd4(&mut self) -> Pd4W<PdSpec> {
                Pd4W::new(self, 4)
            }
            #[doc = "Bit 5 - Interrupt pending status of line 5"]
            #[inline(always)]
            #[must_use]
            pub fn pd5(&mut self) -> Pd5W<PdSpec> {
                Pd5W::new(self, 5)
            }
            #[doc = "Bit 6 - Interrupt pending status of line 6"]
            #[inline(always)]
            #[must_use]
            pub fn pd6(&mut self) -> Pd6W<PdSpec> {
                Pd6W::new(self, 6)
            }
            #[doc = "Bit 7 - Interrupt pending status of line 7"]
            #[inline(always)]
            #[must_use]
            pub fn pd7(&mut self) -> Pd7W<PdSpec> {
                Pd7W::new(self, 7)
            }
            #[doc = "Bit 8 - Interrupt pending status of line 8"]
            #[inline(always)]
            #[must_use]
            pub fn pd8(&mut self) -> Pd8W<PdSpec> {
                Pd8W::new(self, 8)
            }
            #[doc = "Bit 9 - Interrupt pending status of line 9"]
            #[inline(always)]
            #[must_use]
            pub fn pd9(&mut self) -> Pd9W<PdSpec> {
                Pd9W::new(self, 9)
            }
            #[doc = "Bit 10 - Interrupt pending status of line 10"]
            #[inline(always)]
            #[must_use]
            pub fn pd10(&mut self) -> Pd10W<PdSpec> {
                Pd10W::new(self, 10)
            }
            #[doc = "Bit 11 - Interrupt pending status of line 11"]
            #[inline(always)]
            #[must_use]
            pub fn pd11(&mut self) -> Pd11W<PdSpec> {
                Pd11W::new(self, 11)
            }
            #[doc = "Bit 12 - Interrupt pending status of line 12"]
            #[inline(always)]
            #[must_use]
            pub fn pd12(&mut self) -> Pd12W<PdSpec> {
                Pd12W::new(self, 12)
            }
            #[doc = "Bit 13 - Interrupt pending status of line 13"]
            #[inline(always)]
            #[must_use]
            pub fn pd13(&mut self) -> Pd13W<PdSpec> {
                Pd13W::new(self, 13)
            }
            #[doc = "Bit 14 - Interrupt pending status of line 14"]
            #[inline(always)]
            #[must_use]
            pub fn pd14(&mut self) -> Pd14W<PdSpec> {
                Pd14W::new(self, 14)
            }
            #[doc = "Bit 15 - Interrupt pending status of line 15"]
            #[inline(always)]
            #[must_use]
            pub fn pd15(&mut self) -> Pd15W<PdSpec> {
                Pd15W::new(self, 15)
            }
            #[doc = "Bit 16 - Interrupt pending status of line 16"]
            #[inline(always)]
            #[must_use]
            pub fn pd16(&mut self) -> Pd16W<PdSpec> {
                Pd16W::new(self, 16)
            }
            #[doc = "Bit 17 - Interrupt pending status of line 17"]
            #[inline(always)]
            #[must_use]
            pub fn pd17(&mut self) -> Pd17W<PdSpec> {
                Pd17W::new(self, 17)
            }
            #[doc = "Bit 18 - Interrupt pending status of line 18"]
            #[inline(always)]
            #[must_use]
            pub fn pd18(&mut self) -> Pd18W<PdSpec> {
                Pd18W::new(self, 18)
            }
            #[doc = "Bit 19 - Interrupt pending status of line 19"]
            #[inline(always)]
            #[must_use]
            pub fn pd19(&mut self) -> Pd19W<PdSpec> {
                Pd19W::new(self, 19)
            }
        }
        #[doc = "Pending register (EXTI_PD)\n\nYou can [`read`](crate::Reg::read) this register and get [`pd::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pd::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct PdSpec;
        impl crate::RegisterSpec for PdSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`pd::R`](R) reader structure"]
        impl crate::Readable for PdSpec {}
        #[doc = "`write(|w| ..)` method takes [`pd::W`](W) writer structure"]
        impl crate::Writable for PdSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets PD to value 0"]
        impl crate::Resettable for PdSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "FMC"]
pub struct Fmc {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Fmc {}
impl Fmc {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const fmc::RegisterBlock = 0x4002_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fmc::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Fmc {
    type Target = fmc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Fmc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Fmc").finish()
    }
}
#[doc = "FMC"]
pub mod fmc {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ws: Ws,
        key0: Key0,
        obkey: Obkey,
        stat0: Stat0,
        ctl0: Ctl0,
        addr0: Addr0,
        _reserved6: [u8; 0x04],
        obstat: Obstat,
        wp: Wp,
        _reserved8: [u8; 0x20],
        key1: Key1,
        _reserved9: [u8; 0x04],
        stat1: Stat1,
        ctl1: Ctl1,
        addr1: Addr1,
        _reserved12: [u8; 0xa4],
        wsen: Wsen,
        pid: Pid,
    }
    impl RegisterBlock {
        #[doc = "0x00 - wait state counter register"]
        #[inline(always)]
        pub const fn ws(&self) -> &Ws {
            &self.ws
        }
        #[doc = "0x04 - Unlock key register 0"]
        #[inline(always)]
        pub const fn key0(&self) -> &Key0 {
            &self.key0
        }
        #[doc = "0x08 - Option byte unlock key register"]
        #[inline(always)]
        pub const fn obkey(&self) -> &Obkey {
            &self.obkey
        }
        #[doc = "0x0c - Status register 0"]
        #[inline(always)]
        pub const fn stat0(&self) -> &Stat0 {
            &self.stat0
        }
        #[doc = "0x10 - Control register 0"]
        #[inline(always)]
        pub const fn ctl0(&self) -> &Ctl0 {
            &self.ctl0
        }
        #[doc = "0x14 - Address register 0"]
        #[inline(always)]
        pub const fn addr0(&self) -> &Addr0 {
            &self.addr0
        }
        #[doc = "0x1c - Option byte status register"]
        #[inline(always)]
        pub const fn obstat(&self) -> &Obstat {
            &self.obstat
        }
        #[doc = "0x20 - Erase/Program Protection register"]
        #[inline(always)]
        pub const fn wp(&self) -> &Wp {
            &self.wp
        }
        #[doc = "0x44 - Unlock key register 1"]
        #[inline(always)]
        pub const fn key1(&self) -> &Key1 {
            &self.key1
        }
        #[doc = "0x4c - Status register 1"]
        #[inline(always)]
        pub const fn stat1(&self) -> &Stat1 {
            &self.stat1
        }
        #[doc = "0x50 - Control register 1"]
        #[inline(always)]
        pub const fn ctl1(&self) -> &Ctl1 {
            &self.ctl1
        }
        #[doc = "0x54 - Address register 1"]
        #[inline(always)]
        pub const fn addr1(&self) -> &Addr1 {
            &self.addr1
        }
        #[doc = "0xfc - Wait state enable register"]
        #[inline(always)]
        pub const fn wsen(&self) -> &Wsen {
            &self.wsen
        }
        #[doc = "0x100 - Product ID register"]
        #[inline(always)]
        pub const fn pid(&self) -> &Pid {
            &self.pid
        }
    }
    #[doc = "WS (rw) register accessor: wait state counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ws::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ws::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ws`]
module"]
    #[doc(alias = "WS")]
    pub type Ws = crate::Reg<ws::WsSpec>;
    #[doc = "wait state counter register"]
    pub mod ws {
        #[doc = "Register `WS` reader"]
        pub type R = crate::R<WsSpec>;
        #[doc = "Register `WS` writer"]
        pub type W = crate::W<WsSpec>;
        #[doc = "Field `WSCNT` reader - wait state counter register"]
        pub type WscntR = crate::FieldReader;
        #[doc = "Field `WSCNT` writer - wait state counter register"]
        pub type WscntW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        impl R {
            #[doc = "Bits 0:2 - wait state counter register"]
            #[inline(always)]
            pub fn wscnt(&self) -> WscntR {
                WscntR::new((self.bits & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - wait state counter register"]
            #[inline(always)]
            #[must_use]
            pub fn wscnt(&mut self) -> WscntW<WsSpec> {
                WscntW::new(self, 0)
            }
        }
        #[doc = "wait state counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`ws::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ws::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct WsSpec;
        impl crate::RegisterSpec for WsSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ws::R`](R) reader structure"]
        impl crate::Readable for WsSpec {}
        #[doc = "`write(|w| ..)` method takes [`ws::W`](W) writer structure"]
        impl crate::Writable for WsSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets WS to value 0"]
        impl crate::Resettable for WsSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "KEY0 (w) register accessor: Unlock key register 0\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`key0::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@key0`]
module"]
    #[doc(alias = "KEY0")]
    pub type Key0 = crate::Reg<key0::Key0Spec>;
    #[doc = "Unlock key register 0"]
    pub mod key0 {
        #[doc = "Register `KEY0` writer"]
        pub type W = crate::W<Key0Spec>;
        #[doc = "Field `KEY` writer - FMC_CTL0 unlock key"]
        pub type KeyW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl W {
            #[doc = "Bits 0:31 - FMC_CTL0 unlock key"]
            #[inline(always)]
            #[must_use]
            pub fn key(&mut self) -> KeyW<Key0Spec> {
                KeyW::new(self, 0)
            }
        }
        #[doc = "Unlock key register 0\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`key0::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Key0Spec;
        impl crate::RegisterSpec for Key0Spec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`key0::W`](W) writer structure"]
        impl crate::Writable for Key0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets KEY0 to value 0"]
        impl crate::Resettable for Key0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "OBKEY (w) register accessor: Option byte unlock key register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`obkey::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@obkey`]
module"]
    #[doc(alias = "OBKEY")]
    pub type Obkey = crate::Reg<obkey::ObkeySpec>;
    #[doc = "Option byte unlock key register"]
    pub mod obkey {
        #[doc = "Register `OBKEY` writer"]
        pub type W = crate::W<ObkeySpec>;
        #[doc = "Field `OBKEY` writer - FMC_ CTL0 option byte operation unlock register"]
        pub type ObkeyW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl W {
            #[doc = "Bits 0:31 - FMC_ CTL0 option byte operation unlock register"]
            #[inline(always)]
            #[must_use]
            pub fn obkey(&mut self) -> ObkeyW<ObkeySpec> {
                ObkeyW::new(self, 0)
            }
        }
        #[doc = "Option byte unlock key register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`obkey::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct ObkeySpec;
        impl crate::RegisterSpec for ObkeySpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`obkey::W`](W) writer structure"]
        impl crate::Writable for ObkeySpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets OBKEY to value 0"]
        impl crate::Resettable for ObkeySpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "STAT0 (rw) register accessor: Status register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`stat0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat0`]
module"]
    #[doc(alias = "STAT0")]
    pub type Stat0 = crate::Reg<stat0::Stat0Spec>;
    #[doc = "Status register 0"]
    pub mod stat0 {
        #[doc = "Register `STAT0` reader"]
        pub type R = crate::R<Stat0Spec>;
        #[doc = "Register `STAT0` writer"]
        pub type W = crate::W<Stat0Spec>;
        #[doc = "Field `BUSY` reader - The flash is busy bit"]
        pub type BusyR = crate::BitReader;
        #[doc = "Field `PGERR` reader - Program error flag bit"]
        pub type PgerrR = crate::BitReader;
        #[doc = "Field `PGERR` writer - Program error flag bit"]
        pub type PgerrW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WPERR` reader - Erase/Program protection error flag bit"]
        pub type WperrR = crate::BitReader;
        #[doc = "Field `WPERR` writer - Erase/Program protection error flag bit"]
        pub type WperrW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ENDF` reader - End of operation flag bit"]
        pub type EndfR = crate::BitReader;
        #[doc = "Field `ENDF` writer - End of operation flag bit"]
        pub type EndfW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - The flash is busy bit"]
            #[inline(always)]
            pub fn busy(&self) -> BusyR {
                BusyR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 2 - Program error flag bit"]
            #[inline(always)]
            pub fn pgerr(&self) -> PgerrR {
                PgerrR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 4 - Erase/Program protection error flag bit"]
            #[inline(always)]
            pub fn wperr(&self) -> WperrR {
                WperrR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - End of operation flag bit"]
            #[inline(always)]
            pub fn endf(&self) -> EndfR {
                EndfR::new(((self.bits >> 5) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - Program error flag bit"]
            #[inline(always)]
            #[must_use]
            pub fn pgerr(&mut self) -> PgerrW<Stat0Spec> {
                PgerrW::new(self, 2)
            }
            #[doc = "Bit 4 - Erase/Program protection error flag bit"]
            #[inline(always)]
            #[must_use]
            pub fn wperr(&mut self) -> WperrW<Stat0Spec> {
                WperrW::new(self, 4)
            }
            #[doc = "Bit 5 - End of operation flag bit"]
            #[inline(always)]
            #[must_use]
            pub fn endf(&mut self) -> EndfW<Stat0Spec> {
                EndfW::new(self, 5)
            }
        }
        #[doc = "Status register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`stat0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Stat0Spec;
        impl crate::RegisterSpec for Stat0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat0::R`](R) reader structure"]
        impl crate::Readable for Stat0Spec {}
        #[doc = "`write(|w| ..)` method takes [`stat0::W`](W) writer structure"]
        impl crate::Writable for Stat0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets STAT0 to value 0"]
        impl crate::Resettable for Stat0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL0 (rw) register accessor: Control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl0`]
module"]
    #[doc(alias = "CTL0")]
    pub type Ctl0 = crate::Reg<ctl0::Ctl0Spec>;
    #[doc = "Control register 0"]
    pub mod ctl0 {
        #[doc = "Register `CTL0` reader"]
        pub type R = crate::R<Ctl0Spec>;
        #[doc = "Register `CTL0` writer"]
        pub type W = crate::W<Ctl0Spec>;
        #[doc = "Field `PG` reader - Main flash program for bank0 command bit"]
        pub type PgR = crate::BitReader;
        #[doc = "Field `PG` writer - Main flash program for bank0 command bit"]
        pub type PgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PER` reader - Main flash page erase for bank0 command bit"]
        pub type PerR = crate::BitReader;
        #[doc = "Field `PER` writer - Main flash page erase for bank0 command bit"]
        pub type PerW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MER` reader - Main flash mass erase for bank0 command bit"]
        pub type MerR = crate::BitReader;
        #[doc = "Field `MER` writer - Main flash mass erase for bank0 command bit"]
        pub type MerW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OBPG` reader - Option bytes program command bit"]
        pub type ObpgR = crate::BitReader;
        #[doc = "Field `OBPG` writer - Option bytes program command bit"]
        pub type ObpgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OBER` reader - Option bytes erase command bit"]
        pub type OberR = crate::BitReader;
        #[doc = "Field `OBER` writer - Option bytes erase command bit"]
        pub type OberW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `START` reader - Send erase command to FMC bit"]
        pub type StartR = crate::BitReader;
        #[doc = "Field `START` writer - Send erase command to FMC bit"]
        pub type StartW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK` reader - FMC_CTL0 lock bit"]
        pub type LkR = crate::BitReader;
        #[doc = "Field `LK` writer - FMC_CTL0 lock bit"]
        pub type LkW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OBWEN` reader - Option byte erase/program enable bit"]
        pub type ObwenR = crate::BitReader;
        #[doc = "Field `OBWEN` writer - Option byte erase/program enable bit"]
        pub type ObwenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Error interrupt enable bit"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Error interrupt enable bit"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ENDIE` reader - End of operation interrupt enable bit"]
        pub type EndieR = crate::BitReader;
        #[doc = "Field `ENDIE` writer - End of operation interrupt enable bit"]
        pub type EndieW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Main flash program for bank0 command bit"]
            #[inline(always)]
            pub fn pg(&self) -> PgR {
                PgR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Main flash page erase for bank0 command bit"]
            #[inline(always)]
            pub fn per(&self) -> PerR {
                PerR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Main flash mass erase for bank0 command bit"]
            #[inline(always)]
            pub fn mer(&self) -> MerR {
                MerR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 4 - Option bytes program command bit"]
            #[inline(always)]
            pub fn obpg(&self) -> ObpgR {
                ObpgR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Option bytes erase command bit"]
            #[inline(always)]
            pub fn ober(&self) -> OberR {
                OberR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Send erase command to FMC bit"]
            #[inline(always)]
            pub fn start(&self) -> StartR {
                StartR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - FMC_CTL0 lock bit"]
            #[inline(always)]
            pub fn lk(&self) -> LkR {
                LkR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 9 - Option byte erase/program enable bit"]
            #[inline(always)]
            pub fn obwen(&self) -> ObwenR {
                ObwenR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Error interrupt enable bit"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 12 - End of operation interrupt enable bit"]
            #[inline(always)]
            pub fn endie(&self) -> EndieR {
                EndieR::new(((self.bits >> 12) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Main flash program for bank0 command bit"]
            #[inline(always)]
            #[must_use]
            pub fn pg(&mut self) -> PgW<Ctl0Spec> {
                PgW::new(self, 0)
            }
            #[doc = "Bit 1 - Main flash page erase for bank0 command bit"]
            #[inline(always)]
            #[must_use]
            pub fn per(&mut self) -> PerW<Ctl0Spec> {
                PerW::new(self, 1)
            }
            #[doc = "Bit 2 - Main flash mass erase for bank0 command bit"]
            #[inline(always)]
            #[must_use]
            pub fn mer(&mut self) -> MerW<Ctl0Spec> {
                MerW::new(self, 2)
            }
            #[doc = "Bit 4 - Option bytes program command bit"]
            #[inline(always)]
            #[must_use]
            pub fn obpg(&mut self) -> ObpgW<Ctl0Spec> {
                ObpgW::new(self, 4)
            }
            #[doc = "Bit 5 - Option bytes erase command bit"]
            #[inline(always)]
            #[must_use]
            pub fn ober(&mut self) -> OberW<Ctl0Spec> {
                OberW::new(self, 5)
            }
            #[doc = "Bit 6 - Send erase command to FMC bit"]
            #[inline(always)]
            #[must_use]
            pub fn start(&mut self) -> StartW<Ctl0Spec> {
                StartW::new(self, 6)
            }
            #[doc = "Bit 7 - FMC_CTL0 lock bit"]
            #[inline(always)]
            #[must_use]
            pub fn lk(&mut self) -> LkW<Ctl0Spec> {
                LkW::new(self, 7)
            }
            #[doc = "Bit 9 - Option byte erase/program enable bit"]
            #[inline(always)]
            #[must_use]
            pub fn obwen(&mut self) -> ObwenW<Ctl0Spec> {
                ObwenW::new(self, 9)
            }
            #[doc = "Bit 10 - Error interrupt enable bit"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ctl0Spec> {
                ErrieW::new(self, 10)
            }
            #[doc = "Bit 12 - End of operation interrupt enable bit"]
            #[inline(always)]
            #[must_use]
            pub fn endie(&mut self) -> EndieW<Ctl0Spec> {
                EndieW::new(self, 12)
            }
        }
        #[doc = "Control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl0Spec;
        impl crate::RegisterSpec for Ctl0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl0::R`](R) reader structure"]
        impl crate::Readable for Ctl0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl0::W`](W) writer structure"]
        impl crate::Writable for Ctl0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL0 to value 0x80"]
        impl crate::Resettable for Ctl0Spec {
            const RESET_VALUE: u32 = 0x80;
        }
    }
    #[doc = "ADDR0 (w) register accessor: Address register 0\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`addr0::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@addr0`]
module"]
    #[doc(alias = "ADDR0")]
    pub type Addr0 = crate::Reg<addr0::Addr0Spec>;
    #[doc = "Address register 0"]
    pub mod addr0 {
        #[doc = "Register `ADDR0` writer"]
        pub type W = crate::W<Addr0Spec>;
        #[doc = "Field `ADDR` writer - Flash erase/program command address bits"]
        pub type AddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl W {
            #[doc = "Bits 0:31 - Flash erase/program command address bits"]
            #[inline(always)]
            #[must_use]
            pub fn addr(&mut self) -> AddrW<Addr0Spec> {
                AddrW::new(self, 0)
            }
        }
        #[doc = "Address register 0\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`addr0::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Addr0Spec;
        impl crate::RegisterSpec for Addr0Spec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`addr0::W`](W) writer structure"]
        impl crate::Writable for Addr0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets ADDR0 to value 0"]
        impl crate::Resettable for Addr0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "OBSTAT (r) register accessor: Option byte status register\n\nYou can [`read`](crate::Reg::read) this register and get [`obstat::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@obstat`]
module"]
    #[doc(alias = "OBSTAT")]
    pub type Obstat = crate::Reg<obstat::ObstatSpec>;
    #[doc = "Option byte status register"]
    pub mod obstat {
        #[doc = "Register `OBSTAT` reader"]
        pub type R = crate::R<ObstatSpec>;
        #[doc = "Field `OBERR` reader - Option bytes read error bit"]
        pub type OberrR = crate::BitReader;
        #[doc = "Field `SPC` reader - Option bytes security protection code"]
        pub type SpcR = crate::BitReader;
        #[doc = "Field `USER` reader - Store USER of option bytes block after system reset"]
        pub type UserR = crate::FieldReader;
        #[doc = "Field `DATA` reader - Store DATA\\[15:0\\]
of option bytes block after system reset"]
        pub type DataR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bit 0 - Option bytes read error bit"]
            #[inline(always)]
            pub fn oberr(&self) -> OberrR {
                OberrR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Option bytes security protection code"]
            #[inline(always)]
            pub fn spc(&self) -> SpcR {
                SpcR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bits 2:9 - Store USER of option bytes block after system reset"]
            #[inline(always)]
            pub fn user(&self) -> UserR {
                UserR::new(((self.bits >> 2) & 0xff) as u8)
            }
            #[doc = "Bits 10:25 - Store DATA\\[15:0\\]
of option bytes block after system reset"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new(((self.bits >> 10) & 0xffff) as u16)
            }
        }
        #[doc = "Option byte status register\n\nYou can [`read`](crate::Reg::read) this register and get [`obstat::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct ObstatSpec;
        impl crate::RegisterSpec for ObstatSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`obstat::R`](R) reader structure"]
        impl crate::Readable for ObstatSpec {}
        #[doc = "`reset()` method sets OBSTAT to value 0"]
        impl crate::Resettable for ObstatSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "WP (r) register accessor: Erase/Program Protection register\n\nYou can [`read`](crate::Reg::read) this register and get [`wp::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@wp`]
module"]
    #[doc(alias = "WP")]
    pub type Wp = crate::Reg<wp::WpSpec>;
    #[doc = "Erase/Program Protection register"]
    pub mod wp {
        #[doc = "Register `WP` reader"]
        pub type R = crate::R<WpSpec>;
        #[doc = "Field `WP` reader - Store WP\\[31:0\\]
of option bytes block after system reset"]
        pub type WpR = crate::FieldReader<u32>;
        impl R {
            #[doc = "Bits 0:31 - Store WP\\[31:0\\]
of option bytes block after system reset"]
            #[inline(always)]
            pub fn wp(&self) -> WpR {
                WpR::new(self.bits)
            }
        }
        #[doc = "Erase/Program Protection register\n\nYou can [`read`](crate::Reg::read) this register and get [`wp::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct WpSpec;
        impl crate::RegisterSpec for WpSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`wp::R`](R) reader structure"]
        impl crate::Readable for WpSpec {}
        #[doc = "`reset()` method sets WP to value 0"]
        impl crate::Resettable for WpSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "KEY1 (w) register accessor: Unlock key register 1\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`key1::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@key1`]
module"]
    #[doc(alias = "KEY1")]
    pub type Key1 = crate::Reg<key1::Key1Spec>;
    #[doc = "Unlock key register 1"]
    pub mod key1 {
        #[doc = "Register `KEY1` writer"]
        pub type W = crate::W<Key1Spec>;
        #[doc = "Field `KEY` writer - FMC_CTL1 unlock register"]
        pub type KeyW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl W {
            #[doc = "Bits 0:31 - FMC_CTL1 unlock register"]
            #[inline(always)]
            #[must_use]
            pub fn key(&mut self) -> KeyW<Key1Spec> {
                KeyW::new(self, 0)
            }
        }
        #[doc = "Unlock key register 1\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`key1::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Key1Spec;
        impl crate::RegisterSpec for Key1Spec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`key1::W`](W) writer structure"]
        impl crate::Writable for Key1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets KEY1 to value 0"]
        impl crate::Resettable for Key1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "STAT1 (rw) register accessor: Status register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`stat1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat1`]
module"]
    #[doc(alias = "STAT1")]
    pub type Stat1 = crate::Reg<stat1::Stat1Spec>;
    #[doc = "Status register 1"]
    pub mod stat1 {
        #[doc = "Register `STAT1` reader"]
        pub type R = crate::R<Stat1Spec>;
        #[doc = "Register `STAT1` writer"]
        pub type W = crate::W<Stat1Spec>;
        #[doc = "Field `BUSY` reader - The flash is busy bit"]
        pub type BusyR = crate::BitReader;
        #[doc = "Field `PGERR` reader - Program error flag bit"]
        pub type PgerrR = crate::BitReader;
        #[doc = "Field `PGERR` writer - Program error flag bit"]
        pub type PgerrW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WPERR` reader - Erase/Program protection error flag bit"]
        pub type WperrR = crate::BitReader;
        #[doc = "Field `WPERR` writer - Erase/Program protection error flag bit"]
        pub type WperrW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ENDF` reader - End of operation flag bit"]
        pub type EndfR = crate::BitReader;
        #[doc = "Field `ENDF` writer - End of operation flag bit"]
        pub type EndfW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - The flash is busy bit"]
            #[inline(always)]
            pub fn busy(&self) -> BusyR {
                BusyR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 2 - Program error flag bit"]
            #[inline(always)]
            pub fn pgerr(&self) -> PgerrR {
                PgerrR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 4 - Erase/Program protection error flag bit"]
            #[inline(always)]
            pub fn wperr(&self) -> WperrR {
                WperrR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - End of operation flag bit"]
            #[inline(always)]
            pub fn endf(&self) -> EndfR {
                EndfR::new(((self.bits >> 5) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 2 - Program error flag bit"]
            #[inline(always)]
            #[must_use]
            pub fn pgerr(&mut self) -> PgerrW<Stat1Spec> {
                PgerrW::new(self, 2)
            }
            #[doc = "Bit 4 - Erase/Program protection error flag bit"]
            #[inline(always)]
            #[must_use]
            pub fn wperr(&mut self) -> WperrW<Stat1Spec> {
                WperrW::new(self, 4)
            }
            #[doc = "Bit 5 - End of operation flag bit"]
            #[inline(always)]
            #[must_use]
            pub fn endf(&mut self) -> EndfW<Stat1Spec> {
                EndfW::new(self, 5)
            }
        }
        #[doc = "Status register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`stat1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Stat1Spec;
        impl crate::RegisterSpec for Stat1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat1::R`](R) reader structure"]
        impl crate::Readable for Stat1Spec {}
        #[doc = "`write(|w| ..)` method takes [`stat1::W`](W) writer structure"]
        impl crate::Writable for Stat1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets STAT1 to value 0"]
        impl crate::Resettable for Stat1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL1 (rw) register accessor: Control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl1`]
module"]
    #[doc(alias = "CTL1")]
    pub type Ctl1 = crate::Reg<ctl1::Ctl1Spec>;
    #[doc = "Control register 1"]
    pub mod ctl1 {
        #[doc = "Register `CTL1` reader"]
        pub type R = crate::R<Ctl1Spec>;
        #[doc = "Register `CTL1` writer"]
        pub type W = crate::W<Ctl1Spec>;
        #[doc = "Field `PG` reader - Main flash program for bank1 command bit"]
        pub type PgR = crate::BitReader;
        #[doc = "Field `PG` writer - Main flash program for bank1 command bit"]
        pub type PgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PER` reader - Main flash page erase for bank1 command bit"]
        pub type PerR = crate::BitReader;
        #[doc = "Field `PER` writer - Main flash page erase for bank1 command bit"]
        pub type PerW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MER` reader - Main flash mass erase for bank1 command bit"]
        pub type MerR = crate::BitReader;
        #[doc = "Field `MER` writer - Main flash mass erase for bank1 command bit"]
        pub type MerW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `START` reader - Send erase command to FMC bit"]
        pub type StartR = crate::BitReader;
        #[doc = "Field `START` writer - Send erase command to FMC bit"]
        pub type StartW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK` reader - FMC_CTL1 lock bit"]
        pub type LkR = crate::BitReader;
        #[doc = "Field `LK` writer - FMC_CTL1 lock bit"]
        pub type LkW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Error interrupt enable bit"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Error interrupt enable bit"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ENDIE` reader - End of operation interrupt enable bit"]
        pub type EndieR = crate::BitReader;
        #[doc = "Field `ENDIE` writer - End of operation interrupt enable bit"]
        pub type EndieW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Main flash program for bank1 command bit"]
            #[inline(always)]
            pub fn pg(&self) -> PgR {
                PgR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Main flash page erase for bank1 command bit"]
            #[inline(always)]
            pub fn per(&self) -> PerR {
                PerR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Main flash mass erase for bank1 command bit"]
            #[inline(always)]
            pub fn mer(&self) -> MerR {
                MerR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 6 - Send erase command to FMC bit"]
            #[inline(always)]
            pub fn start(&self) -> StartR {
                StartR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - FMC_CTL1 lock bit"]
            #[inline(always)]
            pub fn lk(&self) -> LkR {
                LkR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 10 - Error interrupt enable bit"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 12 - End of operation interrupt enable bit"]
            #[inline(always)]
            pub fn endie(&self) -> EndieR {
                EndieR::new(((self.bits >> 12) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Main flash program for bank1 command bit"]
            #[inline(always)]
            #[must_use]
            pub fn pg(&mut self) -> PgW<Ctl1Spec> {
                PgW::new(self, 0)
            }
            #[doc = "Bit 1 - Main flash page erase for bank1 command bit"]
            #[inline(always)]
            #[must_use]
            pub fn per(&mut self) -> PerW<Ctl1Spec> {
                PerW::new(self, 1)
            }
            #[doc = "Bit 2 - Main flash mass erase for bank1 command bit"]
            #[inline(always)]
            #[must_use]
            pub fn mer(&mut self) -> MerW<Ctl1Spec> {
                MerW::new(self, 2)
            }
            #[doc = "Bit 6 - Send erase command to FMC bit"]
            #[inline(always)]
            #[must_use]
            pub fn start(&mut self) -> StartW<Ctl1Spec> {
                StartW::new(self, 6)
            }
            #[doc = "Bit 7 - FMC_CTL1 lock bit"]
            #[inline(always)]
            #[must_use]
            pub fn lk(&mut self) -> LkW<Ctl1Spec> {
                LkW::new(self, 7)
            }
            #[doc = "Bit 10 - Error interrupt enable bit"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ctl1Spec> {
                ErrieW::new(self, 10)
            }
            #[doc = "Bit 12 - End of operation interrupt enable bit"]
            #[inline(always)]
            #[must_use]
            pub fn endie(&mut self) -> EndieW<Ctl1Spec> {
                EndieW::new(self, 12)
            }
        }
        #[doc = "Control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl1Spec;
        impl crate::RegisterSpec for Ctl1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl1::R`](R) reader structure"]
        impl crate::Readable for Ctl1Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"]
        impl crate::Writable for Ctl1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL1 to value 0x80"]
        impl crate::Resettable for Ctl1Spec {
            const RESET_VALUE: u32 = 0x80;
        }
    }
    #[doc = "ADDR1 (w) register accessor: Address register 1\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`addr1::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@addr1`]
module"]
    #[doc(alias = "ADDR1")]
    pub type Addr1 = crate::Reg<addr1::Addr1Spec>;
    #[doc = "Address register 1"]
    pub mod addr1 {
        #[doc = "Register `ADDR1` writer"]
        pub type W = crate::W<Addr1Spec>;
        #[doc = "Field `ADDR` writer - Flash erase/program command address bits"]
        pub type AddrW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl W {
            #[doc = "Bits 0:31 - Flash erase/program command address bits"]
            #[inline(always)]
            #[must_use]
            pub fn addr(&mut self) -> AddrW<Addr1Spec> {
                AddrW::new(self, 0)
            }
        }
        #[doc = "Address register 1\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`addr1::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Addr1Spec;
        impl crate::RegisterSpec for Addr1Spec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`addr1::W`](W) writer structure"]
        impl crate::Writable for Addr1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets ADDR1 to value 0"]
        impl crate::Resettable for Addr1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "WSEN (rw) register accessor: Wait state enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`wsen::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`wsen::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@wsen`]
module"]
    #[doc(alias = "WSEN")]
    pub type Wsen = crate::Reg<wsen::WsenSpec>;
    #[doc = "Wait state enable register"]
    pub mod wsen {
        #[doc = "Register `WSEN` reader"]
        pub type R = crate::R<WsenSpec>;
        #[doc = "Register `WSEN` writer"]
        pub type W = crate::W<WsenSpec>;
        #[doc = "Field `WSEN` reader - FMC wait state enable register"]
        pub type WsenR = crate::BitReader;
        #[doc = "Field `WSEN` writer - FMC wait state enable register"]
        pub type WsenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - FMC wait state enable register"]
            #[inline(always)]
            pub fn wsen(&self) -> WsenR {
                WsenR::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - FMC wait state enable register"]
            #[inline(always)]
            #[must_use]
            pub fn wsen(&mut self) -> WsenW<WsenSpec> {
                WsenW::new(self, 0)
            }
        }
        #[doc = "Wait state enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`wsen::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`wsen::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct WsenSpec;
        impl crate::RegisterSpec for WsenSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`wsen::R`](R) reader structure"]
        impl crate::Readable for WsenSpec {}
        #[doc = "`write(|w| ..)` method takes [`wsen::W`](W) writer structure"]
        impl crate::Writable for WsenSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets WSEN to value 0"]
        impl crate::Resettable for WsenSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "PID (r) register accessor: Product ID register\n\nYou can [`read`](crate::Reg::read) this register and get [`pid::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pid`]
module"]
    #[doc(alias = "PID")]
    pub type Pid = crate::Reg<pid::PidSpec>;
    #[doc = "Product ID register"]
    pub mod pid {
        #[doc = "Register `PID` reader"]
        pub type R = crate::R<PidSpec>;
        #[doc = "Field `PID` reader - Product reserved ID code register"]
        pub type PidR = crate::FieldReader<u32>;
        impl R {
            #[doc = "Bits 0:31 - Product reserved ID code register"]
            #[inline(always)]
            pub fn pid(&self) -> PidR {
                PidR::new(self.bits)
            }
        }
        #[doc = "Product ID register\n\nYou can [`read`](crate::Reg::read) this register and get [`pid::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct PidSpec;
        impl crate::RegisterSpec for PidSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`pid::R`](R) reader structure"]
        impl crate::Readable for PidSpec {}
        #[doc = "`reset()` method sets PID to value 0"]
        impl crate::Resettable for PidSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "free watchdog timer"]
pub struct Fwdgt {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Fwdgt {}
impl Fwdgt {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const fwdgt::RegisterBlock = 0x4000_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const fwdgt::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Fwdgt {
    type Target = fwdgt::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Fwdgt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Fwdgt").finish()
    }
}
#[doc = "free watchdog timer"]
pub mod fwdgt {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ctl: Ctl,
        psc: Psc,
        rld: Rld,
        stat: Stat,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Control register"]
        #[inline(always)]
        pub const fn ctl(&self) -> &Ctl {
            &self.ctl
        }
        #[doc = "0x04 - Prescaler register"]
        #[inline(always)]
        pub const fn psc(&self) -> &Psc {
            &self.psc
        }
        #[doc = "0x08 - Reload register"]
        #[inline(always)]
        pub const fn rld(&self) -> &Rld {
            &self.rld
        }
        #[doc = "0x0c - Status register"]
        #[inline(always)]
        pub const fn stat(&self) -> &Stat {
            &self.stat
        }
    }
    #[doc = "CTL (w) register accessor: Control register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl`]
module"]
    #[doc(alias = "CTL")]
    pub type Ctl = crate::Reg<ctl::CtlSpec>;
    #[doc = "Control register"]
    pub mod ctl {
        #[doc = "Register `CTL` writer"]
        pub type W = crate::W<CtlSpec>;
        #[doc = "Field `CMD` writer - Key value"]
        pub type CmdW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl W {
            #[doc = "Bits 0:15 - Key value"]
            #[inline(always)]
            #[must_use]
            pub fn cmd(&mut self) -> CmdW<CtlSpec> {
                CmdW::new(self, 0)
            }
        }
        #[doc = "Control register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CtlSpec;
        impl crate::RegisterSpec for CtlSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`ctl::W`](W) writer structure"]
        impl crate::Writable for CtlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL to value 0"]
        impl crate::Resettable for CtlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "PSC (rw) register accessor: Prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@psc`]
module"]
    #[doc(alias = "PSC")]
    pub type Psc = crate::Reg<psc::PscSpec>;
    #[doc = "Prescaler register"]
    pub mod psc {
        #[doc = "Register `PSC` reader"]
        pub type R = crate::R<PscSpec>;
        #[doc = "Register `PSC` writer"]
        pub type W = crate::W<PscSpec>;
        #[doc = "Field `PSC` reader - Free watchdog timer prescaler selection"]
        pub type PscR = crate::FieldReader;
        #[doc = "Field `PSC` writer - Free watchdog timer prescaler selection"]
        pub type PscW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        impl R {
            #[doc = "Bits 0:2 - Free watchdog timer prescaler selection"]
            #[inline(always)]
            pub fn psc(&self) -> PscR {
                PscR::new((self.bits & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Free watchdog timer prescaler selection"]
            #[inline(always)]
            #[must_use]
            pub fn psc(&mut self) -> PscW<PscSpec> {
                PscW::new(self, 0)
            }
        }
        #[doc = "Prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct PscSpec;
        impl crate::RegisterSpec for PscSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`psc::R`](R) reader structure"]
        impl crate::Readable for PscSpec {}
        #[doc = "`write(|w| ..)` method takes [`psc::W`](W) writer structure"]
        impl crate::Writable for PscSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets PSC to value 0"]
        impl crate::Resettable for PscSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RLD (rw) register accessor: Reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`rld::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rld::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rld`]
module"]
    #[doc(alias = "RLD")]
    pub type Rld = crate::Reg<rld::RldSpec>;
    #[doc = "Reload register"]
    pub mod rld {
        #[doc = "Register `RLD` reader"]
        pub type R = crate::R<RldSpec>;
        #[doc = "Register `RLD` writer"]
        pub type W = crate::W<RldSpec>;
        #[doc = "Field `RLD` reader - Free watchdog timer counter reload value"]
        pub type RldR = crate::FieldReader<u16>;
        #[doc = "Field `RLD` writer - Free watchdog timer counter reload value"]
        pub type RldW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:11 - Free watchdog timer counter reload value"]
            #[inline(always)]
            pub fn rld(&self) -> RldR {
                RldR::new((self.bits & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - Free watchdog timer counter reload value"]
            #[inline(always)]
            #[must_use]
            pub fn rld(&mut self) -> RldW<RldSpec> {
                RldW::new(self, 0)
            }
        }
        #[doc = "Reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`rld::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rld::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RldSpec;
        impl crate::RegisterSpec for RldSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rld::R`](R) reader structure"]
        impl crate::Readable for RldSpec {}
        #[doc = "`write(|w| ..)` method takes [`rld::W`](W) writer structure"]
        impl crate::Writable for RldSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets RLD to value 0x0fff"]
        impl crate::Resettable for RldSpec {
            const RESET_VALUE: u32 = 0x0fff;
        }
    }
    #[doc = "STAT (r) register accessor: Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat`]
module"]
    #[doc(alias = "STAT")]
    pub type Stat = crate::Reg<stat::StatSpec>;
    #[doc = "Status register"]
    pub mod stat {
        #[doc = "Register `STAT` reader"]
        pub type R = crate::R<StatSpec>;
        #[doc = "Field `PUD` reader - Free watchdog timer prescaler value update"]
        pub type PudR = crate::BitReader;
        #[doc = "Field `RUD` reader - Free watchdog timer counter reload value update"]
        pub type RudR = crate::BitReader;
        impl R {
            #[doc = "Bit 0 - Free watchdog timer prescaler value update"]
            #[inline(always)]
            pub fn pud(&self) -> PudR {
                PudR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Free watchdog timer counter reload value update"]
            #[inline(always)]
            pub fn rud(&self) -> RudR {
                RudR::new(((self.bits >> 1) & 1) != 0)
            }
        }
        #[doc = "Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct StatSpec;
        impl crate::RegisterSpec for StatSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat::R`](R) reader structure"]
        impl crate::Readable for StatSpec {}
        #[doc = "`reset()` method sets STAT to value 0"]
        impl crate::Resettable for StatSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "General-purpose I/Os"]
pub struct Gpioa {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Gpioa {}
impl Gpioa {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpioa::RegisterBlock = 0x4001_0800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Gpioa {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Gpioa {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioa").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub mod gpioa {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ctl0: Ctl0,
        ctl1: Ctl1,
        istat: Istat,
        octl: Octl,
        bop: Bop,
        bc: Bc,
        lock: Lock,
    }
    impl RegisterBlock {
        #[doc = "0x00 - port control register 0"]
        #[inline(always)]
        pub const fn ctl0(&self) -> &Ctl0 {
            &self.ctl0
        }
        #[doc = "0x04 - port control register 1"]
        #[inline(always)]
        pub const fn ctl1(&self) -> &Ctl1 {
            &self.ctl1
        }
        #[doc = "0x08 - Port input status register"]
        #[inline(always)]
        pub const fn istat(&self) -> &Istat {
            &self.istat
        }
        #[doc = "0x0c - Port output control register"]
        #[inline(always)]
        pub const fn octl(&self) -> &Octl {
            &self.octl
        }
        #[doc = "0x10 - Port bit operate register"]
        #[inline(always)]
        pub const fn bop(&self) -> &Bop {
            &self.bop
        }
        #[doc = "0x14 - Port bit clear register"]
        #[inline(always)]
        pub const fn bc(&self) -> &Bc {
            &self.bc
        }
        #[doc = "0x18 - GPIO port configuration lock register"]
        #[inline(always)]
        pub const fn lock(&self) -> &Lock {
            &self.lock
        }
    }
    #[doc = "CTL0 (rw) register accessor: port control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl0`]
module"]
    #[doc(alias = "CTL0")]
    pub type Ctl0 = crate::Reg<ctl0::Ctl0Spec>;
    #[doc = "port control register 0"]
    pub mod ctl0 {
        #[doc = "Register `CTL0` reader"]
        pub type R = crate::R<Ctl0Spec>;
        #[doc = "Register `CTL0` writer"]
        pub type W = crate::W<Ctl0Spec>;
        #[doc = "Field `MD0` reader - Port x mode bits (x = 0)"]
        pub type Md0R = crate::FieldReader;
        #[doc = "Field `MD0` writer - Port x mode bits (x = 0)"]
        pub type Md0W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL0` reader - Port x configuration bits (x = 0)"]
        pub type Ctl0R = crate::FieldReader;
        #[doc = "Field `CTL0` writer - Port x configuration bits (x = 0)"]
        pub type Ctl0W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD1` reader - Port x mode bits (x = 1)"]
        pub type Md1R = crate::FieldReader;
        #[doc = "Field `MD1` writer - Port x mode bits (x = 1)"]
        pub type Md1W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL1` reader - Port x configuration bits (x = 1)"]
        pub type Ctl1R = crate::FieldReader;
        #[doc = "Field `CTL1` writer - Port x configuration bits (x = 1)"]
        pub type Ctl1W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD2` reader - Port x mode bits (x = 2 )"]
        pub type Md2R = crate::FieldReader;
        #[doc = "Field `MD2` writer - Port x mode bits (x = 2 )"]
        pub type Md2W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL2` reader - Port x configuration bits (x = 2)"]
        pub type Ctl2R = crate::FieldReader;
        #[doc = "Field `CTL2` writer - Port x configuration bits (x = 2)"]
        pub type Ctl2W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD3` reader - Port x mode bits (x = 3 )"]
        pub type Md3R = crate::FieldReader;
        #[doc = "Field `MD3` writer - Port x mode bits (x = 3 )"]
        pub type Md3W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL3` reader - Port x configuration bits (x = 3)"]
        pub type Ctl3R = crate::FieldReader;
        #[doc = "Field `CTL3` writer - Port x configuration bits (x = 3)"]
        pub type Ctl3W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD4` reader - Port x mode bits (x = 4)"]
        pub type Md4R = crate::FieldReader;
        #[doc = "Field `MD4` writer - Port x mode bits (x = 4)"]
        pub type Md4W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL4` reader - Port x configuration bits (x = 4)"]
        pub type Ctl4R = crate::FieldReader;
        #[doc = "Field `CTL4` writer - Port x configuration bits (x = 4)"]
        pub type Ctl4W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD5` reader - Port x mode bits (x = 5)"]
        pub type Md5R = crate::FieldReader;
        #[doc = "Field `MD5` writer - Port x mode bits (x = 5)"]
        pub type Md5W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL5` reader - Port x configuration bits (x = 5)"]
        pub type Ctl5R = crate::FieldReader;
        #[doc = "Field `CTL5` writer - Port x configuration bits (x = 5)"]
        pub type Ctl5W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD6` reader - Port x mode bits (x = 6)"]
        pub type Md6R = crate::FieldReader;
        #[doc = "Field `MD6` writer - Port x mode bits (x = 6)"]
        pub type Md6W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL6` reader - Port x configuration bits (x = 6)"]
        pub type Ctl6R = crate::FieldReader;
        #[doc = "Field `CTL6` writer - Port x configuration bits (x = 6)"]
        pub type Ctl6W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD7` reader - Port x mode bits (x = 7)"]
        pub type Md7R = crate::FieldReader;
        #[doc = "Field `MD7` writer - Port x mode bits (x = 7)"]
        pub type Md7W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL7` reader - Port x configuration bits (x = 7)"]
        pub type Ctl7R = crate::FieldReader;
        #[doc = "Field `CTL7` writer - Port x configuration bits (x = 7)"]
        pub type Ctl7W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bits 0:1 - Port x mode bits (x = 0)"]
            #[inline(always)]
            pub fn md0(&self) -> Md0R {
                Md0R::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (x = 0)"]
            #[inline(always)]
            pub fn ctl0(&self) -> Ctl0R {
                Ctl0R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:5 - Port x mode bits (x = 1)"]
            #[inline(always)]
            pub fn md1(&self) -> Md1R {
                Md1R::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (x = 1)"]
            #[inline(always)]
            pub fn ctl1(&self) -> Ctl1R {
                Ctl1R::new(((self.bits >> 6) & 3) as u8)
            }
            #[doc = "Bits 8:9 - Port x mode bits (x = 2 )"]
            #[inline(always)]
            pub fn md2(&self) -> Md2R {
                Md2R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (x = 2)"]
            #[inline(always)]
            pub fn ctl2(&self) -> Ctl2R {
                Ctl2R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Port x mode bits (x = 3 )"]
            #[inline(always)]
            pub fn md3(&self) -> Md3R {
                Md3R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (x = 3)"]
            #[inline(always)]
            pub fn ctl3(&self) -> Ctl3R {
                Ctl3R::new(((self.bits >> 14) & 3) as u8)
            }
            #[doc = "Bits 16:17 - Port x mode bits (x = 4)"]
            #[inline(always)]
            pub fn md4(&self) -> Md4R {
                Md4R::new(((self.bits >> 16) & 3) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (x = 4)"]
            #[inline(always)]
            pub fn ctl4(&self) -> Ctl4R {
                Ctl4R::new(((self.bits >> 18) & 3) as u8)
            }
            #[doc = "Bits 20:21 - Port x mode bits (x = 5)"]
            #[inline(always)]
            pub fn md5(&self) -> Md5R {
                Md5R::new(((self.bits >> 20) & 3) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (x = 5)"]
            #[inline(always)]
            pub fn ctl5(&self) -> Ctl5R {
                Ctl5R::new(((self.bits >> 22) & 3) as u8)
            }
            #[doc = "Bits 24:25 - Port x mode bits (x = 6)"]
            #[inline(always)]
            pub fn md6(&self) -> Md6R {
                Md6R::new(((self.bits >> 24) & 3) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (x = 6)"]
            #[inline(always)]
            pub fn ctl6(&self) -> Ctl6R {
                Ctl6R::new(((self.bits >> 26) & 3) as u8)
            }
            #[doc = "Bits 28:29 - Port x mode bits (x = 7)"]
            #[inline(always)]
            pub fn md7(&self) -> Md7R {
                Md7R::new(((self.bits >> 28) & 3) as u8)
            }
            #[doc = "Bits 30:31 - Port x configuration bits (x = 7)"]
            #[inline(always)]
            pub fn ctl7(&self) -> Ctl7R {
                Ctl7R::new(((self.bits >> 30) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Port x mode bits (x = 0)"]
            #[inline(always)]
            #[must_use]
            pub fn md0(&mut self) -> Md0W<Ctl0Spec> {
                Md0W::new(self, 0)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (x = 0)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl0(&mut self) -> Ctl0W<Ctl0Spec> {
                Ctl0W::new(self, 2)
            }
            #[doc = "Bits 4:5 - Port x mode bits (x = 1)"]
            #[inline(always)]
            #[must_use]
            pub fn md1(&mut self) -> Md1W<Ctl0Spec> {
                Md1W::new(self, 4)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (x = 1)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl1(&mut self) -> Ctl1W<Ctl0Spec> {
                Ctl1W::new(self, 6)
            }
            #[doc = "Bits 8:9 - Port x mode bits (x = 2 )"]
            #[inline(always)]
            #[must_use]
            pub fn md2(&mut self) -> Md2W<Ctl0Spec> {
                Md2W::new(self, 8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (x = 2)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl2(&mut self) -> Ctl2W<Ctl0Spec> {
                Ctl2W::new(self, 10)
            }
            #[doc = "Bits 12:13 - Port x mode bits (x = 3 )"]
            #[inline(always)]
            #[must_use]
            pub fn md3(&mut self) -> Md3W<Ctl0Spec> {
                Md3W::new(self, 12)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (x = 3)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl3(&mut self) -> Ctl3W<Ctl0Spec> {
                Ctl3W::new(self, 14)
            }
            #[doc = "Bits 16:17 - Port x mode bits (x = 4)"]
            #[inline(always)]
            #[must_use]
            pub fn md4(&mut self) -> Md4W<Ctl0Spec> {
                Md4W::new(self, 16)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (x = 4)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl4(&mut self) -> Ctl4W<Ctl0Spec> {
                Ctl4W::new(self, 18)
            }
            #[doc = "Bits 20:21 - Port x mode bits (x = 5)"]
            #[inline(always)]
            #[must_use]
            pub fn md5(&mut self) -> Md5W<Ctl0Spec> {
                Md5W::new(self, 20)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (x = 5)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl5(&mut self) -> Ctl5W<Ctl0Spec> {
                Ctl5W::new(self, 22)
            }
            #[doc = "Bits 24:25 - Port x mode bits (x = 6)"]
            #[inline(always)]
            #[must_use]
            pub fn md6(&mut self) -> Md6W<Ctl0Spec> {
                Md6W::new(self, 24)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (x = 6)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl6(&mut self) -> Ctl6W<Ctl0Spec> {
                Ctl6W::new(self, 26)
            }
            #[doc = "Bits 28:29 - Port x mode bits (x = 7)"]
            #[inline(always)]
            #[must_use]
            pub fn md7(&mut self) -> Md7W<Ctl0Spec> {
                Md7W::new(self, 28)
            }
            #[doc = "Bits 30:31 - Port x configuration bits (x = 7)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl7(&mut self) -> Ctl7W<Ctl0Spec> {
                Ctl7W::new(self, 30)
            }
        }
        #[doc = "port control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl0Spec;
        impl crate::RegisterSpec for Ctl0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl0::R`](R) reader structure"]
        impl crate::Readable for Ctl0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl0::W`](W) writer structure"]
        impl crate::Writable for Ctl0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL0 to value 0x4444_4444"]
        impl crate::Resettable for Ctl0Spec {
            const RESET_VALUE: u32 = 0x4444_4444;
        }
    }
    #[doc = "CTL1 (rw) register accessor: port control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl1`]
module"]
    #[doc(alias = "CTL1")]
    pub type Ctl1 = crate::Reg<ctl1::Ctl1Spec>;
    #[doc = "port control register 1"]
    pub mod ctl1 {
        #[doc = "Register `CTL1` reader"]
        pub type R = crate::R<Ctl1Spec>;
        #[doc = "Register `CTL1` writer"]
        pub type W = crate::W<Ctl1Spec>;
        #[doc = "Field `MD8` reader - Port x mode bits (x = 8)"]
        pub type Md8R = crate::FieldReader;
        #[doc = "Field `MD8` writer - Port x mode bits (x = 8)"]
        pub type Md8W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL8` reader - Port x configuration bits (x = 8)"]
        pub type Ctl8R = crate::FieldReader;
        #[doc = "Field `CTL8` writer - Port x configuration bits (x = 8)"]
        pub type Ctl8W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD9` reader - Port x mode bits (x = 9)"]
        pub type Md9R = crate::FieldReader;
        #[doc = "Field `MD9` writer - Port x mode bits (x = 9)"]
        pub type Md9W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL9` reader - Port x configuration bits (x = 9)"]
        pub type Ctl9R = crate::FieldReader;
        #[doc = "Field `CTL9` writer - Port x configuration bits (x = 9)"]
        pub type Ctl9W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD10` reader - Port x mode bits (x = 10 )"]
        pub type Md10R = crate::FieldReader;
        #[doc = "Field `MD10` writer - Port x mode bits (x = 10 )"]
        pub type Md10W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL10` reader - Port x configuration bits (x = 10)"]
        pub type Ctl10R = crate::FieldReader;
        #[doc = "Field `CTL10` writer - Port x configuration bits (x = 10)"]
        pub type Ctl10W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD11` reader - Port x mode bits (x = 11 )"]
        pub type Md11R = crate::FieldReader;
        #[doc = "Field `MD11` writer - Port x mode bits (x = 11 )"]
        pub type Md11W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL11` reader - Port x configuration bits (x = 11)"]
        pub type Ctl11R = crate::FieldReader;
        #[doc = "Field `CTL11` writer - Port x configuration bits (x = 11)"]
        pub type Ctl11W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD12` reader - Port x mode bits (x = 12)"]
        pub type Md12R = crate::FieldReader;
        #[doc = "Field `MD12` writer - Port x mode bits (x = 12)"]
        pub type Md12W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL12` reader - Port x configuration bits (x = 12)"]
        pub type Ctl12R = crate::FieldReader;
        #[doc = "Field `CTL12` writer - Port x configuration bits (x = 12)"]
        pub type Ctl12W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD13` reader - Port x mode bits (x = 13)"]
        pub type Md13R = crate::FieldReader;
        #[doc = "Field `MD13` writer - Port x mode bits (x = 13)"]
        pub type Md13W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL13` reader - Port x configuration bits (x = 13)"]
        pub type Ctl13R = crate::FieldReader;
        #[doc = "Field `CTL13` writer - Port x configuration bits (x = 13)"]
        pub type Ctl13W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD14` reader - Port x mode bits (x = 14)"]
        pub type Md14R = crate::FieldReader;
        #[doc = "Field `MD14` writer - Port x mode bits (x = 14)"]
        pub type Md14W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL14` reader - Port x configuration bits (x = 14)"]
        pub type Ctl14R = crate::FieldReader;
        #[doc = "Field `CTL14` writer - Port x configuration bits (x = 14)"]
        pub type Ctl14W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `MD15` reader - Port x mode bits (x = 15)"]
        pub type Md15R = crate::FieldReader;
        #[doc = "Field `MD15` writer - Port x mode bits (x = 15)"]
        pub type Md15W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CTL15` reader - Port x configuration bits (x = 15)"]
        pub type Ctl15R = crate::FieldReader;
        #[doc = "Field `CTL15` writer - Port x configuration bits (x = 15)"]
        pub type Ctl15W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bits 0:1 - Port x mode bits (x = 8)"]
            #[inline(always)]
            pub fn md8(&self) -> Md8R {
                Md8R::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (x = 8)"]
            #[inline(always)]
            pub fn ctl8(&self) -> Ctl8R {
                Ctl8R::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:5 - Port x mode bits (x = 9)"]
            #[inline(always)]
            pub fn md9(&self) -> Md9R {
                Md9R::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (x = 9)"]
            #[inline(always)]
            pub fn ctl9(&self) -> Ctl9R {
                Ctl9R::new(((self.bits >> 6) & 3) as u8)
            }
            #[doc = "Bits 8:9 - Port x mode bits (x = 10 )"]
            #[inline(always)]
            pub fn md10(&self) -> Md10R {
                Md10R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (x = 10)"]
            #[inline(always)]
            pub fn ctl10(&self) -> Ctl10R {
                Ctl10R::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:13 - Port x mode bits (x = 11 )"]
            #[inline(always)]
            pub fn md11(&self) -> Md11R {
                Md11R::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (x = 11)"]
            #[inline(always)]
            pub fn ctl11(&self) -> Ctl11R {
                Ctl11R::new(((self.bits >> 14) & 3) as u8)
            }
            #[doc = "Bits 16:17 - Port x mode bits (x = 12)"]
            #[inline(always)]
            pub fn md12(&self) -> Md12R {
                Md12R::new(((self.bits >> 16) & 3) as u8)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (x = 12)"]
            #[inline(always)]
            pub fn ctl12(&self) -> Ctl12R {
                Ctl12R::new(((self.bits >> 18) & 3) as u8)
            }
            #[doc = "Bits 20:21 - Port x mode bits (x = 13)"]
            #[inline(always)]
            pub fn md13(&self) -> Md13R {
                Md13R::new(((self.bits >> 20) & 3) as u8)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (x = 13)"]
            #[inline(always)]
            pub fn ctl13(&self) -> Ctl13R {
                Ctl13R::new(((self.bits >> 22) & 3) as u8)
            }
            #[doc = "Bits 24:25 - Port x mode bits (x = 14)"]
            #[inline(always)]
            pub fn md14(&self) -> Md14R {
                Md14R::new(((self.bits >> 24) & 3) as u8)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (x = 14)"]
            #[inline(always)]
            pub fn ctl14(&self) -> Ctl14R {
                Ctl14R::new(((self.bits >> 26) & 3) as u8)
            }
            #[doc = "Bits 28:29 - Port x mode bits (x = 15)"]
            #[inline(always)]
            pub fn md15(&self) -> Md15R {
                Md15R::new(((self.bits >> 28) & 3) as u8)
            }
            #[doc = "Bits 30:31 - Port x configuration bits (x = 15)"]
            #[inline(always)]
            pub fn ctl15(&self) -> Ctl15R {
                Ctl15R::new(((self.bits >> 30) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Port x mode bits (x = 8)"]
            #[inline(always)]
            #[must_use]
            pub fn md8(&mut self) -> Md8W<Ctl1Spec> {
                Md8W::new(self, 0)
            }
            #[doc = "Bits 2:3 - Port x configuration bits (x = 8)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl8(&mut self) -> Ctl8W<Ctl1Spec> {
                Ctl8W::new(self, 2)
            }
            #[doc = "Bits 4:5 - Port x mode bits (x = 9)"]
            #[inline(always)]
            #[must_use]
            pub fn md9(&mut self) -> Md9W<Ctl1Spec> {
                Md9W::new(self, 4)
            }
            #[doc = "Bits 6:7 - Port x configuration bits (x = 9)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl9(&mut self) -> Ctl9W<Ctl1Spec> {
                Ctl9W::new(self, 6)
            }
            #[doc = "Bits 8:9 - Port x mode bits (x = 10 )"]
            #[inline(always)]
            #[must_use]
            pub fn md10(&mut self) -> Md10W<Ctl1Spec> {
                Md10W::new(self, 8)
            }
            #[doc = "Bits 10:11 - Port x configuration bits (x = 10)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl10(&mut self) -> Ctl10W<Ctl1Spec> {
                Ctl10W::new(self, 10)
            }
            #[doc = "Bits 12:13 - Port x mode bits (x = 11 )"]
            #[inline(always)]
            #[must_use]
            pub fn md11(&mut self) -> Md11W<Ctl1Spec> {
                Md11W::new(self, 12)
            }
            #[doc = "Bits 14:15 - Port x configuration bits (x = 11)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl11(&mut self) -> Ctl11W<Ctl1Spec> {
                Ctl11W::new(self, 14)
            }
            #[doc = "Bits 16:17 - Port x mode bits (x = 12)"]
            #[inline(always)]
            #[must_use]
            pub fn md12(&mut self) -> Md12W<Ctl1Spec> {
                Md12W::new(self, 16)
            }
            #[doc = "Bits 18:19 - Port x configuration bits (x = 12)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl12(&mut self) -> Ctl12W<Ctl1Spec> {
                Ctl12W::new(self, 18)
            }
            #[doc = "Bits 20:21 - Port x mode bits (x = 13)"]
            #[inline(always)]
            #[must_use]
            pub fn md13(&mut self) -> Md13W<Ctl1Spec> {
                Md13W::new(self, 20)
            }
            #[doc = "Bits 22:23 - Port x configuration bits (x = 13)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl13(&mut self) -> Ctl13W<Ctl1Spec> {
                Ctl13W::new(self, 22)
            }
            #[doc = "Bits 24:25 - Port x mode bits (x = 14)"]
            #[inline(always)]
            #[must_use]
            pub fn md14(&mut self) -> Md14W<Ctl1Spec> {
                Md14W::new(self, 24)
            }
            #[doc = "Bits 26:27 - Port x configuration bits (x = 14)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl14(&mut self) -> Ctl14W<Ctl1Spec> {
                Ctl14W::new(self, 26)
            }
            #[doc = "Bits 28:29 - Port x mode bits (x = 15)"]
            #[inline(always)]
            #[must_use]
            pub fn md15(&mut self) -> Md15W<Ctl1Spec> {
                Md15W::new(self, 28)
            }
            #[doc = "Bits 30:31 - Port x configuration bits (x = 15)"]
            #[inline(always)]
            #[must_use]
            pub fn ctl15(&mut self) -> Ctl15W<Ctl1Spec> {
                Ctl15W::new(self, 30)
            }
        }
        #[doc = "port control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl1Spec;
        impl crate::RegisterSpec for Ctl1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl1::R`](R) reader structure"]
        impl crate::Readable for Ctl1Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"]
        impl crate::Writable for Ctl1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL1 to value 0x4444_4444"]
        impl crate::Resettable for Ctl1Spec {
            const RESET_VALUE: u32 = 0x4444_4444;
        }
    }
    #[doc = "ISTAT (r) register accessor: Port input status register\n\nYou can [`read`](crate::Reg::read) this register and get [`istat::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@istat`]
module"]
    #[doc(alias = "ISTAT")]
    pub type Istat = crate::Reg<istat::IstatSpec>;
    #[doc = "Port input status register"]
    pub mod istat {
        #[doc = "Register `ISTAT` reader"]
        pub type R = crate::R<IstatSpec>;
        #[doc = "Field `ISTAT0` reader - Port input status"]
        pub type Istat0R = crate::BitReader;
        #[doc = "Field `ISTAT1` reader - Port input status"]
        pub type Istat1R = crate::BitReader;
        #[doc = "Field `ISTAT2` reader - Port input status"]
        pub type Istat2R = crate::BitReader;
        #[doc = "Field `ISTAT3` reader - Port input status"]
        pub type Istat3R = crate::BitReader;
        #[doc = "Field `ISTAT4` reader - Port input status"]
        pub type Istat4R = crate::BitReader;
        #[doc = "Field `ISTAT5` reader - Port input status"]
        pub type Istat5R = crate::BitReader;
        #[doc = "Field `ISTAT6` reader - Port input status"]
        pub type Istat6R = crate::BitReader;
        #[doc = "Field `ISTAT7` reader - Port input status"]
        pub type Istat7R = crate::BitReader;
        #[doc = "Field `ISTAT8` reader - Port input status"]
        pub type Istat8R = crate::BitReader;
        #[doc = "Field `ISTAT9` reader - Port input status"]
        pub type Istat9R = crate::BitReader;
        #[doc = "Field `ISTAT10` reader - Port input status"]
        pub type Istat10R = crate::BitReader;
        #[doc = "Field `ISTAT11` reader - Port input status"]
        pub type Istat11R = crate::BitReader;
        #[doc = "Field `ISTAT12` reader - Port input status"]
        pub type Istat12R = crate::BitReader;
        #[doc = "Field `ISTAT13` reader - Port input status"]
        pub type Istat13R = crate::BitReader;
        #[doc = "Field `ISTAT14` reader - Port input status"]
        pub type Istat14R = crate::BitReader;
        #[doc = "Field `ISTAT15` reader - Port input status"]
        pub type Istat15R = crate::BitReader;
        impl R {
            #[doc = "Bit 0 - Port input status"]
            #[inline(always)]
            pub fn istat0(&self) -> Istat0R {
                Istat0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Port input status"]
            #[inline(always)]
            pub fn istat1(&self) -> Istat1R {
                Istat1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Port input status"]
            #[inline(always)]
            pub fn istat2(&self) -> Istat2R {
                Istat2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Port input status"]
            #[inline(always)]
            pub fn istat3(&self) -> Istat3R {
                Istat3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Port input status"]
            #[inline(always)]
            pub fn istat4(&self) -> Istat4R {
                Istat4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Port input status"]
            #[inline(always)]
            pub fn istat5(&self) -> Istat5R {
                Istat5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Port input status"]
            #[inline(always)]
            pub fn istat6(&self) -> Istat6R {
                Istat6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Port input status"]
            #[inline(always)]
            pub fn istat7(&self) -> Istat7R {
                Istat7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Port input status"]
            #[inline(always)]
            pub fn istat8(&self) -> Istat8R {
                Istat8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Port input status"]
            #[inline(always)]
            pub fn istat9(&self) -> Istat9R {
                Istat9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Port input status"]
            #[inline(always)]
            pub fn istat10(&self) -> Istat10R {
                Istat10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Port input status"]
            #[inline(always)]
            pub fn istat11(&self) -> Istat11R {
                Istat11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Port input status"]
            #[inline(always)]
            pub fn istat12(&self) -> Istat12R {
                Istat12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Port input status"]
            #[inline(always)]
            pub fn istat13(&self) -> Istat13R {
                Istat13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Port input status"]
            #[inline(always)]
            pub fn istat14(&self) -> Istat14R {
                Istat14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Port input status"]
            #[inline(always)]
            pub fn istat15(&self) -> Istat15R {
                Istat15R::new(((self.bits >> 15) & 1) != 0)
            }
        }
        #[doc = "Port input status register\n\nYou can [`read`](crate::Reg::read) this register and get [`istat::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IstatSpec;
        impl crate::RegisterSpec for IstatSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`istat::R`](R) reader structure"]
        impl crate::Readable for IstatSpec {}
        #[doc = "`reset()` method sets ISTAT to value 0"]
        impl crate::Resettable for IstatSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "OCTL (rw) register accessor: Port output control register\n\nYou can [`read`](crate::Reg::read) this register and get [`octl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`octl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@octl`]
module"]
    #[doc(alias = "OCTL")]
    pub type Octl = crate::Reg<octl::OctlSpec>;
    #[doc = "Port output control register"]
    pub mod octl {
        #[doc = "Register `OCTL` reader"]
        pub type R = crate::R<OctlSpec>;
        #[doc = "Register `OCTL` writer"]
        pub type W = crate::W<OctlSpec>;
        #[doc = "Field `OCTL0` reader - Port output control"]
        pub type Octl0R = crate::BitReader;
        #[doc = "Field `OCTL0` writer - Port output control"]
        pub type Octl0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL1` reader - Port output control"]
        pub type Octl1R = crate::BitReader;
        #[doc = "Field `OCTL1` writer - Port output control"]
        pub type Octl1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL2` reader - Port output control"]
        pub type Octl2R = crate::BitReader;
        #[doc = "Field `OCTL2` writer - Port output control"]
        pub type Octl2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL3` reader - Port output control"]
        pub type Octl3R = crate::BitReader;
        #[doc = "Field `OCTL3` writer - Port output control"]
        pub type Octl3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL4` reader - Port output control"]
        pub type Octl4R = crate::BitReader;
        #[doc = "Field `OCTL4` writer - Port output control"]
        pub type Octl4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL5` reader - Port output control"]
        pub type Octl5R = crate::BitReader;
        #[doc = "Field `OCTL5` writer - Port output control"]
        pub type Octl5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL6` reader - Port output control"]
        pub type Octl6R = crate::BitReader;
        #[doc = "Field `OCTL6` writer - Port output control"]
        pub type Octl6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL7` reader - Port output control"]
        pub type Octl7R = crate::BitReader;
        #[doc = "Field `OCTL7` writer - Port output control"]
        pub type Octl7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL8` reader - Port output control"]
        pub type Octl8R = crate::BitReader;
        #[doc = "Field `OCTL8` writer - Port output control"]
        pub type Octl8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL9` reader - Port output control"]
        pub type Octl9R = crate::BitReader;
        #[doc = "Field `OCTL9` writer - Port output control"]
        pub type Octl9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL10` reader - Port output control"]
        pub type Octl10R = crate::BitReader;
        #[doc = "Field `OCTL10` writer - Port output control"]
        pub type Octl10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL11` reader - Port output control"]
        pub type Octl11R = crate::BitReader;
        #[doc = "Field `OCTL11` writer - Port output control"]
        pub type Octl11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL12` reader - Port output control"]
        pub type Octl12R = crate::BitReader;
        #[doc = "Field `OCTL12` writer - Port output control"]
        pub type Octl12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL13` reader - Port output control"]
        pub type Octl13R = crate::BitReader;
        #[doc = "Field `OCTL13` writer - Port output control"]
        pub type Octl13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL14` reader - Port output control"]
        pub type Octl14R = crate::BitReader;
        #[doc = "Field `OCTL14` writer - Port output control"]
        pub type Octl14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OCTL15` reader - Port output control"]
        pub type Octl15R = crate::BitReader;
        #[doc = "Field `OCTL15` writer - Port output control"]
        pub type Octl15W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Port output control"]
            #[inline(always)]
            pub fn octl0(&self) -> Octl0R {
                Octl0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Port output control"]
            #[inline(always)]
            pub fn octl1(&self) -> Octl1R {
                Octl1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Port output control"]
            #[inline(always)]
            pub fn octl2(&self) -> Octl2R {
                Octl2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Port output control"]
            #[inline(always)]
            pub fn octl3(&self) -> Octl3R {
                Octl3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Port output control"]
            #[inline(always)]
            pub fn octl4(&self) -> Octl4R {
                Octl4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Port output control"]
            #[inline(always)]
            pub fn octl5(&self) -> Octl5R {
                Octl5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Port output control"]
            #[inline(always)]
            pub fn octl6(&self) -> Octl6R {
                Octl6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Port output control"]
            #[inline(always)]
            pub fn octl7(&self) -> Octl7R {
                Octl7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Port output control"]
            #[inline(always)]
            pub fn octl8(&self) -> Octl8R {
                Octl8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Port output control"]
            #[inline(always)]
            pub fn octl9(&self) -> Octl9R {
                Octl9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Port output control"]
            #[inline(always)]
            pub fn octl10(&self) -> Octl10R {
                Octl10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Port output control"]
            #[inline(always)]
            pub fn octl11(&self) -> Octl11R {
                Octl11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Port output control"]
            #[inline(always)]
            pub fn octl12(&self) -> Octl12R {
                Octl12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Port output control"]
            #[inline(always)]
            pub fn octl13(&self) -> Octl13R {
                Octl13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Port output control"]
            #[inline(always)]
            pub fn octl14(&self) -> Octl14R {
                Octl14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Port output control"]
            #[inline(always)]
            pub fn octl15(&self) -> Octl15R {
                Octl15R::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl0(&mut self) -> Octl0W<OctlSpec> {
                Octl0W::new(self, 0)
            }
            #[doc = "Bit 1 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl1(&mut self) -> Octl1W<OctlSpec> {
                Octl1W::new(self, 1)
            }
            #[doc = "Bit 2 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl2(&mut self) -> Octl2W<OctlSpec> {
                Octl2W::new(self, 2)
            }
            #[doc = "Bit 3 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl3(&mut self) -> Octl3W<OctlSpec> {
                Octl3W::new(self, 3)
            }
            #[doc = "Bit 4 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl4(&mut self) -> Octl4W<OctlSpec> {
                Octl4W::new(self, 4)
            }
            #[doc = "Bit 5 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl5(&mut self) -> Octl5W<OctlSpec> {
                Octl5W::new(self, 5)
            }
            #[doc = "Bit 6 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl6(&mut self) -> Octl6W<OctlSpec> {
                Octl6W::new(self, 6)
            }
            #[doc = "Bit 7 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl7(&mut self) -> Octl7W<OctlSpec> {
                Octl7W::new(self, 7)
            }
            #[doc = "Bit 8 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl8(&mut self) -> Octl8W<OctlSpec> {
                Octl8W::new(self, 8)
            }
            #[doc = "Bit 9 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl9(&mut self) -> Octl9W<OctlSpec> {
                Octl9W::new(self, 9)
            }
            #[doc = "Bit 10 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl10(&mut self) -> Octl10W<OctlSpec> {
                Octl10W::new(self, 10)
            }
            #[doc = "Bit 11 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl11(&mut self) -> Octl11W<OctlSpec> {
                Octl11W::new(self, 11)
            }
            #[doc = "Bit 12 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl12(&mut self) -> Octl12W<OctlSpec> {
                Octl12W::new(self, 12)
            }
            #[doc = "Bit 13 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl13(&mut self) -> Octl13W<OctlSpec> {
                Octl13W::new(self, 13)
            }
            #[doc = "Bit 14 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl14(&mut self) -> Octl14W<OctlSpec> {
                Octl14W::new(self, 14)
            }
            #[doc = "Bit 15 - Port output control"]
            #[inline(always)]
            #[must_use]
            pub fn octl15(&mut self) -> Octl15W<OctlSpec> {
                Octl15W::new(self, 15)
            }
        }
        #[doc = "Port output control register\n\nYou can [`read`](crate::Reg::read) this register and get [`octl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`octl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct OctlSpec;
        impl crate::RegisterSpec for OctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`octl::R`](R) reader structure"]
        impl crate::Readable for OctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`octl::W`](W) writer structure"]
        impl crate::Writable for OctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets OCTL to value 0"]
        impl crate::Resettable for OctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "BOP (w) register accessor: Port bit operate register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bop::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@bop`]
module"]
    #[doc(alias = "BOP")]
    pub type Bop = crate::Reg<bop::BopSpec>;
    #[doc = "Port bit operate register"]
    pub mod bop {
        #[doc = "Register `BOP` writer"]
        pub type W = crate::W<BopSpec>;
        #[doc = "Field `BOP0` writer - Port 0 Set bit"]
        pub type Bop0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP1` writer - Port 1 Set bit"]
        pub type Bop1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP2` writer - Port 2 Set bit"]
        pub type Bop2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP3` writer - Port 3 Set bit"]
        pub type Bop3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP4` writer - Port 4 Set bit"]
        pub type Bop4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP5` writer - Port 5 Set bit"]
        pub type Bop5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP6` writer - Port 6 Set bit"]
        pub type Bop6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP7` writer - Port 7 Set bit"]
        pub type Bop7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP8` writer - Port 8 Set bit"]
        pub type Bop8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP9` writer - Port 9 Set bit"]
        pub type Bop9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP10` writer - Port 10 Set bit"]
        pub type Bop10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP11` writer - Port 11 Set bit"]
        pub type Bop11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP12` writer - Port 12 Set bit"]
        pub type Bop12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP13` writer - Port 13 Set bit"]
        pub type Bop13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP14` writer - Port 14 Set bit"]
        pub type Bop14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BOP15` writer - Port 15 Set bit"]
        pub type Bop15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR0` writer - Port 0 Clear bit"]
        pub type Cr0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR1` writer - Port 1 Clear bit"]
        pub type Cr1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR2` writer - Port 2 Clear bit"]
        pub type Cr2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR3` writer - Port 3 Clear bit"]
        pub type Cr3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR4` writer - Port 4 Clear bit"]
        pub type Cr4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR5` writer - Port 5 Clear bit"]
        pub type Cr5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR6` writer - Port 6 Clear bit"]
        pub type Cr6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR7` writer - Port 7 Clear bit"]
        pub type Cr7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR8` writer - Port 8 Clear bit"]
        pub type Cr8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR9` writer - Port 9 Clear bit"]
        pub type Cr9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR10` writer - Port 10 Clear bit"]
        pub type Cr10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR11` writer - Port 11 Clear bit"]
        pub type Cr11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR12` writer - Port 12 Clear bit"]
        pub type Cr12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR13` writer - Port 13 Clear bit"]
        pub type Cr13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR14` writer - Port 14 Clear bit"]
        pub type Cr14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR15` writer - Port 15 Clear bit"]
        pub type Cr15W<'a, REG> = crate::BitWriter<'a, REG>;
        impl W {
            #[doc = "Bit 0 - Port 0 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop0(&mut self) -> Bop0W<BopSpec> {
                Bop0W::new(self, 0)
            }
            #[doc = "Bit 1 - Port 1 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop1(&mut self) -> Bop1W<BopSpec> {
                Bop1W::new(self, 1)
            }
            #[doc = "Bit 2 - Port 2 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop2(&mut self) -> Bop2W<BopSpec> {
                Bop2W::new(self, 2)
            }
            #[doc = "Bit 3 - Port 3 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop3(&mut self) -> Bop3W<BopSpec> {
                Bop3W::new(self, 3)
            }
            #[doc = "Bit 4 - Port 4 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop4(&mut self) -> Bop4W<BopSpec> {
                Bop4W::new(self, 4)
            }
            #[doc = "Bit 5 - Port 5 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop5(&mut self) -> Bop5W<BopSpec> {
                Bop5W::new(self, 5)
            }
            #[doc = "Bit 6 - Port 6 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop6(&mut self) -> Bop6W<BopSpec> {
                Bop6W::new(self, 6)
            }
            #[doc = "Bit 7 - Port 7 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop7(&mut self) -> Bop7W<BopSpec> {
                Bop7W::new(self, 7)
            }
            #[doc = "Bit 8 - Port 8 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop8(&mut self) -> Bop8W<BopSpec> {
                Bop8W::new(self, 8)
            }
            #[doc = "Bit 9 - Port 9 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop9(&mut self) -> Bop9W<BopSpec> {
                Bop9W::new(self, 9)
            }
            #[doc = "Bit 10 - Port 10 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop10(&mut self) -> Bop10W<BopSpec> {
                Bop10W::new(self, 10)
            }
            #[doc = "Bit 11 - Port 11 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop11(&mut self) -> Bop11W<BopSpec> {
                Bop11W::new(self, 11)
            }
            #[doc = "Bit 12 - Port 12 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop12(&mut self) -> Bop12W<BopSpec> {
                Bop12W::new(self, 12)
            }
            #[doc = "Bit 13 - Port 13 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop13(&mut self) -> Bop13W<BopSpec> {
                Bop13W::new(self, 13)
            }
            #[doc = "Bit 14 - Port 14 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop14(&mut self) -> Bop14W<BopSpec> {
                Bop14W::new(self, 14)
            }
            #[doc = "Bit 15 - Port 15 Set bit"]
            #[inline(always)]
            #[must_use]
            pub fn bop15(&mut self) -> Bop15W<BopSpec> {
                Bop15W::new(self, 15)
            }
            #[doc = "Bit 16 - Port 0 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr0(&mut self) -> Cr0W<BopSpec> {
                Cr0W::new(self, 16)
            }
            #[doc = "Bit 17 - Port 1 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr1(&mut self) -> Cr1W<BopSpec> {
                Cr1W::new(self, 17)
            }
            #[doc = "Bit 18 - Port 2 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr2(&mut self) -> Cr2W<BopSpec> {
                Cr2W::new(self, 18)
            }
            #[doc = "Bit 19 - Port 3 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr3(&mut self) -> Cr3W<BopSpec> {
                Cr3W::new(self, 19)
            }
            #[doc = "Bit 20 - Port 4 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr4(&mut self) -> Cr4W<BopSpec> {
                Cr4W::new(self, 20)
            }
            #[doc = "Bit 21 - Port 5 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr5(&mut self) -> Cr5W<BopSpec> {
                Cr5W::new(self, 21)
            }
            #[doc = "Bit 22 - Port 6 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr6(&mut self) -> Cr6W<BopSpec> {
                Cr6W::new(self, 22)
            }
            #[doc = "Bit 23 - Port 7 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr7(&mut self) -> Cr7W<BopSpec> {
                Cr7W::new(self, 23)
            }
            #[doc = "Bit 24 - Port 8 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr8(&mut self) -> Cr8W<BopSpec> {
                Cr8W::new(self, 24)
            }
            #[doc = "Bit 25 - Port 9 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr9(&mut self) -> Cr9W<BopSpec> {
                Cr9W::new(self, 25)
            }
            #[doc = "Bit 26 - Port 10 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr10(&mut self) -> Cr10W<BopSpec> {
                Cr10W::new(self, 26)
            }
            #[doc = "Bit 27 - Port 11 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr11(&mut self) -> Cr11W<BopSpec> {
                Cr11W::new(self, 27)
            }
            #[doc = "Bit 28 - Port 12 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr12(&mut self) -> Cr12W<BopSpec> {
                Cr12W::new(self, 28)
            }
            #[doc = "Bit 29 - Port 13 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr13(&mut self) -> Cr13W<BopSpec> {
                Cr13W::new(self, 29)
            }
            #[doc = "Bit 30 - Port 14 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr14(&mut self) -> Cr14W<BopSpec> {
                Cr14W::new(self, 30)
            }
            #[doc = "Bit 31 - Port 15 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr15(&mut self) -> Cr15W<BopSpec> {
                Cr15W::new(self, 31)
            }
        }
        #[doc = "Port bit operate register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bop::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct BopSpec;
        impl crate::RegisterSpec for BopSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`bop::W`](W) writer structure"]
        impl crate::Writable for BopSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets BOP to value 0"]
        impl crate::Resettable for BopSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "BC (w) register accessor: Port bit clear register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bc::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@bc`]
module"]
    #[doc(alias = "BC")]
    pub type Bc = crate::Reg<bc::BcSpec>;
    #[doc = "Port bit clear register"]
    pub mod bc {
        #[doc = "Register `BC` writer"]
        pub type W = crate::W<BcSpec>;
        #[doc = "Field `CR0` writer - Port 0 Clear bit"]
        pub type Cr0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR1` writer - Port 1 Clear bit"]
        pub type Cr1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR2` writer - Port 2 Clear bit"]
        pub type Cr2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR3` writer - Port 3 Clear bit"]
        pub type Cr3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR4` writer - Port 4 Clear bit"]
        pub type Cr4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR5` writer - Port 5 Clear bit"]
        pub type Cr5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR6` writer - Port 6 Clear bit"]
        pub type Cr6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR7` writer - Port 7 Clear bit"]
        pub type Cr7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR8` writer - Port 8 Clear bit"]
        pub type Cr8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR9` writer - Port 9 Clear bit"]
        pub type Cr9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR10` writer - Port 10 Clear bit"]
        pub type Cr10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR11` writer - Port 11 Clear bit"]
        pub type Cr11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR12` writer - Port 12 Clear bit"]
        pub type Cr12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR13` writer - Port 13 Clear bit"]
        pub type Cr13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR14` writer - Port 14 Clear bit"]
        pub type Cr14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CR15` writer - Port 15 Clear bit"]
        pub type Cr15W<'a, REG> = crate::BitWriter<'a, REG>;
        impl W {
            #[doc = "Bit 0 - Port 0 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr0(&mut self) -> Cr0W<BcSpec> {
                Cr0W::new(self, 0)
            }
            #[doc = "Bit 1 - Port 1 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr1(&mut self) -> Cr1W<BcSpec> {
                Cr1W::new(self, 1)
            }
            #[doc = "Bit 2 - Port 2 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr2(&mut self) -> Cr2W<BcSpec> {
                Cr2W::new(self, 2)
            }
            #[doc = "Bit 3 - Port 3 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr3(&mut self) -> Cr3W<BcSpec> {
                Cr3W::new(self, 3)
            }
            #[doc = "Bit 4 - Port 4 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr4(&mut self) -> Cr4W<BcSpec> {
                Cr4W::new(self, 4)
            }
            #[doc = "Bit 5 - Port 5 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr5(&mut self) -> Cr5W<BcSpec> {
                Cr5W::new(self, 5)
            }
            #[doc = "Bit 6 - Port 6 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr6(&mut self) -> Cr6W<BcSpec> {
                Cr6W::new(self, 6)
            }
            #[doc = "Bit 7 - Port 7 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr7(&mut self) -> Cr7W<BcSpec> {
                Cr7W::new(self, 7)
            }
            #[doc = "Bit 8 - Port 8 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr8(&mut self) -> Cr8W<BcSpec> {
                Cr8W::new(self, 8)
            }
            #[doc = "Bit 9 - Port 9 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr9(&mut self) -> Cr9W<BcSpec> {
                Cr9W::new(self, 9)
            }
            #[doc = "Bit 10 - Port 10 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr10(&mut self) -> Cr10W<BcSpec> {
                Cr10W::new(self, 10)
            }
            #[doc = "Bit 11 - Port 11 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr11(&mut self) -> Cr11W<BcSpec> {
                Cr11W::new(self, 11)
            }
            #[doc = "Bit 12 - Port 12 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr12(&mut self) -> Cr12W<BcSpec> {
                Cr12W::new(self, 12)
            }
            #[doc = "Bit 13 - Port 13 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr13(&mut self) -> Cr13W<BcSpec> {
                Cr13W::new(self, 13)
            }
            #[doc = "Bit 14 - Port 14 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr14(&mut self) -> Cr14W<BcSpec> {
                Cr14W::new(self, 14)
            }
            #[doc = "Bit 15 - Port 15 Clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cr15(&mut self) -> Cr15W<BcSpec> {
                Cr15W::new(self, 15)
            }
        }
        #[doc = "Port bit clear register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bc::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct BcSpec;
        impl crate::RegisterSpec for BcSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`bc::W`](W) writer structure"]
        impl crate::Writable for BcSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets BC to value 0"]
        impl crate::Resettable for BcSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "LOCK (rw) register accessor: GPIO port configuration lock register\n\nYou can [`read`](crate::Reg::read) this register and get [`lock::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`lock::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@lock`]
module"]
    #[doc(alias = "LOCK")]
    pub type Lock = crate::Reg<lock::LockSpec>;
    #[doc = "GPIO port configuration lock register"]
    pub mod lock {
        #[doc = "Register `LOCK` reader"]
        pub type R = crate::R<LockSpec>;
        #[doc = "Register `LOCK` writer"]
        pub type W = crate::W<LockSpec>;
        #[doc = "Field `LK0` reader - Port Lock bit 0"]
        pub type Lk0R = crate::BitReader;
        #[doc = "Field `LK0` writer - Port Lock bit 0"]
        pub type Lk0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK1` reader - Port Lock bit 1"]
        pub type Lk1R = crate::BitReader;
        #[doc = "Field `LK1` writer - Port Lock bit 1"]
        pub type Lk1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK2` reader - Port Lock bit 2"]
        pub type Lk2R = crate::BitReader;
        #[doc = "Field `LK2` writer - Port Lock bit 2"]
        pub type Lk2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK3` reader - Port Lock bit 3"]
        pub type Lk3R = crate::BitReader;
        #[doc = "Field `LK3` writer - Port Lock bit 3"]
        pub type Lk3W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK4` reader - Port Lock bit 4"]
        pub type Lk4R = crate::BitReader;
        #[doc = "Field `LK4` writer - Port Lock bit 4"]
        pub type Lk4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK5` reader - Port Lock bit 5"]
        pub type Lk5R = crate::BitReader;
        #[doc = "Field `LK5` writer - Port Lock bit 5"]
        pub type Lk5W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK6` reader - Port Lock bit 6"]
        pub type Lk6R = crate::BitReader;
        #[doc = "Field `LK6` writer - Port Lock bit 6"]
        pub type Lk6W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK7` reader - Port Lock bit 7"]
        pub type Lk7R = crate::BitReader;
        #[doc = "Field `LK7` writer - Port Lock bit 7"]
        pub type Lk7W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK8` reader - Port Lock bit 8"]
        pub type Lk8R = crate::BitReader;
        #[doc = "Field `LK8` writer - Port Lock bit 8"]
        pub type Lk8W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK9` reader - Port Lock bit 9"]
        pub type Lk9R = crate::BitReader;
        #[doc = "Field `LK9` writer - Port Lock bit 9"]
        pub type Lk9W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK10` reader - Port Lock bit 10"]
        pub type Lk10R = crate::BitReader;
        #[doc = "Field `LK10` writer - Port Lock bit 10"]
        pub type Lk10W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK11` reader - Port Lock bit 11"]
        pub type Lk11R = crate::BitReader;
        #[doc = "Field `LK11` writer - Port Lock bit 11"]
        pub type Lk11W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK12` reader - Port Lock bit 12"]
        pub type Lk12R = crate::BitReader;
        #[doc = "Field `LK12` writer - Port Lock bit 12"]
        pub type Lk12W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK13` reader - Port Lock bit 13"]
        pub type Lk13R = crate::BitReader;
        #[doc = "Field `LK13` writer - Port Lock bit 13"]
        pub type Lk13W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK14` reader - Port Lock bit 14"]
        pub type Lk14R = crate::BitReader;
        #[doc = "Field `LK14` writer - Port Lock bit 14"]
        pub type Lk14W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LK15` reader - Port Lock bit 15"]
        pub type Lk15R = crate::BitReader;
        #[doc = "Field `LK15` writer - Port Lock bit 15"]
        pub type Lk15W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LKK` reader - Lock sequence key"]
        pub type LkkR = crate::BitReader;
        #[doc = "Field `LKK` writer - Lock sequence key"]
        pub type LkkW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Port Lock bit 0"]
            #[inline(always)]
            pub fn lk0(&self) -> Lk0R {
                Lk0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Port Lock bit 1"]
            #[inline(always)]
            pub fn lk1(&self) -> Lk1R {
                Lk1R::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Port Lock bit 2"]
            #[inline(always)]
            pub fn lk2(&self) -> Lk2R {
                Lk2R::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Port Lock bit 3"]
            #[inline(always)]
            pub fn lk3(&self) -> Lk3R {
                Lk3R::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Port Lock bit 4"]
            #[inline(always)]
            pub fn lk4(&self) -> Lk4R {
                Lk4R::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Port Lock bit 5"]
            #[inline(always)]
            pub fn lk5(&self) -> Lk5R {
                Lk5R::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Port Lock bit 6"]
            #[inline(always)]
            pub fn lk6(&self) -> Lk6R {
                Lk6R::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Port Lock bit 7"]
            #[inline(always)]
            pub fn lk7(&self) -> Lk7R {
                Lk7R::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Port Lock bit 8"]
            #[inline(always)]
            pub fn lk8(&self) -> Lk8R {
                Lk8R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Port Lock bit 9"]
            #[inline(always)]
            pub fn lk9(&self) -> Lk9R {
                Lk9R::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Port Lock bit 10"]
            #[inline(always)]
            pub fn lk10(&self) -> Lk10R {
                Lk10R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Port Lock bit 11"]
            #[inline(always)]
            pub fn lk11(&self) -> Lk11R {
                Lk11R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Port Lock bit 12"]
            #[inline(always)]
            pub fn lk12(&self) -> Lk12R {
                Lk12R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Port Lock bit 13"]
            #[inline(always)]
            pub fn lk13(&self) -> Lk13R {
                Lk13R::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Port Lock bit 14"]
            #[inline(always)]
            pub fn lk14(&self) -> Lk14R {
                Lk14R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Port Lock bit 15"]
            #[inline(always)]
            pub fn lk15(&self) -> Lk15R {
                Lk15R::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Lock sequence key"]
            #[inline(always)]
            pub fn lkk(&self) -> LkkR {
                LkkR::new(((self.bits >> 16) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Port Lock bit 0"]
            #[inline(always)]
            #[must_use]
            pub fn lk0(&mut self) -> Lk0W<LockSpec> {
                Lk0W::new(self, 0)
            }
            #[doc = "Bit 1 - Port Lock bit 1"]
            #[inline(always)]
            #[must_use]
            pub fn lk1(&mut self) -> Lk1W<LockSpec> {
                Lk1W::new(self, 1)
            }
            #[doc = "Bit 2 - Port Lock bit 2"]
            #[inline(always)]
            #[must_use]
            pub fn lk2(&mut self) -> Lk2W<LockSpec> {
                Lk2W::new(self, 2)
            }
            #[doc = "Bit 3 - Port Lock bit 3"]
            #[inline(always)]
            #[must_use]
            pub fn lk3(&mut self) -> Lk3W<LockSpec> {
                Lk3W::new(self, 3)
            }
            #[doc = "Bit 4 - Port Lock bit 4"]
            #[inline(always)]
            #[must_use]
            pub fn lk4(&mut self) -> Lk4W<LockSpec> {
                Lk4W::new(self, 4)
            }
            #[doc = "Bit 5 - Port Lock bit 5"]
            #[inline(always)]
            #[must_use]
            pub fn lk5(&mut self) -> Lk5W<LockSpec> {
                Lk5W::new(self, 5)
            }
            #[doc = "Bit 6 - Port Lock bit 6"]
            #[inline(always)]
            #[must_use]
            pub fn lk6(&mut self) -> Lk6W<LockSpec> {
                Lk6W::new(self, 6)
            }
            #[doc = "Bit 7 - Port Lock bit 7"]
            #[inline(always)]
            #[must_use]
            pub fn lk7(&mut self) -> Lk7W<LockSpec> {
                Lk7W::new(self, 7)
            }
            #[doc = "Bit 8 - Port Lock bit 8"]
            #[inline(always)]
            #[must_use]
            pub fn lk8(&mut self) -> Lk8W<LockSpec> {
                Lk8W::new(self, 8)
            }
            #[doc = "Bit 9 - Port Lock bit 9"]
            #[inline(always)]
            #[must_use]
            pub fn lk9(&mut self) -> Lk9W<LockSpec> {
                Lk9W::new(self, 9)
            }
            #[doc = "Bit 10 - Port Lock bit 10"]
            #[inline(always)]
            #[must_use]
            pub fn lk10(&mut self) -> Lk10W<LockSpec> {
                Lk10W::new(self, 10)
            }
            #[doc = "Bit 11 - Port Lock bit 11"]
            #[inline(always)]
            #[must_use]
            pub fn lk11(&mut self) -> Lk11W<LockSpec> {
                Lk11W::new(self, 11)
            }
            #[doc = "Bit 12 - Port Lock bit 12"]
            #[inline(always)]
            #[must_use]
            pub fn lk12(&mut self) -> Lk12W<LockSpec> {
                Lk12W::new(self, 12)
            }
            #[doc = "Bit 13 - Port Lock bit 13"]
            #[inline(always)]
            #[must_use]
            pub fn lk13(&mut self) -> Lk13W<LockSpec> {
                Lk13W::new(self, 13)
            }
            #[doc = "Bit 14 - Port Lock bit 14"]
            #[inline(always)]
            #[must_use]
            pub fn lk14(&mut self) -> Lk14W<LockSpec> {
                Lk14W::new(self, 14)
            }
            #[doc = "Bit 15 - Port Lock bit 15"]
            #[inline(always)]
            #[must_use]
            pub fn lk15(&mut self) -> Lk15W<LockSpec> {
                Lk15W::new(self, 15)
            }
            #[doc = "Bit 16 - Lock sequence key"]
            #[inline(always)]
            #[must_use]
            pub fn lkk(&mut self) -> LkkW<LockSpec> {
                LkkW::new(self, 16)
            }
        }
        #[doc = "GPIO port configuration lock register\n\nYou can [`read`](crate::Reg::read) this register and get [`lock::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`lock::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct LockSpec;
        impl crate::RegisterSpec for LockSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`lock::R`](R) reader structure"]
        impl crate::Readable for LockSpec {}
        #[doc = "`write(|w| ..)` method takes [`lock::W`](W) writer structure"]
        impl crate::Writable for LockSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets LOCK to value 0"]
        impl crate::Resettable for LockSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "General-purpose I/Os"]
pub struct Gpiob {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Gpiob {}
impl Gpiob {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpioa::RegisterBlock = 0x4001_0c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Gpiob {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Gpiob {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiob").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioa as gpiob;
#[doc = "General-purpose I/Os"]
pub struct Gpioc {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Gpioc {}
impl Gpioc {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpioa::RegisterBlock = 0x4001_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Gpioc {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Gpioc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioc").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioa as gpioc;
#[doc = "General-purpose I/Os"]
pub struct Gpiod {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Gpiod {}
impl Gpiod {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpioa::RegisterBlock = 0x4001_1400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Gpiod {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Gpiod {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiod").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioa as gpiod;
#[doc = "General-purpose I/Os"]
pub struct Gpioe {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Gpioe {}
impl Gpioe {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpioa::RegisterBlock = 0x4001_1800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Gpioe {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Gpioe {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpioe").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioa as gpioe;
#[doc = "General-purpose I/Os"]
pub struct Gpiof {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Gpiof {}
impl Gpiof {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpioa::RegisterBlock = 0x4001_1c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Gpiof {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Gpiof {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiof").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioa as gpiof;
#[doc = "General-purpose I/Os"]
pub struct Gpiog {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Gpiog {}
impl Gpiog {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const gpioa::RegisterBlock = 0x4001_2000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const gpioa::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Gpiog {
    type Target = gpioa::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Gpiog {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Gpiog").finish()
    }
}
#[doc = "General-purpose I/Os"]
pub use self::gpioa as gpiog;
#[doc = "Inter integrated circuit"]
pub struct I2c0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2c0 {}
impl I2c0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c0::RegisterBlock = 0x4000_5400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for I2c0 {
    type Target = i2c0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2c0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c0").finish()
    }
}
#[doc = "Inter integrated circuit"]
pub mod i2c0 {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ctl0: Ctl0,
        ctl1: Ctl1,
        saddr0: Saddr0,
        saddr1: Saddr1,
        data: Data,
        stat0: Stat0,
        stat1: Stat1,
        ckcfg: Ckcfg,
        rt: Rt,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Control register 0"]
        #[inline(always)]
        pub const fn ctl0(&self) -> &Ctl0 {
            &self.ctl0
        }
        #[doc = "0x04 - Control register 1"]
        #[inline(always)]
        pub const fn ctl1(&self) -> &Ctl1 {
            &self.ctl1
        }
        #[doc = "0x08 - Slave address register 0"]
        #[inline(always)]
        pub const fn saddr0(&self) -> &Saddr0 {
            &self.saddr0
        }
        #[doc = "0x0c - Slave address register 1"]
        #[inline(always)]
        pub const fn saddr1(&self) -> &Saddr1 {
            &self.saddr1
        }
        #[doc = "0x10 - Transfer buffer register"]
        #[inline(always)]
        pub const fn data(&self) -> &Data {
            &self.data
        }
        #[doc = "0x14 - Transfer status register 0"]
        #[inline(always)]
        pub const fn stat0(&self) -> &Stat0 {
            &self.stat0
        }
        #[doc = "0x18 - Transfer status register 1"]
        #[inline(always)]
        pub const fn stat1(&self) -> &Stat1 {
            &self.stat1
        }
        #[doc = "0x1c - Clock configure register"]
        #[inline(always)]
        pub const fn ckcfg(&self) -> &Ckcfg {
            &self.ckcfg
        }
        #[doc = "0x20 - Rise time register"]
        #[inline(always)]
        pub const fn rt(&self) -> &Rt {
            &self.rt
        }
    }
    #[doc = "CTL0 (rw) register accessor: Control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl0`]
module"]
    #[doc(alias = "CTL0")]
    pub type Ctl0 = crate::Reg<ctl0::Ctl0Spec>;
    #[doc = "Control register 0"]
    pub mod ctl0 {
        #[doc = "Register `CTL0` reader"]
        pub type R = crate::R<Ctl0Spec>;
        #[doc = "Register `CTL0` writer"]
        pub type W = crate::W<Ctl0Spec>;
        #[doc = "Field `I2CEN` reader - I2C peripheral enable"]
        pub type I2cenR = crate::BitReader;
        #[doc = "Field `I2CEN` writer - I2C peripheral enable"]
        pub type I2cenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SMBEN` reader - SMBus/I2C mode switch"]
        pub type SmbenR = crate::BitReader;
        #[doc = "Field `SMBEN` writer - SMBus/I2C mode switch"]
        pub type SmbenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SMBSEL` reader - SMBusType Selection"]
        pub type SmbselR = crate::BitReader;
        #[doc = "Field `SMBSEL` writer - SMBusType Selection"]
        pub type SmbselW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ARPEN` reader - ARP protocol in SMBus switch"]
        pub type ArpenR = crate::BitReader;
        #[doc = "Field `ARPEN` writer - ARP protocol in SMBus switch"]
        pub type ArpenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PECEN` reader - PEC Calculation Switch"]
        pub type PecenR = crate::BitReader;
        #[doc = "Field `PECEN` writer - PEC Calculation Switch"]
        pub type PecenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `GCEN` reader - Whether or not to response to a General Call (0x00)"]
        pub type GcenR = crate::BitReader;
        #[doc = "Field `GCEN` writer - Whether or not to response to a General Call (0x00)"]
        pub type GcenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DISSTRC` reader - Whether to stretch SCL low when data is not ready in slave mode"]
        pub type DisstrcR = crate::BitReader;
        #[doc = "Field `DISSTRC` writer - Whether to stretch SCL low when data is not ready in slave mode"]
        pub type DisstrcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `START` reader - Generate a START condition on I2C bus"]
        pub type StartR = crate::BitReader;
        #[doc = "Field `START` writer - Generate a START condition on I2C bus"]
        pub type StartW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STOP` reader - Generate a STOP condition on I2C bus"]
        pub type StopR = crate::BitReader;
        #[doc = "Field `STOP` writer - Generate a STOP condition on I2C bus"]
        pub type StopW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ACKEN` reader - Whether or not to send an ACK"]
        pub type AckenR = crate::BitReader;
        #[doc = "Field `ACKEN` writer - Whether or not to send an ACK"]
        pub type AckenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `POAP` reader - Position of ACK and PEC when receiving"]
        pub type PoapR = crate::BitReader;
        #[doc = "Field `POAP` writer - Position of ACK and PEC when receiving"]
        pub type PoapW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PECTRANS` reader - PEC Transfer"]
        pub type PectransR = crate::BitReader;
        #[doc = "Field `PECTRANS` writer - PEC Transfer"]
        pub type PectransW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SALT` reader - SMBus alert"]
        pub type SaltR = crate::BitReader;
        #[doc = "Field `SALT` writer - SMBus alert"]
        pub type SaltW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SRESET` reader - Software reset"]
        pub type SresetR = crate::BitReader;
        #[doc = "Field `SRESET` writer - Software reset"]
        pub type SresetW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - I2C peripheral enable"]
            #[inline(always)]
            pub fn i2cen(&self) -> I2cenR {
                I2cenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - SMBus/I2C mode switch"]
            #[inline(always)]
            pub fn smben(&self) -> SmbenR {
                SmbenR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 3 - SMBusType Selection"]
            #[inline(always)]
            pub fn smbsel(&self) -> SmbselR {
                SmbselR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - ARP protocol in SMBus switch"]
            #[inline(always)]
            pub fn arpen(&self) -> ArpenR {
                ArpenR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - PEC Calculation Switch"]
            #[inline(always)]
            pub fn pecen(&self) -> PecenR {
                PecenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Whether or not to response to a General Call (0x00)"]
            #[inline(always)]
            pub fn gcen(&self) -> GcenR {
                GcenR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Whether to stretch SCL low when data is not ready in slave mode"]
            #[inline(always)]
            pub fn disstrc(&self) -> DisstrcR {
                DisstrcR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Generate a START condition on I2C bus"]
            #[inline(always)]
            pub fn start(&self) -> StartR {
                StartR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Generate a STOP condition on I2C bus"]
            #[inline(always)]
            pub fn stop(&self) -> StopR {
                StopR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Whether or not to send an ACK"]
            #[inline(always)]
            pub fn acken(&self) -> AckenR {
                AckenR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Position of ACK and PEC when receiving"]
            #[inline(always)]
            pub fn poap(&self) -> PoapR {
                PoapR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - PEC Transfer"]
            #[inline(always)]
            pub fn pectrans(&self) -> PectransR {
                PectransR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - SMBus alert"]
            #[inline(always)]
            pub fn salt(&self) -> SaltR {
                SaltR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 15 - Software reset"]
            #[inline(always)]
            pub fn sreset(&self) -> SresetR {
                SresetR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - I2C peripheral enable"]
            #[inline(always)]
            #[must_use]
            pub fn i2cen(&mut self) -> I2cenW<Ctl0Spec> {
                I2cenW::new(self, 0)
            }
            #[doc = "Bit 1 - SMBus/I2C mode switch"]
            #[inline(always)]
            #[must_use]
            pub fn smben(&mut self) -> SmbenW<Ctl0Spec> {
                SmbenW::new(self, 1)
            }
            #[doc = "Bit 3 - SMBusType Selection"]
            #[inline(always)]
            #[must_use]
            pub fn smbsel(&mut self) -> SmbselW<Ctl0Spec> {
                SmbselW::new(self, 3)
            }
            #[doc = "Bit 4 - ARP protocol in SMBus switch"]
            #[inline(always)]
            #[must_use]
            pub fn arpen(&mut self) -> ArpenW<Ctl0Spec> {
                ArpenW::new(self, 4)
            }
            #[doc = "Bit 5 - PEC Calculation Switch"]
            #[inline(always)]
            #[must_use]
            pub fn pecen(&mut self) -> PecenW<Ctl0Spec> {
                PecenW::new(self, 5)
            }
            #[doc = "Bit 6 - Whether or not to response to a General Call (0x00)"]
            #[inline(always)]
            #[must_use]
            pub fn gcen(&mut self) -> GcenW<Ctl0Spec> {
                GcenW::new(self, 6)
            }
            #[doc = "Bit 7 - Whether to stretch SCL low when data is not ready in slave mode"]
            #[inline(always)]
            #[must_use]
            pub fn disstrc(&mut self) -> DisstrcW<Ctl0Spec> {
                DisstrcW::new(self, 7)
            }
            #[doc = "Bit 8 - Generate a START condition on I2C bus"]
            #[inline(always)]
            #[must_use]
            pub fn start(&mut self) -> StartW<Ctl0Spec> {
                StartW::new(self, 8)
            }
            #[doc = "Bit 9 - Generate a STOP condition on I2C bus"]
            #[inline(always)]
            #[must_use]
            pub fn stop(&mut self) -> StopW<Ctl0Spec> {
                StopW::new(self, 9)
            }
            #[doc = "Bit 10 - Whether or not to send an ACK"]
            #[inline(always)]
            #[must_use]
            pub fn acken(&mut self) -> AckenW<Ctl0Spec> {
                AckenW::new(self, 10)
            }
            #[doc = "Bit 11 - Position of ACK and PEC when receiving"]
            #[inline(always)]
            #[must_use]
            pub fn poap(&mut self) -> PoapW<Ctl0Spec> {
                PoapW::new(self, 11)
            }
            #[doc = "Bit 12 - PEC Transfer"]
            #[inline(always)]
            #[must_use]
            pub fn pectrans(&mut self) -> PectransW<Ctl0Spec> {
                PectransW::new(self, 12)
            }
            #[doc = "Bit 13 - SMBus alert"]
            #[inline(always)]
            #[must_use]
            pub fn salt(&mut self) -> SaltW<Ctl0Spec> {
                SaltW::new(self, 13)
            }
            #[doc = "Bit 15 - Software reset"]
            #[inline(always)]
            #[must_use]
            pub fn sreset(&mut self) -> SresetW<Ctl0Spec> {
                SresetW::new(self, 15)
            }
        }
        #[doc = "Control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl0Spec;
        impl crate::RegisterSpec for Ctl0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl0::R`](R) reader structure"]
        impl crate::Readable for Ctl0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl0::W`](W) writer structure"]
        impl crate::Writable for Ctl0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL0 to value 0"]
        impl crate::Resettable for Ctl0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL1 (rw) register accessor: Control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl1`]
module"]
    #[doc(alias = "CTL1")]
    pub type Ctl1 = crate::Reg<ctl1::Ctl1Spec>;
    #[doc = "Control register 1"]
    pub mod ctl1 {
        #[doc = "Register `CTL1` reader"]
        pub type R = crate::R<Ctl1Spec>;
        #[doc = "Register `CTL1` writer"]
        pub type W = crate::W<Ctl1Spec>;
        #[doc = "Field `I2CCLK` reader - I2C Peripheral clock frequency"]
        pub type I2cclkR = crate::FieldReader;
        #[doc = "Field `I2CCLK` writer - I2C Peripheral clock frequency"]
        pub type I2cclkW<'a, REG> = crate::FieldWriter<'a, REG, 6>;
        #[doc = "Field `ERRIE` reader - Error interrupt enable"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Error interrupt enable"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EVIE` reader - Event interrupt enable"]
        pub type EvieR = crate::BitReader;
        #[doc = "Field `EVIE` writer - Event interrupt enable"]
        pub type EvieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BUFIE` reader - Buffer interrupt enable"]
        pub type BufieR = crate::BitReader;
        #[doc = "Field `BUFIE` writer - Buffer interrupt enable"]
        pub type BufieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DMAON` reader - DMA mode switch"]
        pub type DmaonR = crate::BitReader;
        #[doc = "Field `DMAON` writer - DMA mode switch"]
        pub type DmaonW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DMALST` reader - Flag indicating DMA last transfer"]
        pub type DmalstR = crate::BitReader;
        #[doc = "Field `DMALST` writer - Flag indicating DMA last transfer"]
        pub type DmalstW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:5 - I2C Peripheral clock frequency"]
            #[inline(always)]
            pub fn i2cclk(&self) -> I2cclkR {
                I2cclkR::new((self.bits & 0x3f) as u8)
            }
            #[doc = "Bit 8 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Event interrupt enable"]
            #[inline(always)]
            pub fn evie(&self) -> EvieR {
                EvieR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Buffer interrupt enable"]
            #[inline(always)]
            pub fn bufie(&self) -> BufieR {
                BufieR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - DMA mode switch"]
            #[inline(always)]
            pub fn dmaon(&self) -> DmaonR {
                DmaonR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Flag indicating DMA last transfer"]
            #[inline(always)]
            pub fn dmalst(&self) -> DmalstR {
                DmalstR::new(((self.bits >> 12) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - I2C Peripheral clock frequency"]
            #[inline(always)]
            #[must_use]
            pub fn i2cclk(&mut self) -> I2cclkW<Ctl1Spec> {
                I2cclkW::new(self, 0)
            }
            #[doc = "Bit 8 - Error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ctl1Spec> {
                ErrieW::new(self, 8)
            }
            #[doc = "Bit 9 - Event interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn evie(&mut self) -> EvieW<Ctl1Spec> {
                EvieW::new(self, 9)
            }
            #[doc = "Bit 10 - Buffer interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn bufie(&mut self) -> BufieW<Ctl1Spec> {
                BufieW::new(self, 10)
            }
            #[doc = "Bit 11 - DMA mode switch"]
            #[inline(always)]
            #[must_use]
            pub fn dmaon(&mut self) -> DmaonW<Ctl1Spec> {
                DmaonW::new(self, 11)
            }
            #[doc = "Bit 12 - Flag indicating DMA last transfer"]
            #[inline(always)]
            #[must_use]
            pub fn dmalst(&mut self) -> DmalstW<Ctl1Spec> {
                DmalstW::new(self, 12)
            }
        }
        #[doc = "Control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl1Spec;
        impl crate::RegisterSpec for Ctl1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl1::R`](R) reader structure"]
        impl crate::Readable for Ctl1Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"]
        impl crate::Writable for Ctl1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL1 to value 0"]
        impl crate::Resettable for Ctl1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "SADDR0 (rw) register accessor: Slave address register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`saddr0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`saddr0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@saddr0`]
module"]
    #[doc(alias = "SADDR0")]
    pub type Saddr0 = crate::Reg<saddr0::Saddr0Spec>;
    #[doc = "Slave address register 0"]
    pub mod saddr0 {
        #[doc = "Register `SADDR0` reader"]
        pub type R = crate::R<Saddr0Spec>;
        #[doc = "Register `SADDR0` writer"]
        pub type W = crate::W<Saddr0Spec>;
        #[doc = "Field `ADDRESS0` reader - Bit 0 of a 10-bit address"]
        pub type Address0R = crate::BitReader;
        #[doc = "Field `ADDRESS0` writer - Bit 0 of a 10-bit address"]
        pub type Address0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ADDRESS7_1` reader - 7-bit address or bits 7:1 of a 10-bit address"]
        pub type Address7_1R = crate::FieldReader;
        #[doc = "Field `ADDRESS7_1` writer - 7-bit address or bits 7:1 of a 10-bit address"]
        pub type Address7_1W<'a, REG> = crate::FieldWriter<'a, REG, 7>;
        #[doc = "Field `ADDRESS9_8` reader - Highest two bits of a 10-bit address"]
        pub type Address9_8R = crate::FieldReader;
        #[doc = "Field `ADDRESS9_8` writer - Highest two bits of a 10-bit address"]
        pub type Address9_8W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `ADDFORMAT` reader - Address mode for the I2C slave"]
        pub type AddformatR = crate::BitReader;
        #[doc = "Field `ADDFORMAT` writer - Address mode for the I2C slave"]
        pub type AddformatW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Bit 0 of a 10-bit address"]
            #[inline(always)]
            pub fn address0(&self) -> Address0R {
                Address0R::new((self.bits & 1) != 0)
            }
            #[doc = "Bits 1:7 - 7-bit address or bits 7:1 of a 10-bit address"]
            #[inline(always)]
            pub fn address7_1(&self) -> Address7_1R {
                Address7_1R::new(((self.bits >> 1) & 0x7f) as u8)
            }
            #[doc = "Bits 8:9 - Highest two bits of a 10-bit address"]
            #[inline(always)]
            pub fn address9_8(&self) -> Address9_8R {
                Address9_8R::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 15 - Address mode for the I2C slave"]
            #[inline(always)]
            pub fn addformat(&self) -> AddformatR {
                AddformatR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Bit 0 of a 10-bit address"]
            #[inline(always)]
            #[must_use]
            pub fn address0(&mut self) -> Address0W<Saddr0Spec> {
                Address0W::new(self, 0)
            }
            #[doc = "Bits 1:7 - 7-bit address or bits 7:1 of a 10-bit address"]
            #[inline(always)]
            #[must_use]
            pub fn address7_1(&mut self) -> Address7_1W<Saddr0Spec> {
                Address7_1W::new(self, 1)
            }
            #[doc = "Bits 8:9 - Highest two bits of a 10-bit address"]
            #[inline(always)]
            #[must_use]
            pub fn address9_8(&mut self) -> Address9_8W<Saddr0Spec> {
                Address9_8W::new(self, 8)
            }
            #[doc = "Bit 15 - Address mode for the I2C slave"]
            #[inline(always)]
            #[must_use]
            pub fn addformat(&mut self) -> AddformatW<Saddr0Spec> {
                AddformatW::new(self, 15)
            }
        }
        #[doc = "Slave address register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`saddr0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`saddr0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Saddr0Spec;
        impl crate::RegisterSpec for Saddr0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`saddr0::R`](R) reader structure"]
        impl crate::Readable for Saddr0Spec {}
        #[doc = "`write(|w| ..)` method takes [`saddr0::W`](W) writer structure"]
        impl crate::Writable for Saddr0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SADDR0 to value 0"]
        impl crate::Resettable for Saddr0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "SADDR1 (rw) register accessor: Slave address register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`saddr1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`saddr1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@saddr1`]
module"]
    #[doc(alias = "SADDR1")]
    pub type Saddr1 = crate::Reg<saddr1::Saddr1Spec>;
    #[doc = "Slave address register 1"]
    pub mod saddr1 {
        #[doc = "Register `SADDR1` reader"]
        pub type R = crate::R<Saddr1Spec>;
        #[doc = "Register `SADDR1` writer"]
        pub type W = crate::W<Saddr1Spec>;
        #[doc = "Field `DUADEN` reader - Dual-Address mode switch"]
        pub type DuadenR = crate::BitReader;
        #[doc = "Field `DUADEN` writer - Dual-Address mode switch"]
        pub type DuadenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ADDRESS2` reader - Second I2C address for the slave in Dual-Address mode"]
        pub type Address2R = crate::FieldReader;
        #[doc = "Field `ADDRESS2` writer - Second I2C address for the slave in Dual-Address mode"]
        pub type Address2W<'a, REG> = crate::FieldWriter<'a, REG, 7>;
        impl R {
            #[doc = "Bit 0 - Dual-Address mode switch"]
            #[inline(always)]
            pub fn duaden(&self) -> DuadenR {
                DuadenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bits 1:7 - Second I2C address for the slave in Dual-Address mode"]
            #[inline(always)]
            pub fn address2(&self) -> Address2R {
                Address2R::new(((self.bits >> 1) & 0x7f) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Dual-Address mode switch"]
            #[inline(always)]
            #[must_use]
            pub fn duaden(&mut self) -> DuadenW<Saddr1Spec> {
                DuadenW::new(self, 0)
            }
            #[doc = "Bits 1:7 - Second I2C address for the slave in Dual-Address mode"]
            #[inline(always)]
            #[must_use]
            pub fn address2(&mut self) -> Address2W<Saddr1Spec> {
                Address2W::new(self, 1)
            }
        }
        #[doc = "Slave address register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`saddr1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`saddr1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Saddr1Spec;
        impl crate::RegisterSpec for Saddr1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`saddr1::R`](R) reader structure"]
        impl crate::Readable for Saddr1Spec {}
        #[doc = "`write(|w| ..)` method takes [`saddr1::W`](W) writer structure"]
        impl crate::Writable for Saddr1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SADDR1 to value 0"]
        impl crate::Resettable for Saddr1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATA (rw) register accessor: Transfer buffer register\n\nYou can [`read`](crate::Reg::read) this register and get [`data::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data`]
module"]
    #[doc(alias = "DATA")]
    pub type Data = crate::Reg<data::DataSpec>;
    #[doc = "Transfer buffer register"]
    pub mod data {
        #[doc = "Register `DATA` reader"]
        pub type R = crate::R<DataSpec>;
        #[doc = "Register `DATA` writer"]
        pub type W = crate::W<DataSpec>;
        #[doc = "Field `TRB` reader - Transmission or reception data buffer register"]
        pub type TrbR = crate::FieldReader;
        #[doc = "Field `TRB` writer - Transmission or reception data buffer register"]
        pub type TrbW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Transmission or reception data buffer register"]
            #[inline(always)]
            pub fn trb(&self) -> TrbR {
                TrbR::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Transmission or reception data buffer register"]
            #[inline(always)]
            #[must_use]
            pub fn trb(&mut self) -> TrbW<DataSpec> {
                TrbW::new(self, 0)
            }
        }
        #[doc = "Transfer buffer register\n\nYou can [`read`](crate::Reg::read) this register and get [`data::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DataSpec;
        impl crate::RegisterSpec for DataSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data::R`](R) reader structure"]
        impl crate::Readable for DataSpec {}
        #[doc = "`write(|w| ..)` method takes [`data::W`](W) writer structure"]
        impl crate::Writable for DataSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA to value 0"]
        impl crate::Resettable for DataSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "STAT0 (rw) register accessor: Transfer status register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`stat0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat0`]
module"]
    #[doc(alias = "STAT0")]
    pub type Stat0 = crate::Reg<stat0::Stat0Spec>;
    #[doc = "Transfer status register 0"]
    pub mod stat0 {
        #[doc = "Register `STAT0` reader"]
        pub type R = crate::R<Stat0Spec>;
        #[doc = "Register `STAT0` writer"]
        pub type W = crate::W<Stat0Spec>;
        #[doc = "Field `SBSEND` reader - START condition sent out in master mode"]
        pub type SbsendR = crate::BitReader;
        #[doc = "Field `ADDSEND` reader - Address is sent in master mode or received and matches in slave mode"]
        pub type AddsendR = crate::BitReader;
        #[doc = "Field `BTC` reader - Byte transmission completed"]
        pub type BtcR = crate::BitReader;
        #[doc = "Field `ADD10SEND` reader - Header of 10-bit address is sent in master mode"]
        pub type Add10sendR = crate::BitReader;
        #[doc = "Field `STPDET` reader - STOP condition detected in slave mode"]
        pub type StpdetR = crate::BitReader;
        #[doc = "Field `RBNE` reader - I2C_DATA is not Empty during receiving"]
        pub type RbneR = crate::BitReader;
        #[doc = "Field `TBE` reader - I2C_DATA is Empty during transmitting"]
        pub type TbeR = crate::BitReader;
        #[doc = "Field `BERR` reader - A bus error occurs indication a unexpected START or STOP condition on I2C bus"]
        pub type BerrR = crate::BitReader;
        #[doc = "Field `BERR` writer - A bus error occurs indication a unexpected START or STOP condition on I2C bus"]
        pub type BerrW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LOSTARB` reader - Arbitration Lost in master mode"]
        pub type LostarbR = crate::BitReader;
        #[doc = "Field `LOSTARB` writer - Arbitration Lost in master mode"]
        pub type LostarbW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `AERR` reader - Acknowledge error"]
        pub type AerrR = crate::BitReader;
        #[doc = "Field `AERR` writer - Acknowledge error"]
        pub type AerrW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OUERR` reader - Over-run or under-run situation occurs in slave mode"]
        pub type OuerrR = crate::BitReader;
        #[doc = "Field `OUERR` writer - Over-run or under-run situation occurs in slave mode"]
        pub type OuerrW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PECERR` reader - PEC error when receiving data"]
        pub type PecerrR = crate::BitReader;
        #[doc = "Field `PECERR` writer - PEC error when receiving data"]
        pub type PecerrW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SMBTO` reader - Timeout signal in SMBus mode"]
        pub type SmbtoR = crate::BitReader;
        #[doc = "Field `SMBTO` writer - Timeout signal in SMBus mode"]
        pub type SmbtoW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SMBALT` reader - SMBus Alert status"]
        pub type SmbaltR = crate::BitReader;
        #[doc = "Field `SMBALT` writer - SMBus Alert status"]
        pub type SmbaltW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - START condition sent out in master mode"]
            #[inline(always)]
            pub fn sbsend(&self) -> SbsendR {
                SbsendR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Address is sent in master mode or received and matches in slave mode"]
            #[inline(always)]
            pub fn addsend(&self) -> AddsendR {
                AddsendR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Byte transmission completed"]
            #[inline(always)]
            pub fn btc(&self) -> BtcR {
                BtcR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Header of 10-bit address is sent in master mode"]
            #[inline(always)]
            pub fn add10send(&self) -> Add10sendR {
                Add10sendR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - STOP condition detected in slave mode"]
            #[inline(always)]
            pub fn stpdet(&self) -> StpdetR {
                StpdetR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - I2C_DATA is not Empty during receiving"]
            #[inline(always)]
            pub fn rbne(&self) -> RbneR {
                RbneR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - I2C_DATA is Empty during transmitting"]
            #[inline(always)]
            pub fn tbe(&self) -> TbeR {
                TbeR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - A bus error occurs indication a unexpected START or STOP condition on I2C bus"]
            #[inline(always)]
            pub fn berr(&self) -> BerrR {
                BerrR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Arbitration Lost in master mode"]
            #[inline(always)]
            pub fn lostarb(&self) -> LostarbR {
                LostarbR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Acknowledge error"]
            #[inline(always)]
            pub fn aerr(&self) -> AerrR {
                AerrR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Over-run or under-run situation occurs in slave mode"]
            #[inline(always)]
            pub fn ouerr(&self) -> OuerrR {
                OuerrR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - PEC error when receiving data"]
            #[inline(always)]
            pub fn pecerr(&self) -> PecerrR {
                PecerrR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 14 - Timeout signal in SMBus mode"]
            #[inline(always)]
            pub fn smbto(&self) -> SmbtoR {
                SmbtoR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - SMBus Alert status"]
            #[inline(always)]
            pub fn smbalt(&self) -> SmbaltR {
                SmbaltR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - A bus error occurs indication a unexpected START or STOP condition on I2C bus"]
            #[inline(always)]
            #[must_use]
            pub fn berr(&mut self) -> BerrW<Stat0Spec> {
                BerrW::new(self, 8)
            }
            #[doc = "Bit 9 - Arbitration Lost in master mode"]
            #[inline(always)]
            #[must_use]
            pub fn lostarb(&mut self) -> LostarbW<Stat0Spec> {
                LostarbW::new(self, 9)
            }
            #[doc = "Bit 10 - Acknowledge error"]
            #[inline(always)]
            #[must_use]
            pub fn aerr(&mut self) -> AerrW<Stat0Spec> {
                AerrW::new(self, 10)
            }
            #[doc = "Bit 11 - Over-run or under-run situation occurs in slave mode"]
            #[inline(always)]
            #[must_use]
            pub fn ouerr(&mut self) -> OuerrW<Stat0Spec> {
                OuerrW::new(self, 11)
            }
            #[doc = "Bit 12 - PEC error when receiving data"]
            #[inline(always)]
            #[must_use]
            pub fn pecerr(&mut self) -> PecerrW<Stat0Spec> {
                PecerrW::new(self, 12)
            }
            #[doc = "Bit 14 - Timeout signal in SMBus mode"]
            #[inline(always)]
            #[must_use]
            pub fn smbto(&mut self) -> SmbtoW<Stat0Spec> {
                SmbtoW::new(self, 14)
            }
            #[doc = "Bit 15 - SMBus Alert status"]
            #[inline(always)]
            #[must_use]
            pub fn smbalt(&mut self) -> SmbaltW<Stat0Spec> {
                SmbaltW::new(self, 15)
            }
        }
        #[doc = "Transfer status register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`stat0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Stat0Spec;
        impl crate::RegisterSpec for Stat0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat0::R`](R) reader structure"]
        impl crate::Readable for Stat0Spec {}
        #[doc = "`write(|w| ..)` method takes [`stat0::W`](W) writer structure"]
        impl crate::Writable for Stat0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets STAT0 to value 0"]
        impl crate::Resettable for Stat0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "STAT1 (r) register accessor: Transfer status register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`stat1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat1`]
module"]
    #[doc(alias = "STAT1")]
    pub type Stat1 = crate::Reg<stat1::Stat1Spec>;
    #[doc = "Transfer status register 1"]
    pub mod stat1 {
        #[doc = "Register `STAT1` reader"]
        pub type R = crate::R<Stat1Spec>;
        #[doc = "Field `MASTER` reader - A flag indicating whether I2C block is in master or slave mode"]
        pub type MasterR = crate::BitReader;
        #[doc = "Field `I2CBSY` reader - Busy flag"]
        pub type I2cbsyR = crate::BitReader;
        #[doc = "Field `TR` reader - Whether the I2C is a transmitter or a receiver"]
        pub type TrR = crate::BitReader;
        #[doc = "Field `RXGC` reader - General call address (00h) received"]
        pub type RxgcR = crate::BitReader;
        #[doc = "Field `DEFSMB` reader - Default address of SMBusDevice"]
        pub type DefsmbR = crate::BitReader;
        #[doc = "Field `HSTSMB` reader - SMBus Host Header detected in slave mode"]
        pub type HstsmbR = crate::BitReader;
        #[doc = "Field `DUMODF` reader - Dual Flag in slave mode"]
        pub type DumodfR = crate::BitReader;
        #[doc = "Field `PECV` reader - Packet Error Checking Value that calculated by hardware when PEC is enabled"]
        pub type PecvR = crate::FieldReader;
        impl R {
            #[doc = "Bit 0 - A flag indicating whether I2C block is in master or slave mode"]
            #[inline(always)]
            pub fn master(&self) -> MasterR {
                MasterR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Busy flag"]
            #[inline(always)]
            pub fn i2cbsy(&self) -> I2cbsyR {
                I2cbsyR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Whether the I2C is a transmitter or a receiver"]
            #[inline(always)]
            pub fn tr(&self) -> TrR {
                TrR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 4 - General call address (00h) received"]
            #[inline(always)]
            pub fn rxgc(&self) -> RxgcR {
                RxgcR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Default address of SMBusDevice"]
            #[inline(always)]
            pub fn defsmb(&self) -> DefsmbR {
                DefsmbR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - SMBus Host Header detected in slave mode"]
            #[inline(always)]
            pub fn hstsmb(&self) -> HstsmbR {
                HstsmbR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Dual Flag in slave mode"]
            #[inline(always)]
            pub fn dumodf(&self) -> DumodfR {
                DumodfR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:15 - Packet Error Checking Value that calculated by hardware when PEC is enabled"]
            #[inline(always)]
            pub fn pecv(&self) -> PecvR {
                PecvR::new(((self.bits >> 8) & 0xff) as u8)
            }
        }
        #[doc = "Transfer status register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`stat1::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Stat1Spec;
        impl crate::RegisterSpec for Stat1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat1::R`](R) reader structure"]
        impl crate::Readable for Stat1Spec {}
        #[doc = "`reset()` method sets STAT1 to value 0"]
        impl crate::Resettable for Stat1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CKCFG (rw) register accessor: Clock configure register\n\nYou can [`read`](crate::Reg::read) this register and get [`ckcfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ckcfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ckcfg`]
module"]
    #[doc(alias = "CKCFG")]
    pub type Ckcfg = crate::Reg<ckcfg::CkcfgSpec>;
    #[doc = "Clock configure register"]
    pub mod ckcfg {
        #[doc = "Register `CKCFG` reader"]
        pub type R = crate::R<CkcfgSpec>;
        #[doc = "Register `CKCFG` writer"]
        pub type W = crate::W<CkcfgSpec>;
        #[doc = "Field `CLKC` reader - I2C Clock control in master mode"]
        pub type ClkcR = crate::FieldReader<u16>;
        #[doc = "Field `CLKC` writer - I2C Clock control in master mode"]
        pub type ClkcW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        #[doc = "Field `DTCY` reader - Duty cycle in fast mode"]
        pub type DtcyR = crate::BitReader;
        #[doc = "Field `DTCY` writer - Duty cycle in fast mode"]
        pub type DtcyW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FAST` reader - I2C speed selection in master mode"]
        pub type FastR = crate::BitReader;
        #[doc = "Field `FAST` writer - I2C speed selection in master mode"]
        pub type FastW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:11 - I2C Clock control in master mode"]
            #[inline(always)]
            pub fn clkc(&self) -> ClkcR {
                ClkcR::new((self.bits & 0x0fff) as u16)
            }
            #[doc = "Bit 14 - Duty cycle in fast mode"]
            #[inline(always)]
            pub fn dtcy(&self) -> DtcyR {
                DtcyR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - I2C speed selection in master mode"]
            #[inline(always)]
            pub fn fast(&self) -> FastR {
                FastR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:11 - I2C Clock control in master mode"]
            #[inline(always)]
            #[must_use]
            pub fn clkc(&mut self) -> ClkcW<CkcfgSpec> {
                ClkcW::new(self, 0)
            }
            #[doc = "Bit 14 - Duty cycle in fast mode"]
            #[inline(always)]
            #[must_use]
            pub fn dtcy(&mut self) -> DtcyW<CkcfgSpec> {
                DtcyW::new(self, 14)
            }
            #[doc = "Bit 15 - I2C speed selection in master mode"]
            #[inline(always)]
            #[must_use]
            pub fn fast(&mut self) -> FastW<CkcfgSpec> {
                FastW::new(self, 15)
            }
        }
        #[doc = "Clock configure register\n\nYou can [`read`](crate::Reg::read) this register and get [`ckcfg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ckcfg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CkcfgSpec;
        impl crate::RegisterSpec for CkcfgSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ckcfg::R`](R) reader structure"]
        impl crate::Readable for CkcfgSpec {}
        #[doc = "`write(|w| ..)` method takes [`ckcfg::W`](W) writer structure"]
        impl crate::Writable for CkcfgSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CKCFG to value 0"]
        impl crate::Resettable for CkcfgSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RT (rw) register accessor: Rise time register\n\nYou can [`read`](crate::Reg::read) this register and get [`rt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rt`]
module"]
    #[doc(alias = "RT")]
    pub type Rt = crate::Reg<rt::RtSpec>;
    #[doc = "Rise time register"]
    pub mod rt {
        #[doc = "Register `RT` reader"]
        pub type R = crate::R<RtSpec>;
        #[doc = "Register `RT` writer"]
        pub type W = crate::W<RtSpec>;
        #[doc = "Field `RISETIME` reader - Maximum rise time in master mode"]
        pub type RisetimeR = crate::FieldReader;
        #[doc = "Field `RISETIME` writer - Maximum rise time in master mode"]
        pub type RisetimeW<'a, REG> = crate::FieldWriter<'a, REG, 6>;
        impl R {
            #[doc = "Bits 0:5 - Maximum rise time in master mode"]
            #[inline(always)]
            pub fn risetime(&self) -> RisetimeR {
                RisetimeR::new((self.bits & 0x3f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - Maximum rise time in master mode"]
            #[inline(always)]
            #[must_use]
            pub fn risetime(&mut self) -> RisetimeW<RtSpec> {
                RisetimeW::new(self, 0)
            }
        }
        #[doc = "Rise time register\n\nYou can [`read`](crate::Reg::read) this register and get [`rt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RtSpec;
        impl crate::RegisterSpec for RtSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rt::R`](R) reader structure"]
        impl crate::Readable for RtSpec {}
        #[doc = "`write(|w| ..)` method takes [`rt::W`](W) writer structure"]
        impl crate::Writable for RtSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets RT to value 0x02"]
        impl crate::Resettable for RtSpec {
            const RESET_VALUE: u32 = 0x02;
        }
    }
}
#[doc = "Inter integrated circuit"]
pub struct I2c1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for I2c1 {}
impl I2c1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const i2c0::RegisterBlock = 0x4000_5800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const i2c0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for I2c1 {
    type Target = i2c0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for I2c1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("I2c1").finish()
    }
}
#[doc = "Inter integrated circuit"]
pub use self::i2c0 as i2c1;
#[doc = "Power management unit"]
pub struct Pmu {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Pmu {}
impl Pmu {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const pmu::RegisterBlock = 0x4000_7000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const pmu::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Pmu {
    type Target = pmu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Pmu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Pmu").finish()
    }
}
#[doc = "Power management unit"]
pub mod pmu {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ctl: Ctl,
        cs: Cs,
    }
    impl RegisterBlock {
        #[doc = "0x00 - power control register"]
        #[inline(always)]
        pub const fn ctl(&self) -> &Ctl {
            &self.ctl
        }
        #[doc = "0x04 - power control/status register"]
        #[inline(always)]
        pub const fn cs(&self) -> &Cs {
            &self.cs
        }
    }
    #[doc = "CTL (rw) register accessor: power control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl`]
module"]
    #[doc(alias = "CTL")]
    pub type Ctl = crate::Reg<ctl::CtlSpec>;
    #[doc = "power control register"]
    pub mod ctl {
        #[doc = "Register `CTL` reader"]
        pub type R = crate::R<CtlSpec>;
        #[doc = "Register `CTL` writer"]
        pub type W = crate::W<CtlSpec>;
        #[doc = "Field `LDOLP` reader - LDO Low Power Mode"]
        pub type LdolpR = crate::BitReader;
        #[doc = "Field `LDOLP` writer - LDO Low Power Mode"]
        pub type LdolpW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STBMOD` reader - Standby Mode"]
        pub type StbmodR = crate::BitReader;
        #[doc = "Field `STBMOD` writer - Standby Mode"]
        pub type StbmodW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WURST` reader - Wakeup Flag Reset"]
        pub type WurstR = crate::BitReader;
        #[doc = "Field `WURST` writer - Wakeup Flag Reset"]
        pub type WurstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STBRST` reader - Standby Flag Reset"]
        pub type StbrstR = crate::BitReader;
        #[doc = "Field `STBRST` writer - Standby Flag Reset"]
        pub type StbrstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LVDEN` reader - Low Voltage Detector Enable"]
        pub type LvdenR = crate::BitReader;
        #[doc = "Field `LVDEN` writer - Low Voltage Detector Enable"]
        pub type LvdenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LVDT` reader - Low Voltage Detector Threshold"]
        pub type LvdtR = crate::FieldReader;
        #[doc = "Field `LVDT` writer - Low Voltage Detector Threshold"]
        pub type LvdtW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `BKPWEN` reader - Backup Domain Write Enable"]
        pub type BkpwenR = crate::BitReader;
        #[doc = "Field `BKPWEN` writer - Backup Domain Write Enable"]
        pub type BkpwenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - LDO Low Power Mode"]
            #[inline(always)]
            pub fn ldolp(&self) -> LdolpR {
                LdolpR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Standby Mode"]
            #[inline(always)]
            pub fn stbmod(&self) -> StbmodR {
                StbmodR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Wakeup Flag Reset"]
            #[inline(always)]
            pub fn wurst(&self) -> WurstR {
                WurstR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Standby Flag Reset"]
            #[inline(always)]
            pub fn stbrst(&self) -> StbrstR {
                StbrstR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Low Voltage Detector Enable"]
            #[inline(always)]
            pub fn lvden(&self) -> LvdenR {
                LvdenR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bits 5:7 - Low Voltage Detector Threshold"]
            #[inline(always)]
            pub fn lvdt(&self) -> LvdtR {
                LvdtR::new(((self.bits >> 5) & 7) as u8)
            }
            #[doc = "Bit 8 - Backup Domain Write Enable"]
            #[inline(always)]
            pub fn bkpwen(&self) -> BkpwenR {
                BkpwenR::new(((self.bits >> 8) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - LDO Low Power Mode"]
            #[inline(always)]
            #[must_use]
            pub fn ldolp(&mut self) -> LdolpW<CtlSpec> {
                LdolpW::new(self, 0)
            }
            #[doc = "Bit 1 - Standby Mode"]
            #[inline(always)]
            #[must_use]
            pub fn stbmod(&mut self) -> StbmodW<CtlSpec> {
                StbmodW::new(self, 1)
            }
            #[doc = "Bit 2 - Wakeup Flag Reset"]
            #[inline(always)]
            #[must_use]
            pub fn wurst(&mut self) -> WurstW<CtlSpec> {
                WurstW::new(self, 2)
            }
            #[doc = "Bit 3 - Standby Flag Reset"]
            #[inline(always)]
            #[must_use]
            pub fn stbrst(&mut self) -> StbrstW<CtlSpec> {
                StbrstW::new(self, 3)
            }
            #[doc = "Bit 4 - Low Voltage Detector Enable"]
            #[inline(always)]
            #[must_use]
            pub fn lvden(&mut self) -> LvdenW<CtlSpec> {
                LvdenW::new(self, 4)
            }
            #[doc = "Bits 5:7 - Low Voltage Detector Threshold"]
            #[inline(always)]
            #[must_use]
            pub fn lvdt(&mut self) -> LvdtW<CtlSpec> {
                LvdtW::new(self, 5)
            }
            #[doc = "Bit 8 - Backup Domain Write Enable"]
            #[inline(always)]
            #[must_use]
            pub fn bkpwen(&mut self) -> BkpwenW<CtlSpec> {
                BkpwenW::new(self, 8)
            }
        }
        #[doc = "power control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CtlSpec;
        impl crate::RegisterSpec for CtlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl::R`](R) reader structure"]
        impl crate::Readable for CtlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ctl::W`](W) writer structure"]
        impl crate::Writable for CtlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL to value 0"]
        impl crate::Resettable for CtlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CS (rw) register accessor: power control/status register\n\nYou can [`read`](crate::Reg::read) this register and get [`cs::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cs::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cs`]
module"]
    #[doc(alias = "CS")]
    pub type Cs = crate::Reg<cs::CsSpec>;
    #[doc = "power control/status register"]
    pub mod cs {
        #[doc = "Register `CS` reader"]
        pub type R = crate::R<CsSpec>;
        #[doc = "Register `CS` writer"]
        pub type W = crate::W<CsSpec>;
        #[doc = "Field `WUF` reader - Wakeup flag"]
        pub type WufR = crate::BitReader;
        #[doc = "Field `STBF` reader - Standby flag"]
        pub type StbfR = crate::BitReader;
        #[doc = "Field `LVDF` reader - Low Voltage Detector Status Flag"]
        pub type LvdfR = crate::BitReader;
        #[doc = "Field `WUPEN` reader - Enable WKUP pin"]
        pub type WupenR = crate::BitReader;
        #[doc = "Field `WUPEN` writer - Enable WKUP pin"]
        pub type WupenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Wakeup flag"]
            #[inline(always)]
            pub fn wuf(&self) -> WufR {
                WufR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Standby flag"]
            #[inline(always)]
            pub fn stbf(&self) -> StbfR {
                StbfR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Low Voltage Detector Status Flag"]
            #[inline(always)]
            pub fn lvdf(&self) -> LvdfR {
                LvdfR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 8 - Enable WKUP pin"]
            #[inline(always)]
            pub fn wupen(&self) -> WupenR {
                WupenR::new(((self.bits >> 8) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - Enable WKUP pin"]
            #[inline(always)]
            #[must_use]
            pub fn wupen(&mut self) -> WupenW<CsSpec> {
                WupenW::new(self, 8)
            }
        }
        #[doc = "power control/status register\n\nYou can [`read`](crate::Reg::read) this register and get [`cs::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cs::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CsSpec;
        impl crate::RegisterSpec for CsSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cs::R`](R) reader structure"]
        impl crate::Readable for CsSpec {}
        #[doc = "`write(|w| ..)` method takes [`cs::W`](W) writer structure"]
        impl crate::Writable for CsSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CS to value 0"]
        impl crate::Resettable for CsSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Reset and clock unit"]
pub struct Rcu {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Rcu {}
impl Rcu {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const rcu::RegisterBlock = 0x4002_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rcu::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Rcu {
    type Target = rcu::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Rcu {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rcu").finish()
    }
}
#[doc = "Reset and clock unit"]
pub mod rcu {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ctl: Ctl,
        cfg0: Cfg0,
        int: Int,
        apb2rst: Apb2rst,
        apb1rst: Apb1rst,
        ahben: Ahben,
        apb2en: Apb2en,
        apb1en: Apb1en,
        bdctl: Bdctl,
        rstsck: Rstsck,
        _reserved10: [u8; 0x0c],
        dsv: Dsv,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Control register"]
        #[inline(always)]
        pub const fn ctl(&self) -> &Ctl {
            &self.ctl
        }
        #[doc = "0x04 - Clock configuration register 0 (RCU_CFG0)"]
        #[inline(always)]
        pub const fn cfg0(&self) -> &Cfg0 {
            &self.cfg0
        }
        #[doc = "0x08 - Clock interrupt register (RCU_INT)"]
        #[inline(always)]
        pub const fn int(&self) -> &Int {
            &self.int
        }
        #[doc = "0x0c - APB2 reset register (RCU_APB2RST)"]
        #[inline(always)]
        pub const fn apb2rst(&self) -> &Apb2rst {
            &self.apb2rst
        }
        #[doc = "0x10 - APB1 reset register (RCU_APB1RST)"]
        #[inline(always)]
        pub const fn apb1rst(&self) -> &Apb1rst {
            &self.apb1rst
        }
        #[doc = "0x14 - AHB enable register"]
        #[inline(always)]
        pub const fn ahben(&self) -> &Ahben {
            &self.ahben
        }
        #[doc = "0x18 - APB2 clock enable register (RCU_APB2EN)"]
        #[inline(always)]
        pub const fn apb2en(&self) -> &Apb2en {
            &self.apb2en
        }
        #[doc = "0x1c - APB1 clock enable register (RCU_APB1EN)"]
        #[inline(always)]
        pub const fn apb1en(&self) -> &Apb1en {
            &self.apb1en
        }
        #[doc = "0x20 - Backup domain control register (RCU_BDCTL)"]
        #[inline(always)]
        pub const fn bdctl(&self) -> &Bdctl {
            &self.bdctl
        }
        #[doc = "0x24 - Reset source /clock register (RCU_RSTSCK)"]
        #[inline(always)]
        pub const fn rstsck(&self) -> &Rstsck {
            &self.rstsck
        }
        #[doc = "0x34 - Deep sleep mode Voltage register"]
        #[inline(always)]
        pub const fn dsv(&self) -> &Dsv {
            &self.dsv
        }
    }
    #[doc = "CTL (rw) register accessor: Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl`]
module"]
    #[doc(alias = "CTL")]
    pub type Ctl = crate::Reg<ctl::CtlSpec>;
    #[doc = "Control register"]
    pub mod ctl {
        #[doc = "Register `CTL` reader"]
        pub type R = crate::R<CtlSpec>;
        #[doc = "Register `CTL` writer"]
        pub type W = crate::W<CtlSpec>;
        #[doc = "Field `IRC8MEN` reader - Internal 8MHz RC oscillator Enable"]
        pub type Irc8menR = crate::BitReader;
        #[doc = "Field `IRC8MEN` writer - Internal 8MHz RC oscillator Enable"]
        pub type Irc8menW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `IRC8MSTB` reader - IRC8M Internal 8MHz RC Oscillator stabilization Flag"]
        pub type Irc8mstbR = crate::BitReader;
        #[doc = "Field `IRC8MADJ` reader - Internal 8MHz RC Oscillator clock trim adjust value"]
        pub type Irc8madjR = crate::FieldReader;
        #[doc = "Field `IRC8MADJ` writer - Internal 8MHz RC Oscillator clock trim adjust value"]
        pub type Irc8madjW<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `IRC8MCALIB` reader - Internal 8MHz RC Oscillator calibration value register"]
        pub type Irc8mcalibR = crate::FieldReader;
        #[doc = "Field `HXTALEN` reader - External High Speed oscillator Enable"]
        pub type HxtalenR = crate::BitReader;
        #[doc = "Field `HXTALEN` writer - External High Speed oscillator Enable"]
        pub type HxtalenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HXTALSTB` reader - External crystal oscillator (HXTAL) clock stabilization flag"]
        pub type HxtalstbR = crate::BitReader;
        #[doc = "Field `HXTALBPS` reader - External crystal oscillator (HXTAL) clock bypass mode enable"]
        pub type HxtalbpsR = crate::BitReader;
        #[doc = "Field `HXTALBPS` writer - External crystal oscillator (HXTAL) clock bypass mode enable"]
        pub type HxtalbpsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CKMEN` reader - HXTAL Clock Monitor Enable"]
        pub type CkmenR = crate::BitReader;
        #[doc = "Field `CKMEN` writer - HXTAL Clock Monitor Enable"]
        pub type CkmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PLLEN` reader - PLL enable"]
        pub type PllenR = crate::BitReader;
        #[doc = "Field `PLLEN` writer - PLL enable"]
        pub type PllenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PLLSTB` reader - PLL Clock Stabilization Flag"]
        pub type PllstbR = crate::BitReader;
        impl R {
            #[doc = "Bit 0 - Internal 8MHz RC oscillator Enable"]
            #[inline(always)]
            pub fn irc8men(&self) -> Irc8menR {
                Irc8menR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - IRC8M Internal 8MHz RC Oscillator stabilization Flag"]
            #[inline(always)]
            pub fn irc8mstb(&self) -> Irc8mstbR {
                Irc8mstbR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bits 3:7 - Internal 8MHz RC Oscillator clock trim adjust value"]
            #[inline(always)]
            pub fn irc8madj(&self) -> Irc8madjR {
                Irc8madjR::new(((self.bits >> 3) & 0x1f) as u8)
            }
            #[doc = "Bits 8:15 - Internal 8MHz RC Oscillator calibration value register"]
            #[inline(always)]
            pub fn irc8mcalib(&self) -> Irc8mcalibR {
                Irc8mcalibR::new(((self.bits >> 8) & 0xff) as u8)
            }
            #[doc = "Bit 16 - External High Speed oscillator Enable"]
            #[inline(always)]
            pub fn hxtalen(&self) -> HxtalenR {
                HxtalenR::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - External crystal oscillator (HXTAL) clock stabilization flag"]
            #[inline(always)]
            pub fn hxtalstb(&self) -> HxtalstbR {
                HxtalstbR::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - External crystal oscillator (HXTAL) clock bypass mode enable"]
            #[inline(always)]
            pub fn hxtalbps(&self) -> HxtalbpsR {
                HxtalbpsR::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - HXTAL Clock Monitor Enable"]
            #[inline(always)]
            pub fn ckmen(&self) -> CkmenR {
                CkmenR::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 24 - PLL enable"]
            #[inline(always)]
            pub fn pllen(&self) -> PllenR {
                PllenR::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 25 - PLL Clock Stabilization Flag"]
            #[inline(always)]
            pub fn pllstb(&self) -> PllstbR {
                PllstbR::new(((self.bits >> 25) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Internal 8MHz RC oscillator Enable"]
            #[inline(always)]
            #[must_use]
            pub fn irc8men(&mut self) -> Irc8menW<CtlSpec> {
                Irc8menW::new(self, 0)
            }
            #[doc = "Bits 3:7 - Internal 8MHz RC Oscillator clock trim adjust value"]
            #[inline(always)]
            #[must_use]
            pub fn irc8madj(&mut self) -> Irc8madjW<CtlSpec> {
                Irc8madjW::new(self, 3)
            }
            #[doc = "Bit 16 - External High Speed oscillator Enable"]
            #[inline(always)]
            #[must_use]
            pub fn hxtalen(&mut self) -> HxtalenW<CtlSpec> {
                HxtalenW::new(self, 16)
            }
            #[doc = "Bit 18 - External crystal oscillator (HXTAL) clock bypass mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn hxtalbps(&mut self) -> HxtalbpsW<CtlSpec> {
                HxtalbpsW::new(self, 18)
            }
            #[doc = "Bit 19 - HXTAL Clock Monitor Enable"]
            #[inline(always)]
            #[must_use]
            pub fn ckmen(&mut self) -> CkmenW<CtlSpec> {
                CkmenW::new(self, 19)
            }
            #[doc = "Bit 24 - PLL enable"]
            #[inline(always)]
            #[must_use]
            pub fn pllen(&mut self) -> PllenW<CtlSpec> {
                PllenW::new(self, 24)
            }
        }
        #[doc = "Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CtlSpec;
        impl crate::RegisterSpec for CtlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl::R`](R) reader structure"]
        impl crate::Readable for CtlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ctl::W`](W) writer structure"]
        impl crate::Writable for CtlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL to value 0x83"]
        impl crate::Resettable for CtlSpec {
            const RESET_VALUE: u32 = 0x83;
        }
    }
    #[doc = "CFG0 (rw) register accessor: Clock configuration register 0 (RCU_CFG0)\n\nYou can [`read`](crate::Reg::read) this register and get [`cfg0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfg0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cfg0`]
module"]
    #[doc(alias = "CFG0")]
    pub type Cfg0 = crate::Reg<cfg0::Cfg0Spec>;
    #[doc = "Clock configuration register 0 (RCU_CFG0)"]
    pub mod cfg0 {
        #[doc = "Register `CFG0` reader"]
        pub type R = crate::R<Cfg0Spec>;
        #[doc = "Register `CFG0` writer"]
        pub type W = crate::W<Cfg0Spec>;
        #[doc = "Field `SCS` reader - System clock switch"]
        pub type ScsR = crate::FieldReader;
        #[doc = "Field `SCS` writer - System clock switch"]
        pub type ScsW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `SCSS` reader - System clock switch status"]
        pub type ScssR = crate::FieldReader;
        #[doc = "Field `AHBPSC` reader - AHB prescaler selection"]
        pub type AhbpscR = crate::FieldReader;
        #[doc = "Field `AHBPSC` writer - AHB prescaler selection"]
        pub type AhbpscW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `APB1PSC` reader - APB1 prescaler selection"]
        pub type Apb1pscR = crate::FieldReader;
        #[doc = "Field `APB1PSC` writer - APB1 prescaler selection"]
        pub type Apb1pscW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `APB2PSC` reader - APB2 prescaler selection"]
        pub type Apb2pscR = crate::FieldReader;
        #[doc = "Field `APB2PSC` writer - APB2 prescaler selection"]
        pub type Apb2pscW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `ADCPSC_1_0` reader - ADC clock prescaler selection"]
        pub type Adcpsc1_0R = crate::FieldReader;
        #[doc = "Field `ADCPSC_1_0` writer - ADC clock prescaler selection"]
        pub type Adcpsc1_0W<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PLLSEL` reader - PLL Clock Source Selection"]
        pub type PllselR = crate::BitReader;
        #[doc = "Field `PLLSEL` writer - PLL Clock Source Selection"]
        pub type PllselW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PREDV0` reader - PREDV0 division factor"]
        pub type Predv0R = crate::BitReader;
        #[doc = "Field `PREDV0` writer - PREDV0 division factor"]
        pub type Predv0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PLLMF_3_0` reader - The PLL clock multiplication factor"]
        pub type Pllmf3_0R = crate::FieldReader;
        #[doc = "Field `PLLMF_3_0` writer - The PLL clock multiplication factor"]
        pub type Pllmf3_0W<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `USBDPSC` reader - USBFS clock prescaler selection"]
        pub type UsbdpscR = crate::FieldReader;
        #[doc = "Field `USBDPSC` writer - USBFS clock prescaler selection"]
        pub type UsbdpscW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CKOUT0SEL` reader - CKOUT0 Clock Source Selection"]
        pub type Ckout0selR = crate::FieldReader;
        #[doc = "Field `CKOUT0SEL` writer - CKOUT0 Clock Source Selection"]
        pub type Ckout0selW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `PLLMF_4` reader - Bit 4 of PLLMF"]
        pub type Pllmf4R = crate::BitReader;
        #[doc = "Field `PLLMF_4` writer - Bit 4 of PLLMF"]
        pub type Pllmf4W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ADCPSC_2` reader - Bit 2 of ADCPSC"]
        pub type Adcpsc2R = crate::BitReader;
        #[doc = "Field `ADCPSC_2` writer - Bit 2 of ADCPSC"]
        pub type Adcpsc2W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:1 - System clock switch"]
            #[inline(always)]
            pub fn scs(&self) -> ScsR {
                ScsR::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - System clock switch status"]
            #[inline(always)]
            pub fn scss(&self) -> ScssR {
                ScssR::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:7 - AHB prescaler selection"]
            #[inline(always)]
            pub fn ahbpsc(&self) -> AhbpscR {
                AhbpscR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:10 - APB1 prescaler selection"]
            #[inline(always)]
            pub fn apb1psc(&self) -> Apb1pscR {
                Apb1pscR::new(((self.bits >> 8) & 7) as u8)
            }
            #[doc = "Bits 11:13 - APB2 prescaler selection"]
            #[inline(always)]
            pub fn apb2psc(&self) -> Apb2pscR {
                Apb2pscR::new(((self.bits >> 11) & 7) as u8)
            }
            #[doc = "Bits 14:15 - ADC clock prescaler selection"]
            #[inline(always)]
            pub fn adcpsc_1_0(&self) -> Adcpsc1_0R {
                Adcpsc1_0R::new(((self.bits >> 14) & 3) as u8)
            }
            #[doc = "Bit 16 - PLL Clock Source Selection"]
            #[inline(always)]
            pub fn pllsel(&self) -> PllselR {
                PllselR::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - PREDV0 division factor"]
            #[inline(always)]
            pub fn predv0(&self) -> Predv0R {
                Predv0R::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bits 18:21 - The PLL clock multiplication factor"]
            #[inline(always)]
            pub fn pllmf_3_0(&self) -> Pllmf3_0R {
                Pllmf3_0R::new(((self.bits >> 18) & 0x0f) as u8)
            }
            #[doc = "Bits 22:23 - USBFS clock prescaler selection"]
            #[inline(always)]
            pub fn usbdpsc(&self) -> UsbdpscR {
                UsbdpscR::new(((self.bits >> 22) & 3) as u8)
            }
            #[doc = "Bits 24:26 - CKOUT0 Clock Source Selection"]
            #[inline(always)]
            pub fn ckout0sel(&self) -> Ckout0selR {
                Ckout0selR::new(((self.bits >> 24) & 7) as u8)
            }
            #[doc = "Bit 27 - Bit 4 of PLLMF"]
            #[inline(always)]
            pub fn pllmf_4(&self) -> Pllmf4R {
                Pllmf4R::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Bit 2 of ADCPSC"]
            #[inline(always)]
            pub fn adcpsc_2(&self) -> Adcpsc2R {
                Adcpsc2R::new(((self.bits >> 28) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - System clock switch"]
            #[inline(always)]
            #[must_use]
            pub fn scs(&mut self) -> ScsW<Cfg0Spec> {
                ScsW::new(self, 0)
            }
            #[doc = "Bits 4:7 - AHB prescaler selection"]
            #[inline(always)]
            #[must_use]
            pub fn ahbpsc(&mut self) -> AhbpscW<Cfg0Spec> {
                AhbpscW::new(self, 4)
            }
            #[doc = "Bits 8:10 - APB1 prescaler selection"]
            #[inline(always)]
            #[must_use]
            pub fn apb1psc(&mut self) -> Apb1pscW<Cfg0Spec> {
                Apb1pscW::new(self, 8)
            }
            #[doc = "Bits 11:13 - APB2 prescaler selection"]
            #[inline(always)]
            #[must_use]
            pub fn apb2psc(&mut self) -> Apb2pscW<Cfg0Spec> {
                Apb2pscW::new(self, 11)
            }
            #[doc = "Bits 14:15 - ADC clock prescaler selection"]
            #[inline(always)]
            #[must_use]
            pub fn adcpsc_1_0(&mut self) -> Adcpsc1_0W<Cfg0Spec> {
                Adcpsc1_0W::new(self, 14)
            }
            #[doc = "Bit 16 - PLL Clock Source Selection"]
            #[inline(always)]
            #[must_use]
            pub fn pllsel(&mut self) -> PllselW<Cfg0Spec> {
                PllselW::new(self, 16)
            }
            #[doc = "Bit 17 - PREDV0 division factor"]
            #[inline(always)]
            #[must_use]
            pub fn predv0(&mut self) -> Predv0W<Cfg0Spec> {
                Predv0W::new(self, 17)
            }
            #[doc = "Bits 18:21 - The PLL clock multiplication factor"]
            #[inline(always)]
            #[must_use]
            pub fn pllmf_3_0(&mut self) -> Pllmf3_0W<Cfg0Spec> {
                Pllmf3_0W::new(self, 18)
            }
            #[doc = "Bits 22:23 - USBFS clock prescaler selection"]
            #[inline(always)]
            #[must_use]
            pub fn usbdpsc(&mut self) -> UsbdpscW<Cfg0Spec> {
                UsbdpscW::new(self, 22)
            }
            #[doc = "Bits 24:26 - CKOUT0 Clock Source Selection"]
            #[inline(always)]
            #[must_use]
            pub fn ckout0sel(&mut self) -> Ckout0selW<Cfg0Spec> {
                Ckout0selW::new(self, 24)
            }
            #[doc = "Bit 27 - Bit 4 of PLLMF"]
            #[inline(always)]
            #[must_use]
            pub fn pllmf_4(&mut self) -> Pllmf4W<Cfg0Spec> {
                Pllmf4W::new(self, 27)
            }
            #[doc = "Bit 28 - Bit 2 of ADCPSC"]
            #[inline(always)]
            #[must_use]
            pub fn adcpsc_2(&mut self) -> Adcpsc2W<Cfg0Spec> {
                Adcpsc2W::new(self, 28)
            }
        }
        #[doc = "Clock configuration register 0 (RCU_CFG0)\n\nYou can [`read`](crate::Reg::read) this register and get [`cfg0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfg0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Cfg0Spec;
        impl crate::RegisterSpec for Cfg0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cfg0::R`](R) reader structure"]
        impl crate::Readable for Cfg0Spec {}
        #[doc = "`write(|w| ..)` method takes [`cfg0::W`](W) writer structure"]
        impl crate::Writable for Cfg0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CFG0 to value 0"]
        impl crate::Resettable for Cfg0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "INT (rw) register accessor: Clock interrupt register (RCU_INT)\n\nYou can [`read`](crate::Reg::read) this register and get [`int::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`int::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@int`]
module"]
    #[doc(alias = "INT")]
    pub type Int = crate::Reg<int::IntSpec>;
    #[doc = "Clock interrupt register (RCU_INT)"]
    pub mod int {
        #[doc = "Register `INT` reader"]
        pub type R = crate::R<IntSpec>;
        #[doc = "Register `INT` writer"]
        pub type W = crate::W<IntSpec>;
        #[doc = "Field `IRC40KSTBIF` reader - IRC40K stabilization interrupt flag"]
        pub type Irc40kstbifR = crate::BitReader;
        #[doc = "Field `LXTALSTBIF` reader - LXTAL stabilization interrupt flag"]
        pub type LxtalstbifR = crate::BitReader;
        #[doc = "Field `IRC8MSTBIF` reader - IRC8M stabilization interrupt flag"]
        pub type Irc8mstbifR = crate::BitReader;
        #[doc = "Field `HXTALSTBIF` reader - HXTAL stabilization interrupt flag"]
        pub type HxtalstbifR = crate::BitReader;
        #[doc = "Field `PLLSTBIF` reader - PLL stabilization interrupt flag"]
        pub type PllstbifR = crate::BitReader;
        #[doc = "Field `CKMIF` reader - HXTAL Clock Stuck Interrupt Flag"]
        pub type CkmifR = crate::BitReader;
        #[doc = "Field `IRC40KSTBIE` reader - IRC40K Stabilization interrupt enable"]
        pub type Irc40kstbieR = crate::BitReader;
        #[doc = "Field `IRC40KSTBIE` writer - IRC40K Stabilization interrupt enable"]
        pub type Irc40kstbieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LXTALSTBIE` reader - LXTAL Stabilization Interrupt Enable"]
        pub type LxtalstbieR = crate::BitReader;
        #[doc = "Field `LXTALSTBIE` writer - LXTAL Stabilization Interrupt Enable"]
        pub type LxtalstbieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `IRC8MSTBIE` reader - IRC8M Stabilization Interrupt Enable"]
        pub type Irc8mstbieR = crate::BitReader;
        #[doc = "Field `IRC8MSTBIE` writer - IRC8M Stabilization Interrupt Enable"]
        pub type Irc8mstbieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HXTALSTBIE` reader - HXTAL Stabilization Interrupt Enable"]
        pub type HxtalstbieR = crate::BitReader;
        #[doc = "Field `HXTALSTBIE` writer - HXTAL Stabilization Interrupt Enable"]
        pub type HxtalstbieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PLLSTBIE` reader - PLL Stabilization Interrupt Enable"]
        pub type PllstbieR = crate::BitReader;
        #[doc = "Field `PLLSTBIE` writer - PLL Stabilization Interrupt Enable"]
        pub type PllstbieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `IRC40KSTBIC` writer - IRC40K Stabilization Interrupt Clear"]
        pub type Irc40kstbicW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LXTALSTBIC` writer - LXTAL Stabilization Interrupt Clear"]
        pub type LxtalstbicW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `IRC8MSTBIC` writer - IRC8M Stabilization Interrupt Clear"]
        pub type Irc8mstbicW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HXTALSTBIC` writer - HXTAL Stabilization Interrupt Clear"]
        pub type HxtalstbicW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PLLSTBIC` writer - PLL stabilization Interrupt Clear"]
        pub type PllstbicW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CKMIC` writer - HXTAL Clock Stuck Interrupt Clear"]
        pub type CkmicW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - IRC40K stabilization interrupt flag"]
            #[inline(always)]
            pub fn irc40kstbif(&self) -> Irc40kstbifR {
                Irc40kstbifR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - LXTAL stabilization interrupt flag"]
            #[inline(always)]
            pub fn lxtalstbif(&self) -> LxtalstbifR {
                LxtalstbifR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - IRC8M stabilization interrupt flag"]
            #[inline(always)]
            pub fn irc8mstbif(&self) -> Irc8mstbifR {
                Irc8mstbifR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - HXTAL stabilization interrupt flag"]
            #[inline(always)]
            pub fn hxtalstbif(&self) -> HxtalstbifR {
                HxtalstbifR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - PLL stabilization interrupt flag"]
            #[inline(always)]
            pub fn pllstbif(&self) -> PllstbifR {
                PllstbifR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 7 - HXTAL Clock Stuck Interrupt Flag"]
            #[inline(always)]
            pub fn ckmif(&self) -> CkmifR {
                CkmifR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - IRC40K Stabilization interrupt enable"]
            #[inline(always)]
            pub fn irc40kstbie(&self) -> Irc40kstbieR {
                Irc40kstbieR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - LXTAL Stabilization Interrupt Enable"]
            #[inline(always)]
            pub fn lxtalstbie(&self) -> LxtalstbieR {
                LxtalstbieR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - IRC8M Stabilization Interrupt Enable"]
            #[inline(always)]
            pub fn irc8mstbie(&self) -> Irc8mstbieR {
                Irc8mstbieR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - HXTAL Stabilization Interrupt Enable"]
            #[inline(always)]
            pub fn hxtalstbie(&self) -> HxtalstbieR {
                HxtalstbieR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - PLL Stabilization Interrupt Enable"]
            #[inline(always)]
            pub fn pllstbie(&self) -> PllstbieR {
                PllstbieR::new(((self.bits >> 12) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - IRC40K Stabilization interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn irc40kstbie(&mut self) -> Irc40kstbieW<IntSpec> {
                Irc40kstbieW::new(self, 8)
            }
            #[doc = "Bit 9 - LXTAL Stabilization Interrupt Enable"]
            #[inline(always)]
            #[must_use]
            pub fn lxtalstbie(&mut self) -> LxtalstbieW<IntSpec> {
                LxtalstbieW::new(self, 9)
            }
            #[doc = "Bit 10 - IRC8M Stabilization Interrupt Enable"]
            #[inline(always)]
            #[must_use]
            pub fn irc8mstbie(&mut self) -> Irc8mstbieW<IntSpec> {
                Irc8mstbieW::new(self, 10)
            }
            #[doc = "Bit 11 - HXTAL Stabilization Interrupt Enable"]
            #[inline(always)]
            #[must_use]
            pub fn hxtalstbie(&mut self) -> HxtalstbieW<IntSpec> {
                HxtalstbieW::new(self, 11)
            }
            #[doc = "Bit 12 - PLL Stabilization Interrupt Enable"]
            #[inline(always)]
            #[must_use]
            pub fn pllstbie(&mut self) -> PllstbieW<IntSpec> {
                PllstbieW::new(self, 12)
            }
            #[doc = "Bit 16 - IRC40K Stabilization Interrupt Clear"]
            #[inline(always)]
            #[must_use]
            pub fn irc40kstbic(&mut self) -> Irc40kstbicW<IntSpec> {
                Irc40kstbicW::new(self, 16)
            }
            #[doc = "Bit 17 - LXTAL Stabilization Interrupt Clear"]
            #[inline(always)]
            #[must_use]
            pub fn lxtalstbic(&mut self) -> LxtalstbicW<IntSpec> {
                LxtalstbicW::new(self, 17)
            }
            #[doc = "Bit 18 - IRC8M Stabilization Interrupt Clear"]
            #[inline(always)]
            #[must_use]
            pub fn irc8mstbic(&mut self) -> Irc8mstbicW<IntSpec> {
                Irc8mstbicW::new(self, 18)
            }
            #[doc = "Bit 19 - HXTAL Stabilization Interrupt Clear"]
            #[inline(always)]
            #[must_use]
            pub fn hxtalstbic(&mut self) -> HxtalstbicW<IntSpec> {
                HxtalstbicW::new(self, 19)
            }
            #[doc = "Bit 20 - PLL stabilization Interrupt Clear"]
            #[inline(always)]
            #[must_use]
            pub fn pllstbic(&mut self) -> PllstbicW<IntSpec> {
                PllstbicW::new(self, 20)
            }
            #[doc = "Bit 23 - HXTAL Clock Stuck Interrupt Clear"]
            #[inline(always)]
            #[must_use]
            pub fn ckmic(&mut self) -> CkmicW<IntSpec> {
                CkmicW::new(self, 23)
            }
        }
        #[doc = "Clock interrupt register (RCU_INT)\n\nYou can [`read`](crate::Reg::read) this register and get [`int::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`int::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntSpec;
        impl crate::RegisterSpec for IntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`int::R`](R) reader structure"]
        impl crate::Readable for IntSpec {}
        #[doc = "`write(|w| ..)` method takes [`int::W`](W) writer structure"]
        impl crate::Writable for IntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets INT to value 0"]
        impl crate::Resettable for IntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "APB2RST (rw) register accessor: APB2 reset register (RCU_APB2RST)\n\nYou can [`read`](crate::Reg::read) this register and get [`apb2rst::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb2rst::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@apb2rst`]
module"]
    #[doc(alias = "APB2RST")]
    pub type Apb2rst = crate::Reg<apb2rst::Apb2rstSpec>;
    #[doc = "APB2 reset register (RCU_APB2RST)"]
    pub mod apb2rst {
        #[doc = "Register `APB2RST` reader"]
        pub type R = crate::R<Apb2rstSpec>;
        #[doc = "Register `APB2RST` writer"]
        pub type W = crate::W<Apb2rstSpec>;
        #[doc = "Field `AFRST` reader - Alternate function I/O reset"]
        pub type AfrstR = crate::BitReader;
        #[doc = "Field `AFRST` writer - Alternate function I/O reset"]
        pub type AfrstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PARST` reader - GPIO port A reset"]
        pub type ParstR = crate::BitReader;
        #[doc = "Field `PARST` writer - GPIO port A reset"]
        pub type ParstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PBRST` reader - GPIO port B reset"]
        pub type PbrstR = crate::BitReader;
        #[doc = "Field `PBRST` writer - GPIO port B reset"]
        pub type PbrstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PCRST` reader - GPIO port C reset"]
        pub type PcrstR = crate::BitReader;
        #[doc = "Field `PCRST` writer - GPIO port C reset"]
        pub type PcrstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PDRST` reader - GPIO port D reset"]
        pub type PdrstR = crate::BitReader;
        #[doc = "Field `PDRST` writer - GPIO port D reset"]
        pub type PdrstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PERST` reader - GPIO port E reset"]
        pub type PerstR = crate::BitReader;
        #[doc = "Field `PERST` writer - GPIO port E reset"]
        pub type PerstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PFRST` reader - GPIO portF reset"]
        pub type PfrstR = crate::BitReader;
        #[doc = "Field `PFRST` writer - GPIO portF reset"]
        pub type PfrstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PGRST` reader - GPIO port G reset"]
        pub type PgrstR = crate::BitReader;
        #[doc = "Field `PGRST` writer - GPIO port G reset"]
        pub type PgrstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ADC0RST` reader - ADC0 reset"]
        pub type Adc0rstR = crate::BitReader;
        #[doc = "Field `ADC0RST` writer - ADC0 reset"]
        pub type Adc0rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ADC1RST` reader - ADC1 reset"]
        pub type Adc1rstR = crate::BitReader;
        #[doc = "Field `ADC1RST` writer - ADC1 reset"]
        pub type Adc1rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER0RST` reader - Timer 0 reset"]
        pub type Timer0rstR = crate::BitReader;
        #[doc = "Field `TIMER0RST` writer - Timer 0 reset"]
        pub type Timer0rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SPI0RST` reader - SPI0 reset"]
        pub type Spi0rstR = crate::BitReader;
        #[doc = "Field `SPI0RST` writer - SPI0 reset"]
        pub type Spi0rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER7RST` reader - Timer 7 reset"]
        pub type Timer7rstR = crate::BitReader;
        #[doc = "Field `TIMER7RST` writer - Timer 7 reset"]
        pub type Timer7rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `USART0RST` reader - USART0 Reset"]
        pub type Usart0rstR = crate::BitReader;
        #[doc = "Field `USART0RST` writer - USART0 Reset"]
        pub type Usart0rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ADC2RST` reader - ADC2 Reset"]
        pub type Adc2rstR = crate::BitReader;
        #[doc = "Field `ADC2RST` writer - ADC2 Reset"]
        pub type Adc2rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER8RST` reader - TIMER8 Reset"]
        pub type Timer8rstR = crate::BitReader;
        #[doc = "Field `TIMER8RST` writer - TIMER8 Reset"]
        pub type Timer8rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER9RST` reader - TIMER9 Reset"]
        pub type Timer9rstR = crate::BitReader;
        #[doc = "Field `TIMER9RST` writer - TIMER9 Reset"]
        pub type Timer9rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER10RST` reader - TIMER10 Reset"]
        pub type Timer10rstR = crate::BitReader;
        #[doc = "Field `TIMER10RST` writer - TIMER10 Reset"]
        pub type Timer10rstW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Alternate function I/O reset"]
            #[inline(always)]
            pub fn afrst(&self) -> AfrstR {
                AfrstR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 2 - GPIO port A reset"]
            #[inline(always)]
            pub fn parst(&self) -> ParstR {
                ParstR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - GPIO port B reset"]
            #[inline(always)]
            pub fn pbrst(&self) -> PbrstR {
                PbrstR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - GPIO port C reset"]
            #[inline(always)]
            pub fn pcrst(&self) -> PcrstR {
                PcrstR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - GPIO port D reset"]
            #[inline(always)]
            pub fn pdrst(&self) -> PdrstR {
                PdrstR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - GPIO port E reset"]
            #[inline(always)]
            pub fn perst(&self) -> PerstR {
                PerstR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - GPIO portF reset"]
            #[inline(always)]
            pub fn pfrst(&self) -> PfrstR {
                PfrstR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - GPIO port G reset"]
            #[inline(always)]
            pub fn pgrst(&self) -> PgrstR {
                PgrstR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - ADC0 reset"]
            #[inline(always)]
            pub fn adc0rst(&self) -> Adc0rstR {
                Adc0rstR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - ADC1 reset"]
            #[inline(always)]
            pub fn adc1rst(&self) -> Adc1rstR {
                Adc1rstR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Timer 0 reset"]
            #[inline(always)]
            pub fn timer0rst(&self) -> Timer0rstR {
                Timer0rstR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - SPI0 reset"]
            #[inline(always)]
            pub fn spi0rst(&self) -> Spi0rstR {
                Spi0rstR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Timer 7 reset"]
            #[inline(always)]
            pub fn timer7rst(&self) -> Timer7rstR {
                Timer7rstR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - USART0 Reset"]
            #[inline(always)]
            pub fn usart0rst(&self) -> Usart0rstR {
                Usart0rstR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - ADC2 Reset"]
            #[inline(always)]
            pub fn adc2rst(&self) -> Adc2rstR {
                Adc2rstR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 19 - TIMER8 Reset"]
            #[inline(always)]
            pub fn timer8rst(&self) -> Timer8rstR {
                Timer8rstR::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - TIMER9 Reset"]
            #[inline(always)]
            pub fn timer9rst(&self) -> Timer9rstR {
                Timer9rstR::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - TIMER10 Reset"]
            #[inline(always)]
            pub fn timer10rst(&self) -> Timer10rstR {
                Timer10rstR::new(((self.bits >> 21) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Alternate function I/O reset"]
            #[inline(always)]
            #[must_use]
            pub fn afrst(&mut self) -> AfrstW<Apb2rstSpec> {
                AfrstW::new(self, 0)
            }
            #[doc = "Bit 2 - GPIO port A reset"]
            #[inline(always)]
            #[must_use]
            pub fn parst(&mut self) -> ParstW<Apb2rstSpec> {
                ParstW::new(self, 2)
            }
            #[doc = "Bit 3 - GPIO port B reset"]
            #[inline(always)]
            #[must_use]
            pub fn pbrst(&mut self) -> PbrstW<Apb2rstSpec> {
                PbrstW::new(self, 3)
            }
            #[doc = "Bit 4 - GPIO port C reset"]
            #[inline(always)]
            #[must_use]
            pub fn pcrst(&mut self) -> PcrstW<Apb2rstSpec> {
                PcrstW::new(self, 4)
            }
            #[doc = "Bit 5 - GPIO port D reset"]
            #[inline(always)]
            #[must_use]
            pub fn pdrst(&mut self) -> PdrstW<Apb2rstSpec> {
                PdrstW::new(self, 5)
            }
            #[doc = "Bit 6 - GPIO port E reset"]
            #[inline(always)]
            #[must_use]
            pub fn perst(&mut self) -> PerstW<Apb2rstSpec> {
                PerstW::new(self, 6)
            }
            #[doc = "Bit 7 - GPIO portF reset"]
            #[inline(always)]
            #[must_use]
            pub fn pfrst(&mut self) -> PfrstW<Apb2rstSpec> {
                PfrstW::new(self, 7)
            }
            #[doc = "Bit 8 - GPIO port G reset"]
            #[inline(always)]
            #[must_use]
            pub fn pgrst(&mut self) -> PgrstW<Apb2rstSpec> {
                PgrstW::new(self, 8)
            }
            #[doc = "Bit 9 - ADC0 reset"]
            #[inline(always)]
            #[must_use]
            pub fn adc0rst(&mut self) -> Adc0rstW<Apb2rstSpec> {
                Adc0rstW::new(self, 9)
            }
            #[doc = "Bit 10 - ADC1 reset"]
            #[inline(always)]
            #[must_use]
            pub fn adc1rst(&mut self) -> Adc1rstW<Apb2rstSpec> {
                Adc1rstW::new(self, 10)
            }
            #[doc = "Bit 11 - Timer 0 reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer0rst(&mut self) -> Timer0rstW<Apb2rstSpec> {
                Timer0rstW::new(self, 11)
            }
            #[doc = "Bit 12 - SPI0 reset"]
            #[inline(always)]
            #[must_use]
            pub fn spi0rst(&mut self) -> Spi0rstW<Apb2rstSpec> {
                Spi0rstW::new(self, 12)
            }
            #[doc = "Bit 13 - Timer 7 reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer7rst(&mut self) -> Timer7rstW<Apb2rstSpec> {
                Timer7rstW::new(self, 13)
            }
            #[doc = "Bit 14 - USART0 Reset"]
            #[inline(always)]
            #[must_use]
            pub fn usart0rst(&mut self) -> Usart0rstW<Apb2rstSpec> {
                Usart0rstW::new(self, 14)
            }
            #[doc = "Bit 15 - ADC2 Reset"]
            #[inline(always)]
            #[must_use]
            pub fn adc2rst(&mut self) -> Adc2rstW<Apb2rstSpec> {
                Adc2rstW::new(self, 15)
            }
            #[doc = "Bit 19 - TIMER8 Reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer8rst(&mut self) -> Timer8rstW<Apb2rstSpec> {
                Timer8rstW::new(self, 19)
            }
            #[doc = "Bit 20 - TIMER9 Reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer9rst(&mut self) -> Timer9rstW<Apb2rstSpec> {
                Timer9rstW::new(self, 20)
            }
            #[doc = "Bit 21 - TIMER10 Reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer10rst(&mut self) -> Timer10rstW<Apb2rstSpec> {
                Timer10rstW::new(self, 21)
            }
        }
        #[doc = "APB2 reset register (RCU_APB2RST)\n\nYou can [`read`](crate::Reg::read) this register and get [`apb2rst::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb2rst::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Apb2rstSpec;
        impl crate::RegisterSpec for Apb2rstSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`apb2rst::R`](R) reader structure"]
        impl crate::Readable for Apb2rstSpec {}
        #[doc = "`write(|w| ..)` method takes [`apb2rst::W`](W) writer structure"]
        impl crate::Writable for Apb2rstSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets APB2RST to value 0"]
        impl crate::Resettable for Apb2rstSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "APB1RST (rw) register accessor: APB1 reset register (RCU_APB1RST)\n\nYou can [`read`](crate::Reg::read) this register and get [`apb1rst::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb1rst::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@apb1rst`]
module"]
    #[doc(alias = "APB1RST")]
    pub type Apb1rst = crate::Reg<apb1rst::Apb1rstSpec>;
    #[doc = "APB1 reset register (RCU_APB1RST)"]
    pub mod apb1rst {
        #[doc = "Register `APB1RST` reader"]
        pub type R = crate::R<Apb1rstSpec>;
        #[doc = "Register `APB1RST` writer"]
        pub type W = crate::W<Apb1rstSpec>;
        #[doc = "Field `TIMER1RST` reader - TIMER1 timer reset"]
        pub type Timer1rstR = crate::BitReader;
        #[doc = "Field `TIMER1RST` writer - TIMER1 timer reset"]
        pub type Timer1rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER2RST` reader - TIMER2 timer reset"]
        pub type Timer2rstR = crate::BitReader;
        #[doc = "Field `TIMER2RST` writer - TIMER2 timer reset"]
        pub type Timer2rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER3RST` reader - TIMER3 timer reset"]
        pub type Timer3rstR = crate::BitReader;
        #[doc = "Field `TIMER3RST` writer - TIMER3 timer reset"]
        pub type Timer3rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER4RST` reader - TIMER4 timer reset"]
        pub type Timer4rstR = crate::BitReader;
        #[doc = "Field `TIMER4RST` writer - TIMER4 timer reset"]
        pub type Timer4rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER5RST` reader - TIMER5 timer reset"]
        pub type Timer5rstR = crate::BitReader;
        #[doc = "Field `TIMER5RST` writer - TIMER5 timer reset"]
        pub type Timer5rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER6RST` reader - TIMER6 timer reset"]
        pub type Timer6rstR = crate::BitReader;
        #[doc = "Field `TIMER6RST` writer - TIMER6 timer reset"]
        pub type Timer6rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER11RST` reader - TIMER11 timer reset"]
        pub type Timer11rstR = crate::BitReader;
        #[doc = "Field `TIMER11RST` writer - TIMER11 timer reset"]
        pub type Timer11rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER12RST` reader - TIMER12 timer reset"]
        pub type Timer12rstR = crate::BitReader;
        #[doc = "Field `TIMER12RST` writer - TIMER12 timer reset"]
        pub type Timer12rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER13RST` reader - TIMER13 timer reset"]
        pub type Timer13rstR = crate::BitReader;
        #[doc = "Field `TIMER13RST` writer - TIMER13 timer reset"]
        pub type Timer13rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WWDGTRST` reader - Window watchdog timer reset"]
        pub type WwdgtrstR = crate::BitReader;
        #[doc = "Field `WWDGTRST` writer - Window watchdog timer reset"]
        pub type WwdgtrstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SPI1RST` reader - SPI1 reset"]
        pub type Spi1rstR = crate::BitReader;
        #[doc = "Field `SPI1RST` writer - SPI1 reset"]
        pub type Spi1rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SPI2RST` reader - SPI2 reset"]
        pub type Spi2rstR = crate::BitReader;
        #[doc = "Field `SPI2RST` writer - SPI2 reset"]
        pub type Spi2rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `USART1RST` reader - USART1 reset"]
        pub type Usart1rstR = crate::BitReader;
        #[doc = "Field `USART1RST` writer - USART1 reset"]
        pub type Usart1rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `USART2RST` reader - USART2 reset"]
        pub type Usart2rstR = crate::BitReader;
        #[doc = "Field `USART2RST` writer - USART2 reset"]
        pub type Usart2rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UART3RST` reader - UART3 reset"]
        pub type Uart3rstR = crate::BitReader;
        #[doc = "Field `UART3RST` writer - UART3 reset"]
        pub type Uart3rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UART4RST` reader - UART4 reset"]
        pub type Uart4rstR = crate::BitReader;
        #[doc = "Field `UART4RST` writer - UART4 reset"]
        pub type Uart4rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `I2C0RST` reader - I2C0 reset"]
        pub type I2c0rstR = crate::BitReader;
        #[doc = "Field `I2C0RST` writer - I2C0 reset"]
        pub type I2c0rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `I2C1RST` reader - I2C1 reset"]
        pub type I2c1rstR = crate::BitReader;
        #[doc = "Field `I2C1RST` writer - I2C1 reset"]
        pub type I2c1rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `USBDRST` reader - USBD reset"]
        pub type UsbdrstR = crate::BitReader;
        #[doc = "Field `USBDRST` writer - USBD reset"]
        pub type UsbdrstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CAN0RST` reader - CAN0 reset"]
        pub type Can0rstR = crate::BitReader;
        #[doc = "Field `CAN0RST` writer - CAN0 reset"]
        pub type Can0rstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BKPIRST` reader - Backup interface reset"]
        pub type BkpirstR = crate::BitReader;
        #[doc = "Field `BKPIRST` writer - Backup interface reset"]
        pub type BkpirstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PMURST` reader - Power control reset"]
        pub type PmurstR = crate::BitReader;
        #[doc = "Field `PMURST` writer - Power control reset"]
        pub type PmurstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DACRST` reader - DAC reset"]
        pub type DacrstR = crate::BitReader;
        #[doc = "Field `DACRST` writer - DAC reset"]
        pub type DacrstW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - TIMER1 timer reset"]
            #[inline(always)]
            pub fn timer1rst(&self) -> Timer1rstR {
                Timer1rstR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - TIMER2 timer reset"]
            #[inline(always)]
            pub fn timer2rst(&self) -> Timer2rstR {
                Timer2rstR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - TIMER3 timer reset"]
            #[inline(always)]
            pub fn timer3rst(&self) -> Timer3rstR {
                Timer3rstR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - TIMER4 timer reset"]
            #[inline(always)]
            pub fn timer4rst(&self) -> Timer4rstR {
                Timer4rstR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - TIMER5 timer reset"]
            #[inline(always)]
            pub fn timer5rst(&self) -> Timer5rstR {
                Timer5rstR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - TIMER6 timer reset"]
            #[inline(always)]
            pub fn timer6rst(&self) -> Timer6rstR {
                Timer6rstR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - TIMER11 timer reset"]
            #[inline(always)]
            pub fn timer11rst(&self) -> Timer11rstR {
                Timer11rstR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - TIMER12 timer reset"]
            #[inline(always)]
            pub fn timer12rst(&self) -> Timer12rstR {
                Timer12rstR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - TIMER13 timer reset"]
            #[inline(always)]
            pub fn timer13rst(&self) -> Timer13rstR {
                Timer13rstR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 11 - Window watchdog timer reset"]
            #[inline(always)]
            pub fn wwdgtrst(&self) -> WwdgtrstR {
                WwdgtrstR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 14 - SPI1 reset"]
            #[inline(always)]
            pub fn spi1rst(&self) -> Spi1rstR {
                Spi1rstR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - SPI2 reset"]
            #[inline(always)]
            pub fn spi2rst(&self) -> Spi2rstR {
                Spi2rstR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 17 - USART1 reset"]
            #[inline(always)]
            pub fn usart1rst(&self) -> Usart1rstR {
                Usart1rstR::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - USART2 reset"]
            #[inline(always)]
            pub fn usart2rst(&self) -> Usart2rstR {
                Usart2rstR::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - UART3 reset"]
            #[inline(always)]
            pub fn uart3rst(&self) -> Uart3rstR {
                Uart3rstR::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - UART4 reset"]
            #[inline(always)]
            pub fn uart4rst(&self) -> Uart4rstR {
                Uart4rstR::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - I2C0 reset"]
            #[inline(always)]
            pub fn i2c0rst(&self) -> I2c0rstR {
                I2c0rstR::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - I2C1 reset"]
            #[inline(always)]
            pub fn i2c1rst(&self) -> I2c1rstR {
                I2c1rstR::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - USBD reset"]
            #[inline(always)]
            pub fn usbdrst(&self) -> UsbdrstR {
                UsbdrstR::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 25 - CAN0 reset"]
            #[inline(always)]
            pub fn can0rst(&self) -> Can0rstR {
                Can0rstR::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 27 - Backup interface reset"]
            #[inline(always)]
            pub fn bkpirst(&self) -> BkpirstR {
                BkpirstR::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Power control reset"]
            #[inline(always)]
            pub fn pmurst(&self) -> PmurstR {
                PmurstR::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - DAC reset"]
            #[inline(always)]
            pub fn dacrst(&self) -> DacrstR {
                DacrstR::new(((self.bits >> 29) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - TIMER1 timer reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer1rst(&mut self) -> Timer1rstW<Apb1rstSpec> {
                Timer1rstW::new(self, 0)
            }
            #[doc = "Bit 1 - TIMER2 timer reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer2rst(&mut self) -> Timer2rstW<Apb1rstSpec> {
                Timer2rstW::new(self, 1)
            }
            #[doc = "Bit 2 - TIMER3 timer reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer3rst(&mut self) -> Timer3rstW<Apb1rstSpec> {
                Timer3rstW::new(self, 2)
            }
            #[doc = "Bit 3 - TIMER4 timer reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer4rst(&mut self) -> Timer4rstW<Apb1rstSpec> {
                Timer4rstW::new(self, 3)
            }
            #[doc = "Bit 4 - TIMER5 timer reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer5rst(&mut self) -> Timer5rstW<Apb1rstSpec> {
                Timer5rstW::new(self, 4)
            }
            #[doc = "Bit 5 - TIMER6 timer reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer6rst(&mut self) -> Timer6rstW<Apb1rstSpec> {
                Timer6rstW::new(self, 5)
            }
            #[doc = "Bit 6 - TIMER11 timer reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer11rst(&mut self) -> Timer11rstW<Apb1rstSpec> {
                Timer11rstW::new(self, 6)
            }
            #[doc = "Bit 7 - TIMER12 timer reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer12rst(&mut self) -> Timer12rstW<Apb1rstSpec> {
                Timer12rstW::new(self, 7)
            }
            #[doc = "Bit 8 - TIMER13 timer reset"]
            #[inline(always)]
            #[must_use]
            pub fn timer13rst(&mut self) -> Timer13rstW<Apb1rstSpec> {
                Timer13rstW::new(self, 8)
            }
            #[doc = "Bit 11 - Window watchdog timer reset"]
            #[inline(always)]
            #[must_use]
            pub fn wwdgtrst(&mut self) -> WwdgtrstW<Apb1rstSpec> {
                WwdgtrstW::new(self, 11)
            }
            #[doc = "Bit 14 - SPI1 reset"]
            #[inline(always)]
            #[must_use]
            pub fn spi1rst(&mut self) -> Spi1rstW<Apb1rstSpec> {
                Spi1rstW::new(self, 14)
            }
            #[doc = "Bit 15 - SPI2 reset"]
            #[inline(always)]
            #[must_use]
            pub fn spi2rst(&mut self) -> Spi2rstW<Apb1rstSpec> {
                Spi2rstW::new(self, 15)
            }
            #[doc = "Bit 17 - USART1 reset"]
            #[inline(always)]
            #[must_use]
            pub fn usart1rst(&mut self) -> Usart1rstW<Apb1rstSpec> {
                Usart1rstW::new(self, 17)
            }
            #[doc = "Bit 18 - USART2 reset"]
            #[inline(always)]
            #[must_use]
            pub fn usart2rst(&mut self) -> Usart2rstW<Apb1rstSpec> {
                Usart2rstW::new(self, 18)
            }
            #[doc = "Bit 19 - UART3 reset"]
            #[inline(always)]
            #[must_use]
            pub fn uart3rst(&mut self) -> Uart3rstW<Apb1rstSpec> {
                Uart3rstW::new(self, 19)
            }
            #[doc = "Bit 20 - UART4 reset"]
            #[inline(always)]
            #[must_use]
            pub fn uart4rst(&mut self) -> Uart4rstW<Apb1rstSpec> {
                Uart4rstW::new(self, 20)
            }
            #[doc = "Bit 21 - I2C0 reset"]
            #[inline(always)]
            #[must_use]
            pub fn i2c0rst(&mut self) -> I2c0rstW<Apb1rstSpec> {
                I2c0rstW::new(self, 21)
            }
            #[doc = "Bit 22 - I2C1 reset"]
            #[inline(always)]
            #[must_use]
            pub fn i2c1rst(&mut self) -> I2c1rstW<Apb1rstSpec> {
                I2c1rstW::new(self, 22)
            }
            #[doc = "Bit 23 - USBD reset"]
            #[inline(always)]
            #[must_use]
            pub fn usbdrst(&mut self) -> UsbdrstW<Apb1rstSpec> {
                UsbdrstW::new(self, 23)
            }
            #[doc = "Bit 25 - CAN0 reset"]
            #[inline(always)]
            #[must_use]
            pub fn can0rst(&mut self) -> Can0rstW<Apb1rstSpec> {
                Can0rstW::new(self, 25)
            }
            #[doc = "Bit 27 - Backup interface reset"]
            #[inline(always)]
            #[must_use]
            pub fn bkpirst(&mut self) -> BkpirstW<Apb1rstSpec> {
                BkpirstW::new(self, 27)
            }
            #[doc = "Bit 28 - Power control reset"]
            #[inline(always)]
            #[must_use]
            pub fn pmurst(&mut self) -> PmurstW<Apb1rstSpec> {
                PmurstW::new(self, 28)
            }
            #[doc = "Bit 29 - DAC reset"]
            #[inline(always)]
            #[must_use]
            pub fn dacrst(&mut self) -> DacrstW<Apb1rstSpec> {
                DacrstW::new(self, 29)
            }
        }
        #[doc = "APB1 reset register (RCU_APB1RST)\n\nYou can [`read`](crate::Reg::read) this register and get [`apb1rst::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb1rst::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Apb1rstSpec;
        impl crate::RegisterSpec for Apb1rstSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`apb1rst::R`](R) reader structure"]
        impl crate::Readable for Apb1rstSpec {}
        #[doc = "`write(|w| ..)` method takes [`apb1rst::W`](W) writer structure"]
        impl crate::Writable for Apb1rstSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets APB1RST to value 0"]
        impl crate::Resettable for Apb1rstSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "AHBEN (rw) register accessor: AHB enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ahben::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ahben::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ahben`]
module"]
    #[doc(alias = "AHBEN")]
    pub type Ahben = crate::Reg<ahben::AhbenSpec>;
    #[doc = "AHB enable register"]
    pub mod ahben {
        #[doc = "Register `AHBEN` reader"]
        pub type R = crate::R<AhbenSpec>;
        #[doc = "Register `AHBEN` writer"]
        pub type W = crate::W<AhbenSpec>;
        #[doc = "Field `DMA0EN` reader - DMA0 clock enable"]
        pub type Dma0enR = crate::BitReader;
        #[doc = "Field `DMA0EN` writer - DMA0 clock enable"]
        pub type Dma0enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DMA1EN` reader - DMA1 clock enable"]
        pub type Dma1enR = crate::BitReader;
        #[doc = "Field `DMA1EN` writer - DMA1 clock enable"]
        pub type Dma1enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SRAMSPEN` reader - SRAM interface clock enable when sleep mode"]
        pub type SramspenR = crate::BitReader;
        #[doc = "Field `SRAMSPEN` writer - SRAM interface clock enable when sleep mode"]
        pub type SramspenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FMCSPEN` reader - FMC clock enable when sleep mode"]
        pub type FmcspenR = crate::BitReader;
        #[doc = "Field `FMCSPEN` writer - FMC clock enable when sleep mode"]
        pub type FmcspenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CRCEN` reader - CRC clock enable"]
        pub type CrcenR = crate::BitReader;
        #[doc = "Field `CRCEN` writer - CRC clock enable"]
        pub type CrcenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EXMCEN` reader - EXMC clock enable"]
        pub type ExmcenR = crate::BitReader;
        #[doc = "Field `EXMCEN` writer - EXMC clock enable"]
        pub type ExmcenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SDIOEN` reader - SDIO clock enable"]
        pub type SdioenR = crate::BitReader;
        #[doc = "Field `SDIOEN` writer - SDIO clock enable"]
        pub type SdioenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - DMA0 clock enable"]
            #[inline(always)]
            pub fn dma0en(&self) -> Dma0enR {
                Dma0enR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - DMA1 clock enable"]
            #[inline(always)]
            pub fn dma1en(&self) -> Dma1enR {
                Dma1enR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - SRAM interface clock enable when sleep mode"]
            #[inline(always)]
            pub fn sramspen(&self) -> SramspenR {
                SramspenR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 4 - FMC clock enable when sleep mode"]
            #[inline(always)]
            pub fn fmcspen(&self) -> FmcspenR {
                FmcspenR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - CRC clock enable"]
            #[inline(always)]
            pub fn crcen(&self) -> CrcenR {
                CrcenR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 8 - EXMC clock enable"]
            #[inline(always)]
            pub fn exmcen(&self) -> ExmcenR {
                ExmcenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 10 - SDIO clock enable"]
            #[inline(always)]
            pub fn sdioen(&self) -> SdioenR {
                SdioenR::new(((self.bits >> 10) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - DMA0 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn dma0en(&mut self) -> Dma0enW<AhbenSpec> {
                Dma0enW::new(self, 0)
            }
            #[doc = "Bit 1 - DMA1 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn dma1en(&mut self) -> Dma1enW<AhbenSpec> {
                Dma1enW::new(self, 1)
            }
            #[doc = "Bit 2 - SRAM interface clock enable when sleep mode"]
            #[inline(always)]
            #[must_use]
            pub fn sramspen(&mut self) -> SramspenW<AhbenSpec> {
                SramspenW::new(self, 2)
            }
            #[doc = "Bit 4 - FMC clock enable when sleep mode"]
            #[inline(always)]
            #[must_use]
            pub fn fmcspen(&mut self) -> FmcspenW<AhbenSpec> {
                FmcspenW::new(self, 4)
            }
            #[doc = "Bit 6 - CRC clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn crcen(&mut self) -> CrcenW<AhbenSpec> {
                CrcenW::new(self, 6)
            }
            #[doc = "Bit 8 - EXMC clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn exmcen(&mut self) -> ExmcenW<AhbenSpec> {
                ExmcenW::new(self, 8)
            }
            #[doc = "Bit 10 - SDIO clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn sdioen(&mut self) -> SdioenW<AhbenSpec> {
                SdioenW::new(self, 10)
            }
        }
        #[doc = "AHB enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`ahben::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ahben::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct AhbenSpec;
        impl crate::RegisterSpec for AhbenSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ahben::R`](R) reader structure"]
        impl crate::Readable for AhbenSpec {}
        #[doc = "`write(|w| ..)` method takes [`ahben::W`](W) writer structure"]
        impl crate::Writable for AhbenSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets AHBEN to value 0x14"]
        impl crate::Resettable for AhbenSpec {
            const RESET_VALUE: u32 = 0x14;
        }
    }
    #[doc = "APB2EN (rw) register accessor: APB2 clock enable register (RCU_APB2EN)\n\nYou can [`read`](crate::Reg::read) this register and get [`apb2en::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb2en::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@apb2en`]
module"]
    #[doc(alias = "APB2EN")]
    pub type Apb2en = crate::Reg<apb2en::Apb2enSpec>;
    #[doc = "APB2 clock enable register (RCU_APB2EN)"]
    pub mod apb2en {
        #[doc = "Register `APB2EN` reader"]
        pub type R = crate::R<Apb2enSpec>;
        #[doc = "Register `APB2EN` writer"]
        pub type W = crate::W<Apb2enSpec>;
        #[doc = "Field `AFEN` reader - Alternate function IO clock enable"]
        pub type AfenR = crate::BitReader;
        #[doc = "Field `AFEN` writer - Alternate function IO clock enable"]
        pub type AfenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PAEN` reader - GPIO port A clock enable"]
        pub type PaenR = crate::BitReader;
        #[doc = "Field `PAEN` writer - GPIO port A clock enable"]
        pub type PaenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PBEN` reader - GPIO port B clock enable"]
        pub type PbenR = crate::BitReader;
        #[doc = "Field `PBEN` writer - GPIO port B clock enable"]
        pub type PbenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PCEN` reader - GPIO port C clock enable"]
        pub type PcenR = crate::BitReader;
        #[doc = "Field `PCEN` writer - GPIO port C clock enable"]
        pub type PcenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PDEN` reader - GPIO port D clock enable"]
        pub type PdenR = crate::BitReader;
        #[doc = "Field `PDEN` writer - GPIO port D clock enable"]
        pub type PdenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PEEN` reader - GPIO port E clock enable"]
        pub type PeenR = crate::BitReader;
        #[doc = "Field `PEEN` writer - GPIO port E clock enable"]
        pub type PeenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PFEN` reader - GPIO port F clock enable"]
        pub type PfenR = crate::BitReader;
        #[doc = "Field `PFEN` writer - GPIO port F clock enable"]
        pub type PfenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PGEN` reader - GPIO port G clock enable"]
        pub type PgenR = crate::BitReader;
        #[doc = "Field `PGEN` writer - GPIO port G clock enable"]
        pub type PgenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ADC0EN` reader - ADC0 clock enable"]
        pub type Adc0enR = crate::BitReader;
        #[doc = "Field `ADC0EN` writer - ADC0 clock enable"]
        pub type Adc0enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ADC1EN` reader - ADC1 clock enable"]
        pub type Adc1enR = crate::BitReader;
        #[doc = "Field `ADC1EN` writer - ADC1 clock enable"]
        pub type Adc1enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER0EN` reader - TIMER0 clock enable"]
        pub type Timer0enR = crate::BitReader;
        #[doc = "Field `TIMER0EN` writer - TIMER0 clock enable"]
        pub type Timer0enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SPI0EN` reader - SPI0 clock enable"]
        pub type Spi0enR = crate::BitReader;
        #[doc = "Field `SPI0EN` writer - SPI0 clock enable"]
        pub type Spi0enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER7EN` reader - TIMER7 clock enable"]
        pub type Timer7enR = crate::BitReader;
        #[doc = "Field `TIMER7EN` writer - TIMER7 clock enable"]
        pub type Timer7enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `USART0EN` reader - USART0 clock enable"]
        pub type Usart0enR = crate::BitReader;
        #[doc = "Field `USART0EN` writer - USART0 clock enable"]
        pub type Usart0enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ADC2EN` reader - ADC2 clock enable"]
        pub type Adc2enR = crate::BitReader;
        #[doc = "Field `ADC2EN` writer - ADC2 clock enable"]
        pub type Adc2enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER8EN` reader - TIMER8 clock enable"]
        pub type Timer8enR = crate::BitReader;
        #[doc = "Field `TIMER8EN` writer - TIMER8 clock enable"]
        pub type Timer8enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER9EN` reader - TIMER9 clock enable"]
        pub type Timer9enR = crate::BitReader;
        #[doc = "Field `TIMER9EN` writer - TIMER9 clock enable"]
        pub type Timer9enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER10EN` reader - TIMER10 clock enable"]
        pub type Timer10enR = crate::BitReader;
        #[doc = "Field `TIMER10EN` writer - TIMER10 clock enable"]
        pub type Timer10enW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Alternate function IO clock enable"]
            #[inline(always)]
            pub fn afen(&self) -> AfenR {
                AfenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 2 - GPIO port A clock enable"]
            #[inline(always)]
            pub fn paen(&self) -> PaenR {
                PaenR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - GPIO port B clock enable"]
            #[inline(always)]
            pub fn pben(&self) -> PbenR {
                PbenR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - GPIO port C clock enable"]
            #[inline(always)]
            pub fn pcen(&self) -> PcenR {
                PcenR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - GPIO port D clock enable"]
            #[inline(always)]
            pub fn pden(&self) -> PdenR {
                PdenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - GPIO port E clock enable"]
            #[inline(always)]
            pub fn peen(&self) -> PeenR {
                PeenR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - GPIO port F clock enable"]
            #[inline(always)]
            pub fn pfen(&self) -> PfenR {
                PfenR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - GPIO port G clock enable"]
            #[inline(always)]
            pub fn pgen(&self) -> PgenR {
                PgenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - ADC0 clock enable"]
            #[inline(always)]
            pub fn adc0en(&self) -> Adc0enR {
                Adc0enR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - ADC1 clock enable"]
            #[inline(always)]
            pub fn adc1en(&self) -> Adc1enR {
                Adc1enR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - TIMER0 clock enable"]
            #[inline(always)]
            pub fn timer0en(&self) -> Timer0enR {
                Timer0enR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - SPI0 clock enable"]
            #[inline(always)]
            pub fn spi0en(&self) -> Spi0enR {
                Spi0enR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - TIMER7 clock enable"]
            #[inline(always)]
            pub fn timer7en(&self) -> Timer7enR {
                Timer7enR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - USART0 clock enable"]
            #[inline(always)]
            pub fn usart0en(&self) -> Usart0enR {
                Usart0enR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - ADC2 clock enable"]
            #[inline(always)]
            pub fn adc2en(&self) -> Adc2enR {
                Adc2enR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 19 - TIMER8 clock enable"]
            #[inline(always)]
            pub fn timer8en(&self) -> Timer8enR {
                Timer8enR::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - TIMER9 clock enable"]
            #[inline(always)]
            pub fn timer9en(&self) -> Timer9enR {
                Timer9enR::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - TIMER10 clock enable"]
            #[inline(always)]
            pub fn timer10en(&self) -> Timer10enR {
                Timer10enR::new(((self.bits >> 21) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Alternate function IO clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn afen(&mut self) -> AfenW<Apb2enSpec> {
                AfenW::new(self, 0)
            }
            #[doc = "Bit 2 - GPIO port A clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn paen(&mut self) -> PaenW<Apb2enSpec> {
                PaenW::new(self, 2)
            }
            #[doc = "Bit 3 - GPIO port B clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn pben(&mut self) -> PbenW<Apb2enSpec> {
                PbenW::new(self, 3)
            }
            #[doc = "Bit 4 - GPIO port C clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn pcen(&mut self) -> PcenW<Apb2enSpec> {
                PcenW::new(self, 4)
            }
            #[doc = "Bit 5 - GPIO port D clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn pden(&mut self) -> PdenW<Apb2enSpec> {
                PdenW::new(self, 5)
            }
            #[doc = "Bit 6 - GPIO port E clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn peen(&mut self) -> PeenW<Apb2enSpec> {
                PeenW::new(self, 6)
            }
            #[doc = "Bit 7 - GPIO port F clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn pfen(&mut self) -> PfenW<Apb2enSpec> {
                PfenW::new(self, 7)
            }
            #[doc = "Bit 8 - GPIO port G clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn pgen(&mut self) -> PgenW<Apb2enSpec> {
                PgenW::new(self, 8)
            }
            #[doc = "Bit 9 - ADC0 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn adc0en(&mut self) -> Adc0enW<Apb2enSpec> {
                Adc0enW::new(self, 9)
            }
            #[doc = "Bit 10 - ADC1 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn adc1en(&mut self) -> Adc1enW<Apb2enSpec> {
                Adc1enW::new(self, 10)
            }
            #[doc = "Bit 11 - TIMER0 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer0en(&mut self) -> Timer0enW<Apb2enSpec> {
                Timer0enW::new(self, 11)
            }
            #[doc = "Bit 12 - SPI0 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn spi0en(&mut self) -> Spi0enW<Apb2enSpec> {
                Spi0enW::new(self, 12)
            }
            #[doc = "Bit 13 - TIMER7 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer7en(&mut self) -> Timer7enW<Apb2enSpec> {
                Timer7enW::new(self, 13)
            }
            #[doc = "Bit 14 - USART0 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn usart0en(&mut self) -> Usart0enW<Apb2enSpec> {
                Usart0enW::new(self, 14)
            }
            #[doc = "Bit 15 - ADC2 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn adc2en(&mut self) -> Adc2enW<Apb2enSpec> {
                Adc2enW::new(self, 15)
            }
            #[doc = "Bit 19 - TIMER8 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer8en(&mut self) -> Timer8enW<Apb2enSpec> {
                Timer8enW::new(self, 19)
            }
            #[doc = "Bit 20 - TIMER9 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer9en(&mut self) -> Timer9enW<Apb2enSpec> {
                Timer9enW::new(self, 20)
            }
            #[doc = "Bit 21 - TIMER10 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer10en(&mut self) -> Timer10enW<Apb2enSpec> {
                Timer10enW::new(self, 21)
            }
        }
        #[doc = "APB2 clock enable register (RCU_APB2EN)\n\nYou can [`read`](crate::Reg::read) this register and get [`apb2en::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb2en::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Apb2enSpec;
        impl crate::RegisterSpec for Apb2enSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`apb2en::R`](R) reader structure"]
        impl crate::Readable for Apb2enSpec {}
        #[doc = "`write(|w| ..)` method takes [`apb2en::W`](W) writer structure"]
        impl crate::Writable for Apb2enSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets APB2EN to value 0"]
        impl crate::Resettable for Apb2enSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "APB1EN (rw) register accessor: APB1 clock enable register (RCU_APB1EN)\n\nYou can [`read`](crate::Reg::read) this register and get [`apb1en::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb1en::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@apb1en`]
module"]
    #[doc(alias = "APB1EN")]
    pub type Apb1en = crate::Reg<apb1en::Apb1enSpec>;
    #[doc = "APB1 clock enable register (RCU_APB1EN)"]
    pub mod apb1en {
        #[doc = "Register `APB1EN` reader"]
        pub type R = crate::R<Apb1enSpec>;
        #[doc = "Register `APB1EN` writer"]
        pub type W = crate::W<Apb1enSpec>;
        #[doc = "Field `TIMER1EN` reader - TIMER1 timer clock enable"]
        pub type Timer1enR = crate::BitReader;
        #[doc = "Field `TIMER1EN` writer - TIMER1 timer clock enable"]
        pub type Timer1enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER2EN` reader - TIMER2 timer clock enable"]
        pub type Timer2enR = crate::BitReader;
        #[doc = "Field `TIMER2EN` writer - TIMER2 timer clock enable"]
        pub type Timer2enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER3EN` reader - TIMER3 timer clock enable"]
        pub type Timer3enR = crate::BitReader;
        #[doc = "Field `TIMER3EN` writer - TIMER3 timer clock enable"]
        pub type Timer3enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER4EN` reader - TIMER4 timer clock enable"]
        pub type Timer4enR = crate::BitReader;
        #[doc = "Field `TIMER4EN` writer - TIMER4 timer clock enable"]
        pub type Timer4enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER5EN` reader - TIMER5 timer clock enable"]
        pub type Timer5enR = crate::BitReader;
        #[doc = "Field `TIMER5EN` writer - TIMER5 timer clock enable"]
        pub type Timer5enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER6EN` reader - TIMER6 timer clock enable"]
        pub type Timer6enR = crate::BitReader;
        #[doc = "Field `TIMER6EN` writer - TIMER6 timer clock enable"]
        pub type Timer6enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER11EN` reader - TIMER11 timer clock enable"]
        pub type Timer11enR = crate::BitReader;
        #[doc = "Field `TIMER11EN` writer - TIMER11 timer clock enable"]
        pub type Timer11enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER12EN` reader - TIMER12 timer clock enable"]
        pub type Timer12enR = crate::BitReader;
        #[doc = "Field `TIMER12EN` writer - TIMER12 timer clock enable"]
        pub type Timer12enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TIMER13EN` reader - TIMER13 timer clock enable"]
        pub type Timer13enR = crate::BitReader;
        #[doc = "Field `TIMER13EN` writer - TIMER13 timer clock enable"]
        pub type Timer13enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WWDGTEN` reader - Window watchdog timer clock enable"]
        pub type WwdgtenR = crate::BitReader;
        #[doc = "Field `WWDGTEN` writer - Window watchdog timer clock enable"]
        pub type WwdgtenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SPI1EN` reader - SPI1 clock enable"]
        pub type Spi1enR = crate::BitReader;
        #[doc = "Field `SPI1EN` writer - SPI1 clock enable"]
        pub type Spi1enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SPI2EN` reader - SPI2 clock enable"]
        pub type Spi2enR = crate::BitReader;
        #[doc = "Field `SPI2EN` writer - SPI2 clock enable"]
        pub type Spi2enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `USART1EN` reader - USART1 clock enable"]
        pub type Usart1enR = crate::BitReader;
        #[doc = "Field `USART1EN` writer - USART1 clock enable"]
        pub type Usart1enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `USART2EN` reader - USART2 clock enable"]
        pub type Usart2enR = crate::BitReader;
        #[doc = "Field `USART2EN` writer - USART2 clock enable"]
        pub type Usart2enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UART3EN` reader - UART3 clock enable"]
        pub type Uart3enR = crate::BitReader;
        #[doc = "Field `UART3EN` writer - UART3 clock enable"]
        pub type Uart3enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UART4EN` reader - UART4 clock enable"]
        pub type Uart4enR = crate::BitReader;
        #[doc = "Field `UART4EN` writer - UART4 clock enable"]
        pub type Uart4enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `I2C0EN` reader - I2C0 clock enable"]
        pub type I2c0enR = crate::BitReader;
        #[doc = "Field `I2C0EN` writer - I2C0 clock enable"]
        pub type I2c0enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `I2C1EN` reader - I2C1 clock enable"]
        pub type I2c1enR = crate::BitReader;
        #[doc = "Field `I2C1EN` writer - I2C1 clock enable"]
        pub type I2c1enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `USBDEN` reader - USBD clock enable"]
        pub type UsbdenR = crate::BitReader;
        #[doc = "Field `USBDEN` writer - USBD clock enable"]
        pub type UsbdenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CAN0EN` reader - CAN0 clock enable"]
        pub type Can0enR = crate::BitReader;
        #[doc = "Field `CAN0EN` writer - CAN0 clock enable"]
        pub type Can0enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BKPIEN` reader - Backup interface clock enable"]
        pub type BkpienR = crate::BitReader;
        #[doc = "Field `BKPIEN` writer - Backup interface clock enable"]
        pub type BkpienW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PMUEN` reader - Power control clock enable"]
        pub type PmuenR = crate::BitReader;
        #[doc = "Field `PMUEN` writer - Power control clock enable"]
        pub type PmuenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DACEN` reader - DAC clock enable"]
        pub type DacenR = crate::BitReader;
        #[doc = "Field `DACEN` writer - DAC clock enable"]
        pub type DacenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - TIMER1 timer clock enable"]
            #[inline(always)]
            pub fn timer1en(&self) -> Timer1enR {
                Timer1enR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - TIMER2 timer clock enable"]
            #[inline(always)]
            pub fn timer2en(&self) -> Timer2enR {
                Timer2enR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - TIMER3 timer clock enable"]
            #[inline(always)]
            pub fn timer3en(&self) -> Timer3enR {
                Timer3enR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - TIMER4 timer clock enable"]
            #[inline(always)]
            pub fn timer4en(&self) -> Timer4enR {
                Timer4enR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - TIMER5 timer clock enable"]
            #[inline(always)]
            pub fn timer5en(&self) -> Timer5enR {
                Timer5enR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - TIMER6 timer clock enable"]
            #[inline(always)]
            pub fn timer6en(&self) -> Timer6enR {
                Timer6enR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - TIMER11 timer clock enable"]
            #[inline(always)]
            pub fn timer11en(&self) -> Timer11enR {
                Timer11enR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - TIMER12 timer clock enable"]
            #[inline(always)]
            pub fn timer12en(&self) -> Timer12enR {
                Timer12enR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - TIMER13 timer clock enable"]
            #[inline(always)]
            pub fn timer13en(&self) -> Timer13enR {
                Timer13enR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 11 - Window watchdog timer clock enable"]
            #[inline(always)]
            pub fn wwdgten(&self) -> WwdgtenR {
                WwdgtenR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 14 - SPI1 clock enable"]
            #[inline(always)]
            pub fn spi1en(&self) -> Spi1enR {
                Spi1enR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - SPI2 clock enable"]
            #[inline(always)]
            pub fn spi2en(&self) -> Spi2enR {
                Spi2enR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 17 - USART1 clock enable"]
            #[inline(always)]
            pub fn usart1en(&self) -> Usart1enR {
                Usart1enR::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - USART2 clock enable"]
            #[inline(always)]
            pub fn usart2en(&self) -> Usart2enR {
                Usart2enR::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - UART3 clock enable"]
            #[inline(always)]
            pub fn uart3en(&self) -> Uart3enR {
                Uart3enR::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - UART4 clock enable"]
            #[inline(always)]
            pub fn uart4en(&self) -> Uart4enR {
                Uart4enR::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - I2C0 clock enable"]
            #[inline(always)]
            pub fn i2c0en(&self) -> I2c0enR {
                I2c0enR::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - I2C1 clock enable"]
            #[inline(always)]
            pub fn i2c1en(&self) -> I2c1enR {
                I2c1enR::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - USBD clock enable"]
            #[inline(always)]
            pub fn usbden(&self) -> UsbdenR {
                UsbdenR::new(((self.bits >> 23) & 1) != 0)
            }
            #[doc = "Bit 25 - CAN0 clock enable"]
            #[inline(always)]
            pub fn can0en(&self) -> Can0enR {
                Can0enR::new(((self.bits >> 25) & 1) != 0)
            }
            #[doc = "Bit 27 - Backup interface clock enable"]
            #[inline(always)]
            pub fn bkpien(&self) -> BkpienR {
                BkpienR::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Power control clock enable"]
            #[inline(always)]
            pub fn pmuen(&self) -> PmuenR {
                PmuenR::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - DAC clock enable"]
            #[inline(always)]
            pub fn dacen(&self) -> DacenR {
                DacenR::new(((self.bits >> 29) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - TIMER1 timer clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer1en(&mut self) -> Timer1enW<Apb1enSpec> {
                Timer1enW::new(self, 0)
            }
            #[doc = "Bit 1 - TIMER2 timer clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer2en(&mut self) -> Timer2enW<Apb1enSpec> {
                Timer2enW::new(self, 1)
            }
            #[doc = "Bit 2 - TIMER3 timer clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer3en(&mut self) -> Timer3enW<Apb1enSpec> {
                Timer3enW::new(self, 2)
            }
            #[doc = "Bit 3 - TIMER4 timer clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer4en(&mut self) -> Timer4enW<Apb1enSpec> {
                Timer4enW::new(self, 3)
            }
            #[doc = "Bit 4 - TIMER5 timer clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer5en(&mut self) -> Timer5enW<Apb1enSpec> {
                Timer5enW::new(self, 4)
            }
            #[doc = "Bit 5 - TIMER6 timer clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer6en(&mut self) -> Timer6enW<Apb1enSpec> {
                Timer6enW::new(self, 5)
            }
            #[doc = "Bit 6 - TIMER11 timer clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer11en(&mut self) -> Timer11enW<Apb1enSpec> {
                Timer11enW::new(self, 6)
            }
            #[doc = "Bit 7 - TIMER12 timer clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer12en(&mut self) -> Timer12enW<Apb1enSpec> {
                Timer12enW::new(self, 7)
            }
            #[doc = "Bit 8 - TIMER13 timer clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn timer13en(&mut self) -> Timer13enW<Apb1enSpec> {
                Timer13enW::new(self, 8)
            }
            #[doc = "Bit 11 - Window watchdog timer clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn wwdgten(&mut self) -> WwdgtenW<Apb1enSpec> {
                WwdgtenW::new(self, 11)
            }
            #[doc = "Bit 14 - SPI1 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn spi1en(&mut self) -> Spi1enW<Apb1enSpec> {
                Spi1enW::new(self, 14)
            }
            #[doc = "Bit 15 - SPI2 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn spi2en(&mut self) -> Spi2enW<Apb1enSpec> {
                Spi2enW::new(self, 15)
            }
            #[doc = "Bit 17 - USART1 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn usart1en(&mut self) -> Usart1enW<Apb1enSpec> {
                Usart1enW::new(self, 17)
            }
            #[doc = "Bit 18 - USART2 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn usart2en(&mut self) -> Usart2enW<Apb1enSpec> {
                Usart2enW::new(self, 18)
            }
            #[doc = "Bit 19 - UART3 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn uart3en(&mut self) -> Uart3enW<Apb1enSpec> {
                Uart3enW::new(self, 19)
            }
            #[doc = "Bit 20 - UART4 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn uart4en(&mut self) -> Uart4enW<Apb1enSpec> {
                Uart4enW::new(self, 20)
            }
            #[doc = "Bit 21 - I2C0 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn i2c0en(&mut self) -> I2c0enW<Apb1enSpec> {
                I2c0enW::new(self, 21)
            }
            #[doc = "Bit 22 - I2C1 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn i2c1en(&mut self) -> I2c1enW<Apb1enSpec> {
                I2c1enW::new(self, 22)
            }
            #[doc = "Bit 23 - USBD clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn usbden(&mut self) -> UsbdenW<Apb1enSpec> {
                UsbdenW::new(self, 23)
            }
            #[doc = "Bit 25 - CAN0 clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn can0en(&mut self) -> Can0enW<Apb1enSpec> {
                Can0enW::new(self, 25)
            }
            #[doc = "Bit 27 - Backup interface clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn bkpien(&mut self) -> BkpienW<Apb1enSpec> {
                BkpienW::new(self, 27)
            }
            #[doc = "Bit 28 - Power control clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn pmuen(&mut self) -> PmuenW<Apb1enSpec> {
                PmuenW::new(self, 28)
            }
            #[doc = "Bit 29 - DAC clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn dacen(&mut self) -> DacenW<Apb1enSpec> {
                DacenW::new(self, 29)
            }
        }
        #[doc = "APB1 clock enable register (RCU_APB1EN)\n\nYou can [`read`](crate::Reg::read) this register and get [`apb1en::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`apb1en::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Apb1enSpec;
        impl crate::RegisterSpec for Apb1enSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`apb1en::R`](R) reader structure"]
        impl crate::Readable for Apb1enSpec {}
        #[doc = "`write(|w| ..)` method takes [`apb1en::W`](W) writer structure"]
        impl crate::Writable for Apb1enSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets APB1EN to value 0"]
        impl crate::Resettable for Apb1enSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "BDCTL (rw) register accessor: Backup domain control register (RCU_BDCTL)\n\nYou can [`read`](crate::Reg::read) this register and get [`bdctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bdctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@bdctl`]
module"]
    #[doc(alias = "BDCTL")]
    pub type Bdctl = crate::Reg<bdctl::BdctlSpec>;
    #[doc = "Backup domain control register (RCU_BDCTL)"]
    pub mod bdctl {
        #[doc = "Register `BDCTL` reader"]
        pub type R = crate::R<BdctlSpec>;
        #[doc = "Register `BDCTL` writer"]
        pub type W = crate::W<BdctlSpec>;
        #[doc = "Field `LXTALEN` reader - LXTAL enable"]
        pub type LxtalenR = crate::BitReader;
        #[doc = "Field `LXTALEN` writer - LXTAL enable"]
        pub type LxtalenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LXTALSTB` reader - External low-speed oscillator stabilization"]
        pub type LxtalstbR = crate::BitReader;
        #[doc = "Field `LXTALBPS` reader - LXTAL bypass mode enable"]
        pub type LxtalbpsR = crate::BitReader;
        #[doc = "Field `LXTALBPS` writer - LXTAL bypass mode enable"]
        pub type LxtalbpsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTCSRC` reader - RTC clock entry selection"]
        pub type RtcsrcR = crate::FieldReader;
        #[doc = "Field `RTCSRC` writer - RTC clock entry selection"]
        pub type RtcsrcW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `RTCEN` reader - RTC clock enable"]
        pub type RtcenR = crate::BitReader;
        #[doc = "Field `RTCEN` writer - RTC clock enable"]
        pub type RtcenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BKPRST` reader - Backup domain reset"]
        pub type BkprstR = crate::BitReader;
        #[doc = "Field `BKPRST` writer - Backup domain reset"]
        pub type BkprstW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - LXTAL enable"]
            #[inline(always)]
            pub fn lxtalen(&self) -> LxtalenR {
                LxtalenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - External low-speed oscillator stabilization"]
            #[inline(always)]
            pub fn lxtalstb(&self) -> LxtalstbR {
                LxtalstbR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - LXTAL bypass mode enable"]
            #[inline(always)]
            pub fn lxtalbps(&self) -> LxtalbpsR {
                LxtalbpsR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 8:9 - RTC clock entry selection"]
            #[inline(always)]
            pub fn rtcsrc(&self) -> RtcsrcR {
                RtcsrcR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 15 - RTC clock enable"]
            #[inline(always)]
            pub fn rtcen(&self) -> RtcenR {
                RtcenR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Backup domain reset"]
            #[inline(always)]
            pub fn bkprst(&self) -> BkprstR {
                BkprstR::new(((self.bits >> 16) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - LXTAL enable"]
            #[inline(always)]
            #[must_use]
            pub fn lxtalen(&mut self) -> LxtalenW<BdctlSpec> {
                LxtalenW::new(self, 0)
            }
            #[doc = "Bit 2 - LXTAL bypass mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn lxtalbps(&mut self) -> LxtalbpsW<BdctlSpec> {
                LxtalbpsW::new(self, 2)
            }
            #[doc = "Bits 8:9 - RTC clock entry selection"]
            #[inline(always)]
            #[must_use]
            pub fn rtcsrc(&mut self) -> RtcsrcW<BdctlSpec> {
                RtcsrcW::new(self, 8)
            }
            #[doc = "Bit 15 - RTC clock enable"]
            #[inline(always)]
            #[must_use]
            pub fn rtcen(&mut self) -> RtcenW<BdctlSpec> {
                RtcenW::new(self, 15)
            }
            #[doc = "Bit 16 - Backup domain reset"]
            #[inline(always)]
            #[must_use]
            pub fn bkprst(&mut self) -> BkprstW<BdctlSpec> {
                BkprstW::new(self, 16)
            }
        }
        #[doc = "Backup domain control register (RCU_BDCTL)\n\nYou can [`read`](crate::Reg::read) this register and get [`bdctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`bdctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct BdctlSpec;
        impl crate::RegisterSpec for BdctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`bdctl::R`](R) reader structure"]
        impl crate::Readable for BdctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`bdctl::W`](W) writer structure"]
        impl crate::Writable for BdctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets BDCTL to value 0"]
        impl crate::Resettable for BdctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RSTSCK (rw) register accessor: Reset source /clock register (RCU_RSTSCK)\n\nYou can [`read`](crate::Reg::read) this register and get [`rstsck::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rstsck::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rstsck`]
module"]
    #[doc(alias = "RSTSCK")]
    pub type Rstsck = crate::Reg<rstsck::RstsckSpec>;
    #[doc = "Reset source /clock register (RCU_RSTSCK)"]
    pub mod rstsck {
        #[doc = "Register `RSTSCK` reader"]
        pub type R = crate::R<RstsckSpec>;
        #[doc = "Register `RSTSCK` writer"]
        pub type W = crate::W<RstsckSpec>;
        #[doc = "Field `IRC40KEN` reader - IRC40K enable"]
        pub type Irc40kenR = crate::BitReader;
        #[doc = "Field `IRC40KEN` writer - IRC40K enable"]
        pub type Irc40kenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `IRC40KSTB` reader - IRC40K stabilization"]
        pub type Irc40kstbR = crate::BitReader;
        #[doc = "Field `RSTFC` reader - Reset flag clear"]
        pub type RstfcR = crate::BitReader;
        #[doc = "Field `RSTFC` writer - Reset flag clear"]
        pub type RstfcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EPRSTF` reader - External PIN reset flag"]
        pub type EprstfR = crate::BitReader;
        #[doc = "Field `PORRSTF` reader - Power reset flag"]
        pub type PorrstfR = crate::BitReader;
        #[doc = "Field `SWRSTF` reader - Software reset flag"]
        pub type SwrstfR = crate::BitReader;
        #[doc = "Field `FWDGTRSTF` reader - Free Watchdog timer reset flag"]
        pub type FwdgtrstfR = crate::BitReader;
        #[doc = "Field `WWDGTRSTF` reader - Window watchdog timer reset flag"]
        pub type WwdgtrstfR = crate::BitReader;
        #[doc = "Field `LPRSTF` reader - Low-power reset flag"]
        pub type LprstfR = crate::BitReader;
        impl R {
            #[doc = "Bit 0 - IRC40K enable"]
            #[inline(always)]
            pub fn irc40ken(&self) -> Irc40kenR {
                Irc40kenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - IRC40K stabilization"]
            #[inline(always)]
            pub fn irc40kstb(&self) -> Irc40kstbR {
                Irc40kstbR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 24 - Reset flag clear"]
            #[inline(always)]
            pub fn rstfc(&self) -> RstfcR {
                RstfcR::new(((self.bits >> 24) & 1) != 0)
            }
            #[doc = "Bit 26 - External PIN reset flag"]
            #[inline(always)]
            pub fn eprstf(&self) -> EprstfR {
                EprstfR::new(((self.bits >> 26) & 1) != 0)
            }
            #[doc = "Bit 27 - Power reset flag"]
            #[inline(always)]
            pub fn porrstf(&self) -> PorrstfR {
                PorrstfR::new(((self.bits >> 27) & 1) != 0)
            }
            #[doc = "Bit 28 - Software reset flag"]
            #[inline(always)]
            pub fn swrstf(&self) -> SwrstfR {
                SwrstfR::new(((self.bits >> 28) & 1) != 0)
            }
            #[doc = "Bit 29 - Free Watchdog timer reset flag"]
            #[inline(always)]
            pub fn fwdgtrstf(&self) -> FwdgtrstfR {
                FwdgtrstfR::new(((self.bits >> 29) & 1) != 0)
            }
            #[doc = "Bit 30 - Window watchdog timer reset flag"]
            #[inline(always)]
            pub fn wwdgtrstf(&self) -> WwdgtrstfR {
                WwdgtrstfR::new(((self.bits >> 30) & 1) != 0)
            }
            #[doc = "Bit 31 - Low-power reset flag"]
            #[inline(always)]
            pub fn lprstf(&self) -> LprstfR {
                LprstfR::new(((self.bits >> 31) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - IRC40K enable"]
            #[inline(always)]
            #[must_use]
            pub fn irc40ken(&mut self) -> Irc40kenW<RstsckSpec> {
                Irc40kenW::new(self, 0)
            }
            #[doc = "Bit 24 - Reset flag clear"]
            #[inline(always)]
            #[must_use]
            pub fn rstfc(&mut self) -> RstfcW<RstsckSpec> {
                RstfcW::new(self, 24)
            }
        }
        #[doc = "Reset source /clock register (RCU_RSTSCK)\n\nYou can [`read`](crate::Reg::read) this register and get [`rstsck::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`rstsck::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RstsckSpec;
        impl crate::RegisterSpec for RstsckSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rstsck::R`](R) reader structure"]
        impl crate::Readable for RstsckSpec {}
        #[doc = "`write(|w| ..)` method takes [`rstsck::W`](W) writer structure"]
        impl crate::Writable for RstsckSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets RSTSCK to value 0x0c00_0000"]
        impl crate::Resettable for RstsckSpec {
            const RESET_VALUE: u32 = 0x0c00_0000;
        }
    }
    #[doc = "DSV (rw) register accessor: Deep sleep mode Voltage register\n\nYou can [`read`](crate::Reg::read) this register and get [`dsv::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dsv::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dsv`]
module"]
    #[doc(alias = "DSV")]
    pub type Dsv = crate::Reg<dsv::DsvSpec>;
    #[doc = "Deep sleep mode Voltage register"]
    pub mod dsv {
        #[doc = "Register `DSV` reader"]
        pub type R = crate::R<DsvSpec>;
        #[doc = "Register `DSV` writer"]
        pub type W = crate::W<DsvSpec>;
        #[doc = "Field `DSLPVS` reader - Deep-sleep mode voltage select"]
        pub type DslpvsR = crate::FieldReader;
        #[doc = "Field `DSLPVS` writer - Deep-sleep mode voltage select"]
        pub type DslpvsW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        impl R {
            #[doc = "Bits 0:2 - Deep-sleep mode voltage select"]
            #[inline(always)]
            pub fn dslpvs(&self) -> DslpvsR {
                DslpvsR::new((self.bits & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Deep-sleep mode voltage select"]
            #[inline(always)]
            #[must_use]
            pub fn dslpvs(&mut self) -> DslpvsW<DsvSpec> {
                DslpvsW::new(self, 0)
            }
        }
        #[doc = "Deep sleep mode Voltage register\n\nYou can [`read`](crate::Reg::read) this register and get [`dsv::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dsv::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DsvSpec;
        impl crate::RegisterSpec for DsvSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dsv::R`](R) reader structure"]
        impl crate::Readable for DsvSpec {}
        #[doc = "`write(|w| ..)` method takes [`dsv::W`](W) writer structure"]
        impl crate::Writable for DsvSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DSV to value 0"]
        impl crate::Resettable for DsvSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Real-time clock"]
pub struct Rtc {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Rtc {}
impl Rtc {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const rtc::RegisterBlock = 0x4000_2800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const rtc::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Rtc {
    type Target = rtc::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Rtc {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Rtc").finish()
    }
}
#[doc = "Real-time clock"]
pub mod rtc {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        inten: Inten,
        ctl: Ctl,
        psch: Psch,
        pscl: Pscl,
        divh: Divh,
        divl: Divl,
        cnth: Cnth,
        cntl: Cntl,
        alrmh: Alrmh,
        alrml: Alrml,
    }
    impl RegisterBlock {
        #[doc = "0x00 - RTC interrupt enable register"]
        #[inline(always)]
        pub const fn inten(&self) -> &Inten {
            &self.inten
        }
        #[doc = "0x04 - control register"]
        #[inline(always)]
        pub const fn ctl(&self) -> &Ctl {
            &self.ctl
        }
        #[doc = "0x08 - RTC prescaler high register"]
        #[inline(always)]
        pub const fn psch(&self) -> &Psch {
            &self.psch
        }
        #[doc = "0x0c - RTC prescaler low register"]
        #[inline(always)]
        pub const fn pscl(&self) -> &Pscl {
            &self.pscl
        }
        #[doc = "0x10 - RTC divider high register"]
        #[inline(always)]
        pub const fn divh(&self) -> &Divh {
            &self.divh
        }
        #[doc = "0x14 - RTC divider low register"]
        #[inline(always)]
        pub const fn divl(&self) -> &Divl {
            &self.divl
        }
        #[doc = "0x18 - RTC counter high register"]
        #[inline(always)]
        pub const fn cnth(&self) -> &Cnth {
            &self.cnth
        }
        #[doc = "0x1c - RTC counter low register"]
        #[inline(always)]
        pub const fn cntl(&self) -> &Cntl {
            &self.cntl
        }
        #[doc = "0x20 - Alarm high register"]
        #[inline(always)]
        pub const fn alrmh(&self) -> &Alrmh {
            &self.alrmh
        }
        #[doc = "0x24 - RTC alarm low register"]
        #[inline(always)]
        pub const fn alrml(&self) -> &Alrml {
            &self.alrml
        }
    }
    #[doc = "INTEN (rw) register accessor: RTC interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`inten::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`inten::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inten`]
module"]
    #[doc(alias = "INTEN")]
    pub type Inten = crate::Reg<inten::IntenSpec>;
    #[doc = "RTC interrupt enable register"]
    pub mod inten {
        #[doc = "Register `INTEN` reader"]
        pub type R = crate::R<IntenSpec>;
        #[doc = "Register `INTEN` writer"]
        pub type W = crate::W<IntenSpec>;
        #[doc = "Field `SCIE` reader - Second interrupt"]
        pub type ScieR = crate::BitReader;
        #[doc = "Field `SCIE` writer - Second interrupt"]
        pub type ScieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ALRMIE` reader - Alarm interrupt enable"]
        pub type AlrmieR = crate::BitReader;
        #[doc = "Field `ALRMIE` writer - Alarm interrupt enable"]
        pub type AlrmieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OVIE` reader - Overflow interrupt enable"]
        pub type OvieR = crate::BitReader;
        #[doc = "Field `OVIE` writer - Overflow interrupt enable"]
        pub type OvieW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Second interrupt"]
            #[inline(always)]
            pub fn scie(&self) -> ScieR {
                ScieR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Alarm interrupt enable"]
            #[inline(always)]
            pub fn alrmie(&self) -> AlrmieR {
                AlrmieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Overflow interrupt enable"]
            #[inline(always)]
            pub fn ovie(&self) -> OvieR {
                OvieR::new(((self.bits >> 2) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Second interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn scie(&mut self) -> ScieW<IntenSpec> {
                ScieW::new(self, 0)
            }
            #[doc = "Bit 1 - Alarm interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn alrmie(&mut self) -> AlrmieW<IntenSpec> {
                AlrmieW::new(self, 1)
            }
            #[doc = "Bit 2 - Overflow interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ovie(&mut self) -> OvieW<IntenSpec> {
                OvieW::new(self, 2)
            }
        }
        #[doc = "RTC interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`inten::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`inten::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntenSpec;
        impl crate::RegisterSpec for IntenSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inten::R`](R) reader structure"]
        impl crate::Readable for IntenSpec {}
        #[doc = "`write(|w| ..)` method takes [`inten::W`](W) writer structure"]
        impl crate::Writable for IntenSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets INTEN to value 0"]
        impl crate::Resettable for IntenSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL (rw) register accessor: control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl`]
module"]
    #[doc(alias = "CTL")]
    pub type Ctl = crate::Reg<ctl::CtlSpec>;
    #[doc = "control register"]
    pub mod ctl {
        #[doc = "Register `CTL` reader"]
        pub type R = crate::R<CtlSpec>;
        #[doc = "Register `CTL` writer"]
        pub type W = crate::W<CtlSpec>;
        #[doc = "Field `SCIF` reader - Sencond interrupt flag"]
        pub type ScifR = crate::BitReader;
        #[doc = "Field `SCIF` writer - Sencond interrupt flag"]
        pub type ScifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ALRMIF` reader - Alarm interrupt flag"]
        pub type AlrmifR = crate::BitReader;
        #[doc = "Field `ALRMIF` writer - Alarm interrupt flag"]
        pub type AlrmifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OVIF` reader - Overflow interrupt flag"]
        pub type OvifR = crate::BitReader;
        #[doc = "Field `OVIF` writer - Overflow interrupt flag"]
        pub type OvifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RSYNF` reader - Registers synchronized flag"]
        pub type RsynfR = crate::BitReader;
        #[doc = "Field `RSYNF` writer - Registers synchronized flag"]
        pub type RsynfW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMF` reader - Configuration mode flag"]
        pub type CmfR = crate::BitReader;
        #[doc = "Field `CMF` writer - Configuration mode flag"]
        pub type CmfW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LWOFF` reader - Last write operation finished flag"]
        pub type LwoffR = crate::BitReader;
        #[doc = "Field `LWOFF` writer - Last write operation finished flag"]
        pub type LwoffW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Sencond interrupt flag"]
            #[inline(always)]
            pub fn scif(&self) -> ScifR {
                ScifR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Alarm interrupt flag"]
            #[inline(always)]
            pub fn alrmif(&self) -> AlrmifR {
                AlrmifR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Overflow interrupt flag"]
            #[inline(always)]
            pub fn ovif(&self) -> OvifR {
                OvifR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Registers synchronized flag"]
            #[inline(always)]
            pub fn rsynf(&self) -> RsynfR {
                RsynfR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Configuration mode flag"]
            #[inline(always)]
            pub fn cmf(&self) -> CmfR {
                CmfR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Last write operation finished flag"]
            #[inline(always)]
            pub fn lwoff(&self) -> LwoffR {
                LwoffR::new(((self.bits >> 5) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Sencond interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn scif(&mut self) -> ScifW<CtlSpec> {
                ScifW::new(self, 0)
            }
            #[doc = "Bit 1 - Alarm interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn alrmif(&mut self) -> AlrmifW<CtlSpec> {
                AlrmifW::new(self, 1)
            }
            #[doc = "Bit 2 - Overflow interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn ovif(&mut self) -> OvifW<CtlSpec> {
                OvifW::new(self, 2)
            }
            #[doc = "Bit 3 - Registers synchronized flag"]
            #[inline(always)]
            #[must_use]
            pub fn rsynf(&mut self) -> RsynfW<CtlSpec> {
                RsynfW::new(self, 3)
            }
            #[doc = "Bit 4 - Configuration mode flag"]
            #[inline(always)]
            #[must_use]
            pub fn cmf(&mut self) -> CmfW<CtlSpec> {
                CmfW::new(self, 4)
            }
            #[doc = "Bit 5 - Last write operation finished flag"]
            #[inline(always)]
            #[must_use]
            pub fn lwoff(&mut self) -> LwoffW<CtlSpec> {
                LwoffW::new(self, 5)
            }
        }
        #[doc = "control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CtlSpec;
        impl crate::RegisterSpec for CtlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl::R`](R) reader structure"]
        impl crate::Readable for CtlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ctl::W`](W) writer structure"]
        impl crate::Writable for CtlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL to value 0x20"]
        impl crate::Resettable for CtlSpec {
            const RESET_VALUE: u32 = 0x20;
        }
    }
    #[doc = "PSCH (w) register accessor: RTC prescaler high register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psch::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@psch`]
module"]
    #[doc(alias = "PSCH")]
    pub type Psch = crate::Reg<psch::PschSpec>;
    #[doc = "RTC prescaler high register"]
    pub mod psch {
        #[doc = "Register `PSCH` writer"]
        pub type W = crate::W<PschSpec>;
        #[doc = "Field `PSC` writer - RTC prescaler value high"]
        pub type PscW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        impl W {
            #[doc = "Bits 0:3 - RTC prescaler value high"]
            #[inline(always)]
            #[must_use]
            pub fn psc(&mut self) -> PscW<PschSpec> {
                PscW::new(self, 0)
            }
        }
        #[doc = "RTC prescaler high register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psch::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct PschSpec;
        impl crate::RegisterSpec for PschSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`psch::W`](W) writer structure"]
        impl crate::Writable for PschSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets PSCH to value 0"]
        impl crate::Resettable for PschSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "PSCL (w) register accessor: RTC prescaler low register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pscl::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pscl`]
module"]
    #[doc(alias = "PSCL")]
    pub type Pscl = crate::Reg<pscl::PsclSpec>;
    #[doc = "RTC prescaler low register"]
    pub mod pscl {
        #[doc = "Register `PSCL` writer"]
        pub type W = crate::W<PsclSpec>;
        #[doc = "Field `PSC` writer - RTC prescaler value low"]
        pub type PscW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl W {
            #[doc = "Bits 0:15 - RTC prescaler value low"]
            #[inline(always)]
            #[must_use]
            pub fn psc(&mut self) -> PscW<PsclSpec> {
                PscW::new(self, 0)
            }
        }
        #[doc = "RTC prescaler low register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pscl::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct PsclSpec;
        impl crate::RegisterSpec for PsclSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`pscl::W`](W) writer structure"]
        impl crate::Writable for PsclSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets PSCL to value 0x8000"]
        impl crate::Resettable for PsclSpec {
            const RESET_VALUE: u32 = 0x8000;
        }
    }
    #[doc = "DIVH (r) register accessor: RTC divider high register\n\nYou can [`read`](crate::Reg::read) this register and get [`divh::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@divh`]
module"]
    #[doc(alias = "DIVH")]
    pub type Divh = crate::Reg<divh::DivhSpec>;
    #[doc = "RTC divider high register"]
    pub mod divh {
        #[doc = "Register `DIVH` reader"]
        pub type R = crate::R<DivhSpec>;
        #[doc = "Field `DIV` reader - RTC divider value high"]
        pub type DivR = crate::FieldReader;
        impl R {
            #[doc = "Bits 0:3 - RTC divider value high"]
            #[inline(always)]
            pub fn div(&self) -> DivR {
                DivR::new((self.bits & 0x0f) as u8)
            }
        }
        #[doc = "RTC divider high register\n\nYou can [`read`](crate::Reg::read) this register and get [`divh::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DivhSpec;
        impl crate::RegisterSpec for DivhSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`divh::R`](R) reader structure"]
        impl crate::Readable for DivhSpec {}
        #[doc = "`reset()` method sets DIVH to value 0"]
        impl crate::Resettable for DivhSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DIVL (r) register accessor: RTC divider low register\n\nYou can [`read`](crate::Reg::read) this register and get [`divl::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@divl`]
module"]
    #[doc(alias = "DIVL")]
    pub type Divl = crate::Reg<divl::DivlSpec>;
    #[doc = "RTC divider low register"]
    pub mod divl {
        #[doc = "Register `DIVL` reader"]
        pub type R = crate::R<DivlSpec>;
        #[doc = "Field `DIV` reader - RTC divider value low"]
        pub type DivR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:15 - RTC divider value low"]
            #[inline(always)]
            pub fn div(&self) -> DivR {
                DivR::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "RTC divider low register\n\nYou can [`read`](crate::Reg::read) this register and get [`divl::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DivlSpec;
        impl crate::RegisterSpec for DivlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`divl::R`](R) reader structure"]
        impl crate::Readable for DivlSpec {}
        #[doc = "`reset()` method sets DIVL to value 0x8000"]
        impl crate::Resettable for DivlSpec {
            const RESET_VALUE: u32 = 0x8000;
        }
    }
    #[doc = "CNTH (rw) register accessor: RTC counter high register\n\nYou can [`read`](crate::Reg::read) this register and get [`cnth::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnth::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cnth`]
module"]
    #[doc(alias = "CNTH")]
    pub type Cnth = crate::Reg<cnth::CnthSpec>;
    #[doc = "RTC counter high register"]
    pub mod cnth {
        #[doc = "Register `CNTH` reader"]
        pub type R = crate::R<CnthSpec>;
        #[doc = "Register `CNTH` writer"]
        pub type W = crate::W<CnthSpec>;
        #[doc = "Field `CNT` reader - RTC counter value high"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - RTC counter value high"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - RTC counter value high"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - RTC counter value high"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<CnthSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "RTC counter high register\n\nYou can [`read`](crate::Reg::read) this register and get [`cnth::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnth::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CnthSpec;
        impl crate::RegisterSpec for CnthSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cnth::R`](R) reader structure"]
        impl crate::Readable for CnthSpec {}
        #[doc = "`write(|w| ..)` method takes [`cnth::W`](W) writer structure"]
        impl crate::Writable for CnthSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CNTH to value 0"]
        impl crate::Resettable for CnthSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CNTL (rw) register accessor: RTC counter low register\n\nYou can [`read`](crate::Reg::read) this register and get [`cntl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cntl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cntl`]
module"]
    #[doc(alias = "CNTL")]
    pub type Cntl = crate::Reg<cntl::CntlSpec>;
    #[doc = "RTC counter low register"]
    pub mod cntl {
        #[doc = "Register `CNTL` reader"]
        pub type R = crate::R<CntlSpec>;
        #[doc = "Register `CNTL` writer"]
        pub type W = crate::W<CntlSpec>;
        #[doc = "Field `CNT` reader - RTC counter value low"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - RTC counter value low"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - RTC counter value low"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - RTC counter value low"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<CntlSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "RTC counter low register\n\nYou can [`read`](crate::Reg::read) this register and get [`cntl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cntl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CntlSpec;
        impl crate::RegisterSpec for CntlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cntl::R`](R) reader structure"]
        impl crate::Readable for CntlSpec {}
        #[doc = "`write(|w| ..)` method takes [`cntl::W`](W) writer structure"]
        impl crate::Writable for CntlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CNTL to value 0"]
        impl crate::Resettable for CntlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "ALRMH (w) register accessor: Alarm high register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`alrmh::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@alrmh`]
module"]
    #[doc(alias = "ALRMH")]
    pub type Alrmh = crate::Reg<alrmh::AlrmhSpec>;
    #[doc = "Alarm high register"]
    pub mod alrmh {
        #[doc = "Register `ALRMH` writer"]
        pub type W = crate::W<AlrmhSpec>;
        #[doc = "Field `ALRM` writer - Alarm value high"]
        pub type AlrmW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl W {
            #[doc = "Bits 0:15 - Alarm value high"]
            #[inline(always)]
            #[must_use]
            pub fn alrm(&mut self) -> AlrmW<AlrmhSpec> {
                AlrmW::new(self, 0)
            }
        }
        #[doc = "Alarm high register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`alrmh::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct AlrmhSpec;
        impl crate::RegisterSpec for AlrmhSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`alrmh::W`](W) writer structure"]
        impl crate::Writable for AlrmhSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets ALRMH to value 0xffff"]
        impl crate::Resettable for AlrmhSpec {
            const RESET_VALUE: u32 = 0xffff;
        }
    }
    #[doc = "ALRML (w) register accessor: RTC alarm low register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`alrml::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@alrml`]
module"]
    #[doc(alias = "ALRML")]
    pub type Alrml = crate::Reg<alrml::AlrmlSpec>;
    #[doc = "RTC alarm low register"]
    pub mod alrml {
        #[doc = "Register `ALRML` writer"]
        pub type W = crate::W<AlrmlSpec>;
        #[doc = "Field `ALRM` writer - alarm value low"]
        pub type AlrmW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl W {
            #[doc = "Bits 0:15 - alarm value low"]
            #[inline(always)]
            #[must_use]
            pub fn alrm(&mut self) -> AlrmW<AlrmlSpec> {
                AlrmW::new(self, 0)
            }
        }
        #[doc = "RTC alarm low register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`alrml::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct AlrmlSpec;
        impl crate::RegisterSpec for AlrmlSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`alrml::W`](W) writer structure"]
        impl crate::Writable for AlrmlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets ALRML to value 0xffff"]
        impl crate::Resettable for AlrmlSpec {
            const RESET_VALUE: u32 = 0xffff;
        }
    }
}
#[doc = "Secure digital input/output interface"]
pub struct Sdio {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Sdio {}
impl Sdio {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const sdio::RegisterBlock = 0x4001_8000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const sdio::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Sdio {
    type Target = sdio::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Sdio {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Sdio").finish()
    }
}
#[doc = "Secure digital input/output interface"]
pub mod sdio {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        pwrctl: Pwrctl,
        clkctl: Clkctl,
        cmdagmt: Cmdagmt,
        cmdctl: Cmdctl,
        rspcmdidx: Rspcmdidx,
        resp0: Resp0,
        resp1: Resp1,
        resp2: Resp2,
        resp3: Resp3,
        datato: Datato,
        datalen: Datalen,
        datactl: Datactl,
        datacnt: Datacnt,
        stat: Stat,
        intc: Intc,
        inten: Inten,
        _reserved16: [u8; 0x08],
        fifocnt: Fifocnt,
        _reserved17: [u8; 0x34],
        fifo: Fifo,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Power control register"]
        #[inline(always)]
        pub const fn pwrctl(&self) -> &Pwrctl {
            &self.pwrctl
        }
        #[doc = "0x04 - Clock control register"]
        #[inline(always)]
        pub const fn clkctl(&self) -> &Clkctl {
            &self.clkctl
        }
        #[doc = "0x08 - Command argument register"]
        #[inline(always)]
        pub const fn cmdagmt(&self) -> &Cmdagmt {
            &self.cmdagmt
        }
        #[doc = "0x0c - Command control register"]
        #[inline(always)]
        pub const fn cmdctl(&self) -> &Cmdctl {
            &self.cmdctl
        }
        #[doc = "0x10 - Command index response register"]
        #[inline(always)]
        pub const fn rspcmdidx(&self) -> &Rspcmdidx {
            &self.rspcmdidx
        }
        #[doc = "0x14 - Response register 0"]
        #[inline(always)]
        pub const fn resp0(&self) -> &Resp0 {
            &self.resp0
        }
        #[doc = "0x18 - Response register 1"]
        #[inline(always)]
        pub const fn resp1(&self) -> &Resp1 {
            &self.resp1
        }
        #[doc = "0x1c - Response register 2"]
        #[inline(always)]
        pub const fn resp2(&self) -> &Resp2 {
            &self.resp2
        }
        #[doc = "0x20 - Response register 3"]
        #[inline(always)]
        pub const fn resp3(&self) -> &Resp3 {
            &self.resp3
        }
        #[doc = "0x24 - Data timeout register"]
        #[inline(always)]
        pub const fn datato(&self) -> &Datato {
            &self.datato
        }
        #[doc = "0x28 - Data length register"]
        #[inline(always)]
        pub const fn datalen(&self) -> &Datalen {
            &self.datalen
        }
        #[doc = "0x2c - Data control register"]
        #[inline(always)]
        pub const fn datactl(&self) -> &Datactl {
            &self.datactl
        }
        #[doc = "0x30 - Data counter register"]
        #[inline(always)]
        pub const fn datacnt(&self) -> &Datacnt {
            &self.datacnt
        }
        #[doc = "0x34 - Status register"]
        #[inline(always)]
        pub const fn stat(&self) -> &Stat {
            &self.stat
        }
        #[doc = "0x38 - Interrupt clear register"]
        #[inline(always)]
        pub const fn intc(&self) -> &Intc {
            &self.intc
        }
        #[doc = "0x3c - Interrupt enable register"]
        #[inline(always)]
        pub const fn inten(&self) -> &Inten {
            &self.inten
        }
        #[doc = "0x48 - FIFO counter register"]
        #[inline(always)]
        pub const fn fifocnt(&self) -> &Fifocnt {
            &self.fifocnt
        }
        #[doc = "0x80 - FIFO data register"]
        #[inline(always)]
        pub const fn fifo(&self) -> &Fifo {
            &self.fifo
        }
    }
    #[doc = "PWRCTL (rw) register accessor: Power control register\n\nYou can [`read`](crate::Reg::read) this register and get [`pwrctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pwrctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@pwrctl`]
module"]
    #[doc(alias = "PWRCTL")]
    pub type Pwrctl = crate::Reg<pwrctl::PwrctlSpec>;
    #[doc = "Power control register"]
    pub mod pwrctl {
        #[doc = "Register `PWRCTL` reader"]
        pub type R = crate::R<PwrctlSpec>;
        #[doc = "Register `PWRCTL` writer"]
        pub type W = crate::W<PwrctlSpec>;
        #[doc = "Field `PWRCTL` reader - SDIO power control bits"]
        pub type PwrctlR = crate::FieldReader;
        #[doc = "Field `PWRCTL` writer - SDIO power control bits"]
        pub type PwrctlW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bits 0:1 - SDIO power control bits"]
            #[inline(always)]
            pub fn pwrctl(&self) -> PwrctlR {
                PwrctlR::new((self.bits & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - SDIO power control bits"]
            #[inline(always)]
            #[must_use]
            pub fn pwrctl(&mut self) -> PwrctlW<PwrctlSpec> {
                PwrctlW::new(self, 0)
            }
        }
        #[doc = "Power control register\n\nYou can [`read`](crate::Reg::read) this register and get [`pwrctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`pwrctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct PwrctlSpec;
        impl crate::RegisterSpec for PwrctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`pwrctl::R`](R) reader structure"]
        impl crate::Readable for PwrctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`pwrctl::W`](W) writer structure"]
        impl crate::Writable for PwrctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets PWRCTL to value 0"]
        impl crate::Resettable for PwrctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CLKCTL (rw) register accessor: Clock control register\n\nYou can [`read`](crate::Reg::read) this register and get [`clkctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`clkctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@clkctl`]
module"]
    #[doc(alias = "CLKCTL")]
    pub type Clkctl = crate::Reg<clkctl::ClkctlSpec>;
    #[doc = "Clock control register"]
    pub mod clkctl {
        #[doc = "Register `CLKCTL` reader"]
        pub type R = crate::R<ClkctlSpec>;
        #[doc = "Register `CLKCTL` writer"]
        pub type W = crate::W<ClkctlSpec>;
        #[doc = "Field `DIV` reader - Clock division"]
        pub type DivR = crate::FieldReader;
        #[doc = "Field `DIV` writer - Clock division"]
        pub type DivW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `CLKEN` reader - SDIO_CLK clock output enable bit"]
        pub type ClkenR = crate::BitReader;
        #[doc = "Field `CLKEN` writer - SDIO_CLK clock output enable bit"]
        pub type ClkenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CLKPWRSAV` reader - SDIO_CLK clock dynamic switch on/off for power saving"]
        pub type ClkpwrsavR = crate::BitReader;
        #[doc = "Field `CLKPWRSAV` writer - SDIO_CLK clock dynamic switch on/off for power saving"]
        pub type ClkpwrsavW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CLKBYP` reader - Clock bypass enable bit"]
        pub type ClkbypR = crate::BitReader;
        #[doc = "Field `CLKBYP` writer - Clock bypass enable bit"]
        pub type ClkbypW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BUSMODE` reader - SDIO card bus mode control bit"]
        pub type BusmodeR = crate::FieldReader;
        #[doc = "Field `BUSMODE` writer - SDIO card bus mode control bit"]
        pub type BusmodeW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CLKEDGE` reader - SDIO_CLK clock edge selection bit"]
        pub type ClkedgeR = crate::BitReader;
        #[doc = "Field `CLKEDGE` writer - SDIO_CLK clock edge selection bit"]
        pub type ClkedgeW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HWCLKEN` reader - Hardware Clock Control enable bit"]
        pub type HwclkenR = crate::BitReader;
        #[doc = "Field `HWCLKEN` writer - Hardware Clock Control enable bit"]
        pub type HwclkenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:7 - Clock division"]
            #[inline(always)]
            pub fn div(&self) -> DivR {
                DivR::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 8 - SDIO_CLK clock output enable bit"]
            #[inline(always)]
            pub fn clken(&self) -> ClkenR {
                ClkenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - SDIO_CLK clock dynamic switch on/off for power saving"]
            #[inline(always)]
            pub fn clkpwrsav(&self) -> ClkpwrsavR {
                ClkpwrsavR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Clock bypass enable bit"]
            #[inline(always)]
            pub fn clkbyp(&self) -> ClkbypR {
                ClkbypR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bits 11:12 - SDIO card bus mode control bit"]
            #[inline(always)]
            pub fn busmode(&self) -> BusmodeR {
                BusmodeR::new(((self.bits >> 11) & 3) as u8)
            }
            #[doc = "Bit 13 - SDIO_CLK clock edge selection bit"]
            #[inline(always)]
            pub fn clkedge(&self) -> ClkedgeR {
                ClkedgeR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Hardware Clock Control enable bit"]
            #[inline(always)]
            pub fn hwclken(&self) -> HwclkenR {
                HwclkenR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Clock division"]
            #[inline(always)]
            #[must_use]
            pub fn div(&mut self) -> DivW<ClkctlSpec> {
                DivW::new(self, 0)
            }
            #[doc = "Bit 8 - SDIO_CLK clock output enable bit"]
            #[inline(always)]
            #[must_use]
            pub fn clken(&mut self) -> ClkenW<ClkctlSpec> {
                ClkenW::new(self, 8)
            }
            #[doc = "Bit 9 - SDIO_CLK clock dynamic switch on/off for power saving"]
            #[inline(always)]
            #[must_use]
            pub fn clkpwrsav(&mut self) -> ClkpwrsavW<ClkctlSpec> {
                ClkpwrsavW::new(self, 9)
            }
            #[doc = "Bit 10 - Clock bypass enable bit"]
            #[inline(always)]
            #[must_use]
            pub fn clkbyp(&mut self) -> ClkbypW<ClkctlSpec> {
                ClkbypW::new(self, 10)
            }
            #[doc = "Bits 11:12 - SDIO card bus mode control bit"]
            #[inline(always)]
            #[must_use]
            pub fn busmode(&mut self) -> BusmodeW<ClkctlSpec> {
                BusmodeW::new(self, 11)
            }
            #[doc = "Bit 13 - SDIO_CLK clock edge selection bit"]
            #[inline(always)]
            #[must_use]
            pub fn clkedge(&mut self) -> ClkedgeW<ClkctlSpec> {
                ClkedgeW::new(self, 13)
            }
            #[doc = "Bit 14 - Hardware Clock Control enable bit"]
            #[inline(always)]
            #[must_use]
            pub fn hwclken(&mut self) -> HwclkenW<ClkctlSpec> {
                HwclkenW::new(self, 14)
            }
        }
        #[doc = "Clock control register\n\nYou can [`read`](crate::Reg::read) this register and get [`clkctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`clkctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct ClkctlSpec;
        impl crate::RegisterSpec for ClkctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`clkctl::R`](R) reader structure"]
        impl crate::Readable for ClkctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`clkctl::W`](W) writer structure"]
        impl crate::Writable for ClkctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CLKCTL to value 0"]
        impl crate::Resettable for ClkctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CMDAGMT (rw) register accessor: Command argument register\n\nYou can [`read`](crate::Reg::read) this register and get [`cmdagmt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cmdagmt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cmdagmt`]
module"]
    #[doc(alias = "CMDAGMT")]
    pub type Cmdagmt = crate::Reg<cmdagmt::CmdagmtSpec>;
    #[doc = "Command argument register"]
    pub mod cmdagmt {
        #[doc = "Register `CMDAGMT` reader"]
        pub type R = crate::R<CmdagmtSpec>;
        #[doc = "Register `CMDAGMT` writer"]
        pub type W = crate::W<CmdagmtSpec>;
        #[doc = "Field `CMDAGMT` reader - SDIO card command argument"]
        pub type CmdagmtR = crate::FieldReader<u32>;
        #[doc = "Field `CMDAGMT` writer - SDIO card command argument"]
        pub type CmdagmtW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - SDIO card command argument"]
            #[inline(always)]
            pub fn cmdagmt(&self) -> CmdagmtR {
                CmdagmtR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - SDIO card command argument"]
            #[inline(always)]
            #[must_use]
            pub fn cmdagmt(&mut self) -> CmdagmtW<CmdagmtSpec> {
                CmdagmtW::new(self, 0)
            }
        }
        #[doc = "Command argument register\n\nYou can [`read`](crate::Reg::read) this register and get [`cmdagmt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cmdagmt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CmdagmtSpec;
        impl crate::RegisterSpec for CmdagmtSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cmdagmt::R`](R) reader structure"]
        impl crate::Readable for CmdagmtSpec {}
        #[doc = "`write(|w| ..)` method takes [`cmdagmt::W`](W) writer structure"]
        impl crate::Writable for CmdagmtSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CMDAGMT to value 0"]
        impl crate::Resettable for CmdagmtSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CMDCTL (rw) register accessor: Command control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cmdctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cmdctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cmdctl`]
module"]
    #[doc(alias = "CMDCTL")]
    pub type Cmdctl = crate::Reg<cmdctl::CmdctlSpec>;
    #[doc = "Command control register"]
    pub mod cmdctl {
        #[doc = "Register `CMDCTL` reader"]
        pub type R = crate::R<CmdctlSpec>;
        #[doc = "Register `CMDCTL` writer"]
        pub type W = crate::W<CmdctlSpec>;
        #[doc = "Field `CMDIDX` reader - Command index"]
        pub type CmdidxR = crate::FieldReader;
        #[doc = "Field `CMDIDX` writer - Command index"]
        pub type CmdidxW<'a, REG> = crate::FieldWriter<'a, REG, 6>;
        #[doc = "Field `CMDRESP` reader - Command response type bits"]
        pub type CmdrespR = crate::FieldReader;
        #[doc = "Field `CMDRESP` writer - Command response type bits"]
        pub type CmdrespW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `INTWAIT` reader - Interrupt wait instead of timeout"]
        pub type IntwaitR = crate::BitReader;
        #[doc = "Field `INTWAIT` writer - Interrupt wait instead of timeout"]
        pub type IntwaitW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WAITDEND` reader - Waits for ends of data transfer"]
        pub type WaitdendR = crate::BitReader;
        #[doc = "Field `WAITDEND` writer - Waits for ends of data transfer"]
        pub type WaitdendW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CSMEN` reader - Command state machine (CSM) enable bit"]
        pub type CsmenR = crate::BitReader;
        #[doc = "Field `CSMEN` writer - Command state machine (CSM) enable bit"]
        pub type CsmenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SUSPEND` reader - SD I/O suspend command(SD I/O only)"]
        pub type SuspendR = crate::BitReader;
        #[doc = "Field `SUSPEND` writer - SD I/O suspend command(SD I/O only)"]
        pub type SuspendW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ENCMDC` reader - CMD completion signal enabled (CE-ATA only)"]
        pub type EncmdcR = crate::BitReader;
        #[doc = "Field `ENCMDC` writer - CMD completion signal enabled (CE-ATA only)"]
        pub type EncmdcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NINTEN` reader - No CE-ATA Interrupt (CE-ATA only)"]
        pub type NintenR = crate::BitReader;
        #[doc = "Field `NINTEN` writer - No CE-ATA Interrupt (CE-ATA only)"]
        pub type NintenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ATAEN` reader - CE-ATA command enable(CE-ATA only)"]
        pub type AtaenR = crate::BitReader;
        #[doc = "Field `ATAEN` writer - CE-ATA command enable(CE-ATA only)"]
        pub type AtaenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:5 - Command index"]
            #[inline(always)]
            pub fn cmdidx(&self) -> CmdidxR {
                CmdidxR::new((self.bits & 0x3f) as u8)
            }
            #[doc = "Bits 6:7 - Command response type bits"]
            #[inline(always)]
            pub fn cmdresp(&self) -> CmdrespR {
                CmdrespR::new(((self.bits >> 6) & 3) as u8)
            }
            #[doc = "Bit 8 - Interrupt wait instead of timeout"]
            #[inline(always)]
            pub fn intwait(&self) -> IntwaitR {
                IntwaitR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Waits for ends of data transfer"]
            #[inline(always)]
            pub fn waitdend(&self) -> WaitdendR {
                WaitdendR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Command state machine (CSM) enable bit"]
            #[inline(always)]
            pub fn csmen(&self) -> CsmenR {
                CsmenR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - SD I/O suspend command(SD I/O only)"]
            #[inline(always)]
            pub fn suspend(&self) -> SuspendR {
                SuspendR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - CMD completion signal enabled (CE-ATA only)"]
            #[inline(always)]
            pub fn encmdc(&self) -> EncmdcR {
                EncmdcR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - No CE-ATA Interrupt (CE-ATA only)"]
            #[inline(always)]
            pub fn ninten(&self) -> NintenR {
                NintenR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - CE-ATA command enable(CE-ATA only)"]
            #[inline(always)]
            pub fn ataen(&self) -> AtaenR {
                AtaenR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:5 - Command index"]
            #[inline(always)]
            #[must_use]
            pub fn cmdidx(&mut self) -> CmdidxW<CmdctlSpec> {
                CmdidxW::new(self, 0)
            }
            #[doc = "Bits 6:7 - Command response type bits"]
            #[inline(always)]
            #[must_use]
            pub fn cmdresp(&mut self) -> CmdrespW<CmdctlSpec> {
                CmdrespW::new(self, 6)
            }
            #[doc = "Bit 8 - Interrupt wait instead of timeout"]
            #[inline(always)]
            #[must_use]
            pub fn intwait(&mut self) -> IntwaitW<CmdctlSpec> {
                IntwaitW::new(self, 8)
            }
            #[doc = "Bit 9 - Waits for ends of data transfer"]
            #[inline(always)]
            #[must_use]
            pub fn waitdend(&mut self) -> WaitdendW<CmdctlSpec> {
                WaitdendW::new(self, 9)
            }
            #[doc = "Bit 10 - Command state machine (CSM) enable bit"]
            #[inline(always)]
            #[must_use]
            pub fn csmen(&mut self) -> CsmenW<CmdctlSpec> {
                CsmenW::new(self, 10)
            }
            #[doc = "Bit 11 - SD I/O suspend command(SD I/O only)"]
            #[inline(always)]
            #[must_use]
            pub fn suspend(&mut self) -> SuspendW<CmdctlSpec> {
                SuspendW::new(self, 11)
            }
            #[doc = "Bit 12 - CMD completion signal enabled (CE-ATA only)"]
            #[inline(always)]
            #[must_use]
            pub fn encmdc(&mut self) -> EncmdcW<CmdctlSpec> {
                EncmdcW::new(self, 12)
            }
            #[doc = "Bit 13 - No CE-ATA Interrupt (CE-ATA only)"]
            #[inline(always)]
            #[must_use]
            pub fn ninten(&mut self) -> NintenW<CmdctlSpec> {
                NintenW::new(self, 13)
            }
            #[doc = "Bit 14 - CE-ATA command enable(CE-ATA only)"]
            #[inline(always)]
            #[must_use]
            pub fn ataen(&mut self) -> AtaenW<CmdctlSpec> {
                AtaenW::new(self, 14)
            }
        }
        #[doc = "Command control register\n\nYou can [`read`](crate::Reg::read) this register and get [`cmdctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cmdctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CmdctlSpec;
        impl crate::RegisterSpec for CmdctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cmdctl::R`](R) reader structure"]
        impl crate::Readable for CmdctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`cmdctl::W`](W) writer structure"]
        impl crate::Writable for CmdctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CMDCTL to value 0"]
        impl crate::Resettable for CmdctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RSPCMDIDX (r) register accessor: Command index response register\n\nYou can [`read`](crate::Reg::read) this register and get [`rspcmdidx::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rspcmdidx`]
module"]
    #[doc(alias = "RSPCMDIDX")]
    pub type Rspcmdidx = crate::Reg<rspcmdidx::RspcmdidxSpec>;
    #[doc = "Command index response register"]
    pub mod rspcmdidx {
        #[doc = "Register `RSPCMDIDX` reader"]
        pub type R = crate::R<RspcmdidxSpec>;
        #[doc = "Field `RSPCMDIDX` reader - Last response command index"]
        pub type RspcmdidxR = crate::FieldReader;
        impl R {
            #[doc = "Bits 0:5 - Last response command index"]
            #[inline(always)]
            pub fn rspcmdidx(&self) -> RspcmdidxR {
                RspcmdidxR::new((self.bits & 0x3f) as u8)
            }
        }
        #[doc = "Command index response register\n\nYou can [`read`](crate::Reg::read) this register and get [`rspcmdidx::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RspcmdidxSpec;
        impl crate::RegisterSpec for RspcmdidxSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rspcmdidx::R`](R) reader structure"]
        impl crate::Readable for RspcmdidxSpec {}
        #[doc = "`reset()` method sets RSPCMDIDX to value 0"]
        impl crate::Resettable for RspcmdidxSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RESP0 (r) register accessor: Response register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`resp0::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@resp0`]
module"]
    #[doc(alias = "RESP0")]
    pub type Resp0 = crate::Reg<resp0::Resp0Spec>;
    #[doc = "Response register 0"]
    pub mod resp0 {
        #[doc = "Register `RESP0` reader"]
        pub type R = crate::R<Resp0Spec>;
        #[doc = "Field `RESP0` reader - Card state"]
        pub type Resp0R = crate::FieldReader<u32>;
        impl R {
            #[doc = "Bits 0:31 - Card state"]
            #[inline(always)]
            pub fn resp0(&self) -> Resp0R {
                Resp0R::new(self.bits)
            }
        }
        #[doc = "Response register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`resp0::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Resp0Spec;
        impl crate::RegisterSpec for Resp0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`resp0::R`](R) reader structure"]
        impl crate::Readable for Resp0Spec {}
        #[doc = "`reset()` method sets RESP0 to value 0"]
        impl crate::Resettable for Resp0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RESP1 (r) register accessor: Response register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`resp1::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@resp1`]
module"]
    #[doc(alias = "RESP1")]
    pub type Resp1 = crate::Reg<resp1::Resp1Spec>;
    #[doc = "Response register 1"]
    pub mod resp1 {
        #[doc = "Register `RESP1` reader"]
        pub type R = crate::R<Resp1Spec>;
        #[doc = "Field `RESP1` reader - Card state"]
        pub type Resp1R = crate::FieldReader<u32>;
        impl R {
            #[doc = "Bits 0:31 - Card state"]
            #[inline(always)]
            pub fn resp1(&self) -> Resp1R {
                Resp1R::new(self.bits)
            }
        }
        #[doc = "Response register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`resp1::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Resp1Spec;
        impl crate::RegisterSpec for Resp1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`resp1::R`](R) reader structure"]
        impl crate::Readable for Resp1Spec {}
        #[doc = "`reset()` method sets RESP1 to value 0"]
        impl crate::Resettable for Resp1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RESP2 (r) register accessor: Response register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`resp2::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@resp2`]
module"]
    #[doc(alias = "RESP2")]
    pub type Resp2 = crate::Reg<resp2::Resp2Spec>;
    #[doc = "Response register 2"]
    pub mod resp2 {
        #[doc = "Register `RESP2` reader"]
        pub type R = crate::R<Resp2Spec>;
        #[doc = "Field `RESP2` reader - Card state"]
        pub type Resp2R = crate::FieldReader<u32>;
        impl R {
            #[doc = "Bits 0:31 - Card state"]
            #[inline(always)]
            pub fn resp2(&self) -> Resp2R {
                Resp2R::new(self.bits)
            }
        }
        #[doc = "Response register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`resp2::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Resp2Spec;
        impl crate::RegisterSpec for Resp2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`resp2::R`](R) reader structure"]
        impl crate::Readable for Resp2Spec {}
        #[doc = "`reset()` method sets RESP2 to value 0"]
        impl crate::Resettable for Resp2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "RESP3 (r) register accessor: Response register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`resp3::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@resp3`]
module"]
    #[doc(alias = "RESP3")]
    pub type Resp3 = crate::Reg<resp3::Resp3Spec>;
    #[doc = "Response register 3"]
    pub mod resp3 {
        #[doc = "Register `RESP3` reader"]
        pub type R = crate::R<Resp3Spec>;
        #[doc = "Field `RESP3` reader - Response register 3"]
        pub type Resp3R = crate::FieldReader<u32>;
        impl R {
            #[doc = "Bits 0:31 - Response register 3"]
            #[inline(always)]
            pub fn resp3(&self) -> Resp3R {
                Resp3R::new(self.bits)
            }
        }
        #[doc = "Response register 3\n\nYou can [`read`](crate::Reg::read) this register and get [`resp3::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Resp3Spec;
        impl crate::RegisterSpec for Resp3Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`resp3::R`](R) reader structure"]
        impl crate::Readable for Resp3Spec {}
        #[doc = "`reset()` method sets RESP3 to value 0"]
        impl crate::Resettable for Resp3Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATATO (rw) register accessor: Data timeout register\n\nYou can [`read`](crate::Reg::read) this register and get [`datato::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`datato::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@datato`]
module"]
    #[doc(alias = "DATATO")]
    pub type Datato = crate::Reg<datato::DatatoSpec>;
    #[doc = "Data timeout register"]
    pub mod datato {
        #[doc = "Register `DATATO` reader"]
        pub type R = crate::R<DatatoSpec>;
        #[doc = "Register `DATATO` writer"]
        pub type W = crate::W<DatatoSpec>;
        #[doc = "Field `DATATO` reader - Data timeout period"]
        pub type DatatoR = crate::FieldReader<u32>;
        #[doc = "Field `DATATO` writer - Data timeout period"]
        pub type DatatoW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Data timeout period"]
            #[inline(always)]
            pub fn datato(&self) -> DatatoR {
                DatatoR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Data timeout period"]
            #[inline(always)]
            #[must_use]
            pub fn datato(&mut self) -> DatatoW<DatatoSpec> {
                DatatoW::new(self, 0)
            }
        }
        #[doc = "Data timeout register\n\nYou can [`read`](crate::Reg::read) this register and get [`datato::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`datato::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DatatoSpec;
        impl crate::RegisterSpec for DatatoSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`datato::R`](R) reader structure"]
        impl crate::Readable for DatatoSpec {}
        #[doc = "`write(|w| ..)` method takes [`datato::W`](W) writer structure"]
        impl crate::Writable for DatatoSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATATO to value 0"]
        impl crate::Resettable for DatatoSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATALEN (rw) register accessor: Data length register\n\nYou can [`read`](crate::Reg::read) this register and get [`datalen::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`datalen::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@datalen`]
module"]
    #[doc(alias = "DATALEN")]
    pub type Datalen = crate::Reg<datalen::DatalenSpec>;
    #[doc = "Data length register"]
    pub mod datalen {
        #[doc = "Register `DATALEN` reader"]
        pub type R = crate::R<DatalenSpec>;
        #[doc = "Register `DATALEN` writer"]
        pub type W = crate::W<DatalenSpec>;
        #[doc = "Field `DATALEN` reader - Data transfer length"]
        pub type DatalenR = crate::FieldReader<u32>;
        #[doc = "Field `DATALEN` writer - Data transfer length"]
        pub type DatalenW<'a, REG> = crate::FieldWriter<'a, REG, 25, u32>;
        impl R {
            #[doc = "Bits 0:24 - Data transfer length"]
            #[inline(always)]
            pub fn datalen(&self) -> DatalenR {
                DatalenR::new(self.bits & 0x01ff_ffff)
            }
        }
        impl W {
            #[doc = "Bits 0:24 - Data transfer length"]
            #[inline(always)]
            #[must_use]
            pub fn datalen(&mut self) -> DatalenW<DatalenSpec> {
                DatalenW::new(self, 0)
            }
        }
        #[doc = "Data length register\n\nYou can [`read`](crate::Reg::read) this register and get [`datalen::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`datalen::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DatalenSpec;
        impl crate::RegisterSpec for DatalenSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`datalen::R`](R) reader structure"]
        impl crate::Readable for DatalenSpec {}
        #[doc = "`write(|w| ..)` method takes [`datalen::W`](W) writer structure"]
        impl crate::Writable for DatalenSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATALEN to value 0"]
        impl crate::Resettable for DatalenSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATACTL (rw) register accessor: Data control register\n\nYou can [`read`](crate::Reg::read) this register and get [`datactl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`datactl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@datactl`]
module"]
    #[doc(alias = "DATACTL")]
    pub type Datactl = crate::Reg<datactl::DatactlSpec>;
    #[doc = "Data control register"]
    pub mod datactl {
        #[doc = "Register `DATACTL` reader"]
        pub type R = crate::R<DatactlSpec>;
        #[doc = "Register `DATACTL` writer"]
        pub type W = crate::W<DatactlSpec>;
        #[doc = "Field `DATAEN` reader - Data transfer enabled bit"]
        pub type DataenR = crate::BitReader;
        #[doc = "Field `DATAEN` writer - Data transfer enabled bit"]
        pub type DataenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DATADIR` reader - Data transfer direction"]
        pub type DatadirR = crate::BitReader;
        #[doc = "Field `DATADIR` writer - Data transfer direction"]
        pub type DatadirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TRANSMOD` reader - Data transfer mode"]
        pub type TransmodR = crate::BitReader;
        #[doc = "Field `TRANSMOD` writer - Data transfer mode"]
        pub type TransmodW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DMAEN` reader - DMA enable bit"]
        pub type DmaenR = crate::BitReader;
        #[doc = "Field `DMAEN` writer - DMA enable bit"]
        pub type DmaenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BLKSZ` reader - Data block size"]
        pub type BlkszR = crate::FieldReader;
        #[doc = "Field `BLKSZ` writer - Data block size"]
        pub type BlkszW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `RWEN` reader - Read wait mode enabled"]
        pub type RwenR = crate::BitReader;
        #[doc = "Field `RWEN` writer - Read wait mode enabled"]
        pub type RwenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RWSTOP` reader - Read wait stop"]
        pub type RwstopR = crate::BitReader;
        #[doc = "Field `RWSTOP` writer - Read wait stop"]
        pub type RwstopW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RWTYPE` reader - Read wait type"]
        pub type RwtypeR = crate::BitReader;
        #[doc = "Field `RWTYPE` writer - Read wait type"]
        pub type RwtypeW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `IOEN` reader - SD I/O specific function enable"]
        pub type IoenR = crate::BitReader;
        #[doc = "Field `IOEN` writer - SD I/O specific function enable"]
        pub type IoenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Data transfer enabled bit"]
            #[inline(always)]
            pub fn dataen(&self) -> DataenR {
                DataenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Data transfer direction"]
            #[inline(always)]
            pub fn datadir(&self) -> DatadirR {
                DatadirR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Data transfer mode"]
            #[inline(always)]
            pub fn transmod(&self) -> TransmodR {
                TransmodR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - DMA enable bit"]
            #[inline(always)]
            pub fn dmaen(&self) -> DmaenR {
                DmaenR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:7 - Data block size"]
            #[inline(always)]
            pub fn blksz(&self) -> BlkszR {
                BlkszR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bit 8 - Read wait mode enabled"]
            #[inline(always)]
            pub fn rwen(&self) -> RwenR {
                RwenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Read wait stop"]
            #[inline(always)]
            pub fn rwstop(&self) -> RwstopR {
                RwstopR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Read wait type"]
            #[inline(always)]
            pub fn rwtype(&self) -> RwtypeR {
                RwtypeR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - SD I/O specific function enable"]
            #[inline(always)]
            pub fn ioen(&self) -> IoenR {
                IoenR::new(((self.bits >> 11) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Data transfer enabled bit"]
            #[inline(always)]
            #[must_use]
            pub fn dataen(&mut self) -> DataenW<DatactlSpec> {
                DataenW::new(self, 0)
            }
            #[doc = "Bit 1 - Data transfer direction"]
            #[inline(always)]
            #[must_use]
            pub fn datadir(&mut self) -> DatadirW<DatactlSpec> {
                DatadirW::new(self, 1)
            }
            #[doc = "Bit 2 - Data transfer mode"]
            #[inline(always)]
            #[must_use]
            pub fn transmod(&mut self) -> TransmodW<DatactlSpec> {
                TransmodW::new(self, 2)
            }
            #[doc = "Bit 3 - DMA enable bit"]
            #[inline(always)]
            #[must_use]
            pub fn dmaen(&mut self) -> DmaenW<DatactlSpec> {
                DmaenW::new(self, 3)
            }
            #[doc = "Bits 4:7 - Data block size"]
            #[inline(always)]
            #[must_use]
            pub fn blksz(&mut self) -> BlkszW<DatactlSpec> {
                BlkszW::new(self, 4)
            }
            #[doc = "Bit 8 - Read wait mode enabled"]
            #[inline(always)]
            #[must_use]
            pub fn rwen(&mut self) -> RwenW<DatactlSpec> {
                RwenW::new(self, 8)
            }
            #[doc = "Bit 9 - Read wait stop"]
            #[inline(always)]
            #[must_use]
            pub fn rwstop(&mut self) -> RwstopW<DatactlSpec> {
                RwstopW::new(self, 9)
            }
            #[doc = "Bit 10 - Read wait type"]
            #[inline(always)]
            #[must_use]
            pub fn rwtype(&mut self) -> RwtypeW<DatactlSpec> {
                RwtypeW::new(self, 10)
            }
            #[doc = "Bit 11 - SD I/O specific function enable"]
            #[inline(always)]
            #[must_use]
            pub fn ioen(&mut self) -> IoenW<DatactlSpec> {
                IoenW::new(self, 11)
            }
        }
        #[doc = "Data control register\n\nYou can [`read`](crate::Reg::read) this register and get [`datactl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`datactl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DatactlSpec;
        impl crate::RegisterSpec for DatactlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`datactl::R`](R) reader structure"]
        impl crate::Readable for DatactlSpec {}
        #[doc = "`write(|w| ..)` method takes [`datactl::W`](W) writer structure"]
        impl crate::Writable for DatactlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATACTL to value 0"]
        impl crate::Resettable for DatactlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DATACNT (r) register accessor: Data counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`datacnt::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@datacnt`]
module"]
    #[doc(alias = "DATACNT")]
    pub type Datacnt = crate::Reg<datacnt::DatacntSpec>;
    #[doc = "Data counter register"]
    pub mod datacnt {
        #[doc = "Register `DATACNT` reader"]
        pub type R = crate::R<DatacntSpec>;
        #[doc = "Field `DATACNT` reader - Data count value"]
        pub type DatacntR = crate::FieldReader<u32>;
        impl R {
            #[doc = "Bits 0:24 - Data count value"]
            #[inline(always)]
            pub fn datacnt(&self) -> DatacntR {
                DatacntR::new(self.bits & 0x01ff_ffff)
            }
        }
        #[doc = "Data counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`datacnt::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DatacntSpec;
        impl crate::RegisterSpec for DatacntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`datacnt::R`](R) reader structure"]
        impl crate::Readable for DatacntSpec {}
        #[doc = "`reset()` method sets DATACNT to value 0"]
        impl crate::Resettable for DatacntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "STAT (r) register accessor: Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat`]
module"]
    #[doc(alias = "STAT")]
    pub type Stat = crate::Reg<stat::StatSpec>;
    #[doc = "Status register"]
    pub mod stat {
        #[doc = "Register `STAT` reader"]
        pub type R = crate::R<StatSpec>;
        #[doc = "Field `CCRCERR` reader - Command response received"]
        pub type CcrcerrR = crate::BitReader;
        #[doc = "Field `DTCRCERR` reader - Data block sent/received"]
        pub type DtcrcerrR = crate::BitReader;
        #[doc = "Field `CMDTMOUT` reader - Command response timeout"]
        pub type CmdtmoutR = crate::BitReader;
        #[doc = "Field `DTTMOUT` reader - Data timeout"]
        pub type DttmoutR = crate::BitReader;
        #[doc = "Field `TXURE` reader - Transmit FIFO underrun error occurs"]
        pub type TxureR = crate::BitReader;
        #[doc = "Field `RXORE` reader - Received FIFO overrun error occurs"]
        pub type RxoreR = crate::BitReader;
        #[doc = "Field `CMDRECV` reader - Command response received"]
        pub type CmdrecvR = crate::BitReader;
        #[doc = "Field `CMDSEND` reader - Command sent"]
        pub type CmdsendR = crate::BitReader;
        #[doc = "Field `DTEND` reader - Data end"]
        pub type DtendR = crate::BitReader;
        #[doc = "Field `STBITE` reader - Start bit error in the bus"]
        pub type StbiteR = crate::BitReader;
        #[doc = "Field `DTBLKEND` reader - Data block sent/received"]
        pub type DtblkendR = crate::BitReader;
        #[doc = "Field `CMDRUN` reader - Command transmission in progress"]
        pub type CmdrunR = crate::BitReader;
        #[doc = "Field `TXRUN` reader - Data transmission in progress"]
        pub type TxrunR = crate::BitReader;
        #[doc = "Field `RXRUN` reader - Data reception in progress"]
        pub type RxrunR = crate::BitReader;
        #[doc = "Field `TFH` reader - Transmit FIFO is half empty"]
        pub type TfhR = crate::BitReader;
        #[doc = "Field `RFH` reader - Receive FIFO is half full"]
        pub type RfhR = crate::BitReader;
        #[doc = "Field `TFF` reader - Transmit FIFO is full"]
        pub type TffR = crate::BitReader;
        #[doc = "Field `RFF` reader - Receive FIFO is full"]
        pub type RffR = crate::BitReader;
        #[doc = "Field `TFE` reader - Transmit FIFO is empty"]
        pub type TfeR = crate::BitReader;
        #[doc = "Field `RFE` reader - Receive FIFO is empty"]
        pub type RfeR = crate::BitReader;
        #[doc = "Field `TXDTVAL` reader - Data is valid in transmit FIFO"]
        pub type TxdtvalR = crate::BitReader;
        #[doc = "Field `RXDTVAL` reader - Data is valid in receive FIFO"]
        pub type RxdtvalR = crate::BitReader;
        #[doc = "Field `SDIOINT` reader - SD I/O interrupt received"]
        pub type SdiointR = crate::BitReader;
        #[doc = "Field `ATAEND` reader - CE-ATA command completion signal received"]
        pub type AtaendR = crate::BitReader;
        impl R {
            #[doc = "Bit 0 - Command response received"]
            #[inline(always)]
            pub fn ccrcerr(&self) -> CcrcerrR {
                CcrcerrR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Data block sent/received"]
            #[inline(always)]
            pub fn dtcrcerr(&self) -> DtcrcerrR {
                DtcrcerrR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Command response timeout"]
            #[inline(always)]
            pub fn cmdtmout(&self) -> CmdtmoutR {
                CmdtmoutR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Data timeout"]
            #[inline(always)]
            pub fn dttmout(&self) -> DttmoutR {
                DttmoutR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transmit FIFO underrun error occurs"]
            #[inline(always)]
            pub fn txure(&self) -> TxureR {
                TxureR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Received FIFO overrun error occurs"]
            #[inline(always)]
            pub fn rxore(&self) -> RxoreR {
                RxoreR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Command response received"]
            #[inline(always)]
            pub fn cmdrecv(&self) -> CmdrecvR {
                CmdrecvR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Command sent"]
            #[inline(always)]
            pub fn cmdsend(&self) -> CmdsendR {
                CmdsendR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Data end"]
            #[inline(always)]
            pub fn dtend(&self) -> DtendR {
                DtendR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Start bit error in the bus"]
            #[inline(always)]
            pub fn stbite(&self) -> StbiteR {
                StbiteR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Data block sent/received"]
            #[inline(always)]
            pub fn dtblkend(&self) -> DtblkendR {
                DtblkendR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Command transmission in progress"]
            #[inline(always)]
            pub fn cmdrun(&self) -> CmdrunR {
                CmdrunR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Data transmission in progress"]
            #[inline(always)]
            pub fn txrun(&self) -> TxrunR {
                TxrunR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Data reception in progress"]
            #[inline(always)]
            pub fn rxrun(&self) -> RxrunR {
                RxrunR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Transmit FIFO is half empty"]
            #[inline(always)]
            pub fn tfh(&self) -> TfhR {
                TfhR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Receive FIFO is half full"]
            #[inline(always)]
            pub fn rfh(&self) -> RfhR {
                RfhR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Transmit FIFO is full"]
            #[inline(always)]
            pub fn tff(&self) -> TffR {
                TffR::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Receive FIFO is full"]
            #[inline(always)]
            pub fn rff(&self) -> RffR {
                RffR::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Transmit FIFO is empty"]
            #[inline(always)]
            pub fn tfe(&self) -> TfeR {
                TfeR::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Receive FIFO is empty"]
            #[inline(always)]
            pub fn rfe(&self) -> RfeR {
                RfeR::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Data is valid in transmit FIFO"]
            #[inline(always)]
            pub fn txdtval(&self) -> TxdtvalR {
                TxdtvalR::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Data is valid in receive FIFO"]
            #[inline(always)]
            pub fn rxdtval(&self) -> RxdtvalR {
                RxdtvalR::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - SD I/O interrupt received"]
            #[inline(always)]
            pub fn sdioint(&self) -> SdiointR {
                SdiointR::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - CE-ATA command completion signal received"]
            #[inline(always)]
            pub fn ataend(&self) -> AtaendR {
                AtaendR::new(((self.bits >> 23) & 1) != 0)
            }
        }
        #[doc = "Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct StatSpec;
        impl crate::RegisterSpec for StatSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat::R`](R) reader structure"]
        impl crate::Readable for StatSpec {}
        #[doc = "`reset()` method sets STAT to value 0"]
        impl crate::Resettable for StatSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "INTC (w) register accessor: Interrupt clear register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intc::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intc`]
module"]
    #[doc(alias = "INTC")]
    pub type Intc = crate::Reg<intc::IntcSpec>;
    #[doc = "Interrupt clear register"]
    pub mod intc {
        #[doc = "Register `INTC` writer"]
        pub type W = crate::W<IntcSpec>;
        #[doc = "Field `CCRCERRC` writer - CCRCERR flag clear bit"]
        pub type CcrcerrcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DTCRCERRC` writer - DTCRCERR flag clear bit"]
        pub type DtcrcerrcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMDTMOUTC` writer - CMDTMOUT flag clear bit"]
        pub type CmdtmoutcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DTTMOUTC` writer - DTTMOUT flag clear bit"]
        pub type DttmoutcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TXUREC` writer - TXURE flag clear bit"]
        pub type TxurecW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RXOREC` writer - RXORE flag clear bit"]
        pub type RxorecW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMDRECVC` writer - CMDRECV flag clear bit"]
        pub type CmdrecvcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMDSENDC` writer - CMDSEND flag clear bit"]
        pub type CmdsendcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DTENDC` writer - DTEND flag clear bit"]
        pub type DtendcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STBITEC` writer - STBITE flag clear bit"]
        pub type StbitecW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DTBLKENDC` writer - DTBLKEND flag clear bit"]
        pub type DtblkendcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SDIOINTC` writer - SDIOINT flag clear bit"]
        pub type SdiointcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ATAENDC` writer - ATAEND flag clear bit"]
        pub type AtaendcW<'a, REG> = crate::BitWriter<'a, REG>;
        impl W {
            #[doc = "Bit 0 - CCRCERR flag clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn ccrcerrc(&mut self) -> CcrcerrcW<IntcSpec> {
                CcrcerrcW::new(self, 0)
            }
            #[doc = "Bit 1 - DTCRCERR flag clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn dtcrcerrc(&mut self) -> DtcrcerrcW<IntcSpec> {
                DtcrcerrcW::new(self, 1)
            }
            #[doc = "Bit 2 - CMDTMOUT flag clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cmdtmoutc(&mut self) -> CmdtmoutcW<IntcSpec> {
                CmdtmoutcW::new(self, 2)
            }
            #[doc = "Bit 3 - DTTMOUT flag clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn dttmoutc(&mut self) -> DttmoutcW<IntcSpec> {
                DttmoutcW::new(self, 3)
            }
            #[doc = "Bit 4 - TXURE flag clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn txurec(&mut self) -> TxurecW<IntcSpec> {
                TxurecW::new(self, 4)
            }
            #[doc = "Bit 5 - RXORE flag clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn rxorec(&mut self) -> RxorecW<IntcSpec> {
                RxorecW::new(self, 5)
            }
            #[doc = "Bit 6 - CMDRECV flag clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cmdrecvc(&mut self) -> CmdrecvcW<IntcSpec> {
                CmdrecvcW::new(self, 6)
            }
            #[doc = "Bit 7 - CMDSEND flag clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn cmdsendc(&mut self) -> CmdsendcW<IntcSpec> {
                CmdsendcW::new(self, 7)
            }
            #[doc = "Bit 8 - DTEND flag clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn dtendc(&mut self) -> DtendcW<IntcSpec> {
                DtendcW::new(self, 8)
            }
            #[doc = "Bit 9 - STBITE flag clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn stbitec(&mut self) -> StbitecW<IntcSpec> {
                StbitecW::new(self, 9)
            }
            #[doc = "Bit 10 - DTBLKEND flag clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn dtblkendc(&mut self) -> DtblkendcW<IntcSpec> {
                DtblkendcW::new(self, 10)
            }
            #[doc = "Bit 22 - SDIOINT flag clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn sdiointc(&mut self) -> SdiointcW<IntcSpec> {
                SdiointcW::new(self, 22)
            }
            #[doc = "Bit 23 - ATAEND flag clear bit"]
            #[inline(always)]
            #[must_use]
            pub fn ataendc(&mut self) -> AtaendcW<IntcSpec> {
                AtaendcW::new(self, 23)
            }
        }
        #[doc = "Interrupt clear register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intc::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntcSpec;
        impl crate::RegisterSpec for IntcSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`intc::W`](W) writer structure"]
        impl crate::Writable for IntcSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets INTC to value 0"]
        impl crate::Resettable for IntcSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "INTEN (rw) register accessor: Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`inten::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`inten::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@inten`]
module"]
    #[doc(alias = "INTEN")]
    pub type Inten = crate::Reg<inten::IntenSpec>;
    #[doc = "Interrupt enable register"]
    pub mod inten {
        #[doc = "Register `INTEN` reader"]
        pub type R = crate::R<IntenSpec>;
        #[doc = "Register `INTEN` writer"]
        pub type W = crate::W<IntenSpec>;
        #[doc = "Field `CCRCERRIE` reader - Command response CRC fail interrupt enable"]
        pub type CcrcerrieR = crate::BitReader;
        #[doc = "Field `CCRCERRIE` writer - Command response CRC fail interrupt enable"]
        pub type CcrcerrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DTCRCERRIE` reader - Data CRC fail interrupt enable"]
        pub type DtcrcerrieR = crate::BitReader;
        #[doc = "Field `DTCRCERRIE` writer - Data CRC fail interrupt enable"]
        pub type DtcrcerrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMDTMOUTIE` reader - Command response timeout interrupt enable"]
        pub type CmdtmoutieR = crate::BitReader;
        #[doc = "Field `CMDTMOUTIE` writer - Command response timeout interrupt enable"]
        pub type CmdtmoutieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DTTMOUTIE` reader - Data timeout interrupt enable"]
        pub type DttmoutieR = crate::BitReader;
        #[doc = "Field `DTTMOUTIE` writer - Data timeout interrupt enable"]
        pub type DttmoutieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TXUREIE` reader - Transmit FIFO underrun error interrupt enable"]
        pub type TxureieR = crate::BitReader;
        #[doc = "Field `TXUREIE` writer - Transmit FIFO underrun error interrupt enable"]
        pub type TxureieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RXOREIE` reader - Received FIFO overrun error interrupt enable"]
        pub type RxoreieR = crate::BitReader;
        #[doc = "Field `RXOREIE` writer - Received FIFO overrun error interrupt enable"]
        pub type RxoreieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMDRECVIE` reader - Command response received interrupt enable"]
        pub type CmdrecvieR = crate::BitReader;
        #[doc = "Field `CMDRECVIE` writer - Command response received interrupt enable"]
        pub type CmdrecvieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMDSENDIE` reader - Command sent interrupt enable"]
        pub type CmdsendieR = crate::BitReader;
        #[doc = "Field `CMDSENDIE` writer - Command sent interrupt enable"]
        pub type CmdsendieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DTENDIE` reader - Data end interrupt enable"]
        pub type DtendieR = crate::BitReader;
        #[doc = "Field `DTENDIE` writer - Data end interrupt enable"]
        pub type DtendieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STBITEIE` reader - Start bit error interrupt enable"]
        pub type StbiteieR = crate::BitReader;
        #[doc = "Field `STBITEIE` writer - Start bit error interrupt enable"]
        pub type StbiteieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DTBLKENDIE` reader - Data block end interrupt enable"]
        pub type DtblkendieR = crate::BitReader;
        #[doc = "Field `DTBLKENDIE` writer - Data block end interrupt enable"]
        pub type DtblkendieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMDRUNIE` reader - Command transmission interrupt enable"]
        pub type CmdrunieR = crate::BitReader;
        #[doc = "Field `CMDRUNIE` writer - Command transmission interrupt enable"]
        pub type CmdrunieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TXRUNIE` reader - Data transmission interrupt enable"]
        pub type TxrunieR = crate::BitReader;
        #[doc = "Field `TXRUNIE` writer - Data transmission interrupt enable"]
        pub type TxrunieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RXRUNIE` reader - Data reception interrupt enable"]
        pub type RxrunieR = crate::BitReader;
        #[doc = "Field `RXRUNIE` writer - Data reception interrupt enable"]
        pub type RxrunieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TFHIE` reader - Transmit FIFO half empty interrupt enable"]
        pub type TfhieR = crate::BitReader;
        #[doc = "Field `TFHIE` writer - Transmit FIFO half empty interrupt enable"]
        pub type TfhieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFHIE` reader - Receive FIFO half full interrupt enable"]
        pub type RfhieR = crate::BitReader;
        #[doc = "Field `RFHIE` writer - Receive FIFO half full interrupt enable"]
        pub type RfhieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TFFIE` reader - Transmit FIFO full interrupt enable"]
        pub type TffieR = crate::BitReader;
        #[doc = "Field `TFFIE` writer - Transmit FIFO full interrupt enable"]
        pub type TffieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFFIE` reader - Receive FIFO full interrupt enable"]
        pub type RffieR = crate::BitReader;
        #[doc = "Field `RFFIE` writer - Receive FIFO full interrupt enable"]
        pub type RffieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TFEIE` reader - Transmit FIFO empty interrupt enable"]
        pub type TfeieR = crate::BitReader;
        #[doc = "Field `TFEIE` writer - Transmit FIFO empty interrupt enable"]
        pub type TfeieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RFEIE` reader - Receive FIFO empty interrupt enable"]
        pub type RfeieR = crate::BitReader;
        #[doc = "Field `RFEIE` writer - Receive FIFO empty interrupt enable"]
        pub type RfeieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TXDTVALIE` reader - Data valid in transmit FIFO interrupt enable"]
        pub type TxdtvalieR = crate::BitReader;
        #[doc = "Field `TXDTVALIE` writer - Data valid in transmit FIFO interrupt enable"]
        pub type TxdtvalieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RXDTVALIE` reader - Data valid in receive FIFO interrupt enable"]
        pub type RxdtvalieR = crate::BitReader;
        #[doc = "Field `RXDTVALIE` writer - Data valid in receive FIFO interrupt enable"]
        pub type RxdtvalieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SDIOINTIE` reader - SD I/O interrupt received interrupt enable"]
        pub type SdiointieR = crate::BitReader;
        #[doc = "Field `SDIOINTIE` writer - SD I/O interrupt received interrupt enable"]
        pub type SdiointieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ATAENDIE` reader - CE-ATA command completion signal received interrupt enable"]
        pub type AtaendieR = crate::BitReader;
        #[doc = "Field `ATAENDIE` writer - CE-ATA command completion signal received interrupt enable"]
        pub type AtaendieW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Command response CRC fail interrupt enable"]
            #[inline(always)]
            pub fn ccrcerrie(&self) -> CcrcerrieR {
                CcrcerrieR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Data CRC fail interrupt enable"]
            #[inline(always)]
            pub fn dtcrcerrie(&self) -> DtcrcerrieR {
                DtcrcerrieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Command response timeout interrupt enable"]
            #[inline(always)]
            pub fn cmdtmoutie(&self) -> CmdtmoutieR {
                CmdtmoutieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Data timeout interrupt enable"]
            #[inline(always)]
            pub fn dttmoutie(&self) -> DttmoutieR {
                DttmoutieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Transmit FIFO underrun error interrupt enable"]
            #[inline(always)]
            pub fn txureie(&self) -> TxureieR {
                TxureieR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Received FIFO overrun error interrupt enable"]
            #[inline(always)]
            pub fn rxoreie(&self) -> RxoreieR {
                RxoreieR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Command response received interrupt enable"]
            #[inline(always)]
            pub fn cmdrecvie(&self) -> CmdrecvieR {
                CmdrecvieR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Command sent interrupt enable"]
            #[inline(always)]
            pub fn cmdsendie(&self) -> CmdsendieR {
                CmdsendieR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Data end interrupt enable"]
            #[inline(always)]
            pub fn dtendie(&self) -> DtendieR {
                DtendieR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Start bit error interrupt enable"]
            #[inline(always)]
            pub fn stbiteie(&self) -> StbiteieR {
                StbiteieR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Data block end interrupt enable"]
            #[inline(always)]
            pub fn dtblkendie(&self) -> DtblkendieR {
                DtblkendieR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Command transmission interrupt enable"]
            #[inline(always)]
            pub fn cmdrunie(&self) -> CmdrunieR {
                CmdrunieR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Data transmission interrupt enable"]
            #[inline(always)]
            pub fn txrunie(&self) -> TxrunieR {
                TxrunieR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Data reception interrupt enable"]
            #[inline(always)]
            pub fn rxrunie(&self) -> RxrunieR {
                RxrunieR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Transmit FIFO half empty interrupt enable"]
            #[inline(always)]
            pub fn tfhie(&self) -> TfhieR {
                TfhieR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Receive FIFO half full interrupt enable"]
            #[inline(always)]
            pub fn rfhie(&self) -> RfhieR {
                RfhieR::new(((self.bits >> 15) & 1) != 0)
            }
            #[doc = "Bit 16 - Transmit FIFO full interrupt enable"]
            #[inline(always)]
            pub fn tffie(&self) -> TffieR {
                TffieR::new(((self.bits >> 16) & 1) != 0)
            }
            #[doc = "Bit 17 - Receive FIFO full interrupt enable"]
            #[inline(always)]
            pub fn rffie(&self) -> RffieR {
                RffieR::new(((self.bits >> 17) & 1) != 0)
            }
            #[doc = "Bit 18 - Transmit FIFO empty interrupt enable"]
            #[inline(always)]
            pub fn tfeie(&self) -> TfeieR {
                TfeieR::new(((self.bits >> 18) & 1) != 0)
            }
            #[doc = "Bit 19 - Receive FIFO empty interrupt enable"]
            #[inline(always)]
            pub fn rfeie(&self) -> RfeieR {
                RfeieR::new(((self.bits >> 19) & 1) != 0)
            }
            #[doc = "Bit 20 - Data valid in transmit FIFO interrupt enable"]
            #[inline(always)]
            pub fn txdtvalie(&self) -> TxdtvalieR {
                TxdtvalieR::new(((self.bits >> 20) & 1) != 0)
            }
            #[doc = "Bit 21 - Data valid in receive FIFO interrupt enable"]
            #[inline(always)]
            pub fn rxdtvalie(&self) -> RxdtvalieR {
                RxdtvalieR::new(((self.bits >> 21) & 1) != 0)
            }
            #[doc = "Bit 22 - SD I/O interrupt received interrupt enable"]
            #[inline(always)]
            pub fn sdiointie(&self) -> SdiointieR {
                SdiointieR::new(((self.bits >> 22) & 1) != 0)
            }
            #[doc = "Bit 23 - CE-ATA command completion signal received interrupt enable"]
            #[inline(always)]
            pub fn ataendie(&self) -> AtaendieR {
                AtaendieR::new(((self.bits >> 23) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Command response CRC fail interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ccrcerrie(&mut self) -> CcrcerrieW<IntenSpec> {
                CcrcerrieW::new(self, 0)
            }
            #[doc = "Bit 1 - Data CRC fail interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn dtcrcerrie(&mut self) -> DtcrcerrieW<IntenSpec> {
                DtcrcerrieW::new(self, 1)
            }
            #[doc = "Bit 2 - Command response timeout interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmdtmoutie(&mut self) -> CmdtmoutieW<IntenSpec> {
                CmdtmoutieW::new(self, 2)
            }
            #[doc = "Bit 3 - Data timeout interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn dttmoutie(&mut self) -> DttmoutieW<IntenSpec> {
                DttmoutieW::new(self, 3)
            }
            #[doc = "Bit 4 - Transmit FIFO underrun error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn txureie(&mut self) -> TxureieW<IntenSpec> {
                TxureieW::new(self, 4)
            }
            #[doc = "Bit 5 - Received FIFO overrun error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rxoreie(&mut self) -> RxoreieW<IntenSpec> {
                RxoreieW::new(self, 5)
            }
            #[doc = "Bit 6 - Command response received interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmdrecvie(&mut self) -> CmdrecvieW<IntenSpec> {
                CmdrecvieW::new(self, 6)
            }
            #[doc = "Bit 7 - Command sent interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmdsendie(&mut self) -> CmdsendieW<IntenSpec> {
                CmdsendieW::new(self, 7)
            }
            #[doc = "Bit 8 - Data end interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn dtendie(&mut self) -> DtendieW<IntenSpec> {
                DtendieW::new(self, 8)
            }
            #[doc = "Bit 9 - Start bit error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn stbiteie(&mut self) -> StbiteieW<IntenSpec> {
                StbiteieW::new(self, 9)
            }
            #[doc = "Bit 10 - Data block end interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn dtblkendie(&mut self) -> DtblkendieW<IntenSpec> {
                DtblkendieW::new(self, 10)
            }
            #[doc = "Bit 11 - Command transmission interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmdrunie(&mut self) -> CmdrunieW<IntenSpec> {
                CmdrunieW::new(self, 11)
            }
            #[doc = "Bit 12 - Data transmission interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn txrunie(&mut self) -> TxrunieW<IntenSpec> {
                TxrunieW::new(self, 12)
            }
            #[doc = "Bit 13 - Data reception interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rxrunie(&mut self) -> RxrunieW<IntenSpec> {
                RxrunieW::new(self, 13)
            }
            #[doc = "Bit 14 - Transmit FIFO half empty interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn tfhie(&mut self) -> TfhieW<IntenSpec> {
                TfhieW::new(self, 14)
            }
            #[doc = "Bit 15 - Receive FIFO half full interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rfhie(&mut self) -> RfhieW<IntenSpec> {
                RfhieW::new(self, 15)
            }
            #[doc = "Bit 16 - Transmit FIFO full interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn tffie(&mut self) -> TffieW<IntenSpec> {
                TffieW::new(self, 16)
            }
            #[doc = "Bit 17 - Receive FIFO full interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rffie(&mut self) -> RffieW<IntenSpec> {
                RffieW::new(self, 17)
            }
            #[doc = "Bit 18 - Transmit FIFO empty interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn tfeie(&mut self) -> TfeieW<IntenSpec> {
                TfeieW::new(self, 18)
            }
            #[doc = "Bit 19 - Receive FIFO empty interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rfeie(&mut self) -> RfeieW<IntenSpec> {
                RfeieW::new(self, 19)
            }
            #[doc = "Bit 20 - Data valid in transmit FIFO interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn txdtvalie(&mut self) -> TxdtvalieW<IntenSpec> {
                TxdtvalieW::new(self, 20)
            }
            #[doc = "Bit 21 - Data valid in receive FIFO interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rxdtvalie(&mut self) -> RxdtvalieW<IntenSpec> {
                RxdtvalieW::new(self, 21)
            }
            #[doc = "Bit 22 - SD I/O interrupt received interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn sdiointie(&mut self) -> SdiointieW<IntenSpec> {
                SdiointieW::new(self, 22)
            }
            #[doc = "Bit 23 - CE-ATA command completion signal received interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ataendie(&mut self) -> AtaendieW<IntenSpec> {
                AtaendieW::new(self, 23)
            }
        }
        #[doc = "Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`inten::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`inten::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntenSpec;
        impl crate::RegisterSpec for IntenSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`inten::R`](R) reader structure"]
        impl crate::Readable for IntenSpec {}
        #[doc = "`write(|w| ..)` method takes [`inten::W`](W) writer structure"]
        impl crate::Writable for IntenSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets INTEN to value 0"]
        impl crate::Resettable for IntenSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "FIFOCNT (r) register accessor: FIFO counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`fifocnt::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fifocnt`]
module"]
    #[doc(alias = "FIFOCNT")]
    pub type Fifocnt = crate::Reg<fifocnt::FifocntSpec>;
    #[doc = "FIFO counter register"]
    pub mod fifocnt {
        #[doc = "Register `FIFOCNT` reader"]
        pub type R = crate::R<FifocntSpec>;
        #[doc = "Field `FIFOCNT` reader - FIFO counter"]
        pub type FifocntR = crate::FieldReader<u32>;
        impl R {
            #[doc = "Bits 0:23 - FIFO counter"]
            #[inline(always)]
            pub fn fifocnt(&self) -> FifocntR {
                FifocntR::new(self.bits & 0x00ff_ffff)
            }
        }
        #[doc = "FIFO counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`fifocnt::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct FifocntSpec;
        impl crate::RegisterSpec for FifocntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`fifocnt::R`](R) reader structure"]
        impl crate::Readable for FifocntSpec {}
        #[doc = "`reset()` method sets FIFOCNT to value 0"]
        impl crate::Resettable for FifocntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "FIFO (rw) register accessor: FIFO data register\n\nYou can [`read`](crate::Reg::read) this register and get [`fifo::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fifo::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fifo`]
module"]
    #[doc(alias = "FIFO")]
    pub type Fifo = crate::Reg<fifo::FifoSpec>;
    #[doc = "FIFO data register"]
    pub mod fifo {
        #[doc = "Register `FIFO` reader"]
        pub type R = crate::R<FifoSpec>;
        #[doc = "Register `FIFO` writer"]
        pub type W = crate::W<FifoSpec>;
        #[doc = "Field `FIFODT` reader - Receive FIFO data or transmit FIFO data"]
        pub type FifodtR = crate::FieldReader<u32>;
        #[doc = "Field `FIFODT` writer - Receive FIFO data or transmit FIFO data"]
        pub type FifodtW<'a, REG> = crate::FieldWriter<'a, REG, 32, u32>;
        impl R {
            #[doc = "Bits 0:31 - Receive FIFO data or transmit FIFO data"]
            #[inline(always)]
            pub fn fifodt(&self) -> FifodtR {
                FifodtR::new(self.bits)
            }
        }
        impl W {
            #[doc = "Bits 0:31 - Receive FIFO data or transmit FIFO data"]
            #[inline(always)]
            #[must_use]
            pub fn fifodt(&mut self) -> FifodtW<FifoSpec> {
                FifodtW::new(self, 0)
            }
        }
        #[doc = "FIFO data register\n\nYou can [`read`](crate::Reg::read) this register and get [`fifo::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`fifo::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct FifoSpec;
        impl crate::RegisterSpec for FifoSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`fifo::R`](R) reader structure"]
        impl crate::Readable for FifoSpec {}
        #[doc = "`write(|w| ..)` method takes [`fifo::W`](W) writer structure"]
        impl crate::Writable for FifoSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets FIFO to value 0"]
        impl crate::Resettable for FifoSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Serial peripheral interface"]
pub struct Spi0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Spi0 {}
impl Spi0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi0::RegisterBlock = 0x4001_3000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Spi0 {
    type Target = spi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Spi0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi0").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub mod spi0 {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ctl0: Ctl0,
        ctl1: Ctl1,
        stat: Stat,
        data: Data,
        crcpoly: Crcpoly,
        rcrc: Rcrc,
        tcrc: Tcrc,
        i2sctl: I2sctl,
        i2spsc: I2spsc,
    }
    impl RegisterBlock {
        #[doc = "0x00 - control register 0"]
        #[inline(always)]
        pub const fn ctl0(&self) -> &Ctl0 {
            &self.ctl0
        }
        #[doc = "0x04 - control register 1"]
        #[inline(always)]
        pub const fn ctl1(&self) -> &Ctl1 {
            &self.ctl1
        }
        #[doc = "0x08 - status register"]
        #[inline(always)]
        pub const fn stat(&self) -> &Stat {
            &self.stat
        }
        #[doc = "0x0c - data register"]
        #[inline(always)]
        pub const fn data(&self) -> &Data {
            &self.data
        }
        #[doc = "0x10 - CRC polynomial register"]
        #[inline(always)]
        pub const fn crcpoly(&self) -> &Crcpoly {
            &self.crcpoly
        }
        #[doc = "0x14 - RX CRC register"]
        #[inline(always)]
        pub const fn rcrc(&self) -> &Rcrc {
            &self.rcrc
        }
        #[doc = "0x18 - TX CRC register"]
        #[inline(always)]
        pub const fn tcrc(&self) -> &Tcrc {
            &self.tcrc
        }
        #[doc = "0x1c - I2S control register"]
        #[inline(always)]
        pub const fn i2sctl(&self) -> &I2sctl {
            &self.i2sctl
        }
        #[doc = "0x20 - I2S prescaler register"]
        #[inline(always)]
        pub const fn i2spsc(&self) -> &I2spsc {
            &self.i2spsc
        }
    }
    #[doc = "CTL0 (rw) register accessor: control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl0`]
module"]
    #[doc(alias = "CTL0")]
    pub type Ctl0 = crate::Reg<ctl0::Ctl0Spec>;
    #[doc = "control register 0"]
    pub mod ctl0 {
        #[doc = "Register `CTL0` reader"]
        pub type R = crate::R<Ctl0Spec>;
        #[doc = "Register `CTL0` writer"]
        pub type W = crate::W<Ctl0Spec>;
        #[doc = "Field `CKPH` reader - Clock Phase Selection"]
        pub type CkphR = crate::BitReader;
        #[doc = "Field `CKPH` writer - Clock Phase Selection"]
        pub type CkphW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CKPL` reader - Clock polarity Selection"]
        pub type CkplR = crate::BitReader;
        #[doc = "Field `CKPL` writer - Clock polarity Selection"]
        pub type CkplW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MSTMOD` reader - Master Mode Enable"]
        pub type MstmodR = crate::BitReader;
        #[doc = "Field `MSTMOD` writer - Master Mode Enable"]
        pub type MstmodW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PSC` reader - Master Clock Prescaler Selection"]
        pub type PscR = crate::FieldReader;
        #[doc = "Field `PSC` writer - Master Clock Prescaler Selection"]
        pub type PscW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `SPIEN` reader - SPI enable"]
        pub type SpienR = crate::BitReader;
        #[doc = "Field `SPIEN` writer - SPI enable"]
        pub type SpienW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LF` reader - LSB First Mode"]
        pub type LfR = crate::BitReader;
        #[doc = "Field `LF` writer - LSB First Mode"]
        pub type LfW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWNSS` reader - NSS Pin Selection In NSS Software Mode"]
        pub type SwnssR = crate::BitReader;
        #[doc = "Field `SWNSS` writer - NSS Pin Selection In NSS Software Mode"]
        pub type SwnssW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SWNSSEN` reader - NSS Software Mode Selection"]
        pub type SwnssenR = crate::BitReader;
        #[doc = "Field `SWNSSEN` writer - NSS Software Mode Selection"]
        pub type SwnssenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RO` reader - Receive only"]
        pub type RoR = crate::BitReader;
        #[doc = "Field `RO` writer - Receive only"]
        pub type RoW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `FF16` reader - Data frame format"]
        pub type Ff16R = crate::BitReader;
        #[doc = "Field `FF16` writer - Data frame format"]
        pub type Ff16W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CRCNT` reader - CRC Next Transfer"]
        pub type CrcntR = crate::BitReader;
        #[doc = "Field `CRCNT` writer - CRC Next Transfer"]
        pub type CrcntW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CRCEN` reader - CRC Calculation Enable"]
        pub type CrcenR = crate::BitReader;
        #[doc = "Field `CRCEN` writer - CRC Calculation Enable"]
        pub type CrcenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BDOEN` reader - Bidirectional Transmit output enable"]
        pub type BdoenR = crate::BitReader;
        #[doc = "Field `BDOEN` writer - Bidirectional Transmit output enable"]
        pub type BdoenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BDEN` reader - Bidirectional enable"]
        pub type BdenR = crate::BitReader;
        #[doc = "Field `BDEN` writer - Bidirectional enable"]
        pub type BdenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Clock Phase Selection"]
            #[inline(always)]
            pub fn ckph(&self) -> CkphR {
                CkphR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Clock polarity Selection"]
            #[inline(always)]
            pub fn ckpl(&self) -> CkplR {
                CkplR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Master Mode Enable"]
            #[inline(always)]
            pub fn mstmod(&self) -> MstmodR {
                MstmodR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bits 3:5 - Master Clock Prescaler Selection"]
            #[inline(always)]
            pub fn psc(&self) -> PscR {
                PscR::new(((self.bits >> 3) & 7) as u8)
            }
            #[doc = "Bit 6 - SPI enable"]
            #[inline(always)]
            pub fn spien(&self) -> SpienR {
                SpienR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - LSB First Mode"]
            #[inline(always)]
            pub fn lf(&self) -> LfR {
                LfR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - NSS Pin Selection In NSS Software Mode"]
            #[inline(always)]
            pub fn swnss(&self) -> SwnssR {
                SwnssR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - NSS Software Mode Selection"]
            #[inline(always)]
            pub fn swnssen(&self) -> SwnssenR {
                SwnssenR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Receive only"]
            #[inline(always)]
            pub fn ro(&self) -> RoR {
                RoR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Data frame format"]
            #[inline(always)]
            pub fn ff16(&self) -> Ff16R {
                Ff16R::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - CRC Next Transfer"]
            #[inline(always)]
            pub fn crcnt(&self) -> CrcntR {
                CrcntR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - CRC Calculation Enable"]
            #[inline(always)]
            pub fn crcen(&self) -> CrcenR {
                CrcenR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Bidirectional Transmit output enable"]
            #[inline(always)]
            pub fn bdoen(&self) -> BdoenR {
                BdoenR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Bidirectional enable"]
            #[inline(always)]
            pub fn bden(&self) -> BdenR {
                BdenR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Clock Phase Selection"]
            #[inline(always)]
            #[must_use]
            pub fn ckph(&mut self) -> CkphW<Ctl0Spec> {
                CkphW::new(self, 0)
            }
            #[doc = "Bit 1 - Clock polarity Selection"]
            #[inline(always)]
            #[must_use]
            pub fn ckpl(&mut self) -> CkplW<Ctl0Spec> {
                CkplW::new(self, 1)
            }
            #[doc = "Bit 2 - Master Mode Enable"]
            #[inline(always)]
            #[must_use]
            pub fn mstmod(&mut self) -> MstmodW<Ctl0Spec> {
                MstmodW::new(self, 2)
            }
            #[doc = "Bits 3:5 - Master Clock Prescaler Selection"]
            #[inline(always)]
            #[must_use]
            pub fn psc(&mut self) -> PscW<Ctl0Spec> {
                PscW::new(self, 3)
            }
            #[doc = "Bit 6 - SPI enable"]
            #[inline(always)]
            #[must_use]
            pub fn spien(&mut self) -> SpienW<Ctl0Spec> {
                SpienW::new(self, 6)
            }
            #[doc = "Bit 7 - LSB First Mode"]
            #[inline(always)]
            #[must_use]
            pub fn lf(&mut self) -> LfW<Ctl0Spec> {
                LfW::new(self, 7)
            }
            #[doc = "Bit 8 - NSS Pin Selection In NSS Software Mode"]
            #[inline(always)]
            #[must_use]
            pub fn swnss(&mut self) -> SwnssW<Ctl0Spec> {
                SwnssW::new(self, 8)
            }
            #[doc = "Bit 9 - NSS Software Mode Selection"]
            #[inline(always)]
            #[must_use]
            pub fn swnssen(&mut self) -> SwnssenW<Ctl0Spec> {
                SwnssenW::new(self, 9)
            }
            #[doc = "Bit 10 - Receive only"]
            #[inline(always)]
            #[must_use]
            pub fn ro(&mut self) -> RoW<Ctl0Spec> {
                RoW::new(self, 10)
            }
            #[doc = "Bit 11 - Data frame format"]
            #[inline(always)]
            #[must_use]
            pub fn ff16(&mut self) -> Ff16W<Ctl0Spec> {
                Ff16W::new(self, 11)
            }
            #[doc = "Bit 12 - CRC Next Transfer"]
            #[inline(always)]
            #[must_use]
            pub fn crcnt(&mut self) -> CrcntW<Ctl0Spec> {
                CrcntW::new(self, 12)
            }
            #[doc = "Bit 13 - CRC Calculation Enable"]
            #[inline(always)]
            #[must_use]
            pub fn crcen(&mut self) -> CrcenW<Ctl0Spec> {
                CrcenW::new(self, 13)
            }
            #[doc = "Bit 14 - Bidirectional Transmit output enable"]
            #[inline(always)]
            #[must_use]
            pub fn bdoen(&mut self) -> BdoenW<Ctl0Spec> {
                BdoenW::new(self, 14)
            }
            #[doc = "Bit 15 - Bidirectional enable"]
            #[inline(always)]
            #[must_use]
            pub fn bden(&mut self) -> BdenW<Ctl0Spec> {
                BdenW::new(self, 15)
            }
        }
        #[doc = "control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl0Spec;
        impl crate::RegisterSpec for Ctl0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl0::R`](R) reader structure"]
        impl crate::Readable for Ctl0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl0::W`](W) writer structure"]
        impl crate::Writable for Ctl0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL0 to value 0"]
        impl crate::Resettable for Ctl0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL1 (rw) register accessor: control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl1`]
module"]
    #[doc(alias = "CTL1")]
    pub type Ctl1 = crate::Reg<ctl1::Ctl1Spec>;
    #[doc = "control register 1"]
    pub mod ctl1 {
        #[doc = "Register `CTL1` reader"]
        pub type R = crate::R<Ctl1Spec>;
        #[doc = "Register `CTL1` writer"]
        pub type W = crate::W<Ctl1Spec>;
        #[doc = "Field `DMAREN` reader - Rx buffer DMA enable"]
        pub type DmarenR = crate::BitReader;
        #[doc = "Field `DMAREN` writer - Rx buffer DMA enable"]
        pub type DmarenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DMATEN` reader - Transmit Buffer DMA Enable"]
        pub type DmatenR = crate::BitReader;
        #[doc = "Field `DMATEN` writer - Transmit Buffer DMA Enable"]
        pub type DmatenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NSSDRV` reader - Drive NSS Output"]
        pub type NssdrvR = crate::BitReader;
        #[doc = "Field `NSSDRV` writer - Drive NSS Output"]
        pub type NssdrvW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Error interrupt enable"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Error interrupt enable"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RBNEIE` reader - RX buffer not empty interrupt enable"]
        pub type RbneieR = crate::BitReader;
        #[doc = "Field `RBNEIE` writer - RX buffer not empty interrupt enable"]
        pub type RbneieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TBEIE` reader - Tx buffer empty interrupt enable"]
        pub type TbeieR = crate::BitReader;
        #[doc = "Field `TBEIE` writer - Tx buffer empty interrupt enable"]
        pub type TbeieW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Rx buffer DMA enable"]
            #[inline(always)]
            pub fn dmaren(&self) -> DmarenR {
                DmarenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Transmit Buffer DMA Enable"]
            #[inline(always)]
            pub fn dmaten(&self) -> DmatenR {
                DmatenR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Drive NSS Output"]
            #[inline(always)]
            pub fn nssdrv(&self) -> NssdrvR {
                NssdrvR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 5 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - RX buffer not empty interrupt enable"]
            #[inline(always)]
            pub fn rbneie(&self) -> RbneieR {
                RbneieR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Tx buffer empty interrupt enable"]
            #[inline(always)]
            pub fn tbeie(&self) -> TbeieR {
                TbeieR::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Rx buffer DMA enable"]
            #[inline(always)]
            #[must_use]
            pub fn dmaren(&mut self) -> DmarenW<Ctl1Spec> {
                DmarenW::new(self, 0)
            }
            #[doc = "Bit 1 - Transmit Buffer DMA Enable"]
            #[inline(always)]
            #[must_use]
            pub fn dmaten(&mut self) -> DmatenW<Ctl1Spec> {
                DmatenW::new(self, 1)
            }
            #[doc = "Bit 2 - Drive NSS Output"]
            #[inline(always)]
            #[must_use]
            pub fn nssdrv(&mut self) -> NssdrvW<Ctl1Spec> {
                NssdrvW::new(self, 2)
            }
            #[doc = "Bit 5 - Error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ctl1Spec> {
                ErrieW::new(self, 5)
            }
            #[doc = "Bit 6 - RX buffer not empty interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rbneie(&mut self) -> RbneieW<Ctl1Spec> {
                RbneieW::new(self, 6)
            }
            #[doc = "Bit 7 - Tx buffer empty interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn tbeie(&mut self) -> TbeieW<Ctl1Spec> {
                TbeieW::new(self, 7)
            }
        }
        #[doc = "control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl1Spec;
        impl crate::RegisterSpec for Ctl1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl1::R`](R) reader structure"]
        impl crate::Readable for Ctl1Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"]
        impl crate::Writable for Ctl1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL1 to value 0"]
        impl crate::Resettable for Ctl1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "STAT (rw) register accessor: status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat`]
module"]
    #[doc(alias = "STAT")]
    pub type Stat = crate::Reg<stat::StatSpec>;
    #[doc = "status register"]
    pub mod stat {
        #[doc = "Register `STAT` reader"]
        pub type R = crate::R<StatSpec>;
        #[doc = "Register `STAT` writer"]
        pub type W = crate::W<StatSpec>;
        #[doc = "Field `RBNE` reader - Receive Buffer Not Empty"]
        pub type RbneR = crate::BitReader;
        #[doc = "Field `TBE` reader - Transmit Buffer Empty"]
        pub type TbeR = crate::BitReader;
        #[doc = "Field `I2SCH` reader - I2S channel side"]
        pub type I2schR = crate::BitReader;
        #[doc = "Field `TXURERR` reader - Transmission underrun error bit"]
        pub type TxurerrR = crate::BitReader;
        #[doc = "Field `CRCERR` reader - SPI CRC Error Bit"]
        pub type CrcerrR = crate::BitReader;
        #[doc = "Field `CRCERR` writer - SPI CRC Error Bit"]
        pub type CrcerrW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CONFERR` reader - SPI Configuration error"]
        pub type ConferrR = crate::BitReader;
        #[doc = "Field `RXORERR` reader - Reception Overrun Error Bit"]
        pub type RxorerrR = crate::BitReader;
        #[doc = "Field `TRANS` reader - Transmitting On-going Bit"]
        pub type TransR = crate::BitReader;
        impl R {
            #[doc = "Bit 0 - Receive Buffer Not Empty"]
            #[inline(always)]
            pub fn rbne(&self) -> RbneR {
                RbneR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Transmit Buffer Empty"]
            #[inline(always)]
            pub fn tbe(&self) -> TbeR {
                TbeR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - I2S channel side"]
            #[inline(always)]
            pub fn i2sch(&self) -> I2schR {
                I2schR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Transmission underrun error bit"]
            #[inline(always)]
            pub fn txurerr(&self) -> TxurerrR {
                TxurerrR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - SPI CRC Error Bit"]
            #[inline(always)]
            pub fn crcerr(&self) -> CrcerrR {
                CrcerrR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - SPI Configuration error"]
            #[inline(always)]
            pub fn conferr(&self) -> ConferrR {
                ConferrR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Reception Overrun Error Bit"]
            #[inline(always)]
            pub fn rxorerr(&self) -> RxorerrR {
                RxorerrR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Transmitting On-going Bit"]
            #[inline(always)]
            pub fn trans(&self) -> TransR {
                TransR::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 4 - SPI CRC Error Bit"]
            #[inline(always)]
            #[must_use]
            pub fn crcerr(&mut self) -> CrcerrW<StatSpec> {
                CrcerrW::new(self, 4)
            }
        }
        #[doc = "status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct StatSpec;
        impl crate::RegisterSpec for StatSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat::R`](R) reader structure"]
        impl crate::Readable for StatSpec {}
        #[doc = "`write(|w| ..)` method takes [`stat::W`](W) writer structure"]
        impl crate::Writable for StatSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets STAT to value 0x02"]
        impl crate::Resettable for StatSpec {
            const RESET_VALUE: u32 = 0x02;
        }
    }
    #[doc = "DATA (rw) register accessor: data register\n\nYou can [`read`](crate::Reg::read) this register and get [`data::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data`]
module"]
    #[doc(alias = "DATA")]
    pub type Data = crate::Reg<data::DataSpec>;
    #[doc = "data register"]
    pub mod data {
        #[doc = "Register `DATA` reader"]
        pub type R = crate::R<DataSpec>;
        #[doc = "Register `DATA` writer"]
        pub type W = crate::W<DataSpec>;
        #[doc = "Field `SPI_DATA` reader - Data transfer register"]
        pub type SpiDataR = crate::FieldReader<u16>;
        #[doc = "Field `SPI_DATA` writer - Data transfer register"]
        pub type SpiDataW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Data transfer register"]
            #[inline(always)]
            pub fn spi_data(&self) -> SpiDataR {
                SpiDataR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Data transfer register"]
            #[inline(always)]
            #[must_use]
            pub fn spi_data(&mut self) -> SpiDataW<DataSpec> {
                SpiDataW::new(self, 0)
            }
        }
        #[doc = "data register\n\nYou can [`read`](crate::Reg::read) this register and get [`data::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DataSpec;
        impl crate::RegisterSpec for DataSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data::R`](R) reader structure"]
        impl crate::Readable for DataSpec {}
        #[doc = "`write(|w| ..)` method takes [`data::W`](W) writer structure"]
        impl crate::Writable for DataSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA to value 0"]
        impl crate::Resettable for DataSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CRCPOLY (rw) register accessor: CRC polynomial register\n\nYou can [`read`](crate::Reg::read) this register and get [`crcpoly::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`crcpoly::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@crcpoly`]
module"]
    #[doc(alias = "CRCPOLY")]
    pub type Crcpoly = crate::Reg<crcpoly::CrcpolySpec>;
    #[doc = "CRC polynomial register"]
    pub mod crcpoly {
        #[doc = "Register `CRCPOLY` reader"]
        pub type R = crate::R<CrcpolySpec>;
        #[doc = "Register `CRCPOLY` writer"]
        pub type W = crate::W<CrcpolySpec>;
        #[doc = "Field `CRCPOLY` reader - CRC polynomial register"]
        pub type CrcpolyR = crate::FieldReader<u16>;
        #[doc = "Field `CRCPOLY` writer - CRC polynomial register"]
        pub type CrcpolyW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - CRC polynomial register"]
            #[inline(always)]
            pub fn crcpoly(&self) -> CrcpolyR {
                CrcpolyR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - CRC polynomial register"]
            #[inline(always)]
            #[must_use]
            pub fn crcpoly(&mut self) -> CrcpolyW<CrcpolySpec> {
                CrcpolyW::new(self, 0)
            }
        }
        #[doc = "CRC polynomial register\n\nYou can [`read`](crate::Reg::read) this register and get [`crcpoly::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`crcpoly::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CrcpolySpec;
        impl crate::RegisterSpec for CrcpolySpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`crcpoly::R`](R) reader structure"]
        impl crate::Readable for CrcpolySpec {}
        #[doc = "`write(|w| ..)` method takes [`crcpoly::W`](W) writer structure"]
        impl crate::Writable for CrcpolySpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CRCPOLY to value 0x07"]
        impl crate::Resettable for CrcpolySpec {
            const RESET_VALUE: u32 = 0x07;
        }
    }
    #[doc = "RCRC (r) register accessor: RX CRC register\n\nYou can [`read`](crate::Reg::read) this register and get [`rcrc::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@rcrc`]
module"]
    #[doc(alias = "RCRC")]
    pub type Rcrc = crate::Reg<rcrc::RcrcSpec>;
    #[doc = "RX CRC register"]
    pub mod rcrc {
        #[doc = "Register `RCRC` reader"]
        pub type R = crate::R<RcrcSpec>;
        #[doc = "Field `RCRC` reader - RX CRC register"]
        pub type RcrcR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:15 - RX CRC register"]
            #[inline(always)]
            pub fn rcrc(&self) -> RcrcR {
                RcrcR::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "RX CRC register\n\nYou can [`read`](crate::Reg::read) this register and get [`rcrc::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct RcrcSpec;
        impl crate::RegisterSpec for RcrcSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`rcrc::R`](R) reader structure"]
        impl crate::Readable for RcrcSpec {}
        #[doc = "`reset()` method sets RCRC to value 0"]
        impl crate::Resettable for RcrcSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "TCRC (r) register accessor: TX CRC register\n\nYou can [`read`](crate::Reg::read) this register and get [`tcrc::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@tcrc`]
module"]
    #[doc(alias = "TCRC")]
    pub type Tcrc = crate::Reg<tcrc::TcrcSpec>;
    #[doc = "TX CRC register"]
    pub mod tcrc {
        #[doc = "Register `TCRC` reader"]
        pub type R = crate::R<TcrcSpec>;
        #[doc = "Field `TCRC` reader - Tx CRC register"]
        pub type TcrcR = crate::FieldReader<u16>;
        impl R {
            #[doc = "Bits 0:15 - Tx CRC register"]
            #[inline(always)]
            pub fn tcrc(&self) -> TcrcR {
                TcrcR::new((self.bits & 0xffff) as u16)
            }
        }
        #[doc = "TX CRC register\n\nYou can [`read`](crate::Reg::read) this register and get [`tcrc::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct TcrcSpec;
        impl crate::RegisterSpec for TcrcSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`tcrc::R`](R) reader structure"]
        impl crate::Readable for TcrcSpec {}
        #[doc = "`reset()` method sets TCRC to value 0"]
        impl crate::Resettable for TcrcSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "I2SCTL (rw) register accessor: I2S control register\n\nYou can [`read`](crate::Reg::read) this register and get [`i2sctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`i2sctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@i2sctl`]
module"]
    #[doc(alias = "I2SCTL")]
    pub type I2sctl = crate::Reg<i2sctl::I2sctlSpec>;
    #[doc = "I2S control register"]
    pub mod i2sctl {
        #[doc = "Register `I2SCTL` reader"]
        pub type R = crate::R<I2sctlSpec>;
        #[doc = "Register `I2SCTL` writer"]
        pub type W = crate::W<I2sctlSpec>;
        #[doc = "Field `CHLEN` reader - Channel length (number of bits per audio channel)"]
        pub type ChlenR = crate::BitReader;
        #[doc = "Field `CHLEN` writer - Channel length (number of bits per audio channel)"]
        pub type ChlenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DTLEN` reader - Data length"]
        pub type DtlenR = crate::FieldReader;
        #[doc = "Field `DTLEN` writer - Data length"]
        pub type DtlenW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CKPL` reader - Idle state clock polarity"]
        pub type CkplR = crate::BitReader;
        #[doc = "Field `CKPL` writer - Idle state clock polarity"]
        pub type CkplW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `I2SSTD` reader - I2S standard selection"]
        pub type I2sstdR = crate::FieldReader;
        #[doc = "Field `I2SSTD` writer - I2S standard selection"]
        pub type I2sstdW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `PCMSMOD` reader - PCM frame synchronization mode"]
        pub type PcmsmodR = crate::BitReader;
        #[doc = "Field `PCMSMOD` writer - PCM frame synchronization mode"]
        pub type PcmsmodW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `I2SOPMOD` reader - I2S operation mode"]
        pub type I2sopmodR = crate::FieldReader;
        #[doc = "Field `I2SOPMOD` writer - I2S operation mode"]
        pub type I2sopmodW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `I2SEN` reader - I2S Enable"]
        pub type I2senR = crate::BitReader;
        #[doc = "Field `I2SEN` writer - I2S Enable"]
        pub type I2senW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `I2SSEL` reader - I2S mode selection"]
        pub type I2sselR = crate::BitReader;
        #[doc = "Field `I2SSEL` writer - I2S mode selection"]
        pub type I2sselW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel length (number of bits per audio channel)"]
            #[inline(always)]
            pub fn chlen(&self) -> ChlenR {
                ChlenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bits 1:2 - Data length"]
            #[inline(always)]
            pub fn dtlen(&self) -> DtlenR {
                DtlenR::new(((self.bits >> 1) & 3) as u8)
            }
            #[doc = "Bit 3 - Idle state clock polarity"]
            #[inline(always)]
            pub fn ckpl(&self) -> CkplR {
                CkplR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:5 - I2S standard selection"]
            #[inline(always)]
            pub fn i2sstd(&self) -> I2sstdR {
                I2sstdR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 7 - PCM frame synchronization mode"]
            #[inline(always)]
            pub fn pcmsmod(&self) -> PcmsmodR {
                PcmsmodR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - I2S operation mode"]
            #[inline(always)]
            pub fn i2sopmod(&self) -> I2sopmodR {
                I2sopmodR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 10 - I2S Enable"]
            #[inline(always)]
            pub fn i2sen(&self) -> I2senR {
                I2senR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - I2S mode selection"]
            #[inline(always)]
            pub fn i2ssel(&self) -> I2sselR {
                I2sselR::new(((self.bits >> 11) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel length (number of bits per audio channel)"]
            #[inline(always)]
            #[must_use]
            pub fn chlen(&mut self) -> ChlenW<I2sctlSpec> {
                ChlenW::new(self, 0)
            }
            #[doc = "Bits 1:2 - Data length"]
            #[inline(always)]
            #[must_use]
            pub fn dtlen(&mut self) -> DtlenW<I2sctlSpec> {
                DtlenW::new(self, 1)
            }
            #[doc = "Bit 3 - Idle state clock polarity"]
            #[inline(always)]
            #[must_use]
            pub fn ckpl(&mut self) -> CkplW<I2sctlSpec> {
                CkplW::new(self, 3)
            }
            #[doc = "Bits 4:5 - I2S standard selection"]
            #[inline(always)]
            #[must_use]
            pub fn i2sstd(&mut self) -> I2sstdW<I2sctlSpec> {
                I2sstdW::new(self, 4)
            }
            #[doc = "Bit 7 - PCM frame synchronization mode"]
            #[inline(always)]
            #[must_use]
            pub fn pcmsmod(&mut self) -> PcmsmodW<I2sctlSpec> {
                PcmsmodW::new(self, 7)
            }
            #[doc = "Bits 8:9 - I2S operation mode"]
            #[inline(always)]
            #[must_use]
            pub fn i2sopmod(&mut self) -> I2sopmodW<I2sctlSpec> {
                I2sopmodW::new(self, 8)
            }
            #[doc = "Bit 10 - I2S Enable"]
            #[inline(always)]
            #[must_use]
            pub fn i2sen(&mut self) -> I2senW<I2sctlSpec> {
                I2senW::new(self, 10)
            }
            #[doc = "Bit 11 - I2S mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn i2ssel(&mut self) -> I2sselW<I2sctlSpec> {
                I2sselW::new(self, 11)
            }
        }
        #[doc = "I2S control register\n\nYou can [`read`](crate::Reg::read) this register and get [`i2sctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`i2sctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct I2sctlSpec;
        impl crate::RegisterSpec for I2sctlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`i2sctl::R`](R) reader structure"]
        impl crate::Readable for I2sctlSpec {}
        #[doc = "`write(|w| ..)` method takes [`i2sctl::W`](W) writer structure"]
        impl crate::Writable for I2sctlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets I2SCTL to value 0"]
        impl crate::Resettable for I2sctlSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "I2SPSC (rw) register accessor: I2S prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`i2spsc::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`i2spsc::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@i2spsc`]
module"]
    #[doc(alias = "I2SPSC")]
    pub type I2spsc = crate::Reg<i2spsc::I2spscSpec>;
    #[doc = "I2S prescaler register"]
    pub mod i2spsc {
        #[doc = "Register `I2SPSC` reader"]
        pub type R = crate::R<I2spscSpec>;
        #[doc = "Register `I2SPSC` writer"]
        pub type W = crate::W<I2spscSpec>;
        #[doc = "Field `DIV` reader - Dividing factor for the prescaler"]
        pub type DivR = crate::FieldReader;
        #[doc = "Field `DIV` writer - Dividing factor for the prescaler"]
        pub type DivW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `OF` reader - Odd factor for the prescaler"]
        pub type OfR = crate::BitReader;
        #[doc = "Field `OF` writer - Odd factor for the prescaler"]
        pub type OfW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MCKOEN` reader - I2S_MCK output enable"]
        pub type MckoenR = crate::BitReader;
        #[doc = "Field `MCKOEN` writer - I2S_MCK output enable"]
        pub type MckoenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:7 - Dividing factor for the prescaler"]
            #[inline(always)]
            pub fn div(&self) -> DivR {
                DivR::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bit 8 - Odd factor for the prescaler"]
            #[inline(always)]
            pub fn of(&self) -> OfR {
                OfR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - I2S_MCK output enable"]
            #[inline(always)]
            pub fn mckoen(&self) -> MckoenR {
                MckoenR::new(((self.bits >> 9) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Dividing factor for the prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn div(&mut self) -> DivW<I2spscSpec> {
                DivW::new(self, 0)
            }
            #[doc = "Bit 8 - Odd factor for the prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn of(&mut self) -> OfW<I2spscSpec> {
                OfW::new(self, 8)
            }
            #[doc = "Bit 9 - I2S_MCK output enable"]
            #[inline(always)]
            #[must_use]
            pub fn mckoen(&mut self) -> MckoenW<I2spscSpec> {
                MckoenW::new(self, 9)
            }
        }
        #[doc = "I2S prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`i2spsc::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`i2spsc::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct I2spscSpec;
        impl crate::RegisterSpec for I2spscSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`i2spsc::R`](R) reader structure"]
        impl crate::Readable for I2spscSpec {}
        #[doc = "`write(|w| ..)` method takes [`i2spsc::W`](W) writer structure"]
        impl crate::Writable for I2spscSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets I2SPSC to value 0x02"]
        impl crate::Resettable for I2spscSpec {
            const RESET_VALUE: u32 = 0x02;
        }
    }
}
#[doc = "Serial peripheral interface"]
pub struct Spi1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Spi1 {}
impl Spi1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi0::RegisterBlock = 0x4000_3800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Spi1 {
    type Target = spi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Spi1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi1").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi0 as spi1;
#[doc = "Serial peripheral interface"]
pub struct Spi2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Spi2 {}
impl Spi2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const spi0::RegisterBlock = 0x4000_3c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const spi0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Spi2 {
    type Target = spi0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Spi2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Spi2").finish()
    }
}
#[doc = "Serial peripheral interface"]
pub use self::spi0 as spi2;
#[doc = "Advanced-timers"]
pub struct Timer0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Timer0 {}
impl Timer0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer0::RegisterBlock = 0x4001_2c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Timer0 {
    type Target = timer0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Timer0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer0").finish()
    }
}
#[doc = "Advanced-timers"]
pub mod timer0 {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ctl0: Ctl0,
        ctl1: Ctl1,
        smcfg: Smcfg,
        dmainten: Dmainten,
        intf: Intf,
        swevg: Swevg,
        _reserved_6_chctl0: [u8; 0x04],
        _reserved_7_chctl1: [u8; 0x04],
        chctl2: Chctl2,
        cnt: Cnt,
        psc: Psc,
        car: Car,
        crep: Crep,
        ch0cv: Ch0cv,
        ch1cv: Ch1cv,
        ch2cv: Ch2cv,
        ch3cv: Ch3cv,
        cchp: Cchp,
        dmacfg: Dmacfg,
        dmatb: Dmatb,
    }
    impl RegisterBlock {
        #[doc = "0x00 - control register 0"]
        #[inline(always)]
        pub const fn ctl0(&self) -> &Ctl0 {
            &self.ctl0
        }
        #[doc = "0x04 - control register 1"]
        #[inline(always)]
        pub const fn ctl1(&self) -> &Ctl1 {
            &self.ctl1
        }
        #[doc = "0x08 - slave mode configuration register"]
        #[inline(always)]
        pub const fn smcfg(&self) -> &Smcfg {
            &self.smcfg
        }
        #[doc = "0x0c - DMA/Interrupt enable register"]
        #[inline(always)]
        pub const fn dmainten(&self) -> &Dmainten {
            &self.dmainten
        }
        #[doc = "0x10 - Interrupt flag register"]
        #[inline(always)]
        pub const fn intf(&self) -> &Intf {
            &self.intf
        }
        #[doc = "0x14 - Software event generation register"]
        #[inline(always)]
        pub const fn swevg(&self) -> &Swevg {
            &self.swevg
        }
        #[doc = "0x18 - Channel control register 0 (input mode)"]
        #[inline(always)]
        pub const fn chctl0_input(&self) -> &Chctl0Input {
            unsafe { &*(self as *const Self).cast::<u8>().add(24).cast() }
        }
        #[doc = "0x18 - Channel control register 0 (output mode)"]
        #[inline(always)]
        pub const fn chctl0_output(&self) -> &Chctl0Output {
            unsafe { &*(self as *const Self).cast::<u8>().add(24).cast() }
        }
        #[doc = "0x1c - Channel control register 1 (input mode)"]
        #[inline(always)]
        pub const fn chctl1_input(&self) -> &Chctl1Input {
            unsafe { &*(self as *const Self).cast::<u8>().add(28).cast() }
        }
        #[doc = "0x1c - Channel control register 1 (output mode)"]
        #[inline(always)]
        pub const fn chctl1_output(&self) -> &Chctl1Output {
            unsafe { &*(self as *const Self).cast::<u8>().add(28).cast() }
        }
        #[doc = "0x20 - Channel control register 2"]
        #[inline(always)]
        pub const fn chctl2(&self) -> &Chctl2 {
            &self.chctl2
        }
        #[doc = "0x24 - counter"]
        #[inline(always)]
        pub const fn cnt(&self) -> &Cnt {
            &self.cnt
        }
        #[doc = "0x28 - prescaler"]
        #[inline(always)]
        pub const fn psc(&self) -> &Psc {
            &self.psc
        }
        #[doc = "0x2c - Counter auto reload register"]
        #[inline(always)]
        pub const fn car(&self) -> &Car {
            &self.car
        }
        #[doc = "0x30 - Counter repetition register"]
        #[inline(always)]
        pub const fn crep(&self) -> &Crep {
            &self.crep
        }
        #[doc = "0x34 - Channel 0 capture/compare value register"]
        #[inline(always)]
        pub const fn ch0cv(&self) -> &Ch0cv {
            &self.ch0cv
        }
        #[doc = "0x38 - Channel 1 capture/compare value register"]
        #[inline(always)]
        pub const fn ch1cv(&self) -> &Ch1cv {
            &self.ch1cv
        }
        #[doc = "0x3c - Channel 2 capture/compare value register"]
        #[inline(always)]
        pub const fn ch2cv(&self) -> &Ch2cv {
            &self.ch2cv
        }
        #[doc = "0x40 - Channel 3 capture/compare value register"]
        #[inline(always)]
        pub const fn ch3cv(&self) -> &Ch3cv {
            &self.ch3cv
        }
        #[doc = "0x44 - channel complementary protection register"]
        #[inline(always)]
        pub const fn cchp(&self) -> &Cchp {
            &self.cchp
        }
        #[doc = "0x48 - DMA configuration register"]
        #[inline(always)]
        pub const fn dmacfg(&self) -> &Dmacfg {
            &self.dmacfg
        }
        #[doc = "0x4c - DMA transfer buffer register"]
        #[inline(always)]
        pub const fn dmatb(&self) -> &Dmatb {
            &self.dmatb
        }
    }
    #[doc = "CTL0 (rw) register accessor: control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl0`]
module"]
    #[doc(alias = "CTL0")]
    pub type Ctl0 = crate::Reg<ctl0::Ctl0Spec>;
    #[doc = "control register 0"]
    pub mod ctl0 {
        #[doc = "Register `CTL0` reader"]
        pub type R = crate::R<Ctl0Spec>;
        #[doc = "Register `CTL0` writer"]
        pub type W = crate::W<Ctl0Spec>;
        #[doc = "Field `CEN` reader - Counter enable"]
        pub type CenR = crate::BitReader;
        #[doc = "Field `CEN` writer - Counter enable"]
        pub type CenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UPDIS` reader - Update disable"]
        pub type UpdisR = crate::BitReader;
        #[doc = "Field `UPDIS` writer - Update disable"]
        pub type UpdisW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UPS` reader - Update source"]
        pub type UpsR = crate::BitReader;
        #[doc = "Field `UPS` writer - Update source"]
        pub type UpsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SPM` reader - Single pulse mode"]
        pub type SpmR = crate::BitReader;
        #[doc = "Field `SPM` writer - Single pulse mode"]
        pub type SpmW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CAM` reader - Counter aligns mode selection"]
        pub type CamR = crate::FieldReader;
        #[doc = "Field `CAM` writer - Counter aligns mode selection"]
        pub type CamW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `ARSE` reader - Auto-reload shadow enable"]
        pub type ArseR = crate::BitReader;
        #[doc = "Field `ARSE` writer - Auto-reload shadow enable"]
        pub type ArseW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CKDIV` reader - Clock division"]
        pub type CkdivR = crate::FieldReader;
        #[doc = "Field `CKDIV` writer - Clock division"]
        pub type CkdivW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CenR {
                CenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn updis(&self) -> UpdisR {
                UpdisR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Update source"]
            #[inline(always)]
            pub fn ups(&self) -> UpsR {
                UpsR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Single pulse mode"]
            #[inline(always)]
            pub fn spm(&self) -> SpmR {
                SpmR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bits 5:6 - Counter aligns mode selection"]
            #[inline(always)]
            pub fn cam(&self) -> CamR {
                CamR::new(((self.bits >> 5) & 3) as u8)
            }
            #[doc = "Bit 7 - Auto-reload shadow enable"]
            #[inline(always)]
            pub fn arse(&self) -> ArseR {
                ArseR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckdiv(&self) -> CkdivR {
                CkdivR::new(((self.bits >> 8) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            #[must_use]
            pub fn cen(&mut self) -> CenW<Ctl0Spec> {
                CenW::new(self, 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            #[must_use]
            pub fn updis(&mut self) -> UpdisW<Ctl0Spec> {
                UpdisW::new(self, 1)
            }
            #[doc = "Bit 2 - Update source"]
            #[inline(always)]
            #[must_use]
            pub fn ups(&mut self) -> UpsW<Ctl0Spec> {
                UpsW::new(self, 2)
            }
            #[doc = "Bit 3 - Single pulse mode"]
            #[inline(always)]
            #[must_use]
            pub fn spm(&mut self) -> SpmW<Ctl0Spec> {
                SpmW::new(self, 3)
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ctl0Spec> {
                DirW::new(self, 4)
            }
            #[doc = "Bits 5:6 - Counter aligns mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn cam(&mut self) -> CamW<Ctl0Spec> {
                CamW::new(self, 5)
            }
            #[doc = "Bit 7 - Auto-reload shadow enable"]
            #[inline(always)]
            #[must_use]
            pub fn arse(&mut self) -> ArseW<Ctl0Spec> {
                ArseW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            #[must_use]
            pub fn ckdiv(&mut self) -> CkdivW<Ctl0Spec> {
                CkdivW::new(self, 8)
            }
        }
        #[doc = "control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl0Spec;
        impl crate::RegisterSpec for Ctl0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl0::R`](R) reader structure"]
        impl crate::Readable for Ctl0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl0::W`](W) writer structure"]
        impl crate::Writable for Ctl0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL0 to value 0"]
        impl crate::Resettable for Ctl0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL1 (rw) register accessor: control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl1`]
module"]
    #[doc(alias = "CTL1")]
    pub type Ctl1 = crate::Reg<ctl1::Ctl1Spec>;
    #[doc = "control register 1"]
    pub mod ctl1 {
        #[doc = "Register `CTL1` reader"]
        pub type R = crate::R<Ctl1Spec>;
        #[doc = "Register `CTL1` writer"]
        pub type W = crate::W<Ctl1Spec>;
        #[doc = "Field `CCSE` reader - Commutation control shadow enable"]
        pub type CcseR = crate::BitReader;
        #[doc = "Field `CCSE` writer - Commutation control shadow enable"]
        pub type CcseW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CCUC` reader - Commutation control shadow register update control"]
        pub type CcucR = crate::BitReader;
        #[doc = "Field `CCUC` writer - Commutation control shadow register update control"]
        pub type CcucW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DMAS` reader - DMA request source selection"]
        pub type DmasR = crate::BitReader;
        #[doc = "Field `DMAS` writer - DMA request source selection"]
        pub type DmasW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MMC` reader - Master mode control"]
        pub type MmcR = crate::FieldReader;
        #[doc = "Field `MMC` writer - Master mode control"]
        pub type MmcW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `TI0S` reader - Channel 0 trigger input selection"]
        pub type Ti0sR = crate::BitReader;
        #[doc = "Field `TI0S` writer - Channel 0 trigger input selection"]
        pub type Ti0sW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ISO0` reader - Idle state of channel 0 output"]
        pub type Iso0R = crate::BitReader;
        #[doc = "Field `ISO0` writer - Idle state of channel 0 output"]
        pub type Iso0W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ISO0N` reader - Idle state of channel 0 complementary output"]
        pub type Iso0nR = crate::BitReader;
        #[doc = "Field `ISO0N` writer - Idle state of channel 0 complementary output"]
        pub type Iso0nW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ISO1` reader - Idle state of channel 1 output"]
        pub type Iso1R = crate::BitReader;
        #[doc = "Field `ISO1` writer - Idle state of channel 1 output"]
        pub type Iso1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ISO1N` reader - Idle state of channel 1 complementary output"]
        pub type Iso1nR = crate::BitReader;
        #[doc = "Field `ISO1N` writer - Idle state of channel 1 complementary output"]
        pub type Iso1nW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ISO2` reader - Idle state of channel 2 output"]
        pub type Iso2R = crate::BitReader;
        #[doc = "Field `ISO2` writer - Idle state of channel 2 output"]
        pub type Iso2W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ISO2N` reader - Idle state of channel 2 complementary output"]
        pub type Iso2nR = crate::BitReader;
        #[doc = "Field `ISO2N` writer - Idle state of channel 2 complementary output"]
        pub type Iso2nW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ISO3` reader - Idle state of channel 3 output"]
        pub type Iso3R = crate::BitReader;
        #[doc = "Field `ISO3` writer - Idle state of channel 3 output"]
        pub type Iso3W<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Commutation control shadow enable"]
            #[inline(always)]
            pub fn ccse(&self) -> CcseR {
                CcseR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 2 - Commutation control shadow register update control"]
            #[inline(always)]
            pub fn ccuc(&self) -> CcucR {
                CcucR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - DMA request source selection"]
            #[inline(always)]
            pub fn dmas(&self) -> DmasR {
                DmasR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Master mode control"]
            #[inline(always)]
            pub fn mmc(&self) -> MmcR {
                MmcR::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 7 - Channel 0 trigger input selection"]
            #[inline(always)]
            pub fn ti0s(&self) -> Ti0sR {
                Ti0sR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Idle state of channel 0 output"]
            #[inline(always)]
            pub fn iso0(&self) -> Iso0R {
                Iso0R::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Idle state of channel 0 complementary output"]
            #[inline(always)]
            pub fn iso0n(&self) -> Iso0nR {
                Iso0nR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Idle state of channel 1 output"]
            #[inline(always)]
            pub fn iso1(&self) -> Iso1R {
                Iso1R::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Idle state of channel 1 complementary output"]
            #[inline(always)]
            pub fn iso1n(&self) -> Iso1nR {
                Iso1nR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Idle state of channel 2 output"]
            #[inline(always)]
            pub fn iso2(&self) -> Iso2R {
                Iso2R::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Idle state of channel 2 complementary output"]
            #[inline(always)]
            pub fn iso2n(&self) -> Iso2nR {
                Iso2nR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Idle state of channel 3 output"]
            #[inline(always)]
            pub fn iso3(&self) -> Iso3R {
                Iso3R::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Commutation control shadow enable"]
            #[inline(always)]
            #[must_use]
            pub fn ccse(&mut self) -> CcseW<Ctl1Spec> {
                CcseW::new(self, 0)
            }
            #[doc = "Bit 2 - Commutation control shadow register update control"]
            #[inline(always)]
            #[must_use]
            pub fn ccuc(&mut self) -> CcucW<Ctl1Spec> {
                CcucW::new(self, 2)
            }
            #[doc = "Bit 3 - DMA request source selection"]
            #[inline(always)]
            #[must_use]
            pub fn dmas(&mut self) -> DmasW<Ctl1Spec> {
                DmasW::new(self, 3)
            }
            #[doc = "Bits 4:6 - Master mode control"]
            #[inline(always)]
            #[must_use]
            pub fn mmc(&mut self) -> MmcW<Ctl1Spec> {
                MmcW::new(self, 4)
            }
            #[doc = "Bit 7 - Channel 0 trigger input selection"]
            #[inline(always)]
            #[must_use]
            pub fn ti0s(&mut self) -> Ti0sW<Ctl1Spec> {
                Ti0sW::new(self, 7)
            }
            #[doc = "Bit 8 - Idle state of channel 0 output"]
            #[inline(always)]
            #[must_use]
            pub fn iso0(&mut self) -> Iso0W<Ctl1Spec> {
                Iso0W::new(self, 8)
            }
            #[doc = "Bit 9 - Idle state of channel 0 complementary output"]
            #[inline(always)]
            #[must_use]
            pub fn iso0n(&mut self) -> Iso0nW<Ctl1Spec> {
                Iso0nW::new(self, 9)
            }
            #[doc = "Bit 10 - Idle state of channel 1 output"]
            #[inline(always)]
            #[must_use]
            pub fn iso1(&mut self) -> Iso1W<Ctl1Spec> {
                Iso1W::new(self, 10)
            }
            #[doc = "Bit 11 - Idle state of channel 1 complementary output"]
            #[inline(always)]
            #[must_use]
            pub fn iso1n(&mut self) -> Iso1nW<Ctl1Spec> {
                Iso1nW::new(self, 11)
            }
            #[doc = "Bit 12 - Idle state of channel 2 output"]
            #[inline(always)]
            #[must_use]
            pub fn iso2(&mut self) -> Iso2W<Ctl1Spec> {
                Iso2W::new(self, 12)
            }
            #[doc = "Bit 13 - Idle state of channel 2 complementary output"]
            #[inline(always)]
            #[must_use]
            pub fn iso2n(&mut self) -> Iso2nW<Ctl1Spec> {
                Iso2nW::new(self, 13)
            }
            #[doc = "Bit 14 - Idle state of channel 3 output"]
            #[inline(always)]
            #[must_use]
            pub fn iso3(&mut self) -> Iso3W<Ctl1Spec> {
                Iso3W::new(self, 14)
            }
        }
        #[doc = "control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl1Spec;
        impl crate::RegisterSpec for Ctl1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl1::R`](R) reader structure"]
        impl crate::Readable for Ctl1Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"]
        impl crate::Writable for Ctl1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL1 to value 0"]
        impl crate::Resettable for Ctl1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "SMCFG (rw) register accessor: slave mode configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`smcfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`smcfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@smcfg`]
module"]
    #[doc(alias = "SMCFG")]
    pub type Smcfg = crate::Reg<smcfg::SmcfgSpec>;
    #[doc = "slave mode configuration register"]
    pub mod smcfg {
        #[doc = "Register `SMCFG` reader"]
        pub type R = crate::R<SmcfgSpec>;
        #[doc = "Register `SMCFG` writer"]
        pub type W = crate::W<SmcfgSpec>;
        #[doc = "Field `SMC` reader - Slave mode selection"]
        pub type SmcR = crate::FieldReader;
        #[doc = "Field `SMC` writer - Slave mode selection"]
        pub type SmcW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `TRGS` reader - Trigger selection"]
        pub type TrgsR = crate::FieldReader;
        #[doc = "Field `TRGS` writer - Trigger selection"]
        pub type TrgsW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `MSM` reader - Master/Slave mode"]
        pub type MsmR = crate::BitReader;
        #[doc = "Field `MSM` writer - Master/Slave mode"]
        pub type MsmW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ETFC` reader - External trigger filter control"]
        pub type EtfcR = crate::FieldReader;
        #[doc = "Field `ETFC` writer - External trigger filter control"]
        pub type EtfcW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `ETPSC` reader - External trigger prescaler"]
        pub type EtpscR = crate::FieldReader;
        #[doc = "Field `ETPSC` writer - External trigger prescaler"]
        pub type EtpscW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `SMC1` reader - Part of SMC for enable External clock mode1"]
        pub type Smc1R = crate::BitReader;
        #[doc = "Field `SMC1` writer - Part of SMC for enable External clock mode1"]
        pub type Smc1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ETP` reader - External trigger polarity"]
        pub type EtpR = crate::BitReader;
        #[doc = "Field `ETP` writer - External trigger polarity"]
        pub type EtpW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            pub fn smc(&self) -> SmcR {
                SmcR::new((self.bits & 7) as u8)
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn trgs(&self) -> TrgsR {
                TrgsR::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            pub fn msm(&self) -> MsmR {
                MsmR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:11 - External trigger filter control"]
            #[inline(always)]
            pub fn etfc(&self) -> EtfcR {
                EtfcR::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etpsc(&self) -> EtpscR {
                EtpscR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Part of SMC for enable External clock mode1"]
            #[inline(always)]
            pub fn smc1(&self) -> Smc1R {
                Smc1R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&self) -> EtpR {
                EtpR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Slave mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn smc(&mut self) -> SmcW<SmcfgSpec> {
                SmcW::new(self, 0)
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            #[must_use]
            pub fn trgs(&mut self) -> TrgsW<SmcfgSpec> {
                TrgsW::new(self, 4)
            }
            #[doc = "Bit 7 - Master/Slave mode"]
            #[inline(always)]
            #[must_use]
            pub fn msm(&mut self) -> MsmW<SmcfgSpec> {
                MsmW::new(self, 7)
            }
            #[doc = "Bits 8:11 - External trigger filter control"]
            #[inline(always)]
            #[must_use]
            pub fn etfc(&mut self) -> EtfcW<SmcfgSpec> {
                EtfcW::new(self, 8)
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn etpsc(&mut self) -> EtpscW<SmcfgSpec> {
                EtpscW::new(self, 12)
            }
            #[doc = "Bit 14 - Part of SMC for enable External clock mode1"]
            #[inline(always)]
            #[must_use]
            pub fn smc1(&mut self) -> Smc1W<SmcfgSpec> {
                Smc1W::new(self, 14)
            }
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            #[must_use]
            pub fn etp(&mut self) -> EtpW<SmcfgSpec> {
                EtpW::new(self, 15)
            }
        }
        #[doc = "slave mode configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`smcfg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`smcfg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SmcfgSpec;
        impl crate::RegisterSpec for SmcfgSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`smcfg::R`](R) reader structure"]
        impl crate::Readable for SmcfgSpec {}
        #[doc = "`write(|w| ..)` method takes [`smcfg::W`](W) writer structure"]
        impl crate::Writable for SmcfgSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SMCFG to value 0"]
        impl crate::Resettable for SmcfgSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DMAINTEN (rw) register accessor: DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmainten::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmainten::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmainten`]
module"]
    #[doc(alias = "DMAINTEN")]
    pub type Dmainten = crate::Reg<dmainten::DmaintenSpec>;
    #[doc = "DMA/Interrupt enable register"]
    pub mod dmainten {
        #[doc = "Register `DMAINTEN` reader"]
        pub type R = crate::R<DmaintenSpec>;
        #[doc = "Register `DMAINTEN` writer"]
        pub type W = crate::W<DmaintenSpec>;
        #[doc = "Field `UPIE` reader - Update interrupt enable"]
        pub type UpieR = crate::BitReader;
        #[doc = "Field `UPIE` writer - Update interrupt enable"]
        pub type UpieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0IE` reader - Channel 0 capture/compare interrupt enable"]
        pub type Ch0ieR = crate::BitReader;
        #[doc = "Field `CH0IE` writer - Channel 0 capture/compare interrupt enable"]
        pub type Ch0ieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1IE` reader - Channel 1 capture/compare interrupt enable"]
        pub type Ch1ieR = crate::BitReader;
        #[doc = "Field `CH1IE` writer - Channel 1 capture/compare interrupt enable"]
        pub type Ch1ieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2IE` reader - Channel 2 capture/compare interrupt enable"]
        pub type Ch2ieR = crate::BitReader;
        #[doc = "Field `CH2IE` writer - Channel 2 capture/compare interrupt enable"]
        pub type Ch2ieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3IE` reader - Channel 3 capture/compare interrupt enable"]
        pub type Ch3ieR = crate::BitReader;
        #[doc = "Field `CH3IE` writer - Channel 3 capture/compare interrupt enable"]
        pub type Ch3ieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMTIE` reader - commutation interrupt enable"]
        pub type CmtieR = crate::BitReader;
        #[doc = "Field `CMTIE` writer - commutation interrupt enable"]
        pub type CmtieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TRGIE` reader - Trigger interrupt enable"]
        pub type TrgieR = crate::BitReader;
        #[doc = "Field `TRGIE` writer - Trigger interrupt enable"]
        pub type TrgieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BRKIE` reader - Break interrupt enable"]
        pub type BrkieR = crate::BitReader;
        #[doc = "Field `BRKIE` writer - Break interrupt enable"]
        pub type BrkieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UPDEN` reader - Update DMA request enable"]
        pub type UpdenR = crate::BitReader;
        #[doc = "Field `UPDEN` writer - Update DMA request enable"]
        pub type UpdenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0DEN` reader - Channel 0 capture/compare DMA request enable"]
        pub type Ch0denR = crate::BitReader;
        #[doc = "Field `CH0DEN` writer - Channel 0 capture/compare DMA request enable"]
        pub type Ch0denW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1DEN` reader - Channel 1 capture/compare DMA request enable"]
        pub type Ch1denR = crate::BitReader;
        #[doc = "Field `CH1DEN` writer - Channel 1 capture/compare DMA request enable"]
        pub type Ch1denW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2DEN` reader - Channel 2 capture/compare DMA request enable"]
        pub type Ch2denR = crate::BitReader;
        #[doc = "Field `CH2DEN` writer - Channel 2 capture/compare DMA request enable"]
        pub type Ch2denW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3DEN` reader - Channel 3 capture/compare DMA request enable"]
        pub type Ch3denR = crate::BitReader;
        #[doc = "Field `CH3DEN` writer - Channel 3 capture/compare DMA request enable"]
        pub type Ch3denW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMTDEN` reader - Commutation DMA request enable"]
        pub type CmtdenR = crate::BitReader;
        #[doc = "Field `CMTDEN` writer - Commutation DMA request enable"]
        pub type CmtdenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TRGDEN` reader - Trigger DMA request enable"]
        pub type TrgdenR = crate::BitReader;
        #[doc = "Field `TRGDEN` writer - Trigger DMA request enable"]
        pub type TrgdenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn upie(&self) -> UpieR {
                UpieR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Channel 0 capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ch0ie(&self) -> Ch0ieR {
                Ch0ieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Channel 1 capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ch1ie(&self) -> Ch1ieR {
                Ch1ieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Channel 2 capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ch2ie(&self) -> Ch2ieR {
                Ch2ieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Channel 3 capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ch3ie(&self) -> Ch3ieR {
                Ch3ieR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - commutation interrupt enable"]
            #[inline(always)]
            pub fn cmtie(&self) -> CmtieR {
                CmtieR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn trgie(&self) -> TrgieR {
                TrgieR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            pub fn brkie(&self) -> BrkieR {
                BrkieR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn upden(&self) -> UpdenR {
                UpdenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Channel 0 capture/compare DMA request enable"]
            #[inline(always)]
            pub fn ch0den(&self) -> Ch0denR {
                Ch0denR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Channel 1 capture/compare DMA request enable"]
            #[inline(always)]
            pub fn ch1den(&self) -> Ch1denR {
                Ch1denR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Channel 2 capture/compare DMA request enable"]
            #[inline(always)]
            pub fn ch2den(&self) -> Ch2denR {
                Ch2denR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Channel 3 capture/compare DMA request enable"]
            #[inline(always)]
            pub fn ch3den(&self) -> Ch3denR {
                Ch3denR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Commutation DMA request enable"]
            #[inline(always)]
            pub fn cmtden(&self) -> CmtdenR {
                CmtdenR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn trgden(&self) -> TrgdenR {
                TrgdenR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn upie(&mut self) -> UpieW<DmaintenSpec> {
                UpieW::new(self, 0)
            }
            #[doc = "Bit 1 - Channel 0 capture/compare interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch0ie(&mut self) -> Ch0ieW<DmaintenSpec> {
                Ch0ieW::new(self, 1)
            }
            #[doc = "Bit 2 - Channel 1 capture/compare interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch1ie(&mut self) -> Ch1ieW<DmaintenSpec> {
                Ch1ieW::new(self, 2)
            }
            #[doc = "Bit 3 - Channel 2 capture/compare interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2ie(&mut self) -> Ch2ieW<DmaintenSpec> {
                Ch2ieW::new(self, 3)
            }
            #[doc = "Bit 4 - Channel 3 capture/compare interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch3ie(&mut self) -> Ch3ieW<DmaintenSpec> {
                Ch3ieW::new(self, 4)
            }
            #[doc = "Bit 5 - commutation interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmtie(&mut self) -> CmtieW<DmaintenSpec> {
                CmtieW::new(self, 5)
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn trgie(&mut self) -> TrgieW<DmaintenSpec> {
                TrgieW::new(self, 6)
            }
            #[doc = "Bit 7 - Break interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn brkie(&mut self) -> BrkieW<DmaintenSpec> {
                BrkieW::new(self, 7)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn upden(&mut self) -> UpdenW<DmaintenSpec> {
                UpdenW::new(self, 8)
            }
            #[doc = "Bit 9 - Channel 0 capture/compare DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch0den(&mut self) -> Ch0denW<DmaintenSpec> {
                Ch0denW::new(self, 9)
            }
            #[doc = "Bit 10 - Channel 1 capture/compare DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch1den(&mut self) -> Ch1denW<DmaintenSpec> {
                Ch1denW::new(self, 10)
            }
            #[doc = "Bit 11 - Channel 2 capture/compare DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2den(&mut self) -> Ch2denW<DmaintenSpec> {
                Ch2denW::new(self, 11)
            }
            #[doc = "Bit 12 - Channel 3 capture/compare DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch3den(&mut self) -> Ch3denW<DmaintenSpec> {
                Ch3denW::new(self, 12)
            }
            #[doc = "Bit 13 - Commutation DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn cmtden(&mut self) -> CmtdenW<DmaintenSpec> {
                CmtdenW::new(self, 13)
            }
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn trgden(&mut self) -> TrgdenW<DmaintenSpec> {
                TrgdenW::new(self, 14)
            }
        }
        #[doc = "DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmainten::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmainten::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DmaintenSpec;
        impl crate::RegisterSpec for DmaintenSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dmainten::R`](R) reader structure"]
        impl crate::Readable for DmaintenSpec {}
        #[doc = "`write(|w| ..)` method takes [`dmainten::W`](W) writer structure"]
        impl crate::Writable for DmaintenSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DMAINTEN to value 0"]
        impl crate::Resettable for DmaintenSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "INTF (rw) register accessor: Interrupt flag register\n\nYou can [`read`](crate::Reg::read) this register and get [`intf::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intf::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intf`]
module"]
    #[doc(alias = "INTF")]
    pub type Intf = crate::Reg<intf::IntfSpec>;
    #[doc = "Interrupt flag register"]
    pub mod intf {
        #[doc = "Register `INTF` reader"]
        pub type R = crate::R<IntfSpec>;
        #[doc = "Register `INTF` writer"]
        pub type W = crate::W<IntfSpec>;
        #[doc = "Field `UPIF` reader - Update interrupt flag"]
        pub type UpifR = crate::BitReader;
        #[doc = "Field `UPIF` writer - Update interrupt flag"]
        pub type UpifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0IF` reader - Channel 0 capture/compare interrupt flag"]
        pub type Ch0ifR = crate::BitReader;
        #[doc = "Field `CH0IF` writer - Channel 0 capture/compare interrupt flag"]
        pub type Ch0ifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1IF` reader - Channel 1 capture/compare interrupt flag"]
        pub type Ch1ifR = crate::BitReader;
        #[doc = "Field `CH1IF` writer - Channel 1 capture/compare interrupt flag"]
        pub type Ch1ifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2IF` reader - Channel 2 capture/compare interrupt flag"]
        pub type Ch2ifR = crate::BitReader;
        #[doc = "Field `CH2IF` writer - Channel 2 capture/compare interrupt flag"]
        pub type Ch2ifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3IF` reader - Channel 3 capture/compare interrupt flag"]
        pub type Ch3ifR = crate::BitReader;
        #[doc = "Field `CH3IF` writer - Channel 3 capture/compare interrupt flag"]
        pub type Ch3ifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMTIF` reader - Channel commutation interrupt flag"]
        pub type CmtifR = crate::BitReader;
        #[doc = "Field `CMTIF` writer - Channel commutation interrupt flag"]
        pub type CmtifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TRGIF` reader - Trigger interrupt flag"]
        pub type TrgifR = crate::BitReader;
        #[doc = "Field `TRGIF` writer - Trigger interrupt flag"]
        pub type TrgifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BRKIF` reader - Break interrupt flag"]
        pub type BrkifR = crate::BitReader;
        #[doc = "Field `BRKIF` writer - Break interrupt flag"]
        pub type BrkifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0OF` reader - Channel 0 over capture flag"]
        pub type Ch0ofR = crate::BitReader;
        #[doc = "Field `CH0OF` writer - Channel 0 over capture flag"]
        pub type Ch0ofW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1OF` reader - Channel 1 over capture flag"]
        pub type Ch1ofR = crate::BitReader;
        #[doc = "Field `CH1OF` writer - Channel 1 over capture flag"]
        pub type Ch1ofW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2OF` reader - Channel 2 over capture flag"]
        pub type Ch2ofR = crate::BitReader;
        #[doc = "Field `CH2OF` writer - Channel 2 over capture flag"]
        pub type Ch2ofW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3OF` reader - Channel 3 over capture flag"]
        pub type Ch3ofR = crate::BitReader;
        #[doc = "Field `CH3OF` writer - Channel 3 over capture flag"]
        pub type Ch3ofW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn upif(&self) -> UpifR {
                UpifR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Channel 0 capture/compare interrupt flag"]
            #[inline(always)]
            pub fn ch0if(&self) -> Ch0ifR {
                Ch0ifR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Channel 1 capture/compare interrupt flag"]
            #[inline(always)]
            pub fn ch1if(&self) -> Ch1ifR {
                Ch1ifR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Channel 2 capture/compare interrupt flag"]
            #[inline(always)]
            pub fn ch2if(&self) -> Ch2ifR {
                Ch2ifR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Channel 3 capture/compare interrupt flag"]
            #[inline(always)]
            pub fn ch3if(&self) -> Ch3ifR {
                Ch3ifR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Channel commutation interrupt flag"]
            #[inline(always)]
            pub fn cmtif(&self) -> CmtifR {
                CmtifR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn trgif(&self) -> TrgifR {
                TrgifR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            pub fn brkif(&self) -> BrkifR {
                BrkifR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 9 - Channel 0 over capture flag"]
            #[inline(always)]
            pub fn ch0of(&self) -> Ch0ofR {
                Ch0ofR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Channel 1 over capture flag"]
            #[inline(always)]
            pub fn ch1of(&self) -> Ch1ofR {
                Ch1ofR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Channel 2 over capture flag"]
            #[inline(always)]
            pub fn ch2of(&self) -> Ch2ofR {
                Ch2ofR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Channel 3 over capture flag"]
            #[inline(always)]
            pub fn ch3of(&self) -> Ch3ofR {
                Ch3ofR::new(((self.bits >> 12) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn upif(&mut self) -> UpifW<IntfSpec> {
                UpifW::new(self, 0)
            }
            #[doc = "Bit 1 - Channel 0 capture/compare interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch0if(&mut self) -> Ch0ifW<IntfSpec> {
                Ch0ifW::new(self, 1)
            }
            #[doc = "Bit 2 - Channel 1 capture/compare interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch1if(&mut self) -> Ch1ifW<IntfSpec> {
                Ch1ifW::new(self, 2)
            }
            #[doc = "Bit 3 - Channel 2 capture/compare interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch2if(&mut self) -> Ch2ifW<IntfSpec> {
                Ch2ifW::new(self, 3)
            }
            #[doc = "Bit 4 - Channel 3 capture/compare interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch3if(&mut self) -> Ch3ifW<IntfSpec> {
                Ch3ifW::new(self, 4)
            }
            #[doc = "Bit 5 - Channel commutation interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn cmtif(&mut self) -> CmtifW<IntfSpec> {
                CmtifW::new(self, 5)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn trgif(&mut self) -> TrgifW<IntfSpec> {
                TrgifW::new(self, 6)
            }
            #[doc = "Bit 7 - Break interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn brkif(&mut self) -> BrkifW<IntfSpec> {
                BrkifW::new(self, 7)
            }
            #[doc = "Bit 9 - Channel 0 over capture flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch0of(&mut self) -> Ch0ofW<IntfSpec> {
                Ch0ofW::new(self, 9)
            }
            #[doc = "Bit 10 - Channel 1 over capture flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch1of(&mut self) -> Ch1ofW<IntfSpec> {
                Ch1ofW::new(self, 10)
            }
            #[doc = "Bit 11 - Channel 2 over capture flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch2of(&mut self) -> Ch2ofW<IntfSpec> {
                Ch2ofW::new(self, 11)
            }
            #[doc = "Bit 12 - Channel 3 over capture flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch3of(&mut self) -> Ch3ofW<IntfSpec> {
                Ch3ofW::new(self, 12)
            }
        }
        #[doc = "Interrupt flag register\n\nYou can [`read`](crate::Reg::read) this register and get [`intf::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intf::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntfSpec;
        impl crate::RegisterSpec for IntfSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`intf::R`](R) reader structure"]
        impl crate::Readable for IntfSpec {}
        #[doc = "`write(|w| ..)` method takes [`intf::W`](W) writer structure"]
        impl crate::Writable for IntfSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets INTF to value 0"]
        impl crate::Resettable for IntfSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "SWEVG (w) register accessor: Software event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swevg::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@swevg`]
module"]
    #[doc(alias = "SWEVG")]
    pub type Swevg = crate::Reg<swevg::SwevgSpec>;
    #[doc = "Software event generation register"]
    pub mod swevg {
        #[doc = "Register `SWEVG` writer"]
        pub type W = crate::W<SwevgSpec>;
        #[doc = "Field `UPG` writer - Update event generation"]
        pub type UpgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0G` writer - Channel 0 capture or compare event generation"]
        pub type Ch0gW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1G` writer - Channel 1 capture or compare event generation"]
        pub type Ch1gW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2G` writer - Channel 2 capture or compare event generation"]
        pub type Ch2gW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3G` writer - Channel 3 capture or compare event generation"]
        pub type Ch3gW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CMTG` writer - Channel commutation event generation"]
        pub type CmtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TRGG` writer - Trigger event generation"]
        pub type TrggW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BRKG` writer - Break event generation"]
        pub type BrkgW<'a, REG> = crate::BitWriter<'a, REG>;
        impl W {
            #[doc = "Bit 0 - Update event generation"]
            #[inline(always)]
            #[must_use]
            pub fn upg(&mut self) -> UpgW<SwevgSpec> {
                UpgW::new(self, 0)
            }
            #[doc = "Bit 1 - Channel 0 capture or compare event generation"]
            #[inline(always)]
            #[must_use]
            pub fn ch0g(&mut self) -> Ch0gW<SwevgSpec> {
                Ch0gW::new(self, 1)
            }
            #[doc = "Bit 2 - Channel 1 capture or compare event generation"]
            #[inline(always)]
            #[must_use]
            pub fn ch1g(&mut self) -> Ch1gW<SwevgSpec> {
                Ch1gW::new(self, 2)
            }
            #[doc = "Bit 3 - Channel 2 capture or compare event generation"]
            #[inline(always)]
            #[must_use]
            pub fn ch2g(&mut self) -> Ch2gW<SwevgSpec> {
                Ch2gW::new(self, 3)
            }
            #[doc = "Bit 4 - Channel 3 capture or compare event generation"]
            #[inline(always)]
            #[must_use]
            pub fn ch3g(&mut self) -> Ch3gW<SwevgSpec> {
                Ch3gW::new(self, 4)
            }
            #[doc = "Bit 5 - Channel commutation event generation"]
            #[inline(always)]
            #[must_use]
            pub fn cmtg(&mut self) -> CmtgW<SwevgSpec> {
                CmtgW::new(self, 5)
            }
            #[doc = "Bit 6 - Trigger event generation"]
            #[inline(always)]
            #[must_use]
            pub fn trgg(&mut self) -> TrggW<SwevgSpec> {
                TrggW::new(self, 6)
            }
            #[doc = "Bit 7 - Break event generation"]
            #[inline(always)]
            #[must_use]
            pub fn brkg(&mut self) -> BrkgW<SwevgSpec> {
                BrkgW::new(self, 7)
            }
        }
        #[doc = "Software event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swevg::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SwevgSpec;
        impl crate::RegisterSpec for SwevgSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`swevg::W`](W) writer structure"]
        impl crate::Writable for SwevgSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SWEVG to value 0"]
        impl crate::Resettable for SwevgSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CHCTL0_Output (rw) register accessor: Channel control register 0 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl0_output::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl0_output::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@chctl0_output`]
module"]
    #[doc(alias = "CHCTL0_Output")]
    pub type Chctl0Output = crate::Reg<chctl0_output::Chctl0OutputSpec>;
    #[doc = "Channel control register 0 (output mode)"]
    pub mod chctl0_output {
        #[doc = "Register `CHCTL0_Output` reader"]
        pub type R = crate::R<Chctl0OutputSpec>;
        #[doc = "Register `CHCTL0_Output` writer"]
        pub type W = crate::W<Chctl0OutputSpec>;
        #[doc = "Field `CH0MS` reader - Channel 0 I/O mode selection"]
        pub type Ch0msR = crate::FieldReader;
        #[doc = "Field `CH0MS` writer - Channel 0 I/O mode selection"]
        pub type Ch0msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH0COMFEN` reader - Channel 0 output compare fast enable"]
        pub type Ch0comfenR = crate::BitReader;
        #[doc = "Field `CH0COMFEN` writer - Channel 0 output compare fast enable"]
        pub type Ch0comfenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0COMSEN` reader - Channel 0 compare output shadow enable"]
        pub type Ch0comsenR = crate::BitReader;
        #[doc = "Field `CH0COMSEN` writer - Channel 0 compare output shadow enable"]
        pub type Ch0comsenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0COMCTL` reader - Channel 0 compare output control"]
        pub type Ch0comctlR = crate::FieldReader;
        #[doc = "Field `CH0COMCTL` writer - Channel 0 compare output control"]
        pub type Ch0comctlW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `CH0COMCEN` reader - Channel 0 output compare clear enable"]
        pub type Ch0comcenR = crate::BitReader;
        #[doc = "Field `CH0COMCEN` writer - Channel 0 output compare clear enable"]
        pub type Ch0comcenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1MS` reader - Channel 1 mode selection"]
        pub type Ch1msR = crate::FieldReader;
        #[doc = "Field `CH1MS` writer - Channel 1 mode selection"]
        pub type Ch1msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH1COMFEN` reader - Channel 1 output compare fast enable"]
        pub type Ch1comfenR = crate::BitReader;
        #[doc = "Field `CH1COMFEN` writer - Channel 1 output compare fast enable"]
        pub type Ch1comfenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1COMSEN` reader - Channel 1 output compare shadow enable"]
        pub type Ch1comsenR = crate::BitReader;
        #[doc = "Field `CH1COMSEN` writer - Channel 1 output compare shadow enable"]
        pub type Ch1comsenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1COMCTL` reader - Channel 1 compare output control"]
        pub type Ch1comctlR = crate::FieldReader;
        #[doc = "Field `CH1COMCTL` writer - Channel 1 compare output control"]
        pub type Ch1comctlW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `CH1COMCEN` reader - Channel 1 output compare clear enable"]
        pub type Ch1comcenR = crate::BitReader;
        #[doc = "Field `CH1COMCEN` writer - Channel 1 output compare clear enable"]
        pub type Ch1comcenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:1 - Channel 0 I/O mode selection"]
            #[inline(always)]
            pub fn ch0ms(&self) -> Ch0msR {
                Ch0msR::new((self.bits & 3) as u8)
            }
            #[doc = "Bit 2 - Channel 0 output compare fast enable"]
            #[inline(always)]
            pub fn ch0comfen(&self) -> Ch0comfenR {
                Ch0comfenR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Channel 0 compare output shadow enable"]
            #[inline(always)]
            pub fn ch0comsen(&self) -> Ch0comsenR {
                Ch0comsenR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Channel 0 compare output control"]
            #[inline(always)]
            pub fn ch0comctl(&self) -> Ch0comctlR {
                Ch0comctlR::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 7 - Channel 0 output compare clear enable"]
            #[inline(always)]
            pub fn ch0comcen(&self) -> Ch0comcenR {
                Ch0comcenR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Channel 1 mode selection"]
            #[inline(always)]
            pub fn ch1ms(&self) -> Ch1msR {
                Ch1msR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 10 - Channel 1 output compare fast enable"]
            #[inline(always)]
            pub fn ch1comfen(&self) -> Ch1comfenR {
                Ch1comfenR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Channel 1 output compare shadow enable"]
            #[inline(always)]
            pub fn ch1comsen(&self) -> Ch1comsenR {
                Ch1comsenR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:14 - Channel 1 compare output control"]
            #[inline(always)]
            pub fn ch1comctl(&self) -> Ch1comctlR {
                Ch1comctlR::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bit 15 - Channel 1 output compare clear enable"]
            #[inline(always)]
            pub fn ch1comcen(&self) -> Ch1comcenR {
                Ch1comcenR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Channel 0 I/O mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch0ms(&mut self) -> Ch0msW<Chctl0OutputSpec> {
                Ch0msW::new(self, 0)
            }
            #[doc = "Bit 2 - Channel 0 output compare fast enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch0comfen(&mut self) -> Ch0comfenW<Chctl0OutputSpec> {
                Ch0comfenW::new(self, 2)
            }
            #[doc = "Bit 3 - Channel 0 compare output shadow enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch0comsen(&mut self) -> Ch0comsenW<Chctl0OutputSpec> {
                Ch0comsenW::new(self, 3)
            }
            #[doc = "Bits 4:6 - Channel 0 compare output control"]
            #[inline(always)]
            #[must_use]
            pub fn ch0comctl(&mut self) -> Ch0comctlW<Chctl0OutputSpec> {
                Ch0comctlW::new(self, 4)
            }
            #[doc = "Bit 7 - Channel 0 output compare clear enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch0comcen(&mut self) -> Ch0comcenW<Chctl0OutputSpec> {
                Ch0comcenW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Channel 1 mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch1ms(&mut self) -> Ch1msW<Chctl0OutputSpec> {
                Ch1msW::new(self, 8)
            }
            #[doc = "Bit 10 - Channel 1 output compare fast enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch1comfen(&mut self) -> Ch1comfenW<Chctl0OutputSpec> {
                Ch1comfenW::new(self, 10)
            }
            #[doc = "Bit 11 - Channel 1 output compare shadow enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch1comsen(&mut self) -> Ch1comsenW<Chctl0OutputSpec> {
                Ch1comsenW::new(self, 11)
            }
            #[doc = "Bits 12:14 - Channel 1 compare output control"]
            #[inline(always)]
            #[must_use]
            pub fn ch1comctl(&mut self) -> Ch1comctlW<Chctl0OutputSpec> {
                Ch1comctlW::new(self, 12)
            }
            #[doc = "Bit 15 - Channel 1 output compare clear enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch1comcen(&mut self) -> Ch1comcenW<Chctl0OutputSpec> {
                Ch1comcenW::new(self, 15)
            }
        }
        #[doc = "Channel control register 0 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl0_output::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl0_output::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Chctl0OutputSpec;
        impl crate::RegisterSpec for Chctl0OutputSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`chctl0_output::R`](R) reader structure"]
        impl crate::Readable for Chctl0OutputSpec {}
        #[doc = "`write(|w| ..)` method takes [`chctl0_output::W`](W) writer structure"]
        impl crate::Writable for Chctl0OutputSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CHCTL0_Output to value 0"]
        impl crate::Resettable for Chctl0OutputSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CHCTL0_Input (rw) register accessor: Channel control register 0 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl0_input::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl0_input::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@chctl0_input`]
module"]
    #[doc(alias = "CHCTL0_Input")]
    pub type Chctl0Input = crate::Reg<chctl0_input::Chctl0InputSpec>;
    #[doc = "Channel control register 0 (input mode)"]
    pub mod chctl0_input {
        #[doc = "Register `CHCTL0_Input` reader"]
        pub type R = crate::R<Chctl0InputSpec>;
        #[doc = "Register `CHCTL0_Input` writer"]
        pub type W = crate::W<Chctl0InputSpec>;
        #[doc = "Field `CH0MS` reader - Channel 0 mode selection"]
        pub type Ch0msR = crate::FieldReader;
        #[doc = "Field `CH0MS` writer - Channel 0 mode selection"]
        pub type Ch0msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH0CAPPSC` reader - Channel 0 input capture prescaler"]
        pub type Ch0cappscR = crate::FieldReader;
        #[doc = "Field `CH0CAPPSC` writer - Channel 0 input capture prescaler"]
        pub type Ch0cappscW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH0CAPFLT` reader - Channel 0 input capture filter control"]
        pub type Ch0capfltR = crate::FieldReader;
        #[doc = "Field `CH0CAPFLT` writer - Channel 0 input capture filter control"]
        pub type Ch0capfltW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `CH1MS` reader - Channel 1 mode selection"]
        pub type Ch1msR = crate::FieldReader;
        #[doc = "Field `CH1MS` writer - Channel 1 mode selection"]
        pub type Ch1msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH1CAPPSC` reader - Channel 1 input capture prescaler"]
        pub type Ch1cappscR = crate::FieldReader;
        #[doc = "Field `CH1CAPPSC` writer - Channel 1 input capture prescaler"]
        pub type Ch1cappscW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH1CAPFLT` reader - Channel 1 input capture filter control"]
        pub type Ch1capfltR = crate::FieldReader;
        #[doc = "Field `CH1CAPFLT` writer - Channel 1 input capture filter control"]
        pub type Ch1capfltW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:1 - Channel 0 mode selection"]
            #[inline(always)]
            pub fn ch0ms(&self) -> Ch0msR {
                Ch0msR::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - Channel 0 input capture prescaler"]
            #[inline(always)]
            pub fn ch0cappsc(&self) -> Ch0cappscR {
                Ch0cappscR::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:7 - Channel 0 input capture filter control"]
            #[inline(always)]
            pub fn ch0capflt(&self) -> Ch0capfltR {
                Ch0capfltR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:9 - Channel 1 mode selection"]
            #[inline(always)]
            pub fn ch1ms(&self) -> Ch1msR {
                Ch1msR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Channel 1 input capture prescaler"]
            #[inline(always)]
            pub fn ch1cappsc(&self) -> Ch1cappscR {
                Ch1cappscR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:15 - Channel 1 input capture filter control"]
            #[inline(always)]
            pub fn ch1capflt(&self) -> Ch1capfltR {
                Ch1capfltR::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Channel 0 mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch0ms(&mut self) -> Ch0msW<Chctl0InputSpec> {
                Ch0msW::new(self, 0)
            }
            #[doc = "Bits 2:3 - Channel 0 input capture prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn ch0cappsc(&mut self) -> Ch0cappscW<Chctl0InputSpec> {
                Ch0cappscW::new(self, 2)
            }
            #[doc = "Bits 4:7 - Channel 0 input capture filter control"]
            #[inline(always)]
            #[must_use]
            pub fn ch0capflt(&mut self) -> Ch0capfltW<Chctl0InputSpec> {
                Ch0capfltW::new(self, 4)
            }
            #[doc = "Bits 8:9 - Channel 1 mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch1ms(&mut self) -> Ch1msW<Chctl0InputSpec> {
                Ch1msW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Channel 1 input capture prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn ch1cappsc(&mut self) -> Ch1cappscW<Chctl0InputSpec> {
                Ch1cappscW::new(self, 10)
            }
            #[doc = "Bits 12:15 - Channel 1 input capture filter control"]
            #[inline(always)]
            #[must_use]
            pub fn ch1capflt(&mut self) -> Ch1capfltW<Chctl0InputSpec> {
                Ch1capfltW::new(self, 12)
            }
        }
        #[doc = "Channel control register 0 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl0_input::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl0_input::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Chctl0InputSpec;
        impl crate::RegisterSpec for Chctl0InputSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`chctl0_input::R`](R) reader structure"]
        impl crate::Readable for Chctl0InputSpec {}
        #[doc = "`write(|w| ..)` method takes [`chctl0_input::W`](W) writer structure"]
        impl crate::Writable for Chctl0InputSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CHCTL0_Input to value 0"]
        impl crate::Resettable for Chctl0InputSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CHCTL1_Output (rw) register accessor: Channel control register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl1_output::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl1_output::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@chctl1_output`]
module"]
    #[doc(alias = "CHCTL1_Output")]
    pub type Chctl1Output = crate::Reg<chctl1_output::Chctl1OutputSpec>;
    #[doc = "Channel control register 1 (output mode)"]
    pub mod chctl1_output {
        #[doc = "Register `CHCTL1_Output` reader"]
        pub type R = crate::R<Chctl1OutputSpec>;
        #[doc = "Register `CHCTL1_Output` writer"]
        pub type W = crate::W<Chctl1OutputSpec>;
        #[doc = "Field `CH2MS` reader - Channel 2 I/O mode selection"]
        pub type Ch2msR = crate::FieldReader;
        #[doc = "Field `CH2MS` writer - Channel 2 I/O mode selection"]
        pub type Ch2msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH2COMFEN` reader - Channel 2 output compare fast enable"]
        pub type Ch2comfenR = crate::BitReader;
        #[doc = "Field `CH2COMFEN` writer - Channel 2 output compare fast enable"]
        pub type Ch2comfenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2COMSEN` reader - Channel 2 compare output shadow enable"]
        pub type Ch2comsenR = crate::BitReader;
        #[doc = "Field `CH2COMSEN` writer - Channel 2 compare output shadow enable"]
        pub type Ch2comsenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2COMCTL` reader - Channel 2 compare output control"]
        pub type Ch2comctlR = crate::FieldReader;
        #[doc = "Field `CH2COMCTL` writer - Channel 2 compare output control"]
        pub type Ch2comctlW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `CH2COMCEN` reader - Channel 2 output compare clear enable"]
        pub type Ch2comcenR = crate::BitReader;
        #[doc = "Field `CH2COMCEN` writer - Channel 2 output compare clear enable"]
        pub type Ch2comcenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3MS` reader - Channel 3 mode selection"]
        pub type Ch3msR = crate::FieldReader;
        #[doc = "Field `CH3MS` writer - Channel 3 mode selection"]
        pub type Ch3msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH3COMFEN` reader - Channel 3 output compare fast enable"]
        pub type Ch3comfenR = crate::BitReader;
        #[doc = "Field `CH3COMFEN` writer - Channel 3 output compare fast enable"]
        pub type Ch3comfenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3COMSEN` reader - Channel 3 output compare shadow enable"]
        pub type Ch3comsenR = crate::BitReader;
        #[doc = "Field `CH3COMSEN` writer - Channel 3 output compare shadow enable"]
        pub type Ch3comsenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3COMCTL` reader - Channel 3 compare output control"]
        pub type Ch3comctlR = crate::FieldReader;
        #[doc = "Field `CH3COMCTL` writer - Channel 3 compare output control"]
        pub type Ch3comctlW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `CH3COMCEN` reader - Channel 3 output compare clear enable"]
        pub type Ch3comcenR = crate::BitReader;
        #[doc = "Field `CH3COMCEN` writer - Channel 3 output compare clear enable"]
        pub type Ch3comcenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:1 - Channel 2 I/O mode selection"]
            #[inline(always)]
            pub fn ch2ms(&self) -> Ch2msR {
                Ch2msR::new((self.bits & 3) as u8)
            }
            #[doc = "Bit 2 - Channel 2 output compare fast enable"]
            #[inline(always)]
            pub fn ch2comfen(&self) -> Ch2comfenR {
                Ch2comfenR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Channel 2 compare output shadow enable"]
            #[inline(always)]
            pub fn ch2comsen(&self) -> Ch2comsenR {
                Ch2comsenR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Channel 2 compare output control"]
            #[inline(always)]
            pub fn ch2comctl(&self) -> Ch2comctlR {
                Ch2comctlR::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 7 - Channel 2 output compare clear enable"]
            #[inline(always)]
            pub fn ch2comcen(&self) -> Ch2comcenR {
                Ch2comcenR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Channel 3 mode selection"]
            #[inline(always)]
            pub fn ch3ms(&self) -> Ch3msR {
                Ch3msR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 10 - Channel 3 output compare fast enable"]
            #[inline(always)]
            pub fn ch3comfen(&self) -> Ch3comfenR {
                Ch3comfenR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Channel 3 output compare shadow enable"]
            #[inline(always)]
            pub fn ch3comsen(&self) -> Ch3comsenR {
                Ch3comsenR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:14 - Channel 3 compare output control"]
            #[inline(always)]
            pub fn ch3comctl(&self) -> Ch3comctlR {
                Ch3comctlR::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bit 15 - Channel 3 output compare clear enable"]
            #[inline(always)]
            pub fn ch3comcen(&self) -> Ch3comcenR {
                Ch3comcenR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Channel 2 I/O mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch2ms(&mut self) -> Ch2msW<Chctl1OutputSpec> {
                Ch2msW::new(self, 0)
            }
            #[doc = "Bit 2 - Channel 2 output compare fast enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2comfen(&mut self) -> Ch2comfenW<Chctl1OutputSpec> {
                Ch2comfenW::new(self, 2)
            }
            #[doc = "Bit 3 - Channel 2 compare output shadow enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2comsen(&mut self) -> Ch2comsenW<Chctl1OutputSpec> {
                Ch2comsenW::new(self, 3)
            }
            #[doc = "Bits 4:6 - Channel 2 compare output control"]
            #[inline(always)]
            #[must_use]
            pub fn ch2comctl(&mut self) -> Ch2comctlW<Chctl1OutputSpec> {
                Ch2comctlW::new(self, 4)
            }
            #[doc = "Bit 7 - Channel 2 output compare clear enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2comcen(&mut self) -> Ch2comcenW<Chctl1OutputSpec> {
                Ch2comcenW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Channel 3 mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch3ms(&mut self) -> Ch3msW<Chctl1OutputSpec> {
                Ch3msW::new(self, 8)
            }
            #[doc = "Bit 10 - Channel 3 output compare fast enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch3comfen(&mut self) -> Ch3comfenW<Chctl1OutputSpec> {
                Ch3comfenW::new(self, 10)
            }
            #[doc = "Bit 11 - Channel 3 output compare shadow enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch3comsen(&mut self) -> Ch3comsenW<Chctl1OutputSpec> {
                Ch3comsenW::new(self, 11)
            }
            #[doc = "Bits 12:14 - Channel 3 compare output control"]
            #[inline(always)]
            #[must_use]
            pub fn ch3comctl(&mut self) -> Ch3comctlW<Chctl1OutputSpec> {
                Ch3comctlW::new(self, 12)
            }
            #[doc = "Bit 15 - Channel 3 output compare clear enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch3comcen(&mut self) -> Ch3comcenW<Chctl1OutputSpec> {
                Ch3comcenW::new(self, 15)
            }
        }
        #[doc = "Channel control register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl1_output::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl1_output::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Chctl1OutputSpec;
        impl crate::RegisterSpec for Chctl1OutputSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`chctl1_output::R`](R) reader structure"]
        impl crate::Readable for Chctl1OutputSpec {}
        #[doc = "`write(|w| ..)` method takes [`chctl1_output::W`](W) writer structure"]
        impl crate::Writable for Chctl1OutputSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CHCTL1_Output to value 0"]
        impl crate::Resettable for Chctl1OutputSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CHCTL1_Input (rw) register accessor: Channel control register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl1_input::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl1_input::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@chctl1_input`]
module"]
    #[doc(alias = "CHCTL1_Input")]
    pub type Chctl1Input = crate::Reg<chctl1_input::Chctl1InputSpec>;
    #[doc = "Channel control register 1 (input mode)"]
    pub mod chctl1_input {
        #[doc = "Register `CHCTL1_Input` reader"]
        pub type R = crate::R<Chctl1InputSpec>;
        #[doc = "Register `CHCTL1_Input` writer"]
        pub type W = crate::W<Chctl1InputSpec>;
        #[doc = "Field `CH2MS` reader - Channel 2 mode selection"]
        pub type Ch2msR = crate::FieldReader;
        #[doc = "Field `CH2MS` writer - Channel 2 mode selection"]
        pub type Ch2msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH2CAPPSC` reader - Channel 2 input capture prescaler"]
        pub type Ch2cappscR = crate::FieldReader;
        #[doc = "Field `CH2CAPPSC` writer - Channel 2 input capture prescaler"]
        pub type Ch2cappscW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH2CAPFLT` reader - Channel 2 input capture filter control"]
        pub type Ch2capfltR = crate::FieldReader;
        #[doc = "Field `CH2CAPFLT` writer - Channel 2 input capture filter control"]
        pub type Ch2capfltW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `CH3MS` reader - Channel 3 mode selection"]
        pub type Ch3msR = crate::FieldReader;
        #[doc = "Field `CH3MS` writer - Channel 3 mode selection"]
        pub type Ch3msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH3CAPPSC` reader - Channel 3 input capture prescaler"]
        pub type Ch3cappscR = crate::FieldReader;
        #[doc = "Field `CH3CAPPSC` writer - Channel 3 input capture prescaler"]
        pub type Ch3cappscW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH3CAPFLT` reader - Channel 3 input capture filter control"]
        pub type Ch3capfltR = crate::FieldReader;
        #[doc = "Field `CH3CAPFLT` writer - Channel 3 input capture filter control"]
        pub type Ch3capfltW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:1 - Channel 2 mode selection"]
            #[inline(always)]
            pub fn ch2ms(&self) -> Ch2msR {
                Ch2msR::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - Channel 2 input capture prescaler"]
            #[inline(always)]
            pub fn ch2cappsc(&self) -> Ch2cappscR {
                Ch2cappscR::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:7 - Channel 2 input capture filter control"]
            #[inline(always)]
            pub fn ch2capflt(&self) -> Ch2capfltR {
                Ch2capfltR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:9 - Channel 3 mode selection"]
            #[inline(always)]
            pub fn ch3ms(&self) -> Ch3msR {
                Ch3msR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Channel 3 input capture prescaler"]
            #[inline(always)]
            pub fn ch3cappsc(&self) -> Ch3cappscR {
                Ch3cappscR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:15 - Channel 3 input capture filter control"]
            #[inline(always)]
            pub fn ch3capflt(&self) -> Ch3capfltR {
                Ch3capfltR::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Channel 2 mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch2ms(&mut self) -> Ch2msW<Chctl1InputSpec> {
                Ch2msW::new(self, 0)
            }
            #[doc = "Bits 2:3 - Channel 2 input capture prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn ch2cappsc(&mut self) -> Ch2cappscW<Chctl1InputSpec> {
                Ch2cappscW::new(self, 2)
            }
            #[doc = "Bits 4:7 - Channel 2 input capture filter control"]
            #[inline(always)]
            #[must_use]
            pub fn ch2capflt(&mut self) -> Ch2capfltW<Chctl1InputSpec> {
                Ch2capfltW::new(self, 4)
            }
            #[doc = "Bits 8:9 - Channel 3 mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch3ms(&mut self) -> Ch3msW<Chctl1InputSpec> {
                Ch3msW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Channel 3 input capture prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn ch3cappsc(&mut self) -> Ch3cappscW<Chctl1InputSpec> {
                Ch3cappscW::new(self, 10)
            }
            #[doc = "Bits 12:15 - Channel 3 input capture filter control"]
            #[inline(always)]
            #[must_use]
            pub fn ch3capflt(&mut self) -> Ch3capfltW<Chctl1InputSpec> {
                Ch3capfltW::new(self, 12)
            }
        }
        #[doc = "Channel control register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl1_input::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl1_input::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Chctl1InputSpec;
        impl crate::RegisterSpec for Chctl1InputSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`chctl1_input::R`](R) reader structure"]
        impl crate::Readable for Chctl1InputSpec {}
        #[doc = "`write(|w| ..)` method takes [`chctl1_input::W`](W) writer structure"]
        impl crate::Writable for Chctl1InputSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CHCTL1_Input to value 0"]
        impl crate::Resettable for Chctl1InputSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CHCTL2 (rw) register accessor: Channel control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@chctl2`]
module"]
    #[doc(alias = "CHCTL2")]
    pub type Chctl2 = crate::Reg<chctl2::Chctl2Spec>;
    #[doc = "Channel control register 2"]
    pub mod chctl2 {
        #[doc = "Register `CHCTL2` reader"]
        pub type R = crate::R<Chctl2Spec>;
        #[doc = "Register `CHCTL2` writer"]
        pub type W = crate::W<Chctl2Spec>;
        #[doc = "Field `CH0EN` reader - Channel 0 capture/compare function enable"]
        pub type Ch0enR = crate::BitReader;
        #[doc = "Field `CH0EN` writer - Channel 0 capture/compare function enable"]
        pub type Ch0enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0P` reader - Channel 0 capture/compare function polarity"]
        pub type Ch0pR = crate::BitReader;
        #[doc = "Field `CH0P` writer - Channel 0 capture/compare function polarity"]
        pub type Ch0pW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0NEN` reader - Channel 0 complementary output enable"]
        pub type Ch0nenR = crate::BitReader;
        #[doc = "Field `CH0NEN` writer - Channel 0 complementary output enable"]
        pub type Ch0nenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0NP` reader - Channel 0 complementary output polarity"]
        pub type Ch0npR = crate::BitReader;
        #[doc = "Field `CH0NP` writer - Channel 0 complementary output polarity"]
        pub type Ch0npW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1EN` reader - Channel 1 capture/compare function enable"]
        pub type Ch1enR = crate::BitReader;
        #[doc = "Field `CH1EN` writer - Channel 1 capture/compare function enable"]
        pub type Ch1enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1P` reader - Channel 1 capture/compare function polarity"]
        pub type Ch1pR = crate::BitReader;
        #[doc = "Field `CH1P` writer - Channel 1 capture/compare function polarity"]
        pub type Ch1pW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1NEN` reader - Channel 1 complementary output enable"]
        pub type Ch1nenR = crate::BitReader;
        #[doc = "Field `CH1NEN` writer - Channel 1 complementary output enable"]
        pub type Ch1nenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1NP` reader - Channel 1 complementary output polarity"]
        pub type Ch1npR = crate::BitReader;
        #[doc = "Field `CH1NP` writer - Channel 1 complementary output polarity"]
        pub type Ch1npW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2EN` reader - Channel 2 capture/compare function enable"]
        pub type Ch2enR = crate::BitReader;
        #[doc = "Field `CH2EN` writer - Channel 2 capture/compare function enable"]
        pub type Ch2enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2P` reader - Channel 2 capture/compare function polarity"]
        pub type Ch2pR = crate::BitReader;
        #[doc = "Field `CH2P` writer - Channel 2 capture/compare function polarity"]
        pub type Ch2pW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2NEN` reader - Channel 2 complementary output enable"]
        pub type Ch2nenR = crate::BitReader;
        #[doc = "Field `CH2NEN` writer - Channel 2 complementary output enable"]
        pub type Ch2nenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2NP` reader - Channel 2 complementary output polarity"]
        pub type Ch2npR = crate::BitReader;
        #[doc = "Field `CH2NP` writer - Channel 2 complementary output polarity"]
        pub type Ch2npW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3EN` reader - Channel 3 capture/compare function enable"]
        pub type Ch3enR = crate::BitReader;
        #[doc = "Field `CH3EN` writer - Channel 3 capture/compare function enable"]
        pub type Ch3enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3P` reader - Channel 3 capture/compare function polarity"]
        pub type Ch3pR = crate::BitReader;
        #[doc = "Field `CH3P` writer - Channel 3 capture/compare function polarity"]
        pub type Ch3pW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel 0 capture/compare function enable"]
            #[inline(always)]
            pub fn ch0en(&self) -> Ch0enR {
                Ch0enR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Channel 0 capture/compare function polarity"]
            #[inline(always)]
            pub fn ch0p(&self) -> Ch0pR {
                Ch0pR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Channel 0 complementary output enable"]
            #[inline(always)]
            pub fn ch0nen(&self) -> Ch0nenR {
                Ch0nenR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Channel 0 complementary output polarity"]
            #[inline(always)]
            pub fn ch0np(&self) -> Ch0npR {
                Ch0npR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Channel 1 capture/compare function enable"]
            #[inline(always)]
            pub fn ch1en(&self) -> Ch1enR {
                Ch1enR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Channel 1 capture/compare function polarity"]
            #[inline(always)]
            pub fn ch1p(&self) -> Ch1pR {
                Ch1pR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Channel 1 complementary output enable"]
            #[inline(always)]
            pub fn ch1nen(&self) -> Ch1nenR {
                Ch1nenR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Channel 1 complementary output polarity"]
            #[inline(always)]
            pub fn ch1np(&self) -> Ch1npR {
                Ch1npR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Channel 2 capture/compare function enable"]
            #[inline(always)]
            pub fn ch2en(&self) -> Ch2enR {
                Ch2enR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Channel 2 capture/compare function polarity"]
            #[inline(always)]
            pub fn ch2p(&self) -> Ch2pR {
                Ch2pR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Channel 2 complementary output enable"]
            #[inline(always)]
            pub fn ch2nen(&self) -> Ch2nenR {
                Ch2nenR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Channel 2 complementary output polarity"]
            #[inline(always)]
            pub fn ch2np(&self) -> Ch2npR {
                Ch2npR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Channel 3 capture/compare function enable"]
            #[inline(always)]
            pub fn ch3en(&self) -> Ch3enR {
                Ch3enR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Channel 3 capture/compare function polarity"]
            #[inline(always)]
            pub fn ch3p(&self) -> Ch3pR {
                Ch3pR::new(((self.bits >> 13) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 capture/compare function enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch0en(&mut self) -> Ch0enW<Chctl2Spec> {
                Ch0enW::new(self, 0)
            }
            #[doc = "Bit 1 - Channel 0 capture/compare function polarity"]
            #[inline(always)]
            #[must_use]
            pub fn ch0p(&mut self) -> Ch0pW<Chctl2Spec> {
                Ch0pW::new(self, 1)
            }
            #[doc = "Bit 2 - Channel 0 complementary output enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch0nen(&mut self) -> Ch0nenW<Chctl2Spec> {
                Ch0nenW::new(self, 2)
            }
            #[doc = "Bit 3 - Channel 0 complementary output polarity"]
            #[inline(always)]
            #[must_use]
            pub fn ch0np(&mut self) -> Ch0npW<Chctl2Spec> {
                Ch0npW::new(self, 3)
            }
            #[doc = "Bit 4 - Channel 1 capture/compare function enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch1en(&mut self) -> Ch1enW<Chctl2Spec> {
                Ch1enW::new(self, 4)
            }
            #[doc = "Bit 5 - Channel 1 capture/compare function polarity"]
            #[inline(always)]
            #[must_use]
            pub fn ch1p(&mut self) -> Ch1pW<Chctl2Spec> {
                Ch1pW::new(self, 5)
            }
            #[doc = "Bit 6 - Channel 1 complementary output enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch1nen(&mut self) -> Ch1nenW<Chctl2Spec> {
                Ch1nenW::new(self, 6)
            }
            #[doc = "Bit 7 - Channel 1 complementary output polarity"]
            #[inline(always)]
            #[must_use]
            pub fn ch1np(&mut self) -> Ch1npW<Chctl2Spec> {
                Ch1npW::new(self, 7)
            }
            #[doc = "Bit 8 - Channel 2 capture/compare function enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2en(&mut self) -> Ch2enW<Chctl2Spec> {
                Ch2enW::new(self, 8)
            }
            #[doc = "Bit 9 - Channel 2 capture/compare function polarity"]
            #[inline(always)]
            #[must_use]
            pub fn ch2p(&mut self) -> Ch2pW<Chctl2Spec> {
                Ch2pW::new(self, 9)
            }
            #[doc = "Bit 10 - Channel 2 complementary output enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2nen(&mut self) -> Ch2nenW<Chctl2Spec> {
                Ch2nenW::new(self, 10)
            }
            #[doc = "Bit 11 - Channel 2 complementary output polarity"]
            #[inline(always)]
            #[must_use]
            pub fn ch2np(&mut self) -> Ch2npW<Chctl2Spec> {
                Ch2npW::new(self, 11)
            }
            #[doc = "Bit 12 - Channel 3 capture/compare function enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch3en(&mut self) -> Ch3enW<Chctl2Spec> {
                Ch3enW::new(self, 12)
            }
            #[doc = "Bit 13 - Channel 3 capture/compare function polarity"]
            #[inline(always)]
            #[must_use]
            pub fn ch3p(&mut self) -> Ch3pW<Chctl2Spec> {
                Ch3pW::new(self, 13)
            }
        }
        #[doc = "Channel control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Chctl2Spec;
        impl crate::RegisterSpec for Chctl2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`chctl2::R`](R) reader structure"]
        impl crate::Readable for Chctl2Spec {}
        #[doc = "`write(|w| ..)` method takes [`chctl2::W`](W) writer structure"]
        impl crate::Writable for Chctl2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CHCTL2 to value 0"]
        impl crate::Resettable for Chctl2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CNT (rw) register accessor: counter\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cnt`]
module"]
    #[doc(alias = "CNT")]
    pub type Cnt = crate::Reg<cnt::CntSpec>;
    #[doc = "counter"]
    pub mod cnt {
        #[doc = "Register `CNT` reader"]
        pub type R = crate::R<CntSpec>;
        #[doc = "Register `CNT` writer"]
        pub type W = crate::W<CntSpec>;
        #[doc = "Field `CNT` reader - current counter value"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - current counter value"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - current counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - current counter value"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<CntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "counter\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CntSpec;
        impl crate::RegisterSpec for CntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cnt::R`](R) reader structure"]
        impl crate::Readable for CntSpec {}
        #[doc = "`write(|w| ..)` method takes [`cnt::W`](W) writer structure"]
        impl crate::Writable for CntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CNT to value 0"]
        impl crate::Resettable for CntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "PSC (rw) register accessor: prescaler\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@psc`]
module"]
    #[doc(alias = "PSC")]
    pub type Psc = crate::Reg<psc::PscSpec>;
    #[doc = "prescaler"]
    pub mod psc {
        #[doc = "Register `PSC` reader"]
        pub type R = crate::R<PscSpec>;
        #[doc = "Register `PSC` writer"]
        pub type W = crate::W<PscSpec>;
        #[doc = "Field `PSC` reader - Prescaler value of the counter clock"]
        pub type PscR = crate::FieldReader<u16>;
        #[doc = "Field `PSC` writer - Prescaler value of the counter clock"]
        pub type PscW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Prescaler value of the counter clock"]
            #[inline(always)]
            pub fn psc(&self) -> PscR {
                PscR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value of the counter clock"]
            #[inline(always)]
            #[must_use]
            pub fn psc(&mut self) -> PscW<PscSpec> {
                PscW::new(self, 0)
            }
        }
        #[doc = "prescaler\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct PscSpec;
        impl crate::RegisterSpec for PscSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`psc::R`](R) reader structure"]
        impl crate::Readable for PscSpec {}
        #[doc = "`write(|w| ..)` method takes [`psc::W`](W) writer structure"]
        impl crate::Writable for PscSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets PSC to value 0"]
        impl crate::Resettable for PscSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CAR (rw) register accessor: Counter auto reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`car::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`car::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@car`]
module"]
    #[doc(alias = "CAR")]
    pub type Car = crate::Reg<car::CarSpec>;
    #[doc = "Counter auto reload register"]
    pub mod car {
        #[doc = "Register `CAR` reader"]
        pub type R = crate::R<CarSpec>;
        #[doc = "Register `CAR` writer"]
        pub type W = crate::W<CarSpec>;
        #[doc = "Field `CARL` reader - Counter auto reload value"]
        pub type CarlR = crate::FieldReader<u16>;
        #[doc = "Field `CARL` writer - Counter auto reload value"]
        pub type CarlW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Counter auto reload value"]
            #[inline(always)]
            pub fn carl(&self) -> CarlR {
                CarlR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Counter auto reload value"]
            #[inline(always)]
            #[must_use]
            pub fn carl(&mut self) -> CarlW<CarSpec> {
                CarlW::new(self, 0)
            }
        }
        #[doc = "Counter auto reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`car::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`car::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CarSpec;
        impl crate::RegisterSpec for CarSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`car::R`](R) reader structure"]
        impl crate::Readable for CarSpec {}
        #[doc = "`write(|w| ..)` method takes [`car::W`](W) writer structure"]
        impl crate::Writable for CarSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CAR to value 0"]
        impl crate::Resettable for CarSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CREP (rw) register accessor: Counter repetition register\n\nYou can [`read`](crate::Reg::read) this register and get [`crep::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`crep::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@crep`]
module"]
    #[doc(alias = "CREP")]
    pub type Crep = crate::Reg<crep::CrepSpec>;
    #[doc = "Counter repetition register"]
    pub mod crep {
        #[doc = "Register `CREP` reader"]
        pub type R = crate::R<CrepSpec>;
        #[doc = "Register `CREP` writer"]
        pub type W = crate::W<CrepSpec>;
        #[doc = "Field `CREP` reader - Counter repetition value"]
        pub type CrepR = crate::FieldReader;
        #[doc = "Field `CREP` writer - Counter repetition value"]
        pub type CrepW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Counter repetition value"]
            #[inline(always)]
            pub fn crep(&self) -> CrepR {
                CrepR::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Counter repetition value"]
            #[inline(always)]
            #[must_use]
            pub fn crep(&mut self) -> CrepW<CrepSpec> {
                CrepW::new(self, 0)
            }
        }
        #[doc = "Counter repetition register\n\nYou can [`read`](crate::Reg::read) this register and get [`crep::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`crep::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CrepSpec;
        impl crate::RegisterSpec for CrepSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`crep::R`](R) reader structure"]
        impl crate::Readable for CrepSpec {}
        #[doc = "`write(|w| ..)` method takes [`crep::W`](W) writer structure"]
        impl crate::Writable for CrepSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CREP to value 0"]
        impl crate::Resettable for CrepSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH0CV (rw) register accessor: Channel 0 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0cv::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0cv::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch0cv`]
module"]
    #[doc(alias = "CH0CV")]
    pub type Ch0cv = crate::Reg<ch0cv::Ch0cvSpec>;
    #[doc = "Channel 0 capture/compare value register"]
    pub mod ch0cv {
        #[doc = "Register `CH0CV` reader"]
        pub type R = crate::R<Ch0cvSpec>;
        #[doc = "Register `CH0CV` writer"]
        pub type W = crate::W<Ch0cvSpec>;
        #[doc = "Field `CH0VAL` reader - Capture or compare value of channel0"]
        pub type Ch0valR = crate::FieldReader<u16>;
        #[doc = "Field `CH0VAL` writer - Capture or compare value of channel0"]
        pub type Ch0valW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Capture or compare value of channel0"]
            #[inline(always)]
            pub fn ch0val(&self) -> Ch0valR {
                Ch0valR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture or compare value of channel0"]
            #[inline(always)]
            #[must_use]
            pub fn ch0val(&mut self) -> Ch0valW<Ch0cvSpec> {
                Ch0valW::new(self, 0)
            }
        }
        #[doc = "Channel 0 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0cv::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0cv::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch0cvSpec;
        impl crate::RegisterSpec for Ch0cvSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch0cv::R`](R) reader structure"]
        impl crate::Readable for Ch0cvSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch0cv::W`](W) writer structure"]
        impl crate::Writable for Ch0cvSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH0CV to value 0"]
        impl crate::Resettable for Ch0cvSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH1CV (rw) register accessor: Channel 1 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1cv::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1cv::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch1cv`]
module"]
    #[doc(alias = "CH1CV")]
    pub type Ch1cv = crate::Reg<ch1cv::Ch1cvSpec>;
    #[doc = "Channel 1 capture/compare value register"]
    pub mod ch1cv {
        #[doc = "Register `CH1CV` reader"]
        pub type R = crate::R<Ch1cvSpec>;
        #[doc = "Register `CH1CV` writer"]
        pub type W = crate::W<Ch1cvSpec>;
        #[doc = "Field `CH1VAL` reader - Capture or compare value of channel1"]
        pub type Ch1valR = crate::FieldReader<u16>;
        #[doc = "Field `CH1VAL` writer - Capture or compare value of channel1"]
        pub type Ch1valW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Capture or compare value of channel1"]
            #[inline(always)]
            pub fn ch1val(&self) -> Ch1valR {
                Ch1valR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture or compare value of channel1"]
            #[inline(always)]
            #[must_use]
            pub fn ch1val(&mut self) -> Ch1valW<Ch1cvSpec> {
                Ch1valW::new(self, 0)
            }
        }
        #[doc = "Channel 1 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1cv::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1cv::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch1cvSpec;
        impl crate::RegisterSpec for Ch1cvSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch1cv::R`](R) reader structure"]
        impl crate::Readable for Ch1cvSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch1cv::W`](W) writer structure"]
        impl crate::Writable for Ch1cvSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH1CV to value 0"]
        impl crate::Resettable for Ch1cvSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH2CV (rw) register accessor: Channel 2 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2cv::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2cv::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch2cv`]
module"]
    #[doc(alias = "CH2CV")]
    pub type Ch2cv = crate::Reg<ch2cv::Ch2cvSpec>;
    #[doc = "Channel 2 capture/compare value register"]
    pub mod ch2cv {
        #[doc = "Register `CH2CV` reader"]
        pub type R = crate::R<Ch2cvSpec>;
        #[doc = "Register `CH2CV` writer"]
        pub type W = crate::W<Ch2cvSpec>;
        #[doc = "Field `CH2VAL` reader - Capture or compare value of channel 2"]
        pub type Ch2valR = crate::FieldReader<u16>;
        #[doc = "Field `CH2VAL` writer - Capture or compare value of channel 2"]
        pub type Ch2valW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Capture or compare value of channel 2"]
            #[inline(always)]
            pub fn ch2val(&self) -> Ch2valR {
                Ch2valR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture or compare value of channel 2"]
            #[inline(always)]
            #[must_use]
            pub fn ch2val(&mut self) -> Ch2valW<Ch2cvSpec> {
                Ch2valW::new(self, 0)
            }
        }
        #[doc = "Channel 2 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2cv::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2cv::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch2cvSpec;
        impl crate::RegisterSpec for Ch2cvSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch2cv::R`](R) reader structure"]
        impl crate::Readable for Ch2cvSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch2cv::W`](W) writer structure"]
        impl crate::Writable for Ch2cvSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH2CV to value 0"]
        impl crate::Resettable for Ch2cvSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH3CV (rw) register accessor: Channel 3 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3cv::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3cv::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch3cv`]
module"]
    #[doc(alias = "CH3CV")]
    pub type Ch3cv = crate::Reg<ch3cv::Ch3cvSpec>;
    #[doc = "Channel 3 capture/compare value register"]
    pub mod ch3cv {
        #[doc = "Register `CH3CV` reader"]
        pub type R = crate::R<Ch3cvSpec>;
        #[doc = "Register `CH3CV` writer"]
        pub type W = crate::W<Ch3cvSpec>;
        #[doc = "Field `CH3VAL` reader - Capture or compare value of channel 3"]
        pub type Ch3valR = crate::FieldReader<u16>;
        #[doc = "Field `CH3VAL` writer - Capture or compare value of channel 3"]
        pub type Ch3valW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Capture or compare value of channel 3"]
            #[inline(always)]
            pub fn ch3val(&self) -> Ch3valR {
                Ch3valR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture or compare value of channel 3"]
            #[inline(always)]
            #[must_use]
            pub fn ch3val(&mut self) -> Ch3valW<Ch3cvSpec> {
                Ch3valW::new(self, 0)
            }
        }
        #[doc = "Channel 3 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3cv::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3cv::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch3cvSpec;
        impl crate::RegisterSpec for Ch3cvSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch3cv::R`](R) reader structure"]
        impl crate::Readable for Ch3cvSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch3cv::W`](W) writer structure"]
        impl crate::Writable for Ch3cvSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH3CV to value 0"]
        impl crate::Resettable for Ch3cvSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CCHP (rw) register accessor: channel complementary protection register\n\nYou can [`read`](crate::Reg::read) this register and get [`cchp::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cchp::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cchp`]
module"]
    #[doc(alias = "CCHP")]
    pub type Cchp = crate::Reg<cchp::CchpSpec>;
    #[doc = "channel complementary protection register"]
    pub mod cchp {
        #[doc = "Register `CCHP` reader"]
        pub type R = crate::R<CchpSpec>;
        #[doc = "Register `CCHP` writer"]
        pub type W = crate::W<CchpSpec>;
        #[doc = "Field `DTCFG` reader - Dead time configure"]
        pub type DtcfgR = crate::FieldReader;
        #[doc = "Field `DTCFG` writer - Dead time configure"]
        pub type DtcfgW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `PROT` reader - Complementary register protect control"]
        pub type ProtR = crate::FieldReader;
        #[doc = "Field `PROT` writer - Complementary register protect control"]
        pub type ProtW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `IOS` reader - Idle mode off-state configure"]
        pub type IosR = crate::BitReader;
        #[doc = "Field `IOS` writer - Idle mode off-state configure"]
        pub type IosW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ROS` reader - Run mode off-state configure"]
        pub type RosR = crate::BitReader;
        #[doc = "Field `ROS` writer - Run mode off-state configure"]
        pub type RosW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BRKEN` reader - Break enable"]
        pub type BrkenR = crate::BitReader;
        #[doc = "Field `BRKEN` writer - Break enable"]
        pub type BrkenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `BRKP` reader - Break polarity"]
        pub type BrkpR = crate::BitReader;
        #[doc = "Field `BRKP` writer - Break polarity"]
        pub type BrkpW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `OAEN` reader - Output automatic enable"]
        pub type OaenR = crate::BitReader;
        #[doc = "Field `OAEN` writer - Output automatic enable"]
        pub type OaenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `POEN` reader - Primary output enable"]
        pub type PoenR = crate::BitReader;
        #[doc = "Field `POEN` writer - Primary output enable"]
        pub type PoenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:7 - Dead time configure"]
            #[inline(always)]
            pub fn dtcfg(&self) -> DtcfgR {
                DtcfgR::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:9 - Complementary register protect control"]
            #[inline(always)]
            pub fn prot(&self) -> ProtR {
                ProtR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 10 - Idle mode off-state configure"]
            #[inline(always)]
            pub fn ios(&self) -> IosR {
                IosR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Run mode off-state configure"]
            #[inline(always)]
            pub fn ros(&self) -> RosR {
                RosR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            pub fn brken(&self) -> BrkenR {
                BrkenR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            pub fn brkp(&self) -> BrkpR {
                BrkpR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Output automatic enable"]
            #[inline(always)]
            pub fn oaen(&self) -> OaenR {
                OaenR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Primary output enable"]
            #[inline(always)]
            pub fn poen(&self) -> PoenR {
                PoenR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Dead time configure"]
            #[inline(always)]
            #[must_use]
            pub fn dtcfg(&mut self) -> DtcfgW<CchpSpec> {
                DtcfgW::new(self, 0)
            }
            #[doc = "Bits 8:9 - Complementary register protect control"]
            #[inline(always)]
            #[must_use]
            pub fn prot(&mut self) -> ProtW<CchpSpec> {
                ProtW::new(self, 8)
            }
            #[doc = "Bit 10 - Idle mode off-state configure"]
            #[inline(always)]
            #[must_use]
            pub fn ios(&mut self) -> IosW<CchpSpec> {
                IosW::new(self, 10)
            }
            #[doc = "Bit 11 - Run mode off-state configure"]
            #[inline(always)]
            #[must_use]
            pub fn ros(&mut self) -> RosW<CchpSpec> {
                RosW::new(self, 11)
            }
            #[doc = "Bit 12 - Break enable"]
            #[inline(always)]
            #[must_use]
            pub fn brken(&mut self) -> BrkenW<CchpSpec> {
                BrkenW::new(self, 12)
            }
            #[doc = "Bit 13 - Break polarity"]
            #[inline(always)]
            #[must_use]
            pub fn brkp(&mut self) -> BrkpW<CchpSpec> {
                BrkpW::new(self, 13)
            }
            #[doc = "Bit 14 - Output automatic enable"]
            #[inline(always)]
            #[must_use]
            pub fn oaen(&mut self) -> OaenW<CchpSpec> {
                OaenW::new(self, 14)
            }
            #[doc = "Bit 15 - Primary output enable"]
            #[inline(always)]
            #[must_use]
            pub fn poen(&mut self) -> PoenW<CchpSpec> {
                PoenW::new(self, 15)
            }
        }
        #[doc = "channel complementary protection register\n\nYou can [`read`](crate::Reg::read) this register and get [`cchp::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cchp::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CchpSpec;
        impl crate::RegisterSpec for CchpSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cchp::R`](R) reader structure"]
        impl crate::Readable for CchpSpec {}
        #[doc = "`write(|w| ..)` method takes [`cchp::W`](W) writer structure"]
        impl crate::Writable for CchpSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CCHP to value 0"]
        impl crate::Resettable for CchpSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DMACFG (rw) register accessor: DMA configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmacfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmacfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmacfg`]
module"]
    #[doc(alias = "DMACFG")]
    pub type Dmacfg = crate::Reg<dmacfg::DmacfgSpec>;
    #[doc = "DMA configuration register"]
    pub mod dmacfg {
        #[doc = "Register `DMACFG` reader"]
        pub type R = crate::R<DmacfgSpec>;
        #[doc = "Register `DMACFG` writer"]
        pub type W = crate::W<DmacfgSpec>;
        #[doc = "Field `DMATA` reader - DMA transfer access start address"]
        pub type DmataR = crate::FieldReader;
        #[doc = "Field `DMATA` writer - DMA transfer access start address"]
        pub type DmataW<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `DMATC` reader - DMA transfer count"]
        pub type DmatcR = crate::FieldReader;
        #[doc = "Field `DMATC` writer - DMA transfer count"]
        pub type DmatcW<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        impl R {
            #[doc = "Bits 0:4 - DMA transfer access start address"]
            #[inline(always)]
            pub fn dmata(&self) -> DmataR {
                DmataR::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bits 8:12 - DMA transfer count"]
            #[inline(always)]
            pub fn dmatc(&self) -> DmatcR {
                DmatcR::new(((self.bits >> 8) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - DMA transfer access start address"]
            #[inline(always)]
            #[must_use]
            pub fn dmata(&mut self) -> DmataW<DmacfgSpec> {
                DmataW::new(self, 0)
            }
            #[doc = "Bits 8:12 - DMA transfer count"]
            #[inline(always)]
            #[must_use]
            pub fn dmatc(&mut self) -> DmatcW<DmacfgSpec> {
                DmatcW::new(self, 8)
            }
        }
        #[doc = "DMA configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmacfg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmacfg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DmacfgSpec;
        impl crate::RegisterSpec for DmacfgSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dmacfg::R`](R) reader structure"]
        impl crate::Readable for DmacfgSpec {}
        #[doc = "`write(|w| ..)` method takes [`dmacfg::W`](W) writer structure"]
        impl crate::Writable for DmacfgSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DMACFG to value 0"]
        impl crate::Resettable for DmacfgSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DMATB (rw) register accessor: DMA transfer buffer register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmatb::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmatb::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmatb`]
module"]
    #[doc(alias = "DMATB")]
    pub type Dmatb = crate::Reg<dmatb::DmatbSpec>;
    #[doc = "DMA transfer buffer register"]
    pub mod dmatb {
        #[doc = "Register `DMATB` reader"]
        pub type R = crate::R<DmatbSpec>;
        #[doc = "Register `DMATB` writer"]
        pub type W = crate::W<DmatbSpec>;
        #[doc = "Field `DMATB` reader - DMA transfer buffer"]
        pub type DmatbR = crate::FieldReader<u16>;
        #[doc = "Field `DMATB` writer - DMA transfer buffer"]
        pub type DmatbW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - DMA transfer buffer"]
            #[inline(always)]
            pub fn dmatb(&self) -> DmatbR {
                DmatbR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DMA transfer buffer"]
            #[inline(always)]
            #[must_use]
            pub fn dmatb(&mut self) -> DmatbW<DmatbSpec> {
                DmatbW::new(self, 0)
            }
        }
        #[doc = "DMA transfer buffer register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmatb::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmatb::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DmatbSpec;
        impl crate::RegisterSpec for DmatbSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dmatb::R`](R) reader structure"]
        impl crate::Readable for DmatbSpec {}
        #[doc = "`write(|w| ..)` method takes [`dmatb::W`](W) writer structure"]
        impl crate::Writable for DmatbSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DMATB to value 0"]
        impl crate::Resettable for DmatbSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "General-purpose-timers"]
pub struct Timer1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Timer1 {}
impl Timer1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer1::RegisterBlock = 0x4000_0000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer1::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Timer1 {
    type Target = timer1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Timer1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer1").finish()
    }
}
#[doc = "General-purpose-timers"]
pub mod timer1 {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ctl0: Ctl0,
        ctl1: Ctl1,
        smcfg: Smcfg,
        dmainten: Dmainten,
        intf: Intf,
        swevg: Swevg,
        _reserved_6_chctl0: [u8; 0x04],
        _reserved_7_chctl1: [u8; 0x04],
        chctl2: Chctl2,
        cnt: Cnt,
        psc: Psc,
        car: Car,
        _reserved12: [u8; 0x04],
        ch0cv: Ch0cv,
        ch1cv: Ch1cv,
        ch2cv: Ch2cv,
        ch3cv: Ch3cv,
        _reserved16: [u8; 0x04],
        dmacfg: Dmacfg,
        dmatb: Dmatb,
    }
    impl RegisterBlock {
        #[doc = "0x00 - control register 0"]
        #[inline(always)]
        pub const fn ctl0(&self) -> &Ctl0 {
            &self.ctl0
        }
        #[doc = "0x04 - control register 1"]
        #[inline(always)]
        pub const fn ctl1(&self) -> &Ctl1 {
            &self.ctl1
        }
        #[doc = "0x08 - slave mode control register"]
        #[inline(always)]
        pub const fn smcfg(&self) -> &Smcfg {
            &self.smcfg
        }
        #[doc = "0x0c - DMA/Interrupt enable register"]
        #[inline(always)]
        pub const fn dmainten(&self) -> &Dmainten {
            &self.dmainten
        }
        #[doc = "0x10 - interrupt flag register"]
        #[inline(always)]
        pub const fn intf(&self) -> &Intf {
            &self.intf
        }
        #[doc = "0x14 - event generation register"]
        #[inline(always)]
        pub const fn swevg(&self) -> &Swevg {
            &self.swevg
        }
        #[doc = "0x18 - Channel control register 0 (input mode)"]
        #[inline(always)]
        pub const fn chctl0_input(&self) -> &Chctl0Input {
            unsafe { &*(self as *const Self).cast::<u8>().add(24).cast() }
        }
        #[doc = "0x18 - Channel control register 0 (output mode)"]
        #[inline(always)]
        pub const fn chctl0_output(&self) -> &Chctl0Output {
            unsafe { &*(self as *const Self).cast::<u8>().add(24).cast() }
        }
        #[doc = "0x1c - Channel control register 1 (input mode)"]
        #[inline(always)]
        pub const fn chctl1_input(&self) -> &Chctl1Input {
            unsafe { &*(self as *const Self).cast::<u8>().add(28).cast() }
        }
        #[doc = "0x1c - Channel control register 1 (output mode)"]
        #[inline(always)]
        pub const fn chctl1_output(&self) -> &Chctl1Output {
            unsafe { &*(self as *const Self).cast::<u8>().add(28).cast() }
        }
        #[doc = "0x20 - Channel control register 2"]
        #[inline(always)]
        pub const fn chctl2(&self) -> &Chctl2 {
            &self.chctl2
        }
        #[doc = "0x24 - Counter register"]
        #[inline(always)]
        pub const fn cnt(&self) -> &Cnt {
            &self.cnt
        }
        #[doc = "0x28 - Prescaler register"]
        #[inline(always)]
        pub const fn psc(&self) -> &Psc {
            &self.psc
        }
        #[doc = "0x2c - Counter auto reload register"]
        #[inline(always)]
        pub const fn car(&self) -> &Car {
            &self.car
        }
        #[doc = "0x34 - Channel 0 capture/compare value register"]
        #[inline(always)]
        pub const fn ch0cv(&self) -> &Ch0cv {
            &self.ch0cv
        }
        #[doc = "0x38 - Channel 1 capture/compare value register"]
        #[inline(always)]
        pub const fn ch1cv(&self) -> &Ch1cv {
            &self.ch1cv
        }
        #[doc = "0x3c - Channel 2 capture/compare value register"]
        #[inline(always)]
        pub const fn ch2cv(&self) -> &Ch2cv {
            &self.ch2cv
        }
        #[doc = "0x40 - Channel 3 capture/compare value register"]
        #[inline(always)]
        pub const fn ch3cv(&self) -> &Ch3cv {
            &self.ch3cv
        }
        #[doc = "0x48 - DMA configuration register"]
        #[inline(always)]
        pub const fn dmacfg(&self) -> &Dmacfg {
            &self.dmacfg
        }
        #[doc = "0x4c - DMA transfer buffer register"]
        #[inline(always)]
        pub const fn dmatb(&self) -> &Dmatb {
            &self.dmatb
        }
    }
    #[doc = "CTL0 (rw) register accessor: control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl0`]
module"]
    #[doc(alias = "CTL0")]
    pub type Ctl0 = crate::Reg<ctl0::Ctl0Spec>;
    #[doc = "control register 0"]
    pub mod ctl0 {
        #[doc = "Register `CTL0` reader"]
        pub type R = crate::R<Ctl0Spec>;
        #[doc = "Register `CTL0` writer"]
        pub type W = crate::W<Ctl0Spec>;
        #[doc = "Field `CEN` reader - Counter enable"]
        pub type CenR = crate::BitReader;
        #[doc = "Field `CEN` writer - Counter enable"]
        pub type CenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UPDIS` reader - Update disable"]
        pub type UpdisR = crate::BitReader;
        #[doc = "Field `UPDIS` writer - Update disable"]
        pub type UpdisW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UPS` reader - Update source"]
        pub type UpsR = crate::BitReader;
        #[doc = "Field `UPS` writer - Update source"]
        pub type UpsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SPM` reader - Single pulse mode"]
        pub type SpmR = crate::BitReader;
        #[doc = "Field `SPM` writer - Single pulse mode"]
        pub type SpmW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DIR` reader - Direction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `DIR` writer - Direction"]
        pub type DirW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CAM` reader - Counter aligns mode selection"]
        pub type CamR = crate::FieldReader;
        #[doc = "Field `CAM` writer - Counter aligns mode selection"]
        pub type CamW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `ARSE` reader - Auto-reload shadow enable"]
        pub type ArseR = crate::BitReader;
        #[doc = "Field `ARSE` writer - Auto-reload shadow enable"]
        pub type ArseW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CKDIV` reader - Clock division"]
        pub type CkdivR = crate::FieldReader;
        #[doc = "Field `CKDIV` writer - Clock division"]
        pub type CkdivW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        impl R {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CenR {
                CenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn updis(&self) -> UpdisR {
                UpdisR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Update source"]
            #[inline(always)]
            pub fn ups(&self) -> UpsR {
                UpsR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Single pulse mode"]
            #[inline(always)]
            pub fn spm(&self) -> SpmR {
                SpmR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bits 5:6 - Counter aligns mode selection"]
            #[inline(always)]
            pub fn cam(&self) -> CamR {
                CamR::new(((self.bits >> 5) & 3) as u8)
            }
            #[doc = "Bit 7 - Auto-reload shadow enable"]
            #[inline(always)]
            pub fn arse(&self) -> ArseR {
                ArseR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            pub fn ckdiv(&self) -> CkdivR {
                CkdivR::new(((self.bits >> 8) & 3) as u8)
            }
        }
        impl W {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            #[must_use]
            pub fn cen(&mut self) -> CenW<Ctl0Spec> {
                CenW::new(self, 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            #[must_use]
            pub fn updis(&mut self) -> UpdisW<Ctl0Spec> {
                UpdisW::new(self, 1)
            }
            #[doc = "Bit 2 - Update source"]
            #[inline(always)]
            #[must_use]
            pub fn ups(&mut self) -> UpsW<Ctl0Spec> {
                UpsW::new(self, 2)
            }
            #[doc = "Bit 3 - Single pulse mode"]
            #[inline(always)]
            #[must_use]
            pub fn spm(&mut self) -> SpmW<Ctl0Spec> {
                SpmW::new(self, 3)
            }
            #[doc = "Bit 4 - Direction"]
            #[inline(always)]
            #[must_use]
            pub fn dir(&mut self) -> DirW<Ctl0Spec> {
                DirW::new(self, 4)
            }
            #[doc = "Bits 5:6 - Counter aligns mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn cam(&mut self) -> CamW<Ctl0Spec> {
                CamW::new(self, 5)
            }
            #[doc = "Bit 7 - Auto-reload shadow enable"]
            #[inline(always)]
            #[must_use]
            pub fn arse(&mut self) -> ArseW<Ctl0Spec> {
                ArseW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Clock division"]
            #[inline(always)]
            #[must_use]
            pub fn ckdiv(&mut self) -> CkdivW<Ctl0Spec> {
                CkdivW::new(self, 8)
            }
        }
        #[doc = "control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl0Spec;
        impl crate::RegisterSpec for Ctl0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl0::R`](R) reader structure"]
        impl crate::Readable for Ctl0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl0::W`](W) writer structure"]
        impl crate::Writable for Ctl0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL0 to value 0"]
        impl crate::Resettable for Ctl0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL1 (rw) register accessor: control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl1`]
module"]
    #[doc(alias = "CTL1")]
    pub type Ctl1 = crate::Reg<ctl1::Ctl1Spec>;
    #[doc = "control register 1"]
    pub mod ctl1 {
        #[doc = "Register `CTL1` reader"]
        pub type R = crate::R<Ctl1Spec>;
        #[doc = "Register `CTL1` writer"]
        pub type W = crate::W<Ctl1Spec>;
        #[doc = "Field `DMAS` reader - DMA request source selection"]
        pub type DmasR = crate::BitReader;
        #[doc = "Field `DMAS` writer - DMA request source selection"]
        pub type DmasW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `MMC` reader - Master mode control"]
        pub type MmcR = crate::FieldReader;
        #[doc = "Field `MMC` writer - Master mode control"]
        pub type MmcW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `TI0S` reader - Channel 0 trigger input selection"]
        pub type Ti0sR = crate::BitReader;
        #[doc = "Field `TI0S` writer - Channel 0 trigger input selection"]
        pub type Ti0sW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 3 - DMA request source selection"]
            #[inline(always)]
            pub fn dmas(&self) -> DmasR {
                DmasR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Master mode control"]
            #[inline(always)]
            pub fn mmc(&self) -> MmcR {
                MmcR::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 7 - Channel 0 trigger input selection"]
            #[inline(always)]
            pub fn ti0s(&self) -> Ti0sR {
                Ti0sR::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 3 - DMA request source selection"]
            #[inline(always)]
            #[must_use]
            pub fn dmas(&mut self) -> DmasW<Ctl1Spec> {
                DmasW::new(self, 3)
            }
            #[doc = "Bits 4:6 - Master mode control"]
            #[inline(always)]
            #[must_use]
            pub fn mmc(&mut self) -> MmcW<Ctl1Spec> {
                MmcW::new(self, 4)
            }
            #[doc = "Bit 7 - Channel 0 trigger input selection"]
            #[inline(always)]
            #[must_use]
            pub fn ti0s(&mut self) -> Ti0sW<Ctl1Spec> {
                Ti0sW::new(self, 7)
            }
        }
        #[doc = "control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl1Spec;
        impl crate::RegisterSpec for Ctl1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl1::R`](R) reader structure"]
        impl crate::Readable for Ctl1Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"]
        impl crate::Writable for Ctl1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL1 to value 0"]
        impl crate::Resettable for Ctl1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "SMCFG (rw) register accessor: slave mode control register\n\nYou can [`read`](crate::Reg::read) this register and get [`smcfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`smcfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@smcfg`]
module"]
    #[doc(alias = "SMCFG")]
    pub type Smcfg = crate::Reg<smcfg::SmcfgSpec>;
    #[doc = "slave mode control register"]
    pub mod smcfg {
        #[doc = "Register `SMCFG` reader"]
        pub type R = crate::R<SmcfgSpec>;
        #[doc = "Register `SMCFG` writer"]
        pub type W = crate::W<SmcfgSpec>;
        #[doc = "Field `SMC` reader - Slave mode control"]
        pub type SmcR = crate::FieldReader;
        #[doc = "Field `SMC` writer - Slave mode control"]
        pub type SmcW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `TRGS` reader - Trigger selection"]
        pub type TrgsR = crate::FieldReader;
        #[doc = "Field `TRGS` writer - Trigger selection"]
        pub type TrgsW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `MSM` reader - Master-slave mode"]
        pub type MsmR = crate::BitReader;
        #[doc = "Field `MSM` writer - Master-slave mode"]
        pub type MsmW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ETFC` reader - External trigger filter control"]
        pub type EtfcR = crate::FieldReader;
        #[doc = "Field `ETFC` writer - External trigger filter control"]
        pub type EtfcW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `ETPSC` reader - External trigger prescaler"]
        pub type EtpscR = crate::FieldReader;
        #[doc = "Field `ETPSC` writer - External trigger prescaler"]
        pub type EtpscW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `SMC1` reader - Part of SMC for enable External clock mode1"]
        pub type Smc1R = crate::BitReader;
        #[doc = "Field `SMC1` writer - Part of SMC for enable External clock mode1"]
        pub type Smc1W<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ETP` reader - External trigger polarity"]
        pub type EtpR = crate::BitReader;
        #[doc = "Field `ETP` writer - External trigger polarity"]
        pub type EtpW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:2 - Slave mode control"]
            #[inline(always)]
            pub fn smc(&self) -> SmcR {
                SmcR::new((self.bits & 7) as u8)
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            pub fn trgs(&self) -> TrgsR {
                TrgsR::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 7 - Master-slave mode"]
            #[inline(always)]
            pub fn msm(&self) -> MsmR {
                MsmR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:11 - External trigger filter control"]
            #[inline(always)]
            pub fn etfc(&self) -> EtfcR {
                EtfcR::new(((self.bits >> 8) & 0x0f) as u8)
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            pub fn etpsc(&self) -> EtpscR {
                EtpscR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Part of SMC for enable External clock mode1"]
            #[inline(always)]
            pub fn smc1(&self) -> Smc1R {
                Smc1R::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            pub fn etp(&self) -> EtpR {
                EtpR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:2 - Slave mode control"]
            #[inline(always)]
            #[must_use]
            pub fn smc(&mut self) -> SmcW<SmcfgSpec> {
                SmcW::new(self, 0)
            }
            #[doc = "Bits 4:6 - Trigger selection"]
            #[inline(always)]
            #[must_use]
            pub fn trgs(&mut self) -> TrgsW<SmcfgSpec> {
                TrgsW::new(self, 4)
            }
            #[doc = "Bit 7 - Master-slave mode"]
            #[inline(always)]
            #[must_use]
            pub fn msm(&mut self) -> MsmW<SmcfgSpec> {
                MsmW::new(self, 7)
            }
            #[doc = "Bits 8:11 - External trigger filter control"]
            #[inline(always)]
            #[must_use]
            pub fn etfc(&mut self) -> EtfcW<SmcfgSpec> {
                EtfcW::new(self, 8)
            }
            #[doc = "Bits 12:13 - External trigger prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn etpsc(&mut self) -> EtpscW<SmcfgSpec> {
                EtpscW::new(self, 12)
            }
            #[doc = "Bit 14 - Part of SMC for enable External clock mode1"]
            #[inline(always)]
            #[must_use]
            pub fn smc1(&mut self) -> Smc1W<SmcfgSpec> {
                Smc1W::new(self, 14)
            }
            #[doc = "Bit 15 - External trigger polarity"]
            #[inline(always)]
            #[must_use]
            pub fn etp(&mut self) -> EtpW<SmcfgSpec> {
                EtpW::new(self, 15)
            }
        }
        #[doc = "slave mode control register\n\nYou can [`read`](crate::Reg::read) this register and get [`smcfg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`smcfg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SmcfgSpec;
        impl crate::RegisterSpec for SmcfgSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`smcfg::R`](R) reader structure"]
        impl crate::Readable for SmcfgSpec {}
        #[doc = "`write(|w| ..)` method takes [`smcfg::W`](W) writer structure"]
        impl crate::Writable for SmcfgSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SMCFG to value 0"]
        impl crate::Resettable for SmcfgSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DMAINTEN (rw) register accessor: DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmainten::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmainten::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmainten`]
module"]
    #[doc(alias = "DMAINTEN")]
    pub type Dmainten = crate::Reg<dmainten::DmaintenSpec>;
    #[doc = "DMA/Interrupt enable register"]
    pub mod dmainten {
        #[doc = "Register `DMAINTEN` reader"]
        pub type R = crate::R<DmaintenSpec>;
        #[doc = "Register `DMAINTEN` writer"]
        pub type W = crate::W<DmaintenSpec>;
        #[doc = "Field `UPIE` reader - Update interrupt enable"]
        pub type UpieR = crate::BitReader;
        #[doc = "Field `UPIE` writer - Update interrupt enable"]
        pub type UpieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0IE` reader - Channel 0 capture/compare interrupt enable"]
        pub type Ch0ieR = crate::BitReader;
        #[doc = "Field `CH0IE` writer - Channel 0 capture/compare interrupt enable"]
        pub type Ch0ieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1IE` reader - Channel 1 capture/compare interrupt enable"]
        pub type Ch1ieR = crate::BitReader;
        #[doc = "Field `CH1IE` writer - Channel 1 capture/compare interrupt enable"]
        pub type Ch1ieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2IE` reader - Channel 2 capture/compare interrupt enable"]
        pub type Ch2ieR = crate::BitReader;
        #[doc = "Field `CH2IE` writer - Channel 2 capture/compare interrupt enable"]
        pub type Ch2ieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3IE` reader - Channel 3 capture/compare interrupt enable"]
        pub type Ch3ieR = crate::BitReader;
        #[doc = "Field `CH3IE` writer - Channel 3 capture/compare interrupt enable"]
        pub type Ch3ieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TRGIE` reader - Trigger interrupt enable"]
        pub type TrgieR = crate::BitReader;
        #[doc = "Field `TRGIE` writer - Trigger interrupt enable"]
        pub type TrgieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UPDEN` reader - Update DMA request enable"]
        pub type UpdenR = crate::BitReader;
        #[doc = "Field `UPDEN` writer - Update DMA request enable"]
        pub type UpdenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0DEN` reader - Channel 0 capture/compare DMA request enable"]
        pub type Ch0denR = crate::BitReader;
        #[doc = "Field `CH0DEN` writer - Channel 0 capture/compare DMA request enable"]
        pub type Ch0denW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1DEN` reader - Channel 1 capture/compare DMA request enable"]
        pub type Ch1denR = crate::BitReader;
        #[doc = "Field `CH1DEN` writer - Channel 1 capture/compare DMA request enable"]
        pub type Ch1denW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2DEN` reader - Channel 2 capture/compare DMA request enable"]
        pub type Ch2denR = crate::BitReader;
        #[doc = "Field `CH2DEN` writer - Channel 2 capture/compare DMA request enable"]
        pub type Ch2denW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3DEN` reader - Channel 3 capture/compare DMA request enable"]
        pub type Ch3denR = crate::BitReader;
        #[doc = "Field `CH3DEN` writer - Channel 3 capture/compare DMA request enable"]
        pub type Ch3denW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TRGDEN` reader - Trigger DMA request enable"]
        pub type TrgdenR = crate::BitReader;
        #[doc = "Field `TRGDEN` writer - Trigger DMA request enable"]
        pub type TrgdenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn upie(&self) -> UpieR {
                UpieR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Channel 0 capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ch0ie(&self) -> Ch0ieR {
                Ch0ieR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Channel 1 capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ch1ie(&self) -> Ch1ieR {
                Ch1ieR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Channel 2 capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ch2ie(&self) -> Ch2ieR {
                Ch2ieR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Channel 3 capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ch3ie(&self) -> Ch3ieR {
                Ch3ieR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            pub fn trgie(&self) -> TrgieR {
                TrgieR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn upden(&self) -> UpdenR {
                UpdenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Channel 0 capture/compare DMA request enable"]
            #[inline(always)]
            pub fn ch0den(&self) -> Ch0denR {
                Ch0denR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Channel 1 capture/compare DMA request enable"]
            #[inline(always)]
            pub fn ch1den(&self) -> Ch1denR {
                Ch1denR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Channel 2 capture/compare DMA request enable"]
            #[inline(always)]
            pub fn ch2den(&self) -> Ch2denR {
                Ch2denR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Channel 3 capture/compare DMA request enable"]
            #[inline(always)]
            pub fn ch3den(&self) -> Ch3denR {
                Ch3denR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            pub fn trgden(&self) -> TrgdenR {
                TrgdenR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn upie(&mut self) -> UpieW<DmaintenSpec> {
                UpieW::new(self, 0)
            }
            #[doc = "Bit 1 - Channel 0 capture/compare interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch0ie(&mut self) -> Ch0ieW<DmaintenSpec> {
                Ch0ieW::new(self, 1)
            }
            #[doc = "Bit 2 - Channel 1 capture/compare interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch1ie(&mut self) -> Ch1ieW<DmaintenSpec> {
                Ch1ieW::new(self, 2)
            }
            #[doc = "Bit 3 - Channel 2 capture/compare interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2ie(&mut self) -> Ch2ieW<DmaintenSpec> {
                Ch2ieW::new(self, 3)
            }
            #[doc = "Bit 4 - Channel 3 capture/compare interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch3ie(&mut self) -> Ch3ieW<DmaintenSpec> {
                Ch3ieW::new(self, 4)
            }
            #[doc = "Bit 6 - Trigger interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn trgie(&mut self) -> TrgieW<DmaintenSpec> {
                TrgieW::new(self, 6)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn upden(&mut self) -> UpdenW<DmaintenSpec> {
                UpdenW::new(self, 8)
            }
            #[doc = "Bit 9 - Channel 0 capture/compare DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch0den(&mut self) -> Ch0denW<DmaintenSpec> {
                Ch0denW::new(self, 9)
            }
            #[doc = "Bit 10 - Channel 1 capture/compare DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch1den(&mut self) -> Ch1denW<DmaintenSpec> {
                Ch1denW::new(self, 10)
            }
            #[doc = "Bit 11 - Channel 2 capture/compare DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2den(&mut self) -> Ch2denW<DmaintenSpec> {
                Ch2denW::new(self, 11)
            }
            #[doc = "Bit 12 - Channel 3 capture/compare DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch3den(&mut self) -> Ch3denW<DmaintenSpec> {
                Ch3denW::new(self, 12)
            }
            #[doc = "Bit 14 - Trigger DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn trgden(&mut self) -> TrgdenW<DmaintenSpec> {
                TrgdenW::new(self, 14)
            }
        }
        #[doc = "DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmainten::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmainten::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DmaintenSpec;
        impl crate::RegisterSpec for DmaintenSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dmainten::R`](R) reader structure"]
        impl crate::Readable for DmaintenSpec {}
        #[doc = "`write(|w| ..)` method takes [`dmainten::W`](W) writer structure"]
        impl crate::Writable for DmaintenSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DMAINTEN to value 0"]
        impl crate::Resettable for DmaintenSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "INTF (rw) register accessor: interrupt flag register\n\nYou can [`read`](crate::Reg::read) this register and get [`intf::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intf::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intf`]
module"]
    #[doc(alias = "INTF")]
    pub type Intf = crate::Reg<intf::IntfSpec>;
    #[doc = "interrupt flag register"]
    pub mod intf {
        #[doc = "Register `INTF` reader"]
        pub type R = crate::R<IntfSpec>;
        #[doc = "Register `INTF` writer"]
        pub type W = crate::W<IntfSpec>;
        #[doc = "Field `UPIF` reader - Update interrupt flag"]
        pub type UpifR = crate::BitReader;
        #[doc = "Field `UPIF` writer - Update interrupt flag"]
        pub type UpifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0IF` reader - Channel 0 capture/compare interrupt flag"]
        pub type Ch0ifR = crate::BitReader;
        #[doc = "Field `CH0IF` writer - Channel 0 capture/compare interrupt flag"]
        pub type Ch0ifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1IF` reader - Channel 1 capture/compare interrupt flag"]
        pub type Ch1ifR = crate::BitReader;
        #[doc = "Field `CH1IF` writer - Channel 1 capture/compare interrupt flag"]
        pub type Ch1ifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2IF` reader - Channel 2 capture/compare interrupt enable"]
        pub type Ch2ifR = crate::BitReader;
        #[doc = "Field `CH2IF` writer - Channel 2 capture/compare interrupt enable"]
        pub type Ch2ifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3IF` reader - Channel 3 capture/compare interrupt enable"]
        pub type Ch3ifR = crate::BitReader;
        #[doc = "Field `CH3IF` writer - Channel 3 capture/compare interrupt enable"]
        pub type Ch3ifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TRGIF` reader - Trigger interrupt flag"]
        pub type TrgifR = crate::BitReader;
        #[doc = "Field `TRGIF` writer - Trigger interrupt flag"]
        pub type TrgifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0OF` reader - Channel 0 over capture flag"]
        pub type Ch0ofR = crate::BitReader;
        #[doc = "Field `CH0OF` writer - Channel 0 over capture flag"]
        pub type Ch0ofW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1OF` reader - Channel 1 over capture flag"]
        pub type Ch1ofR = crate::BitReader;
        #[doc = "Field `CH1OF` writer - Channel 1 over capture flag"]
        pub type Ch1ofW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2OF` reader - Channel 2 over capture flag"]
        pub type Ch2ofR = crate::BitReader;
        #[doc = "Field `CH2OF` writer - Channel 2 over capture flag"]
        pub type Ch2ofW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3OF` reader - Channel 3 over capture flag"]
        pub type Ch3ofR = crate::BitReader;
        #[doc = "Field `CH3OF` writer - Channel 3 over capture flag"]
        pub type Ch3ofW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn upif(&self) -> UpifR {
                UpifR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Channel 0 capture/compare interrupt flag"]
            #[inline(always)]
            pub fn ch0if(&self) -> Ch0ifR {
                Ch0ifR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Channel 1 capture/compare interrupt flag"]
            #[inline(always)]
            pub fn ch1if(&self) -> Ch1ifR {
                Ch1ifR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Channel 2 capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ch2if(&self) -> Ch2ifR {
                Ch2ifR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Channel 3 capture/compare interrupt enable"]
            #[inline(always)]
            pub fn ch3if(&self) -> Ch3ifR {
                Ch3ifR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            pub fn trgif(&self) -> TrgifR {
                TrgifR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 9 - Channel 0 over capture flag"]
            #[inline(always)]
            pub fn ch0of(&self) -> Ch0ofR {
                Ch0ofR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Channel 1 over capture flag"]
            #[inline(always)]
            pub fn ch1of(&self) -> Ch1ofR {
                Ch1ofR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Channel 2 over capture flag"]
            #[inline(always)]
            pub fn ch2of(&self) -> Ch2ofR {
                Ch2ofR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Channel 3 over capture flag"]
            #[inline(always)]
            pub fn ch3of(&self) -> Ch3ofR {
                Ch3ofR::new(((self.bits >> 12) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn upif(&mut self) -> UpifW<IntfSpec> {
                UpifW::new(self, 0)
            }
            #[doc = "Bit 1 - Channel 0 capture/compare interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch0if(&mut self) -> Ch0ifW<IntfSpec> {
                Ch0ifW::new(self, 1)
            }
            #[doc = "Bit 2 - Channel 1 capture/compare interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch1if(&mut self) -> Ch1ifW<IntfSpec> {
                Ch1ifW::new(self, 2)
            }
            #[doc = "Bit 3 - Channel 2 capture/compare interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2if(&mut self) -> Ch2ifW<IntfSpec> {
                Ch2ifW::new(self, 3)
            }
            #[doc = "Bit 4 - Channel 3 capture/compare interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch3if(&mut self) -> Ch3ifW<IntfSpec> {
                Ch3ifW::new(self, 4)
            }
            #[doc = "Bit 6 - Trigger interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn trgif(&mut self) -> TrgifW<IntfSpec> {
                TrgifW::new(self, 6)
            }
            #[doc = "Bit 9 - Channel 0 over capture flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch0of(&mut self) -> Ch0ofW<IntfSpec> {
                Ch0ofW::new(self, 9)
            }
            #[doc = "Bit 10 - Channel 1 over capture flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch1of(&mut self) -> Ch1ofW<IntfSpec> {
                Ch1ofW::new(self, 10)
            }
            #[doc = "Bit 11 - Channel 2 over capture flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch2of(&mut self) -> Ch2ofW<IntfSpec> {
                Ch2ofW::new(self, 11)
            }
            #[doc = "Bit 12 - Channel 3 over capture flag"]
            #[inline(always)]
            #[must_use]
            pub fn ch3of(&mut self) -> Ch3ofW<IntfSpec> {
                Ch3ofW::new(self, 12)
            }
        }
        #[doc = "interrupt flag register\n\nYou can [`read`](crate::Reg::read) this register and get [`intf::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intf::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntfSpec;
        impl crate::RegisterSpec for IntfSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`intf::R`](R) reader structure"]
        impl crate::Readable for IntfSpec {}
        #[doc = "`write(|w| ..)` method takes [`intf::W`](W) writer structure"]
        impl crate::Writable for IntfSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets INTF to value 0"]
        impl crate::Resettable for IntfSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "SWEVG (w) register accessor: event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swevg::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@swevg`]
module"]
    #[doc(alias = "SWEVG")]
    pub type Swevg = crate::Reg<swevg::SwevgSpec>;
    #[doc = "event generation register"]
    pub mod swevg {
        #[doc = "Register `SWEVG` writer"]
        pub type W = crate::W<SwevgSpec>;
        #[doc = "Field `UPG` writer - Update generation"]
        pub type UpgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0G` writer - Channel 0 capture or compare event generation"]
        pub type Ch0gW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1G` writer - Channel 1 capture or compare event generation"]
        pub type Ch1gW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2G` writer - Channel 2 capture or compare event generation"]
        pub type Ch2gW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3G` writer - Channel 3 capture or compare event generation"]
        pub type Ch3gW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TRGG` writer - Trigger event generation"]
        pub type TrggW<'a, REG> = crate::BitWriter<'a, REG>;
        impl W {
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            #[must_use]
            pub fn upg(&mut self) -> UpgW<SwevgSpec> {
                UpgW::new(self, 0)
            }
            #[doc = "Bit 1 - Channel 0 capture or compare event generation"]
            #[inline(always)]
            #[must_use]
            pub fn ch0g(&mut self) -> Ch0gW<SwevgSpec> {
                Ch0gW::new(self, 1)
            }
            #[doc = "Bit 2 - Channel 1 capture or compare event generation"]
            #[inline(always)]
            #[must_use]
            pub fn ch1g(&mut self) -> Ch1gW<SwevgSpec> {
                Ch1gW::new(self, 2)
            }
            #[doc = "Bit 3 - Channel 2 capture or compare event generation"]
            #[inline(always)]
            #[must_use]
            pub fn ch2g(&mut self) -> Ch2gW<SwevgSpec> {
                Ch2gW::new(self, 3)
            }
            #[doc = "Bit 4 - Channel 3 capture or compare event generation"]
            #[inline(always)]
            #[must_use]
            pub fn ch3g(&mut self) -> Ch3gW<SwevgSpec> {
                Ch3gW::new(self, 4)
            }
            #[doc = "Bit 6 - Trigger event generation"]
            #[inline(always)]
            #[must_use]
            pub fn trgg(&mut self) -> TrggW<SwevgSpec> {
                TrggW::new(self, 6)
            }
        }
        #[doc = "event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swevg::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SwevgSpec;
        impl crate::RegisterSpec for SwevgSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`swevg::W`](W) writer structure"]
        impl crate::Writable for SwevgSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SWEVG to value 0"]
        impl crate::Resettable for SwevgSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CHCTL0_Output (rw) register accessor: Channel control register 0 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl0_output::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl0_output::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@chctl0_output`]
module"]
    #[doc(alias = "CHCTL0_Output")]
    pub type Chctl0Output = crate::Reg<chctl0_output::Chctl0OutputSpec>;
    #[doc = "Channel control register 0 (output mode)"]
    pub mod chctl0_output {
        #[doc = "Register `CHCTL0_Output` reader"]
        pub type R = crate::R<Chctl0OutputSpec>;
        #[doc = "Register `CHCTL0_Output` writer"]
        pub type W = crate::W<Chctl0OutputSpec>;
        #[doc = "Field `CH0MS` reader - Channel 0 I/O mode selection"]
        pub type Ch0msR = crate::FieldReader;
        #[doc = "Field `CH0MS` writer - Channel 0 I/O mode selection"]
        pub type Ch0msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH0COMFEN` reader - Channel 0 output compare fast enable"]
        pub type Ch0comfenR = crate::BitReader;
        #[doc = "Field `CH0COMFEN` writer - Channel 0 output compare fast enable"]
        pub type Ch0comfenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0COMSEN` reader - Channel 0 compare output shadow enable"]
        pub type Ch0comsenR = crate::BitReader;
        #[doc = "Field `CH0COMSEN` writer - Channel 0 compare output shadow enable"]
        pub type Ch0comsenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0COMCTL` reader - Channel 0 compare output control"]
        pub type Ch0comctlR = crate::FieldReader;
        #[doc = "Field `CH0COMCTL` writer - Channel 0 compare output control"]
        pub type Ch0comctlW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `CH0COMCEN` reader - Channel 0 output compare clear enable"]
        pub type Ch0comcenR = crate::BitReader;
        #[doc = "Field `CH0COMCEN` writer - Channel 0 output compare clear enable"]
        pub type Ch0comcenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1MS` reader - Channel 1 mode selection"]
        pub type Ch1msR = crate::FieldReader;
        #[doc = "Field `CH1MS` writer - Channel 1 mode selection"]
        pub type Ch1msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH1COMFEN` reader - Channel 1 output compare fast enable"]
        pub type Ch1comfenR = crate::BitReader;
        #[doc = "Field `CH1COMFEN` writer - Channel 1 output compare fast enable"]
        pub type Ch1comfenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1COMSEN` reader - Channel 1 output compare shadow enable"]
        pub type Ch1comsenR = crate::BitReader;
        #[doc = "Field `CH1COMSEN` writer - Channel 1 output compare shadow enable"]
        pub type Ch1comsenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1COMCTL` reader - Channel 1 compare output control"]
        pub type Ch1comctlR = crate::FieldReader;
        #[doc = "Field `CH1COMCTL` writer - Channel 1 compare output control"]
        pub type Ch1comctlW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `CH1COMCEN` reader - Channel 1 output compare clear enable"]
        pub type Ch1comcenR = crate::BitReader;
        #[doc = "Field `CH1COMCEN` writer - Channel 1 output compare clear enable"]
        pub type Ch1comcenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:1 - Channel 0 I/O mode selection"]
            #[inline(always)]
            pub fn ch0ms(&self) -> Ch0msR {
                Ch0msR::new((self.bits & 3) as u8)
            }
            #[doc = "Bit 2 - Channel 0 output compare fast enable"]
            #[inline(always)]
            pub fn ch0comfen(&self) -> Ch0comfenR {
                Ch0comfenR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Channel 0 compare output shadow enable"]
            #[inline(always)]
            pub fn ch0comsen(&self) -> Ch0comsenR {
                Ch0comsenR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Channel 0 compare output control"]
            #[inline(always)]
            pub fn ch0comctl(&self) -> Ch0comctlR {
                Ch0comctlR::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 7 - Channel 0 output compare clear enable"]
            #[inline(always)]
            pub fn ch0comcen(&self) -> Ch0comcenR {
                Ch0comcenR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Channel 1 mode selection"]
            #[inline(always)]
            pub fn ch1ms(&self) -> Ch1msR {
                Ch1msR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 10 - Channel 1 output compare fast enable"]
            #[inline(always)]
            pub fn ch1comfen(&self) -> Ch1comfenR {
                Ch1comfenR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Channel 1 output compare shadow enable"]
            #[inline(always)]
            pub fn ch1comsen(&self) -> Ch1comsenR {
                Ch1comsenR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:14 - Channel 1 compare output control"]
            #[inline(always)]
            pub fn ch1comctl(&self) -> Ch1comctlR {
                Ch1comctlR::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bit 15 - Channel 1 output compare clear enable"]
            #[inline(always)]
            pub fn ch1comcen(&self) -> Ch1comcenR {
                Ch1comcenR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Channel 0 I/O mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch0ms(&mut self) -> Ch0msW<Chctl0OutputSpec> {
                Ch0msW::new(self, 0)
            }
            #[doc = "Bit 2 - Channel 0 output compare fast enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch0comfen(&mut self) -> Ch0comfenW<Chctl0OutputSpec> {
                Ch0comfenW::new(self, 2)
            }
            #[doc = "Bit 3 - Channel 0 compare output shadow enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch0comsen(&mut self) -> Ch0comsenW<Chctl0OutputSpec> {
                Ch0comsenW::new(self, 3)
            }
            #[doc = "Bits 4:6 - Channel 0 compare output control"]
            #[inline(always)]
            #[must_use]
            pub fn ch0comctl(&mut self) -> Ch0comctlW<Chctl0OutputSpec> {
                Ch0comctlW::new(self, 4)
            }
            #[doc = "Bit 7 - Channel 0 output compare clear enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch0comcen(&mut self) -> Ch0comcenW<Chctl0OutputSpec> {
                Ch0comcenW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Channel 1 mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch1ms(&mut self) -> Ch1msW<Chctl0OutputSpec> {
                Ch1msW::new(self, 8)
            }
            #[doc = "Bit 10 - Channel 1 output compare fast enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch1comfen(&mut self) -> Ch1comfenW<Chctl0OutputSpec> {
                Ch1comfenW::new(self, 10)
            }
            #[doc = "Bit 11 - Channel 1 output compare shadow enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch1comsen(&mut self) -> Ch1comsenW<Chctl0OutputSpec> {
                Ch1comsenW::new(self, 11)
            }
            #[doc = "Bits 12:14 - Channel 1 compare output control"]
            #[inline(always)]
            #[must_use]
            pub fn ch1comctl(&mut self) -> Ch1comctlW<Chctl0OutputSpec> {
                Ch1comctlW::new(self, 12)
            }
            #[doc = "Bit 15 - Channel 1 output compare clear enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch1comcen(&mut self) -> Ch1comcenW<Chctl0OutputSpec> {
                Ch1comcenW::new(self, 15)
            }
        }
        #[doc = "Channel control register 0 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl0_output::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl0_output::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Chctl0OutputSpec;
        impl crate::RegisterSpec for Chctl0OutputSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`chctl0_output::R`](R) reader structure"]
        impl crate::Readable for Chctl0OutputSpec {}
        #[doc = "`write(|w| ..)` method takes [`chctl0_output::W`](W) writer structure"]
        impl crate::Writable for Chctl0OutputSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CHCTL0_Output to value 0"]
        impl crate::Resettable for Chctl0OutputSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CHCTL0_Input (rw) register accessor: Channel control register 0 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl0_input::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl0_input::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@chctl0_input`]
module"]
    #[doc(alias = "CHCTL0_Input")]
    pub type Chctl0Input = crate::Reg<chctl0_input::Chctl0InputSpec>;
    #[doc = "Channel control register 0 (input mode)"]
    pub mod chctl0_input {
        #[doc = "Register `CHCTL0_Input` reader"]
        pub type R = crate::R<Chctl0InputSpec>;
        #[doc = "Register `CHCTL0_Input` writer"]
        pub type W = crate::W<Chctl0InputSpec>;
        #[doc = "Field `CH0MS` reader - Channel 0 mode selection"]
        pub type Ch0msR = crate::FieldReader;
        #[doc = "Field `CH0MS` writer - Channel 0 mode selection"]
        pub type Ch0msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH0CAPPSC` reader - Channel 0 input capture prescaler"]
        pub type Ch0cappscR = crate::FieldReader;
        #[doc = "Field `CH0CAPPSC` writer - Channel 0 input capture prescaler"]
        pub type Ch0cappscW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH0CAPFLT` reader - Channel 0 input capture filter control"]
        pub type Ch0capfltR = crate::FieldReader;
        #[doc = "Field `CH0CAPFLT` writer - Channel 0 input capture filter control"]
        pub type Ch0capfltW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `CH1MS` reader - Channel 1 mode selection"]
        pub type Ch1msR = crate::FieldReader;
        #[doc = "Field `CH1MS` writer - Channel 1 mode selection"]
        pub type Ch1msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH1CAPPSC` reader - Channel 1 input capture prescaler"]
        pub type Ch1cappscR = crate::FieldReader;
        #[doc = "Field `CH1CAPPSC` writer - Channel 1 input capture prescaler"]
        pub type Ch1cappscW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH1CAPFLT` reader - Channel 1 input capture filter control"]
        pub type Ch1capfltR = crate::FieldReader;
        #[doc = "Field `CH1CAPFLT` writer - Channel 1 input capture filter control"]
        pub type Ch1capfltW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:1 - Channel 0 mode selection"]
            #[inline(always)]
            pub fn ch0ms(&self) -> Ch0msR {
                Ch0msR::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - Channel 0 input capture prescaler"]
            #[inline(always)]
            pub fn ch0cappsc(&self) -> Ch0cappscR {
                Ch0cappscR::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:7 - Channel 0 input capture filter control"]
            #[inline(always)]
            pub fn ch0capflt(&self) -> Ch0capfltR {
                Ch0capfltR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:9 - Channel 1 mode selection"]
            #[inline(always)]
            pub fn ch1ms(&self) -> Ch1msR {
                Ch1msR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Channel 1 input capture prescaler"]
            #[inline(always)]
            pub fn ch1cappsc(&self) -> Ch1cappscR {
                Ch1cappscR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:15 - Channel 1 input capture filter control"]
            #[inline(always)]
            pub fn ch1capflt(&self) -> Ch1capfltR {
                Ch1capfltR::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Channel 0 mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch0ms(&mut self) -> Ch0msW<Chctl0InputSpec> {
                Ch0msW::new(self, 0)
            }
            #[doc = "Bits 2:3 - Channel 0 input capture prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn ch0cappsc(&mut self) -> Ch0cappscW<Chctl0InputSpec> {
                Ch0cappscW::new(self, 2)
            }
            #[doc = "Bits 4:7 - Channel 0 input capture filter control"]
            #[inline(always)]
            #[must_use]
            pub fn ch0capflt(&mut self) -> Ch0capfltW<Chctl0InputSpec> {
                Ch0capfltW::new(self, 4)
            }
            #[doc = "Bits 8:9 - Channel 1 mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch1ms(&mut self) -> Ch1msW<Chctl0InputSpec> {
                Ch1msW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Channel 1 input capture prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn ch1cappsc(&mut self) -> Ch1cappscW<Chctl0InputSpec> {
                Ch1cappscW::new(self, 10)
            }
            #[doc = "Bits 12:15 - Channel 1 input capture filter control"]
            #[inline(always)]
            #[must_use]
            pub fn ch1capflt(&mut self) -> Ch1capfltW<Chctl0InputSpec> {
                Ch1capfltW::new(self, 12)
            }
        }
        #[doc = "Channel control register 0 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl0_input::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl0_input::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Chctl0InputSpec;
        impl crate::RegisterSpec for Chctl0InputSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`chctl0_input::R`](R) reader structure"]
        impl crate::Readable for Chctl0InputSpec {}
        #[doc = "`write(|w| ..)` method takes [`chctl0_input::W`](W) writer structure"]
        impl crate::Writable for Chctl0InputSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CHCTL0_Input to value 0"]
        impl crate::Resettable for Chctl0InputSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CHCTL1_Output (rw) register accessor: Channel control register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl1_output::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl1_output::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@chctl1_output`]
module"]
    #[doc(alias = "CHCTL1_Output")]
    pub type Chctl1Output = crate::Reg<chctl1_output::Chctl1OutputSpec>;
    #[doc = "Channel control register 1 (output mode)"]
    pub mod chctl1_output {
        #[doc = "Register `CHCTL1_Output` reader"]
        pub type R = crate::R<Chctl1OutputSpec>;
        #[doc = "Register `CHCTL1_Output` writer"]
        pub type W = crate::W<Chctl1OutputSpec>;
        #[doc = "Field `CH2MS` reader - Channel 2 I/O mode selection"]
        pub type Ch2msR = crate::FieldReader;
        #[doc = "Field `CH2MS` writer - Channel 2 I/O mode selection"]
        pub type Ch2msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH2COMFEN` reader - Channel 2 output compare fast enable"]
        pub type Ch2comfenR = crate::BitReader;
        #[doc = "Field `CH2COMFEN` writer - Channel 2 output compare fast enable"]
        pub type Ch2comfenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2COMSEN` reader - Channel 2 compare output shadow enable"]
        pub type Ch2comsenR = crate::BitReader;
        #[doc = "Field `CH2COMSEN` writer - Channel 2 compare output shadow enable"]
        pub type Ch2comsenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2COMCTL` reader - Channel 2 compare output control"]
        pub type Ch2comctlR = crate::FieldReader;
        #[doc = "Field `CH2COMCTL` writer - Channel 2 compare output control"]
        pub type Ch2comctlW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `CH2COMCEN` reader - Channel 2 output compare clear enable"]
        pub type Ch2comcenR = crate::BitReader;
        #[doc = "Field `CH2COMCEN` writer - Channel 2 output compare clear enable"]
        pub type Ch2comcenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3MS` reader - Channel 3 mode selection"]
        pub type Ch3msR = crate::FieldReader;
        #[doc = "Field `CH3MS` writer - Channel 3 mode selection"]
        pub type Ch3msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH3COMFEN` reader - Channel 3 output compare fast enable"]
        pub type Ch3comfenR = crate::BitReader;
        #[doc = "Field `CH3COMFEN` writer - Channel 3 output compare fast enable"]
        pub type Ch3comfenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3COMSEN` reader - Channel 3 output compare shadow enable"]
        pub type Ch3comsenR = crate::BitReader;
        #[doc = "Field `CH3COMSEN` writer - Channel 3 output compare shadow enable"]
        pub type Ch3comsenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3COMCTL` reader - Channel 3 compare output control"]
        pub type Ch3comctlR = crate::FieldReader;
        #[doc = "Field `CH3COMCTL` writer - Channel 3 compare output control"]
        pub type Ch3comctlW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        #[doc = "Field `CH3COMCEN` reader - Channel 3 output compare clear enable"]
        pub type Ch3comcenR = crate::BitReader;
        #[doc = "Field `CH3COMCEN` writer - Channel 3 output compare clear enable"]
        pub type Ch3comcenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:1 - Channel 2 I/O mode selection"]
            #[inline(always)]
            pub fn ch2ms(&self) -> Ch2msR {
                Ch2msR::new((self.bits & 3) as u8)
            }
            #[doc = "Bit 2 - Channel 2 output compare fast enable"]
            #[inline(always)]
            pub fn ch2comfen(&self) -> Ch2comfenR {
                Ch2comfenR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Channel 2 compare output shadow enable"]
            #[inline(always)]
            pub fn ch2comsen(&self) -> Ch2comsenR {
                Ch2comsenR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bits 4:6 - Channel 2 compare output control"]
            #[inline(always)]
            pub fn ch2comctl(&self) -> Ch2comctlR {
                Ch2comctlR::new(((self.bits >> 4) & 7) as u8)
            }
            #[doc = "Bit 7 - Channel 2 output compare clear enable"]
            #[inline(always)]
            pub fn ch2comcen(&self) -> Ch2comcenR {
                Ch2comcenR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bits 8:9 - Channel 3 mode selection"]
            #[inline(always)]
            pub fn ch3ms(&self) -> Ch3msR {
                Ch3msR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bit 10 - Channel 3 output compare fast enable"]
            #[inline(always)]
            pub fn ch3comfen(&self) -> Ch3comfenR {
                Ch3comfenR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Channel 3 output compare shadow enable"]
            #[inline(always)]
            pub fn ch3comsen(&self) -> Ch3comsenR {
                Ch3comsenR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:14 - Channel 3 compare output control"]
            #[inline(always)]
            pub fn ch3comctl(&self) -> Ch3comctlR {
                Ch3comctlR::new(((self.bits >> 12) & 7) as u8)
            }
            #[doc = "Bit 15 - Channel 3 output compare clear enable"]
            #[inline(always)]
            pub fn ch3comcen(&self) -> Ch3comcenR {
                Ch3comcenR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Channel 2 I/O mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch2ms(&mut self) -> Ch2msW<Chctl1OutputSpec> {
                Ch2msW::new(self, 0)
            }
            #[doc = "Bit 2 - Channel 2 output compare fast enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2comfen(&mut self) -> Ch2comfenW<Chctl1OutputSpec> {
                Ch2comfenW::new(self, 2)
            }
            #[doc = "Bit 3 - Channel 2 compare output shadow enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2comsen(&mut self) -> Ch2comsenW<Chctl1OutputSpec> {
                Ch2comsenW::new(self, 3)
            }
            #[doc = "Bits 4:6 - Channel 2 compare output control"]
            #[inline(always)]
            #[must_use]
            pub fn ch2comctl(&mut self) -> Ch2comctlW<Chctl1OutputSpec> {
                Ch2comctlW::new(self, 4)
            }
            #[doc = "Bit 7 - Channel 2 output compare clear enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2comcen(&mut self) -> Ch2comcenW<Chctl1OutputSpec> {
                Ch2comcenW::new(self, 7)
            }
            #[doc = "Bits 8:9 - Channel 3 mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch3ms(&mut self) -> Ch3msW<Chctl1OutputSpec> {
                Ch3msW::new(self, 8)
            }
            #[doc = "Bit 10 - Channel 3 output compare fast enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch3comfen(&mut self) -> Ch3comfenW<Chctl1OutputSpec> {
                Ch3comfenW::new(self, 10)
            }
            #[doc = "Bit 11 - Channel 3 output compare shadow enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch3comsen(&mut self) -> Ch3comsenW<Chctl1OutputSpec> {
                Ch3comsenW::new(self, 11)
            }
            #[doc = "Bits 12:14 - Channel 3 compare output control"]
            #[inline(always)]
            #[must_use]
            pub fn ch3comctl(&mut self) -> Ch3comctlW<Chctl1OutputSpec> {
                Ch3comctlW::new(self, 12)
            }
            #[doc = "Bit 15 - Channel 3 output compare clear enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch3comcen(&mut self) -> Ch3comcenW<Chctl1OutputSpec> {
                Ch3comcenW::new(self, 15)
            }
        }
        #[doc = "Channel control register 1 (output mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl1_output::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl1_output::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Chctl1OutputSpec;
        impl crate::RegisterSpec for Chctl1OutputSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`chctl1_output::R`](R) reader structure"]
        impl crate::Readable for Chctl1OutputSpec {}
        #[doc = "`write(|w| ..)` method takes [`chctl1_output::W`](W) writer structure"]
        impl crate::Writable for Chctl1OutputSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CHCTL1_Output to value 0"]
        impl crate::Resettable for Chctl1OutputSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CHCTL1_Input (rw) register accessor: Channel control register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl1_input::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl1_input::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@chctl1_input`]
module"]
    #[doc(alias = "CHCTL1_Input")]
    pub type Chctl1Input = crate::Reg<chctl1_input::Chctl1InputSpec>;
    #[doc = "Channel control register 1 (input mode)"]
    pub mod chctl1_input {
        #[doc = "Register `CHCTL1_Input` reader"]
        pub type R = crate::R<Chctl1InputSpec>;
        #[doc = "Register `CHCTL1_Input` writer"]
        pub type W = crate::W<Chctl1InputSpec>;
        #[doc = "Field `CH2MS` reader - Channel 2 mode selection"]
        pub type Ch2msR = crate::FieldReader;
        #[doc = "Field `CH2MS` writer - Channel 2 mode selection"]
        pub type Ch2msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH2CAPPSC` reader - Channel 2 input capture prescaler"]
        pub type Ch2cappscR = crate::FieldReader;
        #[doc = "Field `CH2CAPPSC` writer - Channel 2 input capture prescaler"]
        pub type Ch2cappscW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH2CAPFLT` reader - Channel 2 input capture filter control"]
        pub type Ch2capfltR = crate::FieldReader;
        #[doc = "Field `CH2CAPFLT` writer - Channel 2 input capture filter control"]
        pub type Ch2capfltW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `CH3MS` reader - Channel 3 mode selection"]
        pub type Ch3msR = crate::FieldReader;
        #[doc = "Field `CH3MS` writer - Channel 3 mode selection"]
        pub type Ch3msW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH3CAPPSC` reader - Channel 3 input capture prescaler"]
        pub type Ch3cappscR = crate::FieldReader;
        #[doc = "Field `CH3CAPPSC` writer - Channel 3 input capture prescaler"]
        pub type Ch3cappscW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `CH3CAPFLT` reader - Channel 3 input capture filter control"]
        pub type Ch3capfltR = crate::FieldReader;
        #[doc = "Field `CH3CAPFLT` writer - Channel 3 input capture filter control"]
        pub type Ch3capfltW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        impl R {
            #[doc = "Bits 0:1 - Channel 2 mode selection"]
            #[inline(always)]
            pub fn ch2ms(&self) -> Ch2msR {
                Ch2msR::new((self.bits & 3) as u8)
            }
            #[doc = "Bits 2:3 - Channel 2 input capture prescaler"]
            #[inline(always)]
            pub fn ch2cappsc(&self) -> Ch2cappscR {
                Ch2cappscR::new(((self.bits >> 2) & 3) as u8)
            }
            #[doc = "Bits 4:7 - Channel 2 input capture filter control"]
            #[inline(always)]
            pub fn ch2capflt(&self) -> Ch2capfltR {
                Ch2capfltR::new(((self.bits >> 4) & 0x0f) as u8)
            }
            #[doc = "Bits 8:9 - Channel 3 mode selection"]
            #[inline(always)]
            pub fn ch3ms(&self) -> Ch3msR {
                Ch3msR::new(((self.bits >> 8) & 3) as u8)
            }
            #[doc = "Bits 10:11 - Channel 3 input capture prescaler"]
            #[inline(always)]
            pub fn ch3cappsc(&self) -> Ch3cappscR {
                Ch3cappscR::new(((self.bits >> 10) & 3) as u8)
            }
            #[doc = "Bits 12:15 - Channel 3 input capture filter control"]
            #[inline(always)]
            pub fn ch3capflt(&self) -> Ch3capfltR {
                Ch3capfltR::new(((self.bits >> 12) & 0x0f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:1 - Channel 2 mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch2ms(&mut self) -> Ch2msW<Chctl1InputSpec> {
                Ch2msW::new(self, 0)
            }
            #[doc = "Bits 2:3 - Channel 2 input capture prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn ch2cappsc(&mut self) -> Ch2cappscW<Chctl1InputSpec> {
                Ch2cappscW::new(self, 2)
            }
            #[doc = "Bits 4:7 - Channel 2 input capture filter control"]
            #[inline(always)]
            #[must_use]
            pub fn ch2capflt(&mut self) -> Ch2capfltW<Chctl1InputSpec> {
                Ch2capfltW::new(self, 4)
            }
            #[doc = "Bits 8:9 - Channel 3 mode selection"]
            #[inline(always)]
            #[must_use]
            pub fn ch3ms(&mut self) -> Ch3msW<Chctl1InputSpec> {
                Ch3msW::new(self, 8)
            }
            #[doc = "Bits 10:11 - Channel 3 input capture prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn ch3cappsc(&mut self) -> Ch3cappscW<Chctl1InputSpec> {
                Ch3cappscW::new(self, 10)
            }
            #[doc = "Bits 12:15 - Channel 3 input capture filter control"]
            #[inline(always)]
            #[must_use]
            pub fn ch3capflt(&mut self) -> Ch3capfltW<Chctl1InputSpec> {
                Ch3capfltW::new(self, 12)
            }
        }
        #[doc = "Channel control register 1 (input mode)\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl1_input::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl1_input::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Chctl1InputSpec;
        impl crate::RegisterSpec for Chctl1InputSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`chctl1_input::R`](R) reader structure"]
        impl crate::Readable for Chctl1InputSpec {}
        #[doc = "`write(|w| ..)` method takes [`chctl1_input::W`](W) writer structure"]
        impl crate::Writable for Chctl1InputSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CHCTL1_Input to value 0"]
        impl crate::Resettable for Chctl1InputSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CHCTL2 (rw) register accessor: Channel control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@chctl2`]
module"]
    #[doc(alias = "CHCTL2")]
    pub type Chctl2 = crate::Reg<chctl2::Chctl2Spec>;
    #[doc = "Channel control register 2"]
    pub mod chctl2 {
        #[doc = "Register `CHCTL2` reader"]
        pub type R = crate::R<Chctl2Spec>;
        #[doc = "Register `CHCTL2` writer"]
        pub type W = crate::W<Chctl2Spec>;
        #[doc = "Field `CH0EN` reader - Channel 0 capture/compare function enable"]
        pub type Ch0enR = crate::BitReader;
        #[doc = "Field `CH0EN` writer - Channel 0 capture/compare function enable"]
        pub type Ch0enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH0P` reader - Channel 0 capture/compare function polarity"]
        pub type Ch0pR = crate::BitReader;
        #[doc = "Field `CH0P` writer - Channel 0 capture/compare function polarity"]
        pub type Ch0pW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1EN` reader - Channel 1 capture/compare function enable"]
        pub type Ch1enR = crate::BitReader;
        #[doc = "Field `CH1EN` writer - Channel 1 capture/compare function enable"]
        pub type Ch1enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH1P` reader - Channel 1 capture/compare function polarity"]
        pub type Ch1pR = crate::BitReader;
        #[doc = "Field `CH1P` writer - Channel 1 capture/compare function polarity"]
        pub type Ch1pW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2EN` reader - Channel 2 capture/compare function enable"]
        pub type Ch2enR = crate::BitReader;
        #[doc = "Field `CH2EN` writer - Channel 2 capture/compare function enable"]
        pub type Ch2enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH2P` reader - Channel 2 capture/compare function polarity"]
        pub type Ch2pR = crate::BitReader;
        #[doc = "Field `CH2P` writer - Channel 2 capture/compare function polarity"]
        pub type Ch2pW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3EN` reader - Channel 3 capture/compare function enable"]
        pub type Ch3enR = crate::BitReader;
        #[doc = "Field `CH3EN` writer - Channel 3 capture/compare function enable"]
        pub type Ch3enW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CH3P` reader - Channel 3 capture/compare function polarity"]
        pub type Ch3pR = crate::BitReader;
        #[doc = "Field `CH3P` writer - Channel 3 capture/compare function polarity"]
        pub type Ch3pW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Channel 0 capture/compare function enable"]
            #[inline(always)]
            pub fn ch0en(&self) -> Ch0enR {
                Ch0enR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Channel 0 capture/compare function polarity"]
            #[inline(always)]
            pub fn ch0p(&self) -> Ch0pR {
                Ch0pR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 4 - Channel 1 capture/compare function enable"]
            #[inline(always)]
            pub fn ch1en(&self) -> Ch1enR {
                Ch1enR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Channel 1 capture/compare function polarity"]
            #[inline(always)]
            pub fn ch1p(&self) -> Ch1pR {
                Ch1pR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 8 - Channel 2 capture/compare function enable"]
            #[inline(always)]
            pub fn ch2en(&self) -> Ch2enR {
                Ch2enR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Channel 2 capture/compare function polarity"]
            #[inline(always)]
            pub fn ch2p(&self) -> Ch2pR {
                Ch2pR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 12 - Channel 3 capture/compare function enable"]
            #[inline(always)]
            pub fn ch3en(&self) -> Ch3enR {
                Ch3enR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Channel 3 capture/compare function polarity"]
            #[inline(always)]
            pub fn ch3p(&self) -> Ch3pR {
                Ch3pR::new(((self.bits >> 13) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Channel 0 capture/compare function enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch0en(&mut self) -> Ch0enW<Chctl2Spec> {
                Ch0enW::new(self, 0)
            }
            #[doc = "Bit 1 - Channel 0 capture/compare function polarity"]
            #[inline(always)]
            #[must_use]
            pub fn ch0p(&mut self) -> Ch0pW<Chctl2Spec> {
                Ch0pW::new(self, 1)
            }
            #[doc = "Bit 4 - Channel 1 capture/compare function enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch1en(&mut self) -> Ch1enW<Chctl2Spec> {
                Ch1enW::new(self, 4)
            }
            #[doc = "Bit 5 - Channel 1 capture/compare function polarity"]
            #[inline(always)]
            #[must_use]
            pub fn ch1p(&mut self) -> Ch1pW<Chctl2Spec> {
                Ch1pW::new(self, 5)
            }
            #[doc = "Bit 8 - Channel 2 capture/compare function enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch2en(&mut self) -> Ch2enW<Chctl2Spec> {
                Ch2enW::new(self, 8)
            }
            #[doc = "Bit 9 - Channel 2 capture/compare function polarity"]
            #[inline(always)]
            #[must_use]
            pub fn ch2p(&mut self) -> Ch2pW<Chctl2Spec> {
                Ch2pW::new(self, 9)
            }
            #[doc = "Bit 12 - Channel 3 capture/compare function enable"]
            #[inline(always)]
            #[must_use]
            pub fn ch3en(&mut self) -> Ch3enW<Chctl2Spec> {
                Ch3enW::new(self, 12)
            }
            #[doc = "Bit 13 - Channel 3 capture/compare function polarity"]
            #[inline(always)]
            #[must_use]
            pub fn ch3p(&mut self) -> Ch3pW<Chctl2Spec> {
                Ch3pW::new(self, 13)
            }
        }
        #[doc = "Channel control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`chctl2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`chctl2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Chctl2Spec;
        impl crate::RegisterSpec for Chctl2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`chctl2::R`](R) reader structure"]
        impl crate::Readable for Chctl2Spec {}
        #[doc = "`write(|w| ..)` method takes [`chctl2::W`](W) writer structure"]
        impl crate::Writable for Chctl2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CHCTL2 to value 0"]
        impl crate::Resettable for Chctl2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CNT (rw) register accessor: Counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cnt`]
module"]
    #[doc(alias = "CNT")]
    pub type Cnt = crate::Reg<cnt::CntSpec>;
    #[doc = "Counter register"]
    pub mod cnt {
        #[doc = "Register `CNT` reader"]
        pub type R = crate::R<CntSpec>;
        #[doc = "Register `CNT` writer"]
        pub type W = crate::W<CntSpec>;
        #[doc = "Field `CNT` reader - counter value"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - counter value"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - counter value"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<CntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CntSpec;
        impl crate::RegisterSpec for CntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cnt::R`](R) reader structure"]
        impl crate::Readable for CntSpec {}
        #[doc = "`write(|w| ..)` method takes [`cnt::W`](W) writer structure"]
        impl crate::Writable for CntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CNT to value 0"]
        impl crate::Resettable for CntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "PSC (rw) register accessor: Prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@psc`]
module"]
    #[doc(alias = "PSC")]
    pub type Psc = crate::Reg<psc::PscSpec>;
    #[doc = "Prescaler register"]
    pub mod psc {
        #[doc = "Register `PSC` reader"]
        pub type R = crate::R<PscSpec>;
        #[doc = "Register `PSC` writer"]
        pub type W = crate::W<PscSpec>;
        #[doc = "Field `PSC` reader - Prescaler value of the counter clock"]
        pub type PscR = crate::FieldReader<u16>;
        #[doc = "Field `PSC` writer - Prescaler value of the counter clock"]
        pub type PscW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Prescaler value of the counter clock"]
            #[inline(always)]
            pub fn psc(&self) -> PscR {
                PscR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value of the counter clock"]
            #[inline(always)]
            #[must_use]
            pub fn psc(&mut self) -> PscW<PscSpec> {
                PscW::new(self, 0)
            }
        }
        #[doc = "Prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct PscSpec;
        impl crate::RegisterSpec for PscSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`psc::R`](R) reader structure"]
        impl crate::Readable for PscSpec {}
        #[doc = "`write(|w| ..)` method takes [`psc::W`](W) writer structure"]
        impl crate::Writable for PscSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets PSC to value 0"]
        impl crate::Resettable for PscSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CAR (rw) register accessor: Counter auto reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`car::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`car::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@car`]
module"]
    #[doc(alias = "CAR")]
    pub type Car = crate::Reg<car::CarSpec>;
    #[doc = "Counter auto reload register"]
    pub mod car {
        #[doc = "Register `CAR` reader"]
        pub type R = crate::R<CarSpec>;
        #[doc = "Register `CAR` writer"]
        pub type W = crate::W<CarSpec>;
        #[doc = "Field `CARL` reader - Counter auto reload value"]
        pub type CarlR = crate::FieldReader<u16>;
        #[doc = "Field `CARL` writer - Counter auto reload value"]
        pub type CarlW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Counter auto reload value"]
            #[inline(always)]
            pub fn carl(&self) -> CarlR {
                CarlR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Counter auto reload value"]
            #[inline(always)]
            #[must_use]
            pub fn carl(&mut self) -> CarlW<CarSpec> {
                CarlW::new(self, 0)
            }
        }
        #[doc = "Counter auto reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`car::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`car::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CarSpec;
        impl crate::RegisterSpec for CarSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`car::R`](R) reader structure"]
        impl crate::Readable for CarSpec {}
        #[doc = "`write(|w| ..)` method takes [`car::W`](W) writer structure"]
        impl crate::Writable for CarSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CAR to value 0"]
        impl crate::Resettable for CarSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH0CV (rw) register accessor: Channel 0 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0cv::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0cv::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch0cv`]
module"]
    #[doc(alias = "CH0CV")]
    pub type Ch0cv = crate::Reg<ch0cv::Ch0cvSpec>;
    #[doc = "Channel 0 capture/compare value register"]
    pub mod ch0cv {
        #[doc = "Register `CH0CV` reader"]
        pub type R = crate::R<Ch0cvSpec>;
        #[doc = "Register `CH0CV` writer"]
        pub type W = crate::W<Ch0cvSpec>;
        #[doc = "Field `CH0VAL` reader - Capture or compare value of channel 0"]
        pub type Ch0valR = crate::FieldReader<u16>;
        #[doc = "Field `CH0VAL` writer - Capture or compare value of channel 0"]
        pub type Ch0valW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Capture or compare value of channel 0"]
            #[inline(always)]
            pub fn ch0val(&self) -> Ch0valR {
                Ch0valR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture or compare value of channel 0"]
            #[inline(always)]
            #[must_use]
            pub fn ch0val(&mut self) -> Ch0valW<Ch0cvSpec> {
                Ch0valW::new(self, 0)
            }
        }
        #[doc = "Channel 0 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch0cv::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch0cv::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch0cvSpec;
        impl crate::RegisterSpec for Ch0cvSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch0cv::R`](R) reader structure"]
        impl crate::Readable for Ch0cvSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch0cv::W`](W) writer structure"]
        impl crate::Writable for Ch0cvSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH0CV to value 0"]
        impl crate::Resettable for Ch0cvSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH1CV (rw) register accessor: Channel 1 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1cv::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1cv::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch1cv`]
module"]
    #[doc(alias = "CH1CV")]
    pub type Ch1cv = crate::Reg<ch1cv::Ch1cvSpec>;
    #[doc = "Channel 1 capture/compare value register"]
    pub mod ch1cv {
        #[doc = "Register `CH1CV` reader"]
        pub type R = crate::R<Ch1cvSpec>;
        #[doc = "Register `CH1CV` writer"]
        pub type W = crate::W<Ch1cvSpec>;
        #[doc = "Field `CH1VAL` reader - Capture or compare value of channel1"]
        pub type Ch1valR = crate::FieldReader<u16>;
        #[doc = "Field `CH1VAL` writer - Capture or compare value of channel1"]
        pub type Ch1valW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Capture or compare value of channel1"]
            #[inline(always)]
            pub fn ch1val(&self) -> Ch1valR {
                Ch1valR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture or compare value of channel1"]
            #[inline(always)]
            #[must_use]
            pub fn ch1val(&mut self) -> Ch1valW<Ch1cvSpec> {
                Ch1valW::new(self, 0)
            }
        }
        #[doc = "Channel 1 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch1cv::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch1cv::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch1cvSpec;
        impl crate::RegisterSpec for Ch1cvSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch1cv::R`](R) reader structure"]
        impl crate::Readable for Ch1cvSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch1cv::W`](W) writer structure"]
        impl crate::Writable for Ch1cvSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH1CV to value 0"]
        impl crate::Resettable for Ch1cvSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH2CV (rw) register accessor: Channel 2 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2cv::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2cv::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch2cv`]
module"]
    #[doc(alias = "CH2CV")]
    pub type Ch2cv = crate::Reg<ch2cv::Ch2cvSpec>;
    #[doc = "Channel 2 capture/compare value register"]
    pub mod ch2cv {
        #[doc = "Register `CH2CV` reader"]
        pub type R = crate::R<Ch2cvSpec>;
        #[doc = "Register `CH2CV` writer"]
        pub type W = crate::W<Ch2cvSpec>;
        #[doc = "Field `CH2VAL` reader - Capture or compare value of channel 2"]
        pub type Ch2valR = crate::FieldReader<u16>;
        #[doc = "Field `CH2VAL` writer - Capture or compare value of channel 2"]
        pub type Ch2valW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Capture or compare value of channel 2"]
            #[inline(always)]
            pub fn ch2val(&self) -> Ch2valR {
                Ch2valR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture or compare value of channel 2"]
            #[inline(always)]
            #[must_use]
            pub fn ch2val(&mut self) -> Ch2valW<Ch2cvSpec> {
                Ch2valW::new(self, 0)
            }
        }
        #[doc = "Channel 2 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch2cv::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch2cv::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch2cvSpec;
        impl crate::RegisterSpec for Ch2cvSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch2cv::R`](R) reader structure"]
        impl crate::Readable for Ch2cvSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch2cv::W`](W) writer structure"]
        impl crate::Writable for Ch2cvSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH2CV to value 0"]
        impl crate::Resettable for Ch2cvSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CH3CV (rw) register accessor: Channel 3 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3cv::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3cv::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ch3cv`]
module"]
    #[doc(alias = "CH3CV")]
    pub type Ch3cv = crate::Reg<ch3cv::Ch3cvSpec>;
    #[doc = "Channel 3 capture/compare value register"]
    pub mod ch3cv {
        #[doc = "Register `CH3CV` reader"]
        pub type R = crate::R<Ch3cvSpec>;
        #[doc = "Register `CH3CV` writer"]
        pub type W = crate::W<Ch3cvSpec>;
        #[doc = "Field `CH3VAL` reader - Capture or compare value of channel 3"]
        pub type Ch3valR = crate::FieldReader<u16>;
        #[doc = "Field `CH3VAL` writer - Capture or compare value of channel 3"]
        pub type Ch3valW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Capture or compare value of channel 3"]
            #[inline(always)]
            pub fn ch3val(&self) -> Ch3valR {
                Ch3valR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Capture or compare value of channel 3"]
            #[inline(always)]
            #[must_use]
            pub fn ch3val(&mut self) -> Ch3valW<Ch3cvSpec> {
                Ch3valW::new(self, 0)
            }
        }
        #[doc = "Channel 3 capture/compare value register\n\nYou can [`read`](crate::Reg::read) this register and get [`ch3cv::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ch3cv::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ch3cvSpec;
        impl crate::RegisterSpec for Ch3cvSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ch3cv::R`](R) reader structure"]
        impl crate::Readable for Ch3cvSpec {}
        #[doc = "`write(|w| ..)` method takes [`ch3cv::W`](W) writer structure"]
        impl crate::Writable for Ch3cvSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CH3CV to value 0"]
        impl crate::Resettable for Ch3cvSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DMACFG (rw) register accessor: DMA configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmacfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmacfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmacfg`]
module"]
    #[doc(alias = "DMACFG")]
    pub type Dmacfg = crate::Reg<dmacfg::DmacfgSpec>;
    #[doc = "DMA configuration register"]
    pub mod dmacfg {
        #[doc = "Register `DMACFG` reader"]
        pub type R = crate::R<DmacfgSpec>;
        #[doc = "Register `DMACFG` writer"]
        pub type W = crate::W<DmacfgSpec>;
        #[doc = "Field `DMATA` reader - DMA transfer access start address"]
        pub type DmataR = crate::FieldReader;
        #[doc = "Field `DMATA` writer - DMA transfer access start address"]
        pub type DmataW<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        #[doc = "Field `DMATC` reader - DMA transfer count"]
        pub type DmatcR = crate::FieldReader;
        #[doc = "Field `DMATC` writer - DMA transfer count"]
        pub type DmatcW<'a, REG> = crate::FieldWriter<'a, REG, 5>;
        impl R {
            #[doc = "Bits 0:4 - DMA transfer access start address"]
            #[inline(always)]
            pub fn dmata(&self) -> DmataR {
                DmataR::new((self.bits & 0x1f) as u8)
            }
            #[doc = "Bits 8:12 - DMA transfer count"]
            #[inline(always)]
            pub fn dmatc(&self) -> DmatcR {
                DmatcR::new(((self.bits >> 8) & 0x1f) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:4 - DMA transfer access start address"]
            #[inline(always)]
            #[must_use]
            pub fn dmata(&mut self) -> DmataW<DmacfgSpec> {
                DmataW::new(self, 0)
            }
            #[doc = "Bits 8:12 - DMA transfer count"]
            #[inline(always)]
            #[must_use]
            pub fn dmatc(&mut self) -> DmatcW<DmacfgSpec> {
                DmatcW::new(self, 8)
            }
        }
        #[doc = "DMA configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmacfg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmacfg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DmacfgSpec;
        impl crate::RegisterSpec for DmacfgSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dmacfg::R`](R) reader structure"]
        impl crate::Readable for DmacfgSpec {}
        #[doc = "`write(|w| ..)` method takes [`dmacfg::W`](W) writer structure"]
        impl crate::Writable for DmacfgSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DMACFG to value 0"]
        impl crate::Resettable for DmacfgSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DMATB (rw) register accessor: DMA transfer buffer register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmatb::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmatb::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmatb`]
module"]
    #[doc(alias = "DMATB")]
    pub type Dmatb = crate::Reg<dmatb::DmatbSpec>;
    #[doc = "DMA transfer buffer register"]
    pub mod dmatb {
        #[doc = "Register `DMATB` reader"]
        pub type R = crate::R<DmatbSpec>;
        #[doc = "Register `DMATB` writer"]
        pub type W = crate::W<DmatbSpec>;
        #[doc = "Field `DMATB` reader - DMA transfer buffer"]
        pub type DmatbR = crate::FieldReader<u16>;
        #[doc = "Field `DMATB` writer - DMA transfer buffer"]
        pub type DmatbW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - DMA transfer buffer"]
            #[inline(always)]
            pub fn dmatb(&self) -> DmatbR {
                DmatbR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - DMA transfer buffer"]
            #[inline(always)]
            #[must_use]
            pub fn dmatb(&mut self) -> DmatbW<DmatbSpec> {
                DmatbW::new(self, 0)
            }
        }
        #[doc = "DMA transfer buffer register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmatb::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmatb::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DmatbSpec;
        impl crate::RegisterSpec for DmatbSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dmatb::R`](R) reader structure"]
        impl crate::Readable for DmatbSpec {}
        #[doc = "`write(|w| ..)` method takes [`dmatb::W`](W) writer structure"]
        impl crate::Writable for DmatbSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DMATB to value 0"]
        impl crate::Resettable for DmatbSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "General-purpose-timers"]
pub struct Timer2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Timer2 {}
impl Timer2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer1::RegisterBlock = 0x4000_0400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer1::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Timer2 {
    type Target = timer1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Timer2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer2").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::timer1 as timer2;
#[doc = "General-purpose-timers"]
pub struct Timer3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Timer3 {}
impl Timer3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer1::RegisterBlock = 0x4000_0800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer1::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Timer3 {
    type Target = timer1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Timer3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer3").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::timer1 as timer3;
#[doc = "General-purpose-timers"]
pub struct Timer4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Timer4 {}
impl Timer4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer1::RegisterBlock = 0x4000_0c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer1::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Timer4 {
    type Target = timer1::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Timer4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer4").finish()
    }
}
#[doc = "General-purpose-timers"]
pub use self::timer1 as timer4;
#[doc = "Basic-timers"]
pub struct Timer5 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Timer5 {}
impl Timer5 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer5::RegisterBlock = 0x4000_1000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer5::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Timer5 {
    type Target = timer5::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Timer5 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer5").finish()
    }
}
#[doc = "Basic-timers"]
pub mod timer5 {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ctl0: Ctl0,
        ctl1: Ctl1,
        _reserved2: [u8; 0x04],
        dmainten: Dmainten,
        intf: Intf,
        swevg: Swevg,
        _reserved5: [u8; 0x0c],
        cnt: Cnt,
        psc: Psc,
        car: Car,
    }
    impl RegisterBlock {
        #[doc = "0x00 - control register 0"]
        #[inline(always)]
        pub const fn ctl0(&self) -> &Ctl0 {
            &self.ctl0
        }
        #[doc = "0x04 - control register 1"]
        #[inline(always)]
        pub const fn ctl1(&self) -> &Ctl1 {
            &self.ctl1
        }
        #[doc = "0x0c - DMA/Interrupt enable register"]
        #[inline(always)]
        pub const fn dmainten(&self) -> &Dmainten {
            &self.dmainten
        }
        #[doc = "0x10 - Interrupt flag register"]
        #[inline(always)]
        pub const fn intf(&self) -> &Intf {
            &self.intf
        }
        #[doc = "0x14 - event generation register"]
        #[inline(always)]
        pub const fn swevg(&self) -> &Swevg {
            &self.swevg
        }
        #[doc = "0x24 - Counter register"]
        #[inline(always)]
        pub const fn cnt(&self) -> &Cnt {
            &self.cnt
        }
        #[doc = "0x28 - Prescaler register"]
        #[inline(always)]
        pub const fn psc(&self) -> &Psc {
            &self.psc
        }
        #[doc = "0x2c - Counter auto reload register"]
        #[inline(always)]
        pub const fn car(&self) -> &Car {
            &self.car
        }
    }
    #[doc = "CTL0 (rw) register accessor: control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl0`]
module"]
    #[doc(alias = "CTL0")]
    pub type Ctl0 = crate::Reg<ctl0::Ctl0Spec>;
    #[doc = "control register 0"]
    pub mod ctl0 {
        #[doc = "Register `CTL0` reader"]
        pub type R = crate::R<Ctl0Spec>;
        #[doc = "Register `CTL0` writer"]
        pub type W = crate::W<Ctl0Spec>;
        #[doc = "Field `CEN` reader - Counter enable"]
        pub type CenR = crate::BitReader;
        #[doc = "Field `CEN` writer - Counter enable"]
        pub type CenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UPDIS` reader - Update disable"]
        pub type UpdisR = crate::BitReader;
        #[doc = "Field `UPDIS` writer - Update disable"]
        pub type UpdisW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UPS` reader - Update source"]
        pub type UpsR = crate::BitReader;
        #[doc = "Field `UPS` writer - Update source"]
        pub type UpsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SPM` reader - Single pulse mode"]
        pub type SpmR = crate::BitReader;
        #[doc = "Field `SPM` writer - Single pulse mode"]
        pub type SpmW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ARSE` reader - Auto-reload shadow enable"]
        pub type ArseR = crate::BitReader;
        #[doc = "Field `ARSE` writer - Auto-reload shadow enable"]
        pub type ArseW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            pub fn cen(&self) -> CenR {
                CenR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            pub fn updis(&self) -> UpdisR {
                UpdisR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Update source"]
            #[inline(always)]
            pub fn ups(&self) -> UpsR {
                UpsR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Single pulse mode"]
            #[inline(always)]
            pub fn spm(&self) -> SpmR {
                SpmR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 7 - Auto-reload shadow enable"]
            #[inline(always)]
            pub fn arse(&self) -> ArseR {
                ArseR::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Counter enable"]
            #[inline(always)]
            #[must_use]
            pub fn cen(&mut self) -> CenW<Ctl0Spec> {
                CenW::new(self, 0)
            }
            #[doc = "Bit 1 - Update disable"]
            #[inline(always)]
            #[must_use]
            pub fn updis(&mut self) -> UpdisW<Ctl0Spec> {
                UpdisW::new(self, 1)
            }
            #[doc = "Bit 2 - Update source"]
            #[inline(always)]
            #[must_use]
            pub fn ups(&mut self) -> UpsW<Ctl0Spec> {
                UpsW::new(self, 2)
            }
            #[doc = "Bit 3 - Single pulse mode"]
            #[inline(always)]
            #[must_use]
            pub fn spm(&mut self) -> SpmW<Ctl0Spec> {
                SpmW::new(self, 3)
            }
            #[doc = "Bit 7 - Auto-reload shadow enable"]
            #[inline(always)]
            #[must_use]
            pub fn arse(&mut self) -> ArseW<Ctl0Spec> {
                ArseW::new(self, 7)
            }
        }
        #[doc = "control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl0Spec;
        impl crate::RegisterSpec for Ctl0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl0::R`](R) reader structure"]
        impl crate::Readable for Ctl0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl0::W`](W) writer structure"]
        impl crate::Writable for Ctl0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL0 to value 0"]
        impl crate::Resettable for Ctl0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL1 (rw) register accessor: control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl1`]
module"]
    #[doc(alias = "CTL1")]
    pub type Ctl1 = crate::Reg<ctl1::Ctl1Spec>;
    #[doc = "control register 1"]
    pub mod ctl1 {
        #[doc = "Register `CTL1` reader"]
        pub type R = crate::R<Ctl1Spec>;
        #[doc = "Register `CTL1` writer"]
        pub type W = crate::W<Ctl1Spec>;
        #[doc = "Field `MMC` reader - Master mode control"]
        pub type MmcR = crate::FieldReader;
        #[doc = "Field `MMC` writer - Master mode control"]
        pub type MmcW<'a, REG> = crate::FieldWriter<'a, REG, 3>;
        impl R {
            #[doc = "Bits 4:6 - Master mode control"]
            #[inline(always)]
            pub fn mmc(&self) -> MmcR {
                MmcR::new(((self.bits >> 4) & 7) as u8)
            }
        }
        impl W {
            #[doc = "Bits 4:6 - Master mode control"]
            #[inline(always)]
            #[must_use]
            pub fn mmc(&mut self) -> MmcW<Ctl1Spec> {
                MmcW::new(self, 4)
            }
        }
        #[doc = "control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl1Spec;
        impl crate::RegisterSpec for Ctl1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl1::R`](R) reader structure"]
        impl crate::Readable for Ctl1Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"]
        impl crate::Writable for Ctl1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL1 to value 0"]
        impl crate::Resettable for Ctl1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DMAINTEN (rw) register accessor: DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmainten::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmainten::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@dmainten`]
module"]
    #[doc(alias = "DMAINTEN")]
    pub type Dmainten = crate::Reg<dmainten::DmaintenSpec>;
    #[doc = "DMA/Interrupt enable register"]
    pub mod dmainten {
        #[doc = "Register `DMAINTEN` reader"]
        pub type R = crate::R<DmaintenSpec>;
        #[doc = "Register `DMAINTEN` writer"]
        pub type W = crate::W<DmaintenSpec>;
        #[doc = "Field `UPIE` reader - Update interrupt enable"]
        pub type UpieR = crate::BitReader;
        #[doc = "Field `UPIE` writer - Update interrupt enable"]
        pub type UpieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UPDEN` reader - Update DMA request enable"]
        pub type UpdenR = crate::BitReader;
        #[doc = "Field `UPDEN` writer - Update DMA request enable"]
        pub type UpdenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            pub fn upie(&self) -> UpieR {
                UpieR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            pub fn upden(&self) -> UpdenR {
                UpdenR::new(((self.bits >> 8) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Update interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn upie(&mut self) -> UpieW<DmaintenSpec> {
                UpieW::new(self, 0)
            }
            #[doc = "Bit 8 - Update DMA request enable"]
            #[inline(always)]
            #[must_use]
            pub fn upden(&mut self) -> UpdenW<DmaintenSpec> {
                UpdenW::new(self, 8)
            }
        }
        #[doc = "DMA/Interrupt enable register\n\nYou can [`read`](crate::Reg::read) this register and get [`dmainten::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`dmainten::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DmaintenSpec;
        impl crate::RegisterSpec for DmaintenSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`dmainten::R`](R) reader structure"]
        impl crate::Readable for DmaintenSpec {}
        #[doc = "`write(|w| ..)` method takes [`dmainten::W`](W) writer structure"]
        impl crate::Writable for DmaintenSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DMAINTEN to value 0"]
        impl crate::Resettable for DmaintenSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "INTF (rw) register accessor: Interrupt flag register\n\nYou can [`read`](crate::Reg::read) this register and get [`intf::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intf::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intf`]
module"]
    #[doc(alias = "INTF")]
    pub type Intf = crate::Reg<intf::IntfSpec>;
    #[doc = "Interrupt flag register"]
    pub mod intf {
        #[doc = "Register `INTF` reader"]
        pub type R = crate::R<IntfSpec>;
        #[doc = "Register `INTF` writer"]
        pub type W = crate::W<IntfSpec>;
        #[doc = "Field `UPIF` reader - Update interrupt flag"]
        pub type UpifR = crate::BitReader;
        #[doc = "Field `UPIF` writer - Update interrupt flag"]
        pub type UpifW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            pub fn upif(&self) -> UpifR {
                UpifR::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Update interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn upif(&mut self) -> UpifW<IntfSpec> {
                UpifW::new(self, 0)
            }
        }
        #[doc = "Interrupt flag register\n\nYou can [`read`](crate::Reg::read) this register and get [`intf::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intf::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntfSpec;
        impl crate::RegisterSpec for IntfSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`intf::R`](R) reader structure"]
        impl crate::Readable for IntfSpec {}
        #[doc = "`write(|w| ..)` method takes [`intf::W`](W) writer structure"]
        impl crate::Writable for IntfSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets INTF to value 0"]
        impl crate::Resettable for IntfSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "SWEVG (w) register accessor: event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swevg::W`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@swevg`]
module"]
    #[doc(alias = "SWEVG")]
    pub type Swevg = crate::Reg<swevg::SwevgSpec>;
    #[doc = "event generation register"]
    pub mod swevg {
        #[doc = "Register `SWEVG` writer"]
        pub type W = crate::W<SwevgSpec>;
        #[doc = "Field `UPG` writer - Update generation"]
        pub type UpgW<'a, REG> = crate::BitWriter<'a, REG>;
        impl W {
            #[doc = "Bit 0 - Update generation"]
            #[inline(always)]
            #[must_use]
            pub fn upg(&mut self) -> UpgW<SwevgSpec> {
                UpgW::new(self, 0)
            }
        }
        #[doc = "event generation register\n\nYou can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`swevg::W`](W). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct SwevgSpec;
        impl crate::RegisterSpec for SwevgSpec {
            type Ux = u32;
        }
        #[doc = "`write(|w| ..)` method takes [`swevg::W`](W) writer structure"]
        impl crate::Writable for SwevgSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets SWEVG to value 0"]
        impl crate::Resettable for SwevgSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CNT (rw) register accessor: Counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cnt`]
module"]
    #[doc(alias = "CNT")]
    pub type Cnt = crate::Reg<cnt::CntSpec>;
    #[doc = "Counter register"]
    pub mod cnt {
        #[doc = "Register `CNT` reader"]
        pub type R = crate::R<CntSpec>;
        #[doc = "Register `CNT` writer"]
        pub type W = crate::W<CntSpec>;
        #[doc = "Field `CNT` reader - Low counter value"]
        pub type CntR = crate::FieldReader<u16>;
        #[doc = "Field `CNT` writer - Low counter value"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Low counter value"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Low counter value"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<CntSpec> {
                CntW::new(self, 0)
            }
        }
        #[doc = "Counter register\n\nYou can [`read`](crate::Reg::read) this register and get [`cnt::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cnt::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CntSpec;
        impl crate::RegisterSpec for CntSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cnt::R`](R) reader structure"]
        impl crate::Readable for CntSpec {}
        #[doc = "`write(|w| ..)` method takes [`cnt::W`](W) writer structure"]
        impl crate::Writable for CntSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CNT to value 0"]
        impl crate::Resettable for CntSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "PSC (rw) register accessor: Prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@psc`]
module"]
    #[doc(alias = "PSC")]
    pub type Psc = crate::Reg<psc::PscSpec>;
    #[doc = "Prescaler register"]
    pub mod psc {
        #[doc = "Register `PSC` reader"]
        pub type R = crate::R<PscSpec>;
        #[doc = "Register `PSC` writer"]
        pub type W = crate::W<PscSpec>;
        #[doc = "Field `PSC` reader - Prescaler value of the counter clock"]
        pub type PscR = crate::FieldReader<u16>;
        #[doc = "Field `PSC` writer - Prescaler value of the counter clock"]
        pub type PscW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Prescaler value of the counter clock"]
            #[inline(always)]
            pub fn psc(&self) -> PscR {
                PscR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Prescaler value of the counter clock"]
            #[inline(always)]
            #[must_use]
            pub fn psc(&mut self) -> PscW<PscSpec> {
                PscW::new(self, 0)
            }
        }
        #[doc = "Prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`psc::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`psc::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct PscSpec;
        impl crate::RegisterSpec for PscSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`psc::R`](R) reader structure"]
        impl crate::Readable for PscSpec {}
        #[doc = "`write(|w| ..)` method takes [`psc::W`](W) writer structure"]
        impl crate::Writable for PscSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets PSC to value 0"]
        impl crate::Resettable for PscSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CAR (rw) register accessor: Counter auto reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`car::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`car::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@car`]
module"]
    #[doc(alias = "CAR")]
    pub type Car = crate::Reg<car::CarSpec>;
    #[doc = "Counter auto reload register"]
    pub mod car {
        #[doc = "Register `CAR` reader"]
        pub type R = crate::R<CarSpec>;
        #[doc = "Register `CAR` writer"]
        pub type W = crate::W<CarSpec>;
        #[doc = "Field `CARL` reader - Counter auto reload value"]
        pub type CarlR = crate::FieldReader<u16>;
        #[doc = "Field `CARL` writer - Counter auto reload value"]
        pub type CarlW<'a, REG> = crate::FieldWriter<'a, REG, 16, u16>;
        impl R {
            #[doc = "Bits 0:15 - Counter auto reload value"]
            #[inline(always)]
            pub fn carl(&self) -> CarlR {
                CarlR::new((self.bits & 0xffff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:15 - Counter auto reload value"]
            #[inline(always)]
            #[must_use]
            pub fn carl(&mut self) -> CarlW<CarSpec> {
                CarlW::new(self, 0)
            }
        }
        #[doc = "Counter auto reload register\n\nYou can [`read`](crate::Reg::read) this register and get [`car::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`car::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CarSpec;
        impl crate::RegisterSpec for CarSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`car::R`](R) reader structure"]
        impl crate::Readable for CarSpec {}
        #[doc = "`write(|w| ..)` method takes [`car::W`](W) writer structure"]
        impl crate::Writable for CarSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CAR to value 0"]
        impl crate::Resettable for CarSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Basic-timers"]
pub struct Timer6 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Timer6 {}
impl Timer6 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer5::RegisterBlock = 0x4000_1400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer5::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Timer6 {
    type Target = timer5::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Timer6 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer6").finish()
    }
}
#[doc = "Basic-timers"]
pub use self::timer5 as timer6;
#[doc = "Advanced-timers"]
pub struct Timer7 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Timer7 {}
impl Timer7 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const timer0::RegisterBlock = 0x4001_3400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const timer0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Timer7 {
    type Target = timer0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Timer7 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Timer7").finish()
    }
}
#[doc = "Advanced-timers"]
pub use self::timer0 as timer7;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct Usart0 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Usart0 {}
impl Usart0 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usart0::RegisterBlock = 0x4001_3800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Usart0 {
    type Target = usart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Usart0 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart0").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub mod usart0 {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        stat: Stat,
        data: Data,
        baud: Baud,
        ctl0: Ctl0,
        ctl1: Ctl1,
        ctl2: Ctl2,
        gp: Gp,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Status register"]
        #[inline(always)]
        pub const fn stat(&self) -> &Stat {
            &self.stat
        }
        #[doc = "0x04 - Data register"]
        #[inline(always)]
        pub const fn data(&self) -> &Data {
            &self.data
        }
        #[doc = "0x08 - Baud rate register"]
        #[inline(always)]
        pub const fn baud(&self) -> &Baud {
            &self.baud
        }
        #[doc = "0x0c - Control register 0"]
        #[inline(always)]
        pub const fn ctl0(&self) -> &Ctl0 {
            &self.ctl0
        }
        #[doc = "0x10 - Control register 1"]
        #[inline(always)]
        pub const fn ctl1(&self) -> &Ctl1 {
            &self.ctl1
        }
        #[doc = "0x14 - Control register 2"]
        #[inline(always)]
        pub const fn ctl2(&self) -> &Ctl2 {
            &self.ctl2
        }
        #[doc = "0x18 - Guard time and prescaler register"]
        #[inline(always)]
        pub const fn gp(&self) -> &Gp {
            &self.gp
        }
    }
    #[doc = "STAT (rw) register accessor: Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat`]
module"]
    #[doc(alias = "STAT")]
    pub type Stat = crate::Reg<stat::StatSpec>;
    #[doc = "Status register"]
    pub mod stat {
        #[doc = "Register `STAT` reader"]
        pub type R = crate::R<StatSpec>;
        #[doc = "Register `STAT` writer"]
        pub type W = crate::W<StatSpec>;
        #[doc = "Field `PERR` reader - Parity error flag"]
        pub type PerrR = crate::BitReader;
        #[doc = "Field `FERR` reader - Frame error flag"]
        pub type FerrR = crate::BitReader;
        #[doc = "Field `NERR` reader - Noise error flag"]
        pub type NerrR = crate::BitReader;
        #[doc = "Field `ORERR` reader - Overrun error"]
        pub type OrerrR = crate::BitReader;
        #[doc = "Field `IDLEF` reader - IDLE frame detected flag"]
        pub type IdlefR = crate::BitReader;
        #[doc = "Field `RBNE` reader - Read data buffer not empty"]
        pub type RbneR = crate::BitReader;
        #[doc = "Field `RBNE` writer - Read data buffer not empty"]
        pub type RbneW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TC` reader - Transmission complete"]
        pub type TcR = crate::BitReader;
        #[doc = "Field `TC` writer - Transmission complete"]
        pub type TcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TBE` reader - Transmit data buffer empty"]
        pub type TbeR = crate::BitReader;
        #[doc = "Field `LBDF` reader - LIN break detection flag"]
        pub type LbdfR = crate::BitReader;
        #[doc = "Field `LBDF` writer - LIN break detection flag"]
        pub type LbdfW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CTSF` reader - CTS change flag"]
        pub type CtsfR = crate::BitReader;
        #[doc = "Field `CTSF` writer - CTS change flag"]
        pub type CtsfW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Parity error flag"]
            #[inline(always)]
            pub fn perr(&self) -> PerrR {
                PerrR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Frame error flag"]
            #[inline(always)]
            pub fn ferr(&self) -> FerrR {
                FerrR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Noise error flag"]
            #[inline(always)]
            pub fn nerr(&self) -> NerrR {
                NerrR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Overrun error"]
            #[inline(always)]
            pub fn orerr(&self) -> OrerrR {
                OrerrR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - IDLE frame detected flag"]
            #[inline(always)]
            pub fn idlef(&self) -> IdlefR {
                IdlefR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Read data buffer not empty"]
            #[inline(always)]
            pub fn rbne(&self) -> RbneR {
                RbneR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Transmission complete"]
            #[inline(always)]
            pub fn tc(&self) -> TcR {
                TcR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Transmit data buffer empty"]
            #[inline(always)]
            pub fn tbe(&self) -> TbeR {
                TbeR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - LIN break detection flag"]
            #[inline(always)]
            pub fn lbdf(&self) -> LbdfR {
                LbdfR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - CTS change flag"]
            #[inline(always)]
            pub fn ctsf(&self) -> CtsfR {
                CtsfR::new(((self.bits >> 9) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 5 - Read data buffer not empty"]
            #[inline(always)]
            #[must_use]
            pub fn rbne(&mut self) -> RbneW<StatSpec> {
                RbneW::new(self, 5)
            }
            #[doc = "Bit 6 - Transmission complete"]
            #[inline(always)]
            #[must_use]
            pub fn tc(&mut self) -> TcW<StatSpec> {
                TcW::new(self, 6)
            }
            #[doc = "Bit 8 - LIN break detection flag"]
            #[inline(always)]
            #[must_use]
            pub fn lbdf(&mut self) -> LbdfW<StatSpec> {
                LbdfW::new(self, 8)
            }
            #[doc = "Bit 9 - CTS change flag"]
            #[inline(always)]
            #[must_use]
            pub fn ctsf(&mut self) -> CtsfW<StatSpec> {
                CtsfW::new(self, 9)
            }
        }
        #[doc = "Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct StatSpec;
        impl crate::RegisterSpec for StatSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat::R`](R) reader structure"]
        impl crate::Readable for StatSpec {}
        #[doc = "`write(|w| ..)` method takes [`stat::W`](W) writer structure"]
        impl crate::Writable for StatSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets STAT to value 0xc0"]
        impl crate::Resettable for StatSpec {
            const RESET_VALUE: u32 = 0xc0;
        }
    }
    #[doc = "DATA (rw) register accessor: Data register\n\nYou can [`read`](crate::Reg::read) this register and get [`data::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data`]
module"]
    #[doc(alias = "DATA")]
    pub type Data = crate::Reg<data::DataSpec>;
    #[doc = "Data register"]
    pub mod data {
        #[doc = "Register `DATA` reader"]
        pub type R = crate::R<DataSpec>;
        #[doc = "Register `DATA` writer"]
        pub type W = crate::W<DataSpec>;
        #[doc = "Field `DATA` reader - Transmit or read data value"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Transmit or read data value"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 9, u16>;
        impl R {
            #[doc = "Bits 0:8 - Transmit or read data value"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0x01ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:8 - Transmit or read data value"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<DataSpec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Data register\n\nYou can [`read`](crate::Reg::read) this register and get [`data::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DataSpec;
        impl crate::RegisterSpec for DataSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data::R`](R) reader structure"]
        impl crate::Readable for DataSpec {}
        #[doc = "`write(|w| ..)` method takes [`data::W`](W) writer structure"]
        impl crate::Writable for DataSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA to value 0"]
        impl crate::Resettable for DataSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "BAUD (rw) register accessor: Baud rate register\n\nYou can [`read`](crate::Reg::read) this register and get [`baud::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`baud::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@baud`]
module"]
    #[doc(alias = "BAUD")]
    pub type Baud = crate::Reg<baud::BaudSpec>;
    #[doc = "Baud rate register"]
    pub mod baud {
        #[doc = "Register `BAUD` reader"]
        pub type R = crate::R<BaudSpec>;
        #[doc = "Register `BAUD` writer"]
        pub type W = crate::W<BaudSpec>;
        #[doc = "Field `FRADIV` reader - Fraction part of baud-rate divider"]
        pub type FradivR = crate::FieldReader;
        #[doc = "Field `FRADIV` writer - Fraction part of baud-rate divider"]
        pub type FradivW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `INTDIV` reader - Integer part of baud-rate divider"]
        pub type IntdivR = crate::FieldReader<u16>;
        #[doc = "Field `INTDIV` writer - Integer part of baud-rate divider"]
        pub type IntdivW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:3 - Fraction part of baud-rate divider"]
            #[inline(always)]
            pub fn fradiv(&self) -> FradivR {
                FradivR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:15 - Integer part of baud-rate divider"]
            #[inline(always)]
            pub fn intdiv(&self) -> IntdivR {
                IntdivR::new(((self.bits >> 4) & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Fraction part of baud-rate divider"]
            #[inline(always)]
            #[must_use]
            pub fn fradiv(&mut self) -> FradivW<BaudSpec> {
                FradivW::new(self, 0)
            }
            #[doc = "Bits 4:15 - Integer part of baud-rate divider"]
            #[inline(always)]
            #[must_use]
            pub fn intdiv(&mut self) -> IntdivW<BaudSpec> {
                IntdivW::new(self, 4)
            }
        }
        #[doc = "Baud rate register\n\nYou can [`read`](crate::Reg::read) this register and get [`baud::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`baud::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct BaudSpec;
        impl crate::RegisterSpec for BaudSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`baud::R`](R) reader structure"]
        impl crate::Readable for BaudSpec {}
        #[doc = "`write(|w| ..)` method takes [`baud::W`](W) writer structure"]
        impl crate::Writable for BaudSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets BAUD to value 0"]
        impl crate::Resettable for BaudSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL0 (rw) register accessor: Control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl0`]
module"]
    #[doc(alias = "CTL0")]
    pub type Ctl0 = crate::Reg<ctl0::Ctl0Spec>;
    #[doc = "Control register 0"]
    pub mod ctl0 {
        #[doc = "Register `CTL0` reader"]
        pub type R = crate::R<Ctl0Spec>;
        #[doc = "Register `CTL0` writer"]
        pub type W = crate::W<Ctl0Spec>;
        #[doc = "Field `SBKCMD` reader - Send break command"]
        pub type SbkcmdR = crate::BitReader;
        #[doc = "Field `SBKCMD` writer - Send break command"]
        pub type SbkcmdW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RWU` reader - Receiver wakeup from mute mode"]
        pub type RwuR = crate::BitReader;
        #[doc = "Field `RWU` writer - Receiver wakeup from mute mode"]
        pub type RwuW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `REN` reader - Receiver enable"]
        pub type RenR = crate::BitReader;
        #[doc = "Field `REN` writer - Receiver enable"]
        pub type RenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TEN` reader - Transmitter enable"]
        pub type TenR = crate::BitReader;
        #[doc = "Field `TEN` writer - Transmitter enable"]
        pub type TenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `IDLEIE` reader - IDLE line detected interrupt enable"]
        pub type IdleieR = crate::BitReader;
        #[doc = "Field `IDLEIE` writer - IDLE line detected interrupt enable"]
        pub type IdleieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RBNEIE` reader - Read data buffer not empty interrupt and overrun error interrupt enable"]
        pub type RbneieR = crate::BitReader;
        #[doc = "Field `RBNEIE` writer - Read data buffer not empty interrupt and overrun error interrupt enable"]
        pub type RbneieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TCIE` reader - Transmission complete interrupt enable"]
        pub type TcieR = crate::BitReader;
        #[doc = "Field `TCIE` writer - Transmission complete interrupt enable"]
        pub type TcieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TBEIE` reader - Transmitter buffer empty interrupt enable"]
        pub type TbeieR = crate::BitReader;
        #[doc = "Field `TBEIE` writer - Transmitter buffer empty interrupt enable"]
        pub type TbeieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PERRIE` reader - Parity error interrupt enable"]
        pub type PerrieR = crate::BitReader;
        #[doc = "Field `PERRIE` writer - Parity error interrupt enable"]
        pub type PerrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PM` reader - Parity mode"]
        pub type PmR = crate::BitReader;
        #[doc = "Field `PM` writer - Parity mode"]
        pub type PmW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PCEN` reader - Parity check function enable"]
        pub type PcenR = crate::BitReader;
        #[doc = "Field `PCEN` writer - Parity check function enable"]
        pub type PcenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WM` reader - Wakeup method in mute mode"]
        pub type WmR = crate::BitReader;
        #[doc = "Field `WM` writer - Wakeup method in mute mode"]
        pub type WmW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WL` reader - Word length"]
        pub type WlR = crate::BitReader;
        #[doc = "Field `WL` writer - Word length"]
        pub type WlW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UEN` reader - USART enable"]
        pub type UenR = crate::BitReader;
        #[doc = "Field `UEN` writer - USART enable"]
        pub type UenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Send break command"]
            #[inline(always)]
            pub fn sbkcmd(&self) -> SbkcmdR {
                SbkcmdR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Receiver wakeup from mute mode"]
            #[inline(always)]
            pub fn rwu(&self) -> RwuR {
                RwuR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            pub fn ren(&self) -> RenR {
                RenR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            pub fn ten(&self) -> TenR {
                TenR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - IDLE line detected interrupt enable"]
            #[inline(always)]
            pub fn idleie(&self) -> IdleieR {
                IdleieR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Read data buffer not empty interrupt and overrun error interrupt enable"]
            #[inline(always)]
            pub fn rbneie(&self) -> RbneieR {
                RbneieR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TcieR {
                TcieR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Transmitter buffer empty interrupt enable"]
            #[inline(always)]
            pub fn tbeie(&self) -> TbeieR {
                TbeieR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Parity error interrupt enable"]
            #[inline(always)]
            pub fn perrie(&self) -> PerrieR {
                PerrieR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Parity mode"]
            #[inline(always)]
            pub fn pm(&self) -> PmR {
                PmR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Parity check function enable"]
            #[inline(always)]
            pub fn pcen(&self) -> PcenR {
                PcenR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Wakeup method in mute mode"]
            #[inline(always)]
            pub fn wm(&self) -> WmR {
                WmR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            pub fn wl(&self) -> WlR {
                WlR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - USART enable"]
            #[inline(always)]
            pub fn uen(&self) -> UenR {
                UenR::new(((self.bits >> 13) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Send break command"]
            #[inline(always)]
            #[must_use]
            pub fn sbkcmd(&mut self) -> SbkcmdW<Ctl0Spec> {
                SbkcmdW::new(self, 0)
            }
            #[doc = "Bit 1 - Receiver wakeup from mute mode"]
            #[inline(always)]
            #[must_use]
            pub fn rwu(&mut self) -> RwuW<Ctl0Spec> {
                RwuW::new(self, 1)
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            #[must_use]
            pub fn ren(&mut self) -> RenW<Ctl0Spec> {
                RenW::new(self, 2)
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            #[must_use]
            pub fn ten(&mut self) -> TenW<Ctl0Spec> {
                TenW::new(self, 3)
            }
            #[doc = "Bit 4 - IDLE line detected interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn idleie(&mut self) -> IdleieW<Ctl0Spec> {
                IdleieW::new(self, 4)
            }
            #[doc = "Bit 5 - Read data buffer not empty interrupt and overrun error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rbneie(&mut self) -> RbneieW<Ctl0Spec> {
                RbneieW::new(self, 5)
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn tcie(&mut self) -> TcieW<Ctl0Spec> {
                TcieW::new(self, 6)
            }
            #[doc = "Bit 7 - Transmitter buffer empty interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn tbeie(&mut self) -> TbeieW<Ctl0Spec> {
                TbeieW::new(self, 7)
            }
            #[doc = "Bit 8 - Parity error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn perrie(&mut self) -> PerrieW<Ctl0Spec> {
                PerrieW::new(self, 8)
            }
            #[doc = "Bit 9 - Parity mode"]
            #[inline(always)]
            #[must_use]
            pub fn pm(&mut self) -> PmW<Ctl0Spec> {
                PmW::new(self, 9)
            }
            #[doc = "Bit 10 - Parity check function enable"]
            #[inline(always)]
            #[must_use]
            pub fn pcen(&mut self) -> PcenW<Ctl0Spec> {
                PcenW::new(self, 10)
            }
            #[doc = "Bit 11 - Wakeup method in mute mode"]
            #[inline(always)]
            #[must_use]
            pub fn wm(&mut self) -> WmW<Ctl0Spec> {
                WmW::new(self, 11)
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            #[must_use]
            pub fn wl(&mut self) -> WlW<Ctl0Spec> {
                WlW::new(self, 12)
            }
            #[doc = "Bit 13 - USART enable"]
            #[inline(always)]
            #[must_use]
            pub fn uen(&mut self) -> UenW<Ctl0Spec> {
                UenW::new(self, 13)
            }
        }
        #[doc = "Control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl0Spec;
        impl crate::RegisterSpec for Ctl0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl0::R`](R) reader structure"]
        impl crate::Readable for Ctl0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl0::W`](W) writer structure"]
        impl crate::Writable for Ctl0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL0 to value 0"]
        impl crate::Resettable for Ctl0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL1 (rw) register accessor: Control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl1`]
module"]
    #[doc(alias = "CTL1")]
    pub type Ctl1 = crate::Reg<ctl1::Ctl1Spec>;
    #[doc = "Control register 1"]
    pub mod ctl1 {
        #[doc = "Register `CTL1` reader"]
        pub type R = crate::R<Ctl1Spec>;
        #[doc = "Register `CTL1` writer"]
        pub type W = crate::W<Ctl1Spec>;
        #[doc = "Field `ADDR` reader - Address of the USART"]
        pub type AddrR = crate::FieldReader;
        #[doc = "Field `ADDR` writer - Address of the USART"]
        pub type AddrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `LBLEN` reader - LIN break frame length"]
        pub type LblenR = crate::BitReader;
        #[doc = "Field `LBLEN` writer - LIN break frame length"]
        pub type LblenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LBDIE` reader - LIN break detection interrupt enable"]
        pub type LbdieR = crate::BitReader;
        #[doc = "Field `LBDIE` writer - LIN break detection interrupt enable"]
        pub type LbdieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CLEN` reader - CK Length"]
        pub type ClenR = crate::BitReader;
        #[doc = "Field `CLEN` writer - CK Length"]
        pub type ClenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CPH` reader - Clock phase"]
        pub type CphR = crate::BitReader;
        #[doc = "Field `CPH` writer - Clock phase"]
        pub type CphW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CPL` reader - Clock polarity"]
        pub type CplR = crate::BitReader;
        #[doc = "Field `CPL` writer - Clock polarity"]
        pub type CplW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CKEN` reader - CK pin enable"]
        pub type CkenR = crate::BitReader;
        #[doc = "Field `CKEN` writer - CK pin enable"]
        pub type CkenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STB` reader - STOP bits length"]
        pub type StbR = crate::FieldReader;
        #[doc = "Field `STB` writer - STOP bits length"]
        pub type StbW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `LMEN` reader - LIN mode enable"]
        pub type LmenR = crate::BitReader;
        #[doc = "Field `LMEN` writer - LIN mode enable"]
        pub type LmenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:3 - Address of the USART"]
            #[inline(always)]
            pub fn addr(&self) -> AddrR {
                AddrR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bit 5 - LIN break frame length"]
            #[inline(always)]
            pub fn lblen(&self) -> LblenR {
                LblenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - LIN break detection interrupt enable"]
            #[inline(always)]
            pub fn lbdie(&self) -> LbdieR {
                LbdieR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 8 - CK Length"]
            #[inline(always)]
            pub fn clen(&self) -> ClenR {
                ClenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Clock phase"]
            #[inline(always)]
            pub fn cph(&self) -> CphR {
                CphR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Clock polarity"]
            #[inline(always)]
            pub fn cpl(&self) -> CplR {
                CplR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - CK pin enable"]
            #[inline(always)]
            pub fn cken(&self) -> CkenR {
                CkenR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:13 - STOP bits length"]
            #[inline(always)]
            pub fn stb(&self) -> StbR {
                StbR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - LIN mode enable"]
            #[inline(always)]
            pub fn lmen(&self) -> LmenR {
                LmenR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Address of the USART"]
            #[inline(always)]
            #[must_use]
            pub fn addr(&mut self) -> AddrW<Ctl1Spec> {
                AddrW::new(self, 0)
            }
            #[doc = "Bit 5 - LIN break frame length"]
            #[inline(always)]
            #[must_use]
            pub fn lblen(&mut self) -> LblenW<Ctl1Spec> {
                LblenW::new(self, 5)
            }
            #[doc = "Bit 6 - LIN break detection interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn lbdie(&mut self) -> LbdieW<Ctl1Spec> {
                LbdieW::new(self, 6)
            }
            #[doc = "Bit 8 - CK Length"]
            #[inline(always)]
            #[must_use]
            pub fn clen(&mut self) -> ClenW<Ctl1Spec> {
                ClenW::new(self, 8)
            }
            #[doc = "Bit 9 - Clock phase"]
            #[inline(always)]
            #[must_use]
            pub fn cph(&mut self) -> CphW<Ctl1Spec> {
                CphW::new(self, 9)
            }
            #[doc = "Bit 10 - Clock polarity"]
            #[inline(always)]
            #[must_use]
            pub fn cpl(&mut self) -> CplW<Ctl1Spec> {
                CplW::new(self, 10)
            }
            #[doc = "Bit 11 - CK pin enable"]
            #[inline(always)]
            #[must_use]
            pub fn cken(&mut self) -> CkenW<Ctl1Spec> {
                CkenW::new(self, 11)
            }
            #[doc = "Bits 12:13 - STOP bits length"]
            #[inline(always)]
            #[must_use]
            pub fn stb(&mut self) -> StbW<Ctl1Spec> {
                StbW::new(self, 12)
            }
            #[doc = "Bit 14 - LIN mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn lmen(&mut self) -> LmenW<Ctl1Spec> {
                LmenW::new(self, 14)
            }
        }
        #[doc = "Control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl1Spec;
        impl crate::RegisterSpec for Ctl1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl1::R`](R) reader structure"]
        impl crate::Readable for Ctl1Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"]
        impl crate::Writable for Ctl1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL1 to value 0"]
        impl crate::Resettable for Ctl1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL2 (rw) register accessor: Control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl2`]
module"]
    #[doc(alias = "CTL2")]
    pub type Ctl2 = crate::Reg<ctl2::Ctl2Spec>;
    #[doc = "Control register 2"]
    pub mod ctl2 {
        #[doc = "Register `CTL2` reader"]
        pub type R = crate::R<Ctl2Spec>;
        #[doc = "Register `CTL2` writer"]
        pub type W = crate::W<Ctl2Spec>;
        #[doc = "Field `ERRIE` reader - Error interrupt enable"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Error interrupt enable"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `IREN` reader - IrDA mode enable"]
        pub type IrenR = crate::BitReader;
        #[doc = "Field `IREN` writer - IrDA mode enable"]
        pub type IrenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `IRLP` reader - IrDA low-power"]
        pub type IrlpR = crate::BitReader;
        #[doc = "Field `IRLP` writer - IrDA low-power"]
        pub type IrlpW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HDEN` reader - Half-duplex selection"]
        pub type HdenR = crate::BitReader;
        #[doc = "Field `HDEN` writer - Half-duplex selection"]
        pub type HdenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `NKEN` reader - Smartcard NACK enable"]
        pub type NkenR = crate::BitReader;
        #[doc = "Field `NKEN` writer - Smartcard NACK enable"]
        pub type NkenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SCEN` reader - Smartcard mode enable"]
        pub type ScenR = crate::BitReader;
        #[doc = "Field `SCEN` writer - Smartcard mode enable"]
        pub type ScenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DENR` reader - DMA request enable for reception"]
        pub type DenrR = crate::BitReader;
        #[doc = "Field `DENR` writer - DMA request enable for reception"]
        pub type DenrW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DENT` reader - DMA request enable for transmission"]
        pub type DentR = crate::BitReader;
        #[doc = "Field `DENT` writer - DMA request enable for transmission"]
        pub type DentW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RTSEN` reader - RTS enable"]
        pub type RtsenR = crate::BitReader;
        #[doc = "Field `RTSEN` writer - RTS enable"]
        pub type RtsenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CTSEN` reader - CTS enable"]
        pub type CtsenR = crate::BitReader;
        #[doc = "Field `CTSEN` writer - CTS enable"]
        pub type CtsenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CTSIE` reader - CTS interrupt enable"]
        pub type CtsieR = crate::BitReader;
        #[doc = "Field `CTSIE` writer - CTS interrupt enable"]
        pub type CtsieW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - IrDA mode enable"]
            #[inline(always)]
            pub fn iren(&self) -> IrenR {
                IrenR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - IrDA low-power"]
            #[inline(always)]
            pub fn irlp(&self) -> IrlpR {
                IrlpR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            pub fn hden(&self) -> HdenR {
                HdenR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Smartcard NACK enable"]
            #[inline(always)]
            pub fn nken(&self) -> NkenR {
                NkenR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Smartcard mode enable"]
            #[inline(always)]
            pub fn scen(&self) -> ScenR {
                ScenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - DMA request enable for reception"]
            #[inline(always)]
            pub fn denr(&self) -> DenrR {
                DenrR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - DMA request enable for transmission"]
            #[inline(always)]
            pub fn dent(&self) -> DentR {
                DentR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - RTS enable"]
            #[inline(always)]
            pub fn rtsen(&self) -> RtsenR {
                RtsenR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - CTS enable"]
            #[inline(always)]
            pub fn ctsen(&self) -> CtsenR {
                CtsenR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - CTS interrupt enable"]
            #[inline(always)]
            pub fn ctsie(&self) -> CtsieR {
                CtsieR::new(((self.bits >> 10) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ctl2Spec> {
                ErrieW::new(self, 0)
            }
            #[doc = "Bit 1 - IrDA mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn iren(&mut self) -> IrenW<Ctl2Spec> {
                IrenW::new(self, 1)
            }
            #[doc = "Bit 2 - IrDA low-power"]
            #[inline(always)]
            #[must_use]
            pub fn irlp(&mut self) -> IrlpW<Ctl2Spec> {
                IrlpW::new(self, 2)
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            #[must_use]
            pub fn hden(&mut self) -> HdenW<Ctl2Spec> {
                HdenW::new(self, 3)
            }
            #[doc = "Bit 4 - Smartcard NACK enable"]
            #[inline(always)]
            #[must_use]
            pub fn nken(&mut self) -> NkenW<Ctl2Spec> {
                NkenW::new(self, 4)
            }
            #[doc = "Bit 5 - Smartcard mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn scen(&mut self) -> ScenW<Ctl2Spec> {
                ScenW::new(self, 5)
            }
            #[doc = "Bit 6 - DMA request enable for reception"]
            #[inline(always)]
            #[must_use]
            pub fn denr(&mut self) -> DenrW<Ctl2Spec> {
                DenrW::new(self, 6)
            }
            #[doc = "Bit 7 - DMA request enable for transmission"]
            #[inline(always)]
            #[must_use]
            pub fn dent(&mut self) -> DentW<Ctl2Spec> {
                DentW::new(self, 7)
            }
            #[doc = "Bit 8 - RTS enable"]
            #[inline(always)]
            #[must_use]
            pub fn rtsen(&mut self) -> RtsenW<Ctl2Spec> {
                RtsenW::new(self, 8)
            }
            #[doc = "Bit 9 - CTS enable"]
            #[inline(always)]
            #[must_use]
            pub fn ctsen(&mut self) -> CtsenW<Ctl2Spec> {
                CtsenW::new(self, 9)
            }
            #[doc = "Bit 10 - CTS interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn ctsie(&mut self) -> CtsieW<Ctl2Spec> {
                CtsieW::new(self, 10)
            }
        }
        #[doc = "Control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl2Spec;
        impl crate::RegisterSpec for Ctl2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl2::R`](R) reader structure"]
        impl crate::Readable for Ctl2Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl2::W`](W) writer structure"]
        impl crate::Writable for Ctl2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL2 to value 0"]
        impl crate::Resettable for Ctl2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "GP (rw) register accessor: Guard time and prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`gp::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`gp::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@gp`]
module"]
    #[doc(alias = "GP")]
    pub type Gp = crate::Reg<gp::GpSpec>;
    #[doc = "Guard time and prescaler register"]
    pub mod gp {
        #[doc = "Register `GP` reader"]
        pub type R = crate::R<GpSpec>;
        #[doc = "Register `GP` writer"]
        pub type W = crate::W<GpSpec>;
        #[doc = "Field `PSC` reader - Prescaler value"]
        pub type PscR = crate::FieldReader;
        #[doc = "Field `PSC` writer - Prescaler value"]
        pub type PscW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        #[doc = "Field `GUAT` reader - Guard time value in Smartcard mode"]
        pub type GuatR = crate::FieldReader;
        #[doc = "Field `GUAT` writer - Guard time value in Smartcard mode"]
        pub type GuatW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PscR {
                PscR::new((self.bits & 0xff) as u8)
            }
            #[doc = "Bits 8:15 - Guard time value in Smartcard mode"]
            #[inline(always)]
            pub fn guat(&self) -> GuatR {
                GuatR::new(((self.bits >> 8) & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Prescaler value"]
            #[inline(always)]
            #[must_use]
            pub fn psc(&mut self) -> PscW<GpSpec> {
                PscW::new(self, 0)
            }
            #[doc = "Bits 8:15 - Guard time value in Smartcard mode"]
            #[inline(always)]
            #[must_use]
            pub fn guat(&mut self) -> GuatW<GpSpec> {
                GuatW::new(self, 8)
            }
        }
        #[doc = "Guard time and prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`gp::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`gp::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct GpSpec;
        impl crate::RegisterSpec for GpSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`gp::R`](R) reader structure"]
        impl crate::Readable for GpSpec {}
        #[doc = "`write(|w| ..)` method takes [`gp::W`](W) writer structure"]
        impl crate::Writable for GpSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets GP to value 0"]
        impl crate::Resettable for GpSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct Usart1 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Usart1 {}
impl Usart1 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usart0::RegisterBlock = 0x4000_4400 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Usart1 {
    type Target = usart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Usart1 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart1").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart0 as usart1;
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub struct Usart2 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Usart2 {}
impl Usart2 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usart0::RegisterBlock = 0x4000_4800 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usart0::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Usart2 {
    type Target = usart0::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Usart2 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usart2").finish()
    }
}
#[doc = "Universal synchronous asynchronous receiver transmitter"]
pub use self::usart0 as usart2;
#[doc = "Universal asynchronous receiver transmitter"]
pub struct Uart3 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Uart3 {}
impl Uart3 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart3::RegisterBlock = 0x4000_4c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart3::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Uart3 {
    type Target = uart3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Uart3 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart3").finish()
    }
}
#[doc = "Universal asynchronous receiver transmitter"]
pub mod uart3 {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        stat: Stat,
        data: Data,
        baud: Baud,
        ctl0: Ctl0,
        ctl1: Ctl1,
        ctl2: Ctl2,
        gp: Gp,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Status register"]
        #[inline(always)]
        pub const fn stat(&self) -> &Stat {
            &self.stat
        }
        #[doc = "0x04 - Data register"]
        #[inline(always)]
        pub const fn data(&self) -> &Data {
            &self.data
        }
        #[doc = "0x08 - Baud rate register"]
        #[inline(always)]
        pub const fn baud(&self) -> &Baud {
            &self.baud
        }
        #[doc = "0x0c - Control register 0"]
        #[inline(always)]
        pub const fn ctl0(&self) -> &Ctl0 {
            &self.ctl0
        }
        #[doc = "0x10 - Control register 1"]
        #[inline(always)]
        pub const fn ctl1(&self) -> &Ctl1 {
            &self.ctl1
        }
        #[doc = "0x14 - Control register 2"]
        #[inline(always)]
        pub const fn ctl2(&self) -> &Ctl2 {
            &self.ctl2
        }
        #[doc = "0x18 - Guard time and prescaler register"]
        #[inline(always)]
        pub const fn gp(&self) -> &Gp {
            &self.gp
        }
    }
    #[doc = "STAT (rw) register accessor: Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat`]
module"]
    #[doc(alias = "STAT")]
    pub type Stat = crate::Reg<stat::StatSpec>;
    #[doc = "Status register"]
    pub mod stat {
        #[doc = "Register `STAT` reader"]
        pub type R = crate::R<StatSpec>;
        #[doc = "Register `STAT` writer"]
        pub type W = crate::W<StatSpec>;
        #[doc = "Field `PERR` reader - Parity error flag"]
        pub type PerrR = crate::BitReader;
        #[doc = "Field `FERR` reader - Frame error flag"]
        pub type FerrR = crate::BitReader;
        #[doc = "Field `NERR` reader - Noise error flag"]
        pub type NerrR = crate::BitReader;
        #[doc = "Field `ORERR` reader - Overrun error"]
        pub type OrerrR = crate::BitReader;
        #[doc = "Field `IDLEF` reader - IDLE frame detected flag"]
        pub type IdlefR = crate::BitReader;
        #[doc = "Field `RBNE` reader - Read data buffer not empty"]
        pub type RbneR = crate::BitReader;
        #[doc = "Field `RBNE` writer - Read data buffer not empty"]
        pub type RbneW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TC` reader - Transmission complete"]
        pub type TcR = crate::BitReader;
        #[doc = "Field `TC` writer - Transmission complete"]
        pub type TcW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TBE` reader - Transmit data buffer empty"]
        pub type TbeR = crate::BitReader;
        #[doc = "Field `LBDF` reader - LIN break detection flag"]
        pub type LbdfR = crate::BitReader;
        #[doc = "Field `LBDF` writer - LIN break detection flag"]
        pub type LbdfW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Parity error flag"]
            #[inline(always)]
            pub fn perr(&self) -> PerrR {
                PerrR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Frame error flag"]
            #[inline(always)]
            pub fn ferr(&self) -> FerrR {
                FerrR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Noise error flag"]
            #[inline(always)]
            pub fn nerr(&self) -> NerrR {
                NerrR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Overrun error"]
            #[inline(always)]
            pub fn orerr(&self) -> OrerrR {
                OrerrR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - IDLE frame detected flag"]
            #[inline(always)]
            pub fn idlef(&self) -> IdlefR {
                IdlefR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Read data buffer not empty"]
            #[inline(always)]
            pub fn rbne(&self) -> RbneR {
                RbneR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Transmission complete"]
            #[inline(always)]
            pub fn tc(&self) -> TcR {
                TcR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Transmit data buffer empty"]
            #[inline(always)]
            pub fn tbe(&self) -> TbeR {
                TbeR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - LIN break detection flag"]
            #[inline(always)]
            pub fn lbdf(&self) -> LbdfR {
                LbdfR::new(((self.bits >> 8) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 5 - Read data buffer not empty"]
            #[inline(always)]
            #[must_use]
            pub fn rbne(&mut self) -> RbneW<StatSpec> {
                RbneW::new(self, 5)
            }
            #[doc = "Bit 6 - Transmission complete"]
            #[inline(always)]
            #[must_use]
            pub fn tc(&mut self) -> TcW<StatSpec> {
                TcW::new(self, 6)
            }
            #[doc = "Bit 8 - LIN break detection flag"]
            #[inline(always)]
            #[must_use]
            pub fn lbdf(&mut self) -> LbdfW<StatSpec> {
                LbdfW::new(self, 8)
            }
        }
        #[doc = "Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct StatSpec;
        impl crate::RegisterSpec for StatSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat::R`](R) reader structure"]
        impl crate::Readable for StatSpec {}
        #[doc = "`write(|w| ..)` method takes [`stat::W`](W) writer structure"]
        impl crate::Writable for StatSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets STAT to value 0xc0"]
        impl crate::Resettable for StatSpec {
            const RESET_VALUE: u32 = 0xc0;
        }
    }
    #[doc = "DATA (rw) register accessor: Data register\n\nYou can [`read`](crate::Reg::read) this register and get [`data::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@data`]
module"]
    #[doc(alias = "DATA")]
    pub type Data = crate::Reg<data::DataSpec>;
    #[doc = "Data register"]
    pub mod data {
        #[doc = "Register `DATA` reader"]
        pub type R = crate::R<DataSpec>;
        #[doc = "Register `DATA` writer"]
        pub type W = crate::W<DataSpec>;
        #[doc = "Field `DATA` reader - Transmit or read data value"]
        pub type DataR = crate::FieldReader<u16>;
        #[doc = "Field `DATA` writer - Transmit or read data value"]
        pub type DataW<'a, REG> = crate::FieldWriter<'a, REG, 9, u16>;
        impl R {
            #[doc = "Bits 0:8 - Transmit or read data value"]
            #[inline(always)]
            pub fn data(&self) -> DataR {
                DataR::new((self.bits & 0x01ff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:8 - Transmit or read data value"]
            #[inline(always)]
            #[must_use]
            pub fn data(&mut self) -> DataW<DataSpec> {
                DataW::new(self, 0)
            }
        }
        #[doc = "Data register\n\nYou can [`read`](crate::Reg::read) this register and get [`data::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`data::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DataSpec;
        impl crate::RegisterSpec for DataSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`data::R`](R) reader structure"]
        impl crate::Readable for DataSpec {}
        #[doc = "`write(|w| ..)` method takes [`data::W`](W) writer structure"]
        impl crate::Writable for DataSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DATA to value 0"]
        impl crate::Resettable for DataSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "BAUD (rw) register accessor: Baud rate register\n\nYou can [`read`](crate::Reg::read) this register and get [`baud::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`baud::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@baud`]
module"]
    #[doc(alias = "BAUD")]
    pub type Baud = crate::Reg<baud::BaudSpec>;
    #[doc = "Baud rate register"]
    pub mod baud {
        #[doc = "Register `BAUD` reader"]
        pub type R = crate::R<BaudSpec>;
        #[doc = "Register `BAUD` writer"]
        pub type W = crate::W<BaudSpec>;
        #[doc = "Field `FRADIV` reader - Fraction part of baud-rate divider"]
        pub type FradivR = crate::FieldReader;
        #[doc = "Field `FRADIV` writer - Fraction part of baud-rate divider"]
        pub type FradivW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `INTDIV` reader - Integer part of baud-rate divider"]
        pub type IntdivR = crate::FieldReader<u16>;
        #[doc = "Field `INTDIV` writer - Integer part of baud-rate divider"]
        pub type IntdivW<'a, REG> = crate::FieldWriter<'a, REG, 12, u16>;
        impl R {
            #[doc = "Bits 0:3 - Fraction part of baud-rate divider"]
            #[inline(always)]
            pub fn fradiv(&self) -> FradivR {
                FradivR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:15 - Integer part of baud-rate divider"]
            #[inline(always)]
            pub fn intdiv(&self) -> IntdivR {
                IntdivR::new(((self.bits >> 4) & 0x0fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Fraction part of baud-rate divider"]
            #[inline(always)]
            #[must_use]
            pub fn fradiv(&mut self) -> FradivW<BaudSpec> {
                FradivW::new(self, 0)
            }
            #[doc = "Bits 4:15 - Integer part of baud-rate divider"]
            #[inline(always)]
            #[must_use]
            pub fn intdiv(&mut self) -> IntdivW<BaudSpec> {
                IntdivW::new(self, 4)
            }
        }
        #[doc = "Baud rate register\n\nYou can [`read`](crate::Reg::read) this register and get [`baud::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`baud::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct BaudSpec;
        impl crate::RegisterSpec for BaudSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`baud::R`](R) reader structure"]
        impl crate::Readable for BaudSpec {}
        #[doc = "`write(|w| ..)` method takes [`baud::W`](W) writer structure"]
        impl crate::Writable for BaudSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets BAUD to value 0"]
        impl crate::Resettable for BaudSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL0 (rw) register accessor: Control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl0`]
module"]
    #[doc(alias = "CTL0")]
    pub type Ctl0 = crate::Reg<ctl0::Ctl0Spec>;
    #[doc = "Control register 0"]
    pub mod ctl0 {
        #[doc = "Register `CTL0` reader"]
        pub type R = crate::R<Ctl0Spec>;
        #[doc = "Register `CTL0` writer"]
        pub type W = crate::W<Ctl0Spec>;
        #[doc = "Field `SBKCMD` reader - Send break command"]
        pub type SbkcmdR = crate::BitReader;
        #[doc = "Field `SBKCMD` writer - Send break command"]
        pub type SbkcmdW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RWU` reader - Receiver wakeup from mute mode"]
        pub type RwuR = crate::BitReader;
        #[doc = "Field `RWU` writer - Receiver wakeup from mute mode"]
        pub type RwuW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `REN` reader - Receiver enable"]
        pub type RenR = crate::BitReader;
        #[doc = "Field `REN` writer - Receiver enable"]
        pub type RenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TEN` reader - Transmitter enable"]
        pub type TenR = crate::BitReader;
        #[doc = "Field `TEN` writer - Transmitter enable"]
        pub type TenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `IDLEIE` reader - IDLE line detected interrupt enable"]
        pub type IdleieR = crate::BitReader;
        #[doc = "Field `IDLEIE` writer - IDLE line detected interrupt enable"]
        pub type IdleieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RBNEIE` reader - Read data buffer not empty interrupt and overrun error interrupt enable"]
        pub type RbneieR = crate::BitReader;
        #[doc = "Field `RBNEIE` writer - Read data buffer not empty interrupt and overrun error interrupt enable"]
        pub type RbneieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TCIE` reader - Transmission complete interrupt enable"]
        pub type TcieR = crate::BitReader;
        #[doc = "Field `TCIE` writer - Transmission complete interrupt enable"]
        pub type TcieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TBEIE` reader - Transmitter buffer empty interrupt enable"]
        pub type TbeieR = crate::BitReader;
        #[doc = "Field `TBEIE` writer - Transmitter buffer empty interrupt enable"]
        pub type TbeieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PERRIE` reader - Parity error interrupt enable"]
        pub type PerrieR = crate::BitReader;
        #[doc = "Field `PERRIE` writer - Parity error interrupt enable"]
        pub type PerrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PM` reader - Parity mode"]
        pub type PmR = crate::BitReader;
        #[doc = "Field `PM` writer - Parity mode"]
        pub type PmW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PCEN` reader - Parity check function enable"]
        pub type PcenR = crate::BitReader;
        #[doc = "Field `PCEN` writer - Parity check function enable"]
        pub type PcenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WM` reader - Wakeup method in mute mode"]
        pub type WmR = crate::BitReader;
        #[doc = "Field `WM` writer - Wakeup method in mute mode"]
        pub type WmW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WL` reader - Word length"]
        pub type WlR = crate::BitReader;
        #[doc = "Field `WL` writer - Word length"]
        pub type WlW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `UEN` reader - USART enable"]
        pub type UenR = crate::BitReader;
        #[doc = "Field `UEN` writer - USART enable"]
        pub type UenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Send break command"]
            #[inline(always)]
            pub fn sbkcmd(&self) -> SbkcmdR {
                SbkcmdR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Receiver wakeup from mute mode"]
            #[inline(always)]
            pub fn rwu(&self) -> RwuR {
                RwuR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            pub fn ren(&self) -> RenR {
                RenR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            pub fn ten(&self) -> TenR {
                TenR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - IDLE line detected interrupt enable"]
            #[inline(always)]
            pub fn idleie(&self) -> IdleieR {
                IdleieR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 5 - Read data buffer not empty interrupt and overrun error interrupt enable"]
            #[inline(always)]
            pub fn rbneie(&self) -> RbneieR {
                RbneieR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            pub fn tcie(&self) -> TcieR {
                TcieR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Transmitter buffer empty interrupt enable"]
            #[inline(always)]
            pub fn tbeie(&self) -> TbeieR {
                TbeieR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Parity error interrupt enable"]
            #[inline(always)]
            pub fn perrie(&self) -> PerrieR {
                PerrieR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Parity mode"]
            #[inline(always)]
            pub fn pm(&self) -> PmR {
                PmR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - Parity check function enable"]
            #[inline(always)]
            pub fn pcen(&self) -> PcenR {
                PcenR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Wakeup method in mute mode"]
            #[inline(always)]
            pub fn wm(&self) -> WmR {
                WmR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            pub fn wl(&self) -> WlR {
                WlR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - USART enable"]
            #[inline(always)]
            pub fn uen(&self) -> UenR {
                UenR::new(((self.bits >> 13) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Send break command"]
            #[inline(always)]
            #[must_use]
            pub fn sbkcmd(&mut self) -> SbkcmdW<Ctl0Spec> {
                SbkcmdW::new(self, 0)
            }
            #[doc = "Bit 1 - Receiver wakeup from mute mode"]
            #[inline(always)]
            #[must_use]
            pub fn rwu(&mut self) -> RwuW<Ctl0Spec> {
                RwuW::new(self, 1)
            }
            #[doc = "Bit 2 - Receiver enable"]
            #[inline(always)]
            #[must_use]
            pub fn ren(&mut self) -> RenW<Ctl0Spec> {
                RenW::new(self, 2)
            }
            #[doc = "Bit 3 - Transmitter enable"]
            #[inline(always)]
            #[must_use]
            pub fn ten(&mut self) -> TenW<Ctl0Spec> {
                TenW::new(self, 3)
            }
            #[doc = "Bit 4 - IDLE line detected interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn idleie(&mut self) -> IdleieW<Ctl0Spec> {
                IdleieW::new(self, 4)
            }
            #[doc = "Bit 5 - Read data buffer not empty interrupt and overrun error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn rbneie(&mut self) -> RbneieW<Ctl0Spec> {
                RbneieW::new(self, 5)
            }
            #[doc = "Bit 6 - Transmission complete interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn tcie(&mut self) -> TcieW<Ctl0Spec> {
                TcieW::new(self, 6)
            }
            #[doc = "Bit 7 - Transmitter buffer empty interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn tbeie(&mut self) -> TbeieW<Ctl0Spec> {
                TbeieW::new(self, 7)
            }
            #[doc = "Bit 8 - Parity error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn perrie(&mut self) -> PerrieW<Ctl0Spec> {
                PerrieW::new(self, 8)
            }
            #[doc = "Bit 9 - Parity mode"]
            #[inline(always)]
            #[must_use]
            pub fn pm(&mut self) -> PmW<Ctl0Spec> {
                PmW::new(self, 9)
            }
            #[doc = "Bit 10 - Parity check function enable"]
            #[inline(always)]
            #[must_use]
            pub fn pcen(&mut self) -> PcenW<Ctl0Spec> {
                PcenW::new(self, 10)
            }
            #[doc = "Bit 11 - Wakeup method in mute mode"]
            #[inline(always)]
            #[must_use]
            pub fn wm(&mut self) -> WmW<Ctl0Spec> {
                WmW::new(self, 11)
            }
            #[doc = "Bit 12 - Word length"]
            #[inline(always)]
            #[must_use]
            pub fn wl(&mut self) -> WlW<Ctl0Spec> {
                WlW::new(self, 12)
            }
            #[doc = "Bit 13 - USART enable"]
            #[inline(always)]
            #[must_use]
            pub fn uen(&mut self) -> UenW<Ctl0Spec> {
                UenW::new(self, 13)
            }
        }
        #[doc = "Control register 0\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl0::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl0::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl0Spec;
        impl crate::RegisterSpec for Ctl0Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl0::R`](R) reader structure"]
        impl crate::Readable for Ctl0Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl0::W`](W) writer structure"]
        impl crate::Writable for Ctl0Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL0 to value 0"]
        impl crate::Resettable for Ctl0Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL1 (rw) register accessor: Control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl1`]
module"]
    #[doc(alias = "CTL1")]
    pub type Ctl1 = crate::Reg<ctl1::Ctl1Spec>;
    #[doc = "Control register 1"]
    pub mod ctl1 {
        #[doc = "Register `CTL1` reader"]
        pub type R = crate::R<Ctl1Spec>;
        #[doc = "Register `CTL1` writer"]
        pub type W = crate::W<Ctl1Spec>;
        #[doc = "Field `ADDR` reader - Address of the USART"]
        pub type AddrR = crate::FieldReader;
        #[doc = "Field `ADDR` writer - Address of the USART"]
        pub type AddrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `LBLEN` reader - LIN break frame length"]
        pub type LblenR = crate::BitReader;
        #[doc = "Field `LBLEN` writer - LIN break frame length"]
        pub type LblenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LBDIE` reader - LIN break detection interrupt enable"]
        pub type LbdieR = crate::BitReader;
        #[doc = "Field `LBDIE` writer - LIN break detection interrupt enable"]
        pub type LbdieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STB` reader - STOP bits length"]
        pub type StbR = crate::FieldReader;
        #[doc = "Field `STB` writer - STOP bits length"]
        pub type StbW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `LMEN` reader - LIN mode enable"]
        pub type LmenR = crate::BitReader;
        #[doc = "Field `LMEN` writer - LIN mode enable"]
        pub type LmenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:3 - Address of the USART"]
            #[inline(always)]
            pub fn addr(&self) -> AddrR {
                AddrR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bit 5 - LIN break frame length"]
            #[inline(always)]
            pub fn lblen(&self) -> LblenR {
                LblenR::new(((self.bits >> 5) & 1) != 0)
            }
            #[doc = "Bit 6 - LIN break detection interrupt enable"]
            #[inline(always)]
            pub fn lbdie(&self) -> LbdieR {
                LbdieR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bits 12:13 - STOP bits length"]
            #[inline(always)]
            pub fn stb(&self) -> StbR {
                StbR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - LIN mode enable"]
            #[inline(always)]
            pub fn lmen(&self) -> LmenR {
                LmenR::new(((self.bits >> 14) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Address of the USART"]
            #[inline(always)]
            #[must_use]
            pub fn addr(&mut self) -> AddrW<Ctl1Spec> {
                AddrW::new(self, 0)
            }
            #[doc = "Bit 5 - LIN break frame length"]
            #[inline(always)]
            #[must_use]
            pub fn lblen(&mut self) -> LblenW<Ctl1Spec> {
                LblenW::new(self, 5)
            }
            #[doc = "Bit 6 - LIN break detection interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn lbdie(&mut self) -> LbdieW<Ctl1Spec> {
                LbdieW::new(self, 6)
            }
            #[doc = "Bits 12:13 - STOP bits length"]
            #[inline(always)]
            #[must_use]
            pub fn stb(&mut self) -> StbW<Ctl1Spec> {
                StbW::new(self, 12)
            }
            #[doc = "Bit 14 - LIN mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn lmen(&mut self) -> LmenW<Ctl1Spec> {
                LmenW::new(self, 14)
            }
        }
        #[doc = "Control register 1\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl1::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl1::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl1Spec;
        impl crate::RegisterSpec for Ctl1Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl1::R`](R) reader structure"]
        impl crate::Readable for Ctl1Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl1::W`](W) writer structure"]
        impl crate::Writable for Ctl1Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL1 to value 0"]
        impl crate::Resettable for Ctl1Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL2 (rw) register accessor: Control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl2::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl2::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl2`]
module"]
    #[doc(alias = "CTL2")]
    pub type Ctl2 = crate::Reg<ctl2::Ctl2Spec>;
    #[doc = "Control register 2"]
    pub mod ctl2 {
        #[doc = "Register `CTL2` reader"]
        pub type R = crate::R<Ctl2Spec>;
        #[doc = "Register `CTL2` writer"]
        pub type W = crate::W<Ctl2Spec>;
        #[doc = "Field `ERRIE` reader - Error interrupt enable"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Error interrupt enable"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `IREN` reader - IrDA mode enable"]
        pub type IrenR = crate::BitReader;
        #[doc = "Field `IREN` writer - IrDA mode enable"]
        pub type IrenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `IRLP` reader - IrDA low-power"]
        pub type IrlpR = crate::BitReader;
        #[doc = "Field `IRLP` writer - IrDA low-power"]
        pub type IrlpW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `HDEN` reader - Half-duplex selection"]
        pub type HdenR = crate::BitReader;
        #[doc = "Field `HDEN` writer - Half-duplex selection"]
        pub type HdenW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DENR` reader - DMA request enable for reception"]
        pub type DenrR = crate::BitReader;
        #[doc = "Field `DENR` writer - DMA request enable for reception"]
        pub type DenrW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `DENT` reader - DMA request enable for transmission"]
        pub type DentR = crate::BitReader;
        #[doc = "Field `DENT` writer - DMA request enable for transmission"]
        pub type DentW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - IrDA mode enable"]
            #[inline(always)]
            pub fn iren(&self) -> IrenR {
                IrenR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - IrDA low-power"]
            #[inline(always)]
            pub fn irlp(&self) -> IrlpR {
                IrlpR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            pub fn hden(&self) -> HdenR {
                HdenR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 6 - DMA request enable for reception"]
            #[inline(always)]
            pub fn denr(&self) -> DenrR {
                DenrR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - DMA request enable for transmission"]
            #[inline(always)]
            pub fn dent(&self) -> DentR {
                DentR::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Error interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<Ctl2Spec> {
                ErrieW::new(self, 0)
            }
            #[doc = "Bit 1 - IrDA mode enable"]
            #[inline(always)]
            #[must_use]
            pub fn iren(&mut self) -> IrenW<Ctl2Spec> {
                IrenW::new(self, 1)
            }
            #[doc = "Bit 2 - IrDA low-power"]
            #[inline(always)]
            #[must_use]
            pub fn irlp(&mut self) -> IrlpW<Ctl2Spec> {
                IrlpW::new(self, 2)
            }
            #[doc = "Bit 3 - Half-duplex selection"]
            #[inline(always)]
            #[must_use]
            pub fn hden(&mut self) -> HdenW<Ctl2Spec> {
                HdenW::new(self, 3)
            }
            #[doc = "Bit 6 - DMA request enable for reception"]
            #[inline(always)]
            #[must_use]
            pub fn denr(&mut self) -> DenrW<Ctl2Spec> {
                DenrW::new(self, 6)
            }
            #[doc = "Bit 7 - DMA request enable for transmission"]
            #[inline(always)]
            #[must_use]
            pub fn dent(&mut self) -> DentW<Ctl2Spec> {
                DentW::new(self, 7)
            }
        }
        #[doc = "Control register 2\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl2::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl2::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ctl2Spec;
        impl crate::RegisterSpec for Ctl2Spec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl2::R`](R) reader structure"]
        impl crate::Readable for Ctl2Spec {}
        #[doc = "`write(|w| ..)` method takes [`ctl2::W`](W) writer structure"]
        impl crate::Writable for Ctl2Spec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL2 to value 0"]
        impl crate::Resettable for Ctl2Spec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "GP (rw) register accessor: Guard time and prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`gp::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`gp::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@gp`]
module"]
    #[doc(alias = "GP")]
    pub type Gp = crate::Reg<gp::GpSpec>;
    #[doc = "Guard time and prescaler register"]
    pub mod gp {
        #[doc = "Register `GP` reader"]
        pub type R = crate::R<GpSpec>;
        #[doc = "Register `GP` writer"]
        pub type W = crate::W<GpSpec>;
        #[doc = "Field `PSC` reader - Prescaler value"]
        pub type PscR = crate::FieldReader;
        #[doc = "Field `PSC` writer - Prescaler value"]
        pub type PscW<'a, REG> = crate::FieldWriter<'a, REG, 8>;
        impl R {
            #[doc = "Bits 0:7 - Prescaler value"]
            #[inline(always)]
            pub fn psc(&self) -> PscR {
                PscR::new((self.bits & 0xff) as u8)
            }
        }
        impl W {
            #[doc = "Bits 0:7 - Prescaler value"]
            #[inline(always)]
            #[must_use]
            pub fn psc(&mut self) -> PscW<GpSpec> {
                PscW::new(self, 0)
            }
        }
        #[doc = "Guard time and prescaler register\n\nYou can [`read`](crate::Reg::read) this register and get [`gp::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`gp::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct GpSpec;
        impl crate::RegisterSpec for GpSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`gp::R`](R) reader structure"]
        impl crate::Readable for GpSpec {}
        #[doc = "`write(|w| ..)` method takes [`gp::W`](W) writer structure"]
        impl crate::Writable for GpSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets GP to value 0"]
        impl crate::Resettable for GpSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Universal asynchronous receiver transmitter"]
pub struct Uart4 {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Uart4 {}
impl Uart4 {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const uart3::RegisterBlock = 0x4000_5000 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const uart3::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Uart4 {
    type Target = uart3::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Uart4 {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Uart4").finish()
    }
}
#[doc = "Universal asynchronous receiver transmitter"]
pub use self::uart3 as uart4;
#[doc = "Universal serial bus full-speed device interface"]
pub struct Usbd {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Usbd {}
impl Usbd {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const usbd::RegisterBlock = 0x4000_5c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const usbd::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Usbd {
    type Target = usbd::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Usbd {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Usbd").finish()
    }
}
#[doc = "Universal serial bus full-speed device interface"]
pub mod usbd {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ep0cs: Ep0cs,
        ep1cs: Ep1cs,
        ep2cs: Ep2cs,
        ep3cs: Ep3cs,
        ep4cs: Ep4cs,
        ep5cs: Ep5cs,
        ep6cs: Ep6cs,
        ep7cs: Ep7cs,
        _reserved8: [u8; 0x20],
        ctl: Ctl,
        intf: Intf,
        stat: Stat,
        daddr: Daddr,
        baddr: Baddr,
    }
    impl RegisterBlock {
        #[doc = "0x00 - endpoint 0 register"]
        #[inline(always)]
        pub const fn ep0cs(&self) -> &Ep0cs {
            &self.ep0cs
        }
        #[doc = "0x04 - endpoint 1 register"]
        #[inline(always)]
        pub const fn ep1cs(&self) -> &Ep1cs {
            &self.ep1cs
        }
        #[doc = "0x08 - endpoint 2 register"]
        #[inline(always)]
        pub const fn ep2cs(&self) -> &Ep2cs {
            &self.ep2cs
        }
        #[doc = "0x0c - endpoint 3 register"]
        #[inline(always)]
        pub const fn ep3cs(&self) -> &Ep3cs {
            &self.ep3cs
        }
        #[doc = "0x10 - endpoint 4 register"]
        #[inline(always)]
        pub const fn ep4cs(&self) -> &Ep4cs {
            &self.ep4cs
        }
        #[doc = "0x14 - endpoint 5 register"]
        #[inline(always)]
        pub const fn ep5cs(&self) -> &Ep5cs {
            &self.ep5cs
        }
        #[doc = "0x18 - endpoint 6 register"]
        #[inline(always)]
        pub const fn ep6cs(&self) -> &Ep6cs {
            &self.ep6cs
        }
        #[doc = "0x1c - endpoint 7 register"]
        #[inline(always)]
        pub const fn ep7cs(&self) -> &Ep7cs {
            &self.ep7cs
        }
        #[doc = "0x40 - control register"]
        #[inline(always)]
        pub const fn ctl(&self) -> &Ctl {
            &self.ctl
        }
        #[doc = "0x44 - interrupt flag register"]
        #[inline(always)]
        pub const fn intf(&self) -> &Intf {
            &self.intf
        }
        #[doc = "0x48 - Status register"]
        #[inline(always)]
        pub const fn stat(&self) -> &Stat {
            &self.stat
        }
        #[doc = "0x4c - device address register"]
        #[inline(always)]
        pub const fn daddr(&self) -> &Daddr {
            &self.daddr
        }
        #[doc = "0x50 - Buffer address register"]
        #[inline(always)]
        pub const fn baddr(&self) -> &Baddr {
            &self.baddr
        }
    }
    #[doc = "EP0CS (rw) register accessor: endpoint 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep0cs::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep0cs::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep0cs`]
module"]
    #[doc(alias = "EP0CS")]
    pub type Ep0cs = crate::Reg<ep0cs::Ep0csSpec>;
    #[doc = "endpoint 0 register"]
    pub mod ep0cs {
        #[doc = "Register `EP0CS` reader"]
        pub type R = crate::R<Ep0csSpec>;
        #[doc = "Register `EP0CS` writer"]
        pub type W = crate::W<Ep0csSpec>;
        #[doc = "Field `EP_ADDR` reader - Endpoint address"]
        pub type EpAddrR = crate::FieldReader;
        #[doc = "Field `EP_ADDR` writer - Endpoint address"]
        pub type EpAddrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `TX_STA` reader - Status bits, for transmission transfers"]
        pub type TxStaR = crate::FieldReader;
        #[doc = "Field `TX_STA` writer - Status bits, for transmission transfers"]
        pub type TxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `TX_DTG` reader - Data PID Toggle, for transmission transfers"]
        pub type TxDtgR = crate::BitReader;
        #[doc = "Field `TX_DTG` writer - Data PID Toggle, for transmission transfers"]
        pub type TxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TX_ST` reader - Correct Transfer for transmission"]
        pub type TxStR = crate::BitReader;
        #[doc = "Field `TX_ST` writer - Correct Transfer for transmission"]
        pub type TxStW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_KCTL` reader - Endpoint kind"]
        pub type EpKctlR = crate::BitReader;
        #[doc = "Field `EP_KCTL` writer - Endpoint kind"]
        pub type EpKctlW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_CTL` reader - Endpoint type"]
        pub type EpCtlR = crate::FieldReader;
        #[doc = "Field `EP_CTL` writer - Endpoint type"]
        pub type EpCtlW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `SETUP` reader - Setup transaction completed"]
        pub type SetupR = crate::BitReader;
        #[doc = "Field `SETUP` writer - Setup transaction completed"]
        pub type SetupW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_STA` reader - Status bits, for reception transfers"]
        pub type RxStaR = crate::FieldReader;
        #[doc = "Field `RX_STA` writer - Status bits, for reception transfers"]
        pub type RxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `RX_DTG` reader - Data Toggle, for reception transfers"]
        pub type RxDtgR = crate::BitReader;
        #[doc = "Field `RX_DTG` writer - Data Toggle, for reception transfers"]
        pub type RxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_ST` reader - Correct transfer for reception"]
        pub type RxStR = crate::BitReader;
        #[doc = "Field `RX_ST` writer - Correct transfer for reception"]
        pub type RxStW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ep_addr(&self) -> EpAddrR {
                EpAddrR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn tx_sta(&self) -> TxStaR {
                TxStaR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - Data PID Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn tx_dtg(&self) -> TxDtgR {
                TxDtgR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn tx_st(&self) -> TxStR {
                TxStR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kctl(&self) -> EpKctlR {
                EpKctlR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_ctl(&self) -> EpCtlR {
                EpCtlR::new(((self.bits >> 9) & 3) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SetupR {
                SetupR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn rx_sta(&self) -> RxStaR {
                RxStaR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn rx_dtg(&self) -> RxDtgR {
                RxDtgR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn rx_st(&self) -> RxStR {
                RxStR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            #[must_use]
            pub fn ep_addr(&mut self) -> EpAddrW<Ep0csSpec> {
                EpAddrW::new(self, 0)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_sta(&mut self) -> TxStaW<Ep0csSpec> {
                TxStaW::new(self, 4)
            }
            #[doc = "Bit 6 - Data PID Toggle, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_dtg(&mut self) -> TxDtgW<Ep0csSpec> {
                TxDtgW::new(self, 6)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            #[must_use]
            pub fn tx_st(&mut self) -> TxStW<Ep0csSpec> {
                TxStW::new(self, 7)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            #[must_use]
            pub fn ep_kctl(&mut self) -> EpKctlW<Ep0csSpec> {
                EpKctlW::new(self, 8)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            #[must_use]
            pub fn ep_ctl(&mut self) -> EpCtlW<Ep0csSpec> {
                EpCtlW::new(self, 9)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            #[must_use]
            pub fn setup(&mut self) -> SetupW<Ep0csSpec> {
                SetupW::new(self, 11)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_sta(&mut self) -> RxStaW<Ep0csSpec> {
                RxStaW::new(self, 12)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_dtg(&mut self) -> RxDtgW<Ep0csSpec> {
                RxDtgW::new(self, 14)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            #[must_use]
            pub fn rx_st(&mut self) -> RxStW<Ep0csSpec> {
                RxStW::new(self, 15)
            }
        }
        #[doc = "endpoint 0 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep0cs::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep0cs::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ep0csSpec;
        impl crate::RegisterSpec for Ep0csSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ep0cs::R`](R) reader structure"]
        impl crate::Readable for Ep0csSpec {}
        #[doc = "`write(|w| ..)` method takes [`ep0cs::W`](W) writer structure"]
        impl crate::Writable for Ep0csSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EP0CS to value 0"]
        impl crate::Resettable for Ep0csSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "EP1CS (rw) register accessor: endpoint 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep1cs::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep1cs::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep1cs`]
module"]
    #[doc(alias = "EP1CS")]
    pub type Ep1cs = crate::Reg<ep1cs::Ep1csSpec>;
    #[doc = "endpoint 1 register"]
    pub mod ep1cs {
        #[doc = "Register `EP1CS` reader"]
        pub type R = crate::R<Ep1csSpec>;
        #[doc = "Register `EP1CS` writer"]
        pub type W = crate::W<Ep1csSpec>;
        #[doc = "Field `EP_ADDR` reader - Endpoint address"]
        pub type EpAddrR = crate::FieldReader;
        #[doc = "Field `EP_ADDR` writer - Endpoint address"]
        pub type EpAddrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `TX_STA` reader - Status bits, for transmission transfers"]
        pub type TxStaR = crate::FieldReader;
        #[doc = "Field `TX_STA` writer - Status bits, for transmission transfers"]
        pub type TxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `TX_DTG` reader - Data Toggle, for transmission transfers"]
        pub type TxDtgR = crate::BitReader;
        #[doc = "Field `TX_DTG` writer - Data Toggle, for transmission transfers"]
        pub type TxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TX_ST` reader - Correct Transfer for transmission"]
        pub type TxStR = crate::BitReader;
        #[doc = "Field `TX_ST` writer - Correct Transfer for transmission"]
        pub type TxStW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_KCTL` reader - Endpoint kind"]
        pub type EpKctlR = crate::BitReader;
        #[doc = "Field `EP_KCTL` writer - Endpoint kind"]
        pub type EpKctlW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_CTL` reader - Endpoint type"]
        pub type EpCtlR = crate::FieldReader;
        #[doc = "Field `EP_CTL` writer - Endpoint type"]
        pub type EpCtlW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `SETUP` reader - Setup transaction completed"]
        pub type SetupR = crate::BitReader;
        #[doc = "Field `SETUP` writer - Setup transaction completed"]
        pub type SetupW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_STA` reader - Status bits, for reception transfers"]
        pub type RxStaR = crate::FieldReader;
        #[doc = "Field `RX_STA` writer - Status bits, for reception transfers"]
        pub type RxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `RX_DTG` reader - Data Toggle, for reception transfers"]
        pub type RxDtgR = crate::BitReader;
        #[doc = "Field `RX_DTG` writer - Data Toggle, for reception transfers"]
        pub type RxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_ST` reader - Correct transfer for reception"]
        pub type RxStR = crate::BitReader;
        #[doc = "Field `RX_ST` writer - Correct transfer for reception"]
        pub type RxStW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ep_addr(&self) -> EpAddrR {
                EpAddrR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn tx_sta(&self) -> TxStaR {
                TxStaR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn tx_dtg(&self) -> TxDtgR {
                TxDtgR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn tx_st(&self) -> TxStR {
                TxStR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kctl(&self) -> EpKctlR {
                EpKctlR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_ctl(&self) -> EpCtlR {
                EpCtlR::new(((self.bits >> 9) & 3) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SetupR {
                SetupR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn rx_sta(&self) -> RxStaR {
                RxStaR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn rx_dtg(&self) -> RxDtgR {
                RxDtgR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn rx_st(&self) -> RxStR {
                RxStR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            #[must_use]
            pub fn ep_addr(&mut self) -> EpAddrW<Ep1csSpec> {
                EpAddrW::new(self, 0)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_sta(&mut self) -> TxStaW<Ep1csSpec> {
                TxStaW::new(self, 4)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_dtg(&mut self) -> TxDtgW<Ep1csSpec> {
                TxDtgW::new(self, 6)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            #[must_use]
            pub fn tx_st(&mut self) -> TxStW<Ep1csSpec> {
                TxStW::new(self, 7)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            #[must_use]
            pub fn ep_kctl(&mut self) -> EpKctlW<Ep1csSpec> {
                EpKctlW::new(self, 8)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            #[must_use]
            pub fn ep_ctl(&mut self) -> EpCtlW<Ep1csSpec> {
                EpCtlW::new(self, 9)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            #[must_use]
            pub fn setup(&mut self) -> SetupW<Ep1csSpec> {
                SetupW::new(self, 11)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_sta(&mut self) -> RxStaW<Ep1csSpec> {
                RxStaW::new(self, 12)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_dtg(&mut self) -> RxDtgW<Ep1csSpec> {
                RxDtgW::new(self, 14)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            #[must_use]
            pub fn rx_st(&mut self) -> RxStW<Ep1csSpec> {
                RxStW::new(self, 15)
            }
        }
        #[doc = "endpoint 1 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep1cs::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep1cs::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ep1csSpec;
        impl crate::RegisterSpec for Ep1csSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ep1cs::R`](R) reader structure"]
        impl crate::Readable for Ep1csSpec {}
        #[doc = "`write(|w| ..)` method takes [`ep1cs::W`](W) writer structure"]
        impl crate::Writable for Ep1csSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EP1CS to value 0"]
        impl crate::Resettable for Ep1csSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "EP2CS (rw) register accessor: endpoint 2 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep2cs::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep2cs::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep2cs`]
module"]
    #[doc(alias = "EP2CS")]
    pub type Ep2cs = crate::Reg<ep2cs::Ep2csSpec>;
    #[doc = "endpoint 2 register"]
    pub mod ep2cs {
        #[doc = "Register `EP2CS` reader"]
        pub type R = crate::R<Ep2csSpec>;
        #[doc = "Register `EP2CS` writer"]
        pub type W = crate::W<Ep2csSpec>;
        #[doc = "Field `EP_ADDR` reader - Endpoint address"]
        pub type EpAddrR = crate::FieldReader;
        #[doc = "Field `EP_ADDR` writer - Endpoint address"]
        pub type EpAddrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `TX_STA` reader - Status bits, for transmission transfers"]
        pub type TxStaR = crate::FieldReader;
        #[doc = "Field `TX_STA` writer - Status bits, for transmission transfers"]
        pub type TxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `TX_DTG` reader - Data Toggle, for transmission transfers"]
        pub type TxDtgR = crate::BitReader;
        #[doc = "Field `TX_DTG` writer - Data Toggle, for transmission transfers"]
        pub type TxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TX_ST` reader - Correct Transfer for transmission"]
        pub type TxStR = crate::BitReader;
        #[doc = "Field `TX_ST` writer - Correct Transfer for transmission"]
        pub type TxStW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_KCTL` reader - Endpoint kind"]
        pub type EpKctlR = crate::BitReader;
        #[doc = "Field `EP_KCTL` writer - Endpoint kind"]
        pub type EpKctlW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_CTL` reader - Endpoint type"]
        pub type EpCtlR = crate::FieldReader;
        #[doc = "Field `EP_CTL` writer - Endpoint type"]
        pub type EpCtlW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `SETUP` reader - Setup transaction completed"]
        pub type SetupR = crate::BitReader;
        #[doc = "Field `SETUP` writer - Setup transaction completed"]
        pub type SetupW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_STA` reader - Status bits, for reception transfers"]
        pub type RxStaR = crate::FieldReader;
        #[doc = "Field `RX_STA` writer - Status bits, for reception transfers"]
        pub type RxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `RX_DTG` reader - Data Toggle, for reception transfers"]
        pub type RxDtgR = crate::BitReader;
        #[doc = "Field `RX_DTG` writer - Data Toggle, for reception transfers"]
        pub type RxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_ST` reader - Correct transfer for reception"]
        pub type RxStR = crate::BitReader;
        #[doc = "Field `RX_ST` writer - Correct transfer for reception"]
        pub type RxStW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ep_addr(&self) -> EpAddrR {
                EpAddrR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn tx_sta(&self) -> TxStaR {
                TxStaR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn tx_dtg(&self) -> TxDtgR {
                TxDtgR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn tx_st(&self) -> TxStR {
                TxStR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kctl(&self) -> EpKctlR {
                EpKctlR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_ctl(&self) -> EpCtlR {
                EpCtlR::new(((self.bits >> 9) & 3) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SetupR {
                SetupR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn rx_sta(&self) -> RxStaR {
                RxStaR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn rx_dtg(&self) -> RxDtgR {
                RxDtgR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn rx_st(&self) -> RxStR {
                RxStR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            #[must_use]
            pub fn ep_addr(&mut self) -> EpAddrW<Ep2csSpec> {
                EpAddrW::new(self, 0)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_sta(&mut self) -> TxStaW<Ep2csSpec> {
                TxStaW::new(self, 4)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_dtg(&mut self) -> TxDtgW<Ep2csSpec> {
                TxDtgW::new(self, 6)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            #[must_use]
            pub fn tx_st(&mut self) -> TxStW<Ep2csSpec> {
                TxStW::new(self, 7)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            #[must_use]
            pub fn ep_kctl(&mut self) -> EpKctlW<Ep2csSpec> {
                EpKctlW::new(self, 8)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            #[must_use]
            pub fn ep_ctl(&mut self) -> EpCtlW<Ep2csSpec> {
                EpCtlW::new(self, 9)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            #[must_use]
            pub fn setup(&mut self) -> SetupW<Ep2csSpec> {
                SetupW::new(self, 11)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_sta(&mut self) -> RxStaW<Ep2csSpec> {
                RxStaW::new(self, 12)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_dtg(&mut self) -> RxDtgW<Ep2csSpec> {
                RxDtgW::new(self, 14)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            #[must_use]
            pub fn rx_st(&mut self) -> RxStW<Ep2csSpec> {
                RxStW::new(self, 15)
            }
        }
        #[doc = "endpoint 2 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep2cs::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep2cs::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ep2csSpec;
        impl crate::RegisterSpec for Ep2csSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ep2cs::R`](R) reader structure"]
        impl crate::Readable for Ep2csSpec {}
        #[doc = "`write(|w| ..)` method takes [`ep2cs::W`](W) writer structure"]
        impl crate::Writable for Ep2csSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EP2CS to value 0"]
        impl crate::Resettable for Ep2csSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "EP3CS (rw) register accessor: endpoint 3 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep3cs::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep3cs::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep3cs`]
module"]
    #[doc(alias = "EP3CS")]
    pub type Ep3cs = crate::Reg<ep3cs::Ep3csSpec>;
    #[doc = "endpoint 3 register"]
    pub mod ep3cs {
        #[doc = "Register `EP3CS` reader"]
        pub type R = crate::R<Ep3csSpec>;
        #[doc = "Register `EP3CS` writer"]
        pub type W = crate::W<Ep3csSpec>;
        #[doc = "Field `EP_ADDR` reader - Endpoint address"]
        pub type EpAddrR = crate::FieldReader;
        #[doc = "Field `EP_ADDR` writer - Endpoint address"]
        pub type EpAddrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `TX_STA` reader - Status bits, for transmission transfers"]
        pub type TxStaR = crate::FieldReader;
        #[doc = "Field `TX_STA` writer - Status bits, for transmission transfers"]
        pub type TxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `TX_DTG` reader - Data Toggle, for transmission transfers"]
        pub type TxDtgR = crate::BitReader;
        #[doc = "Field `TX_DTG` writer - Data Toggle, for transmission transfers"]
        pub type TxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TX_ST` reader - Correct Transfer for transmission"]
        pub type TxStR = crate::BitReader;
        #[doc = "Field `TX_ST` writer - Correct Transfer for transmission"]
        pub type TxStW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_KCTL` reader - Endpoint kind"]
        pub type EpKctlR = crate::BitReader;
        #[doc = "Field `EP_KCTL` writer - Endpoint kind"]
        pub type EpKctlW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_CTL` reader - Endpoint type"]
        pub type EpCtlR = crate::FieldReader;
        #[doc = "Field `EP_CTL` writer - Endpoint type"]
        pub type EpCtlW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `SETUP` reader - Setup transaction completed"]
        pub type SetupR = crate::BitReader;
        #[doc = "Field `SETUP` writer - Setup transaction completed"]
        pub type SetupW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_STA` reader - Status bits, for reception transfers"]
        pub type RxStaR = crate::FieldReader;
        #[doc = "Field `RX_STA` writer - Status bits, for reception transfers"]
        pub type RxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `RX_DTG` reader - Data Toggle, for reception transfers"]
        pub type RxDtgR = crate::BitReader;
        #[doc = "Field `RX_DTG` writer - Data Toggle, for reception transfers"]
        pub type RxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_ST` reader - Correct transfer for reception"]
        pub type RxStR = crate::BitReader;
        #[doc = "Field `RX_ST` writer - Correct transfer for reception"]
        pub type RxStW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ep_addr(&self) -> EpAddrR {
                EpAddrR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn tx_sta(&self) -> TxStaR {
                TxStaR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn tx_dtg(&self) -> TxDtgR {
                TxDtgR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn tx_st(&self) -> TxStR {
                TxStR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kctl(&self) -> EpKctlR {
                EpKctlR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_ctl(&self) -> EpCtlR {
                EpCtlR::new(((self.bits >> 9) & 3) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SetupR {
                SetupR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn rx_sta(&self) -> RxStaR {
                RxStaR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn rx_dtg(&self) -> RxDtgR {
                RxDtgR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn rx_st(&self) -> RxStR {
                RxStR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            #[must_use]
            pub fn ep_addr(&mut self) -> EpAddrW<Ep3csSpec> {
                EpAddrW::new(self, 0)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_sta(&mut self) -> TxStaW<Ep3csSpec> {
                TxStaW::new(self, 4)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_dtg(&mut self) -> TxDtgW<Ep3csSpec> {
                TxDtgW::new(self, 6)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            #[must_use]
            pub fn tx_st(&mut self) -> TxStW<Ep3csSpec> {
                TxStW::new(self, 7)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            #[must_use]
            pub fn ep_kctl(&mut self) -> EpKctlW<Ep3csSpec> {
                EpKctlW::new(self, 8)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            #[must_use]
            pub fn ep_ctl(&mut self) -> EpCtlW<Ep3csSpec> {
                EpCtlW::new(self, 9)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            #[must_use]
            pub fn setup(&mut self) -> SetupW<Ep3csSpec> {
                SetupW::new(self, 11)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_sta(&mut self) -> RxStaW<Ep3csSpec> {
                RxStaW::new(self, 12)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_dtg(&mut self) -> RxDtgW<Ep3csSpec> {
                RxDtgW::new(self, 14)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            #[must_use]
            pub fn rx_st(&mut self) -> RxStW<Ep3csSpec> {
                RxStW::new(self, 15)
            }
        }
        #[doc = "endpoint 3 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep3cs::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep3cs::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ep3csSpec;
        impl crate::RegisterSpec for Ep3csSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ep3cs::R`](R) reader structure"]
        impl crate::Readable for Ep3csSpec {}
        #[doc = "`write(|w| ..)` method takes [`ep3cs::W`](W) writer structure"]
        impl crate::Writable for Ep3csSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EP3CS to value 0"]
        impl crate::Resettable for Ep3csSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "EP4CS (rw) register accessor: endpoint 4 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep4cs::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep4cs::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep4cs`]
module"]
    #[doc(alias = "EP4CS")]
    pub type Ep4cs = crate::Reg<ep4cs::Ep4csSpec>;
    #[doc = "endpoint 4 register"]
    pub mod ep4cs {
        #[doc = "Register `EP4CS` reader"]
        pub type R = crate::R<Ep4csSpec>;
        #[doc = "Register `EP4CS` writer"]
        pub type W = crate::W<Ep4csSpec>;
        #[doc = "Field `EP_ADDR` reader - Endpoint address"]
        pub type EpAddrR = crate::FieldReader;
        #[doc = "Field `EP_ADDR` writer - Endpoint address"]
        pub type EpAddrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `TX_STA` reader - Status bits, for transmission transfers"]
        pub type TxStaR = crate::FieldReader;
        #[doc = "Field `TX_STA` writer - Status bits, for transmission transfers"]
        pub type TxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `TX_DTG` reader - Data Toggle, for transmission transfers"]
        pub type TxDtgR = crate::BitReader;
        #[doc = "Field `TX_DTG` writer - Data Toggle, for transmission transfers"]
        pub type TxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TX_ST` reader - Correct Transfer for transmission"]
        pub type TxStR = crate::BitReader;
        #[doc = "Field `TX_ST` writer - Correct Transfer for transmission"]
        pub type TxStW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_KCTL` reader - Endpoint kind"]
        pub type EpKctlR = crate::BitReader;
        #[doc = "Field `EP_KCTL` writer - Endpoint kind"]
        pub type EpKctlW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_CTL` reader - Endpoint type"]
        pub type EpCtlR = crate::FieldReader;
        #[doc = "Field `EP_CTL` writer - Endpoint type"]
        pub type EpCtlW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `SETUP` reader - Setup transaction completed"]
        pub type SetupR = crate::BitReader;
        #[doc = "Field `SETUP` writer - Setup transaction completed"]
        pub type SetupW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_STA` reader - Status bits, for reception transfers"]
        pub type RxStaR = crate::FieldReader;
        #[doc = "Field `RX_STA` writer - Status bits, for reception transfers"]
        pub type RxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `RX_DTG` reader - Data Toggle, for reception transfers"]
        pub type RxDtgR = crate::BitReader;
        #[doc = "Field `RX_DTG` writer - Data Toggle, for reception transfers"]
        pub type RxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_ST` reader - Correct transfer for reception"]
        pub type RxStR = crate::BitReader;
        #[doc = "Field `RX_ST` writer - Correct transfer for reception"]
        pub type RxStW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ep_addr(&self) -> EpAddrR {
                EpAddrR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn tx_sta(&self) -> TxStaR {
                TxStaR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn tx_dtg(&self) -> TxDtgR {
                TxDtgR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn tx_st(&self) -> TxStR {
                TxStR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kctl(&self) -> EpKctlR {
                EpKctlR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_ctl(&self) -> EpCtlR {
                EpCtlR::new(((self.bits >> 9) & 3) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SetupR {
                SetupR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn rx_sta(&self) -> RxStaR {
                RxStaR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn rx_dtg(&self) -> RxDtgR {
                RxDtgR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn rx_st(&self) -> RxStR {
                RxStR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            #[must_use]
            pub fn ep_addr(&mut self) -> EpAddrW<Ep4csSpec> {
                EpAddrW::new(self, 0)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_sta(&mut self) -> TxStaW<Ep4csSpec> {
                TxStaW::new(self, 4)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_dtg(&mut self) -> TxDtgW<Ep4csSpec> {
                TxDtgW::new(self, 6)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            #[must_use]
            pub fn tx_st(&mut self) -> TxStW<Ep4csSpec> {
                TxStW::new(self, 7)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            #[must_use]
            pub fn ep_kctl(&mut self) -> EpKctlW<Ep4csSpec> {
                EpKctlW::new(self, 8)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            #[must_use]
            pub fn ep_ctl(&mut self) -> EpCtlW<Ep4csSpec> {
                EpCtlW::new(self, 9)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            #[must_use]
            pub fn setup(&mut self) -> SetupW<Ep4csSpec> {
                SetupW::new(self, 11)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_sta(&mut self) -> RxStaW<Ep4csSpec> {
                RxStaW::new(self, 12)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_dtg(&mut self) -> RxDtgW<Ep4csSpec> {
                RxDtgW::new(self, 14)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            #[must_use]
            pub fn rx_st(&mut self) -> RxStW<Ep4csSpec> {
                RxStW::new(self, 15)
            }
        }
        #[doc = "endpoint 4 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep4cs::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep4cs::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ep4csSpec;
        impl crate::RegisterSpec for Ep4csSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ep4cs::R`](R) reader structure"]
        impl crate::Readable for Ep4csSpec {}
        #[doc = "`write(|w| ..)` method takes [`ep4cs::W`](W) writer structure"]
        impl crate::Writable for Ep4csSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EP4CS to value 0"]
        impl crate::Resettable for Ep4csSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "EP5CS (rw) register accessor: endpoint 5 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep5cs::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep5cs::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep5cs`]
module"]
    #[doc(alias = "EP5CS")]
    pub type Ep5cs = crate::Reg<ep5cs::Ep5csSpec>;
    #[doc = "endpoint 5 register"]
    pub mod ep5cs {
        #[doc = "Register `EP5CS` reader"]
        pub type R = crate::R<Ep5csSpec>;
        #[doc = "Register `EP5CS` writer"]
        pub type W = crate::W<Ep5csSpec>;
        #[doc = "Field `EP_ADDR` reader - Endpoint address"]
        pub type EpAddrR = crate::FieldReader;
        #[doc = "Field `EP_ADDR` writer - Endpoint address"]
        pub type EpAddrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `TX_STA` reader - Status bits, for transmission transfers"]
        pub type TxStaR = crate::FieldReader;
        #[doc = "Field `TX_STA` writer - Status bits, for transmission transfers"]
        pub type TxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `TX_DTG` reader - Data Toggle, for transmission transfers"]
        pub type TxDtgR = crate::BitReader;
        #[doc = "Field `TX_DTG` writer - Data Toggle, for transmission transfers"]
        pub type TxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TX_ST` reader - Correct Transfer for transmission"]
        pub type TxStR = crate::BitReader;
        #[doc = "Field `TX_ST` writer - Correct Transfer for transmission"]
        pub type TxStW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_KCTL` reader - Endpoint kind"]
        pub type EpKctlR = crate::BitReader;
        #[doc = "Field `EP_KCTL` writer - Endpoint kind"]
        pub type EpKctlW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_CTL` reader - Endpoint type"]
        pub type EpCtlR = crate::FieldReader;
        #[doc = "Field `EP_CTL` writer - Endpoint type"]
        pub type EpCtlW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `SETUP` reader - Setup transaction completed"]
        pub type SetupR = crate::BitReader;
        #[doc = "Field `SETUP` writer - Setup transaction completed"]
        pub type SetupW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_STA` reader - Status bits, for reception transfers"]
        pub type RxStaR = crate::FieldReader;
        #[doc = "Field `RX_STA` writer - Status bits, for reception transfers"]
        pub type RxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `RX_DTG` reader - Data Toggle, for reception transfers"]
        pub type RxDtgR = crate::BitReader;
        #[doc = "Field `RX_DTG` writer - Data Toggle, for reception transfers"]
        pub type RxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_ST` reader - Correct transfer for reception"]
        pub type RxStR = crate::BitReader;
        #[doc = "Field `RX_ST` writer - Correct transfer for reception"]
        pub type RxStW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ep_addr(&self) -> EpAddrR {
                EpAddrR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn tx_sta(&self) -> TxStaR {
                TxStaR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn tx_dtg(&self) -> TxDtgR {
                TxDtgR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn tx_st(&self) -> TxStR {
                TxStR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kctl(&self) -> EpKctlR {
                EpKctlR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_ctl(&self) -> EpCtlR {
                EpCtlR::new(((self.bits >> 9) & 3) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SetupR {
                SetupR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn rx_sta(&self) -> RxStaR {
                RxStaR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn rx_dtg(&self) -> RxDtgR {
                RxDtgR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn rx_st(&self) -> RxStR {
                RxStR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            #[must_use]
            pub fn ep_addr(&mut self) -> EpAddrW<Ep5csSpec> {
                EpAddrW::new(self, 0)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_sta(&mut self) -> TxStaW<Ep5csSpec> {
                TxStaW::new(self, 4)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_dtg(&mut self) -> TxDtgW<Ep5csSpec> {
                TxDtgW::new(self, 6)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            #[must_use]
            pub fn tx_st(&mut self) -> TxStW<Ep5csSpec> {
                TxStW::new(self, 7)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            #[must_use]
            pub fn ep_kctl(&mut self) -> EpKctlW<Ep5csSpec> {
                EpKctlW::new(self, 8)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            #[must_use]
            pub fn ep_ctl(&mut self) -> EpCtlW<Ep5csSpec> {
                EpCtlW::new(self, 9)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            #[must_use]
            pub fn setup(&mut self) -> SetupW<Ep5csSpec> {
                SetupW::new(self, 11)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_sta(&mut self) -> RxStaW<Ep5csSpec> {
                RxStaW::new(self, 12)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_dtg(&mut self) -> RxDtgW<Ep5csSpec> {
                RxDtgW::new(self, 14)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            #[must_use]
            pub fn rx_st(&mut self) -> RxStW<Ep5csSpec> {
                RxStW::new(self, 15)
            }
        }
        #[doc = "endpoint 5 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep5cs::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep5cs::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ep5csSpec;
        impl crate::RegisterSpec for Ep5csSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ep5cs::R`](R) reader structure"]
        impl crate::Readable for Ep5csSpec {}
        #[doc = "`write(|w| ..)` method takes [`ep5cs::W`](W) writer structure"]
        impl crate::Writable for Ep5csSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EP5CS to value 0"]
        impl crate::Resettable for Ep5csSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "EP6CS (rw) register accessor: endpoint 6 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep6cs::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep6cs::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep6cs`]
module"]
    #[doc(alias = "EP6CS")]
    pub type Ep6cs = crate::Reg<ep6cs::Ep6csSpec>;
    #[doc = "endpoint 6 register"]
    pub mod ep6cs {
        #[doc = "Register `EP6CS` reader"]
        pub type R = crate::R<Ep6csSpec>;
        #[doc = "Register `EP6CS` writer"]
        pub type W = crate::W<Ep6csSpec>;
        #[doc = "Field `EP_ADDR` reader - Endpoint address"]
        pub type EpAddrR = crate::FieldReader;
        #[doc = "Field `EP_ADDR` writer - Endpoint address"]
        pub type EpAddrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `TX_STA` reader - Status bits, for transmission transfers"]
        pub type TxStaR = crate::FieldReader;
        #[doc = "Field `TX_STA` writer - Status bits, for transmission transfers"]
        pub type TxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `TX_DTG` reader - Data Toggle, for transmission transfers"]
        pub type TxDtgR = crate::BitReader;
        #[doc = "Field `TX_DTG` writer - Data Toggle, for transmission transfers"]
        pub type TxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TX_ST` reader - Correct Transfer for transmission"]
        pub type TxStR = crate::BitReader;
        #[doc = "Field `TX_ST` writer - Correct Transfer for transmission"]
        pub type TxStW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_KCTL` reader - Endpoint kind"]
        pub type EpKctlR = crate::BitReader;
        #[doc = "Field `EP_KCTL` writer - Endpoint kind"]
        pub type EpKctlW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_CTL` reader - Endpoint type"]
        pub type EpCtlR = crate::FieldReader;
        #[doc = "Field `EP_CTL` writer - Endpoint type"]
        pub type EpCtlW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `SETUP` reader - Setup transaction completed"]
        pub type SetupR = crate::BitReader;
        #[doc = "Field `SETUP` writer - Setup transaction completed"]
        pub type SetupW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_STA` reader - Status bits, for reception transfers"]
        pub type RxStaR = crate::FieldReader;
        #[doc = "Field `RX_STA` writer - Status bits, for reception transfers"]
        pub type RxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `RX_DTG` reader - Data Toggle, for reception transfers"]
        pub type RxDtgR = crate::BitReader;
        #[doc = "Field `RX_DTG` writer - Data Toggle, for reception transfers"]
        pub type RxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_ST` reader - Correct transfer for reception"]
        pub type RxStR = crate::BitReader;
        #[doc = "Field `RX_ST` writer - Correct transfer for reception"]
        pub type RxStW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ep_addr(&self) -> EpAddrR {
                EpAddrR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn tx_sta(&self) -> TxStaR {
                TxStaR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn tx_dtg(&self) -> TxDtgR {
                TxDtgR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn tx_st(&self) -> TxStR {
                TxStR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kctl(&self) -> EpKctlR {
                EpKctlR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_ctl(&self) -> EpCtlR {
                EpCtlR::new(((self.bits >> 9) & 3) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SetupR {
                SetupR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn rx_sta(&self) -> RxStaR {
                RxStaR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn rx_dtg(&self) -> RxDtgR {
                RxDtgR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn rx_st(&self) -> RxStR {
                RxStR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            #[must_use]
            pub fn ep_addr(&mut self) -> EpAddrW<Ep6csSpec> {
                EpAddrW::new(self, 0)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_sta(&mut self) -> TxStaW<Ep6csSpec> {
                TxStaW::new(self, 4)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_dtg(&mut self) -> TxDtgW<Ep6csSpec> {
                TxDtgW::new(self, 6)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            #[must_use]
            pub fn tx_st(&mut self) -> TxStW<Ep6csSpec> {
                TxStW::new(self, 7)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            #[must_use]
            pub fn ep_kctl(&mut self) -> EpKctlW<Ep6csSpec> {
                EpKctlW::new(self, 8)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            #[must_use]
            pub fn ep_ctl(&mut self) -> EpCtlW<Ep6csSpec> {
                EpCtlW::new(self, 9)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            #[must_use]
            pub fn setup(&mut self) -> SetupW<Ep6csSpec> {
                SetupW::new(self, 11)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_sta(&mut self) -> RxStaW<Ep6csSpec> {
                RxStaW::new(self, 12)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_dtg(&mut self) -> RxDtgW<Ep6csSpec> {
                RxDtgW::new(self, 14)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            #[must_use]
            pub fn rx_st(&mut self) -> RxStW<Ep6csSpec> {
                RxStW::new(self, 15)
            }
        }
        #[doc = "endpoint 6 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep6cs::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep6cs::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ep6csSpec;
        impl crate::RegisterSpec for Ep6csSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ep6cs::R`](R) reader structure"]
        impl crate::Readable for Ep6csSpec {}
        #[doc = "`write(|w| ..)` method takes [`ep6cs::W`](W) writer structure"]
        impl crate::Writable for Ep6csSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EP6CS to value 0"]
        impl crate::Resettable for Ep6csSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "EP7CS (rw) register accessor: endpoint 7 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep7cs::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep7cs::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ep7cs`]
module"]
    #[doc(alias = "EP7CS")]
    pub type Ep7cs = crate::Reg<ep7cs::Ep7csSpec>;
    #[doc = "endpoint 7 register"]
    pub mod ep7cs {
        #[doc = "Register `EP7CS` reader"]
        pub type R = crate::R<Ep7csSpec>;
        #[doc = "Register `EP7CS` writer"]
        pub type W = crate::W<Ep7csSpec>;
        #[doc = "Field `EP_ADDR` reader - Endpoint address"]
        pub type EpAddrR = crate::FieldReader;
        #[doc = "Field `EP_ADDR` writer - Endpoint address"]
        pub type EpAddrW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
        #[doc = "Field `TX_STA` reader - Status bits, for transmission transfers"]
        pub type TxStaR = crate::FieldReader;
        #[doc = "Field `TX_STA` writer - Status bits, for transmission transfers"]
        pub type TxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `TX_DTG` reader - Data Toggle, for transmission transfers"]
        pub type TxDtgR = crate::BitReader;
        #[doc = "Field `TX_DTG` writer - Data Toggle, for transmission transfers"]
        pub type TxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `TX_ST` reader - Correct Transfer for transmission"]
        pub type TxStR = crate::BitReader;
        #[doc = "Field `TX_ST` writer - Correct Transfer for transmission"]
        pub type TxStW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_KCTL` reader - Endpoint kind"]
        pub type EpKctlR = crate::BitReader;
        #[doc = "Field `EP_KCTL` writer - Endpoint kind"]
        pub type EpKctlW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `EP_CTL` reader - Endpoint type"]
        pub type EpCtlR = crate::FieldReader;
        #[doc = "Field `EP_CTL` writer - Endpoint type"]
        pub type EpCtlW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `SETUP` reader - Setup transaction completed"]
        pub type SetupR = crate::BitReader;
        #[doc = "Field `SETUP` writer - Setup transaction completed"]
        pub type SetupW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_STA` reader - Status bits, for reception transfers"]
        pub type RxStaR = crate::FieldReader;
        #[doc = "Field `RX_STA` writer - Status bits, for reception transfers"]
        pub type RxStaW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `RX_DTG` reader - Data Toggle, for reception transfers"]
        pub type RxDtgR = crate::BitReader;
        #[doc = "Field `RX_DTG` writer - Data Toggle, for reception transfers"]
        pub type RxDtgW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RX_ST` reader - Correct transfer for reception"]
        pub type RxStR = crate::BitReader;
        #[doc = "Field `RX_ST` writer - Correct transfer for reception"]
        pub type RxStW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            pub fn ep_addr(&self) -> EpAddrR {
                EpAddrR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            pub fn tx_sta(&self) -> TxStaR {
                TxStaR::new(((self.bits >> 4) & 3) as u8)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            pub fn tx_dtg(&self) -> TxDtgR {
                TxDtgR::new(((self.bits >> 6) & 1) != 0)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            pub fn tx_st(&self) -> TxStR {
                TxStR::new(((self.bits >> 7) & 1) != 0)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            pub fn ep_kctl(&self) -> EpKctlR {
                EpKctlR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            pub fn ep_ctl(&self) -> EpCtlR {
                EpCtlR::new(((self.bits >> 9) & 3) as u8)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            pub fn setup(&self) -> SetupR {
                SetupR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            pub fn rx_sta(&self) -> RxStaR {
                RxStaR::new(((self.bits >> 12) & 3) as u8)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            pub fn rx_dtg(&self) -> RxDtgR {
                RxDtgR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            pub fn rx_st(&self) -> RxStR {
                RxStR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:3 - Endpoint address"]
            #[inline(always)]
            #[must_use]
            pub fn ep_addr(&mut self) -> EpAddrW<Ep7csSpec> {
                EpAddrW::new(self, 0)
            }
            #[doc = "Bits 4:5 - Status bits, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_sta(&mut self) -> TxStaW<Ep7csSpec> {
                TxStaW::new(self, 4)
            }
            #[doc = "Bit 6 - Data Toggle, for transmission transfers"]
            #[inline(always)]
            #[must_use]
            pub fn tx_dtg(&mut self) -> TxDtgW<Ep7csSpec> {
                TxDtgW::new(self, 6)
            }
            #[doc = "Bit 7 - Correct Transfer for transmission"]
            #[inline(always)]
            #[must_use]
            pub fn tx_st(&mut self) -> TxStW<Ep7csSpec> {
                TxStW::new(self, 7)
            }
            #[doc = "Bit 8 - Endpoint kind"]
            #[inline(always)]
            #[must_use]
            pub fn ep_kctl(&mut self) -> EpKctlW<Ep7csSpec> {
                EpKctlW::new(self, 8)
            }
            #[doc = "Bits 9:10 - Endpoint type"]
            #[inline(always)]
            #[must_use]
            pub fn ep_ctl(&mut self) -> EpCtlW<Ep7csSpec> {
                EpCtlW::new(self, 9)
            }
            #[doc = "Bit 11 - Setup transaction completed"]
            #[inline(always)]
            #[must_use]
            pub fn setup(&mut self) -> SetupW<Ep7csSpec> {
                SetupW::new(self, 11)
            }
            #[doc = "Bits 12:13 - Status bits, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_sta(&mut self) -> RxStaW<Ep7csSpec> {
                RxStaW::new(self, 12)
            }
            #[doc = "Bit 14 - Data Toggle, for reception transfers"]
            #[inline(always)]
            #[must_use]
            pub fn rx_dtg(&mut self) -> RxDtgW<Ep7csSpec> {
                RxDtgW::new(self, 14)
            }
            #[doc = "Bit 15 - Correct transfer for reception"]
            #[inline(always)]
            #[must_use]
            pub fn rx_st(&mut self) -> RxStW<Ep7csSpec> {
                RxStW::new(self, 15)
            }
        }
        #[doc = "endpoint 7 register\n\nYou can [`read`](crate::Reg::read) this register and get [`ep7cs::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ep7cs::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct Ep7csSpec;
        impl crate::RegisterSpec for Ep7csSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ep7cs::R`](R) reader structure"]
        impl crate::Readable for Ep7csSpec {}
        #[doc = "`write(|w| ..)` method takes [`ep7cs::W`](W) writer structure"]
        impl crate::Writable for Ep7csSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets EP7CS to value 0"]
        impl crate::Resettable for Ep7csSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "CTL (rw) register accessor: control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl`]
module"]
    #[doc(alias = "CTL")]
    pub type Ctl = crate::Reg<ctl::CtlSpec>;
    #[doc = "control register"]
    pub mod ctl {
        #[doc = "Register `CTL` reader"]
        pub type R = crate::R<CtlSpec>;
        #[doc = "Register `CTL` writer"]
        pub type W = crate::W<CtlSpec>;
        #[doc = "Field `SETRST` reader - Set reset"]
        pub type SetrstR = crate::BitReader;
        #[doc = "Field `SETRST` writer - Set reset"]
        pub type SetrstW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `CLOSE` reader - Close state"]
        pub type CloseR = crate::BitReader;
        #[doc = "Field `CLOSE` writer - Close state"]
        pub type CloseW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `LOWM` reader - Low-power mode"]
        pub type LowmR = crate::BitReader;
        #[doc = "Field `LOWM` writer - Low-power mode"]
        pub type LowmW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SETSPS` reader - Set suspend"]
        pub type SetspsR = crate::BitReader;
        #[doc = "Field `SETSPS` writer - Set suspend"]
        pub type SetspsW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RSREQ` reader - Resume request"]
        pub type RsreqR = crate::BitReader;
        #[doc = "Field `RSREQ` writer - Resume request"]
        pub type RsreqW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ESOFIE` reader - Expected start of frame interrupt enable"]
        pub type EsofieR = crate::BitReader;
        #[doc = "Field `ESOFIE` writer - Expected start of frame interrupt enable"]
        pub type EsofieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SOFIE` reader - Start of frame interrupt mask"]
        pub type SofieR = crate::BitReader;
        #[doc = "Field `SOFIE` writer - Start of frame interrupt mask"]
        pub type SofieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RSTIE` reader - USB reset interrupt mask"]
        pub type RstieR = crate::BitReader;
        #[doc = "Field `RSTIE` writer - USB reset interrupt mask"]
        pub type RstieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SPSIE` reader - Suspend mode interrupt mask"]
        pub type SpsieR = crate::BitReader;
        #[doc = "Field `SPSIE` writer - Suspend mode interrupt mask"]
        pub type SpsieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WKUPIE` reader - Wakeup interrupt enable"]
        pub type WkupieR = crate::BitReader;
        #[doc = "Field `WKUPIE` writer - Wakeup interrupt enable"]
        pub type WkupieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIE` reader - Error interrupt mask"]
        pub type ErrieR = crate::BitReader;
        #[doc = "Field `ERRIE` writer - Error interrupt mask"]
        pub type ErrieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PMOUIE` reader - Packet memory area over / underrun interrupt enable"]
        pub type PmouieR = crate::BitReader;
        #[doc = "Field `PMOUIE` writer - Packet memory area over / underrun interrupt enable"]
        pub type PmouieW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STIE` reader - Successful transfer interrupt enable"]
        pub type StieR = crate::BitReader;
        #[doc = "Field `STIE` writer - Successful transfer interrupt enable"]
        pub type StieW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Set reset"]
            #[inline(always)]
            pub fn setrst(&self) -> SetrstR {
                SetrstR::new((self.bits & 1) != 0)
            }
            #[doc = "Bit 1 - Close state"]
            #[inline(always)]
            pub fn close(&self) -> CloseR {
                CloseR::new(((self.bits >> 1) & 1) != 0)
            }
            #[doc = "Bit 2 - Low-power mode"]
            #[inline(always)]
            pub fn lowm(&self) -> LowmR {
                LowmR::new(((self.bits >> 2) & 1) != 0)
            }
            #[doc = "Bit 3 - Set suspend"]
            #[inline(always)]
            pub fn setsps(&self) -> SetspsR {
                SetspsR::new(((self.bits >> 3) & 1) != 0)
            }
            #[doc = "Bit 4 - Resume request"]
            #[inline(always)]
            pub fn rsreq(&self) -> RsreqR {
                RsreqR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 8 - Expected start of frame interrupt enable"]
            #[inline(always)]
            pub fn esofie(&self) -> EsofieR {
                EsofieR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - Start of frame interrupt mask"]
            #[inline(always)]
            pub fn sofie(&self) -> SofieR {
                SofieR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - USB reset interrupt mask"]
            #[inline(always)]
            pub fn rstie(&self) -> RstieR {
                RstieR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Suspend mode interrupt mask"]
            #[inline(always)]
            pub fn spsie(&self) -> SpsieR {
                SpsieR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Wakeup interrupt enable"]
            #[inline(always)]
            pub fn wkupie(&self) -> WkupieR {
                WkupieR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Error interrupt mask"]
            #[inline(always)]
            pub fn errie(&self) -> ErrieR {
                ErrieR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Packet memory area over / underrun interrupt enable"]
            #[inline(always)]
            pub fn pmouie(&self) -> PmouieR {
                PmouieR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Successful transfer interrupt enable"]
            #[inline(always)]
            pub fn stie(&self) -> StieR {
                StieR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Set reset"]
            #[inline(always)]
            #[must_use]
            pub fn setrst(&mut self) -> SetrstW<CtlSpec> {
                SetrstW::new(self, 0)
            }
            #[doc = "Bit 1 - Close state"]
            #[inline(always)]
            #[must_use]
            pub fn close(&mut self) -> CloseW<CtlSpec> {
                CloseW::new(self, 1)
            }
            #[doc = "Bit 2 - Low-power mode"]
            #[inline(always)]
            #[must_use]
            pub fn lowm(&mut self) -> LowmW<CtlSpec> {
                LowmW::new(self, 2)
            }
            #[doc = "Bit 3 - Set suspend"]
            #[inline(always)]
            #[must_use]
            pub fn setsps(&mut self) -> SetspsW<CtlSpec> {
                SetspsW::new(self, 3)
            }
            #[doc = "Bit 4 - Resume request"]
            #[inline(always)]
            #[must_use]
            pub fn rsreq(&mut self) -> RsreqW<CtlSpec> {
                RsreqW::new(self, 4)
            }
            #[doc = "Bit 8 - Expected start of frame interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn esofie(&mut self) -> EsofieW<CtlSpec> {
                EsofieW::new(self, 8)
            }
            #[doc = "Bit 9 - Start of frame interrupt mask"]
            #[inline(always)]
            #[must_use]
            pub fn sofie(&mut self) -> SofieW<CtlSpec> {
                SofieW::new(self, 9)
            }
            #[doc = "Bit 10 - USB reset interrupt mask"]
            #[inline(always)]
            #[must_use]
            pub fn rstie(&mut self) -> RstieW<CtlSpec> {
                RstieW::new(self, 10)
            }
            #[doc = "Bit 11 - Suspend mode interrupt mask"]
            #[inline(always)]
            #[must_use]
            pub fn spsie(&mut self) -> SpsieW<CtlSpec> {
                SpsieW::new(self, 11)
            }
            #[doc = "Bit 12 - Wakeup interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn wkupie(&mut self) -> WkupieW<CtlSpec> {
                WkupieW::new(self, 12)
            }
            #[doc = "Bit 13 - Error interrupt mask"]
            #[inline(always)]
            #[must_use]
            pub fn errie(&mut self) -> ErrieW<CtlSpec> {
                ErrieW::new(self, 13)
            }
            #[doc = "Bit 14 - Packet memory area over / underrun interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn pmouie(&mut self) -> PmouieW<CtlSpec> {
                PmouieW::new(self, 14)
            }
            #[doc = "Bit 15 - Successful transfer interrupt enable"]
            #[inline(always)]
            #[must_use]
            pub fn stie(&mut self) -> StieW<CtlSpec> {
                StieW::new(self, 15)
            }
        }
        #[doc = "control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CtlSpec;
        impl crate::RegisterSpec for CtlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl::R`](R) reader structure"]
        impl crate::Readable for CtlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ctl::W`](W) writer structure"]
        impl crate::Writable for CtlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL to value 0x03"]
        impl crate::Resettable for CtlSpec {
            const RESET_VALUE: u32 = 0x03;
        }
    }
    #[doc = "INTF (rw) register accessor: interrupt flag register\n\nYou can [`read`](crate::Reg::read) this register and get [`intf::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intf::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@intf`]
module"]
    #[doc(alias = "INTF")]
    pub type Intf = crate::Reg<intf::IntfSpec>;
    #[doc = "interrupt flag register"]
    pub mod intf {
        #[doc = "Register `INTF` reader"]
        pub type R = crate::R<IntfSpec>;
        #[doc = "Register `INTF` writer"]
        pub type W = crate::W<IntfSpec>;
        #[doc = "Field `EPNUM` reader - Endpoint Identifier"]
        pub type EpnumR = crate::FieldReader;
        #[doc = "Field `DIR` reader - Direction of transaction"]
        pub type DirR = crate::BitReader;
        #[doc = "Field `ESOFIF` reader - Expected start of frame interrupt flag"]
        pub type EsofifR = crate::BitReader;
        #[doc = "Field `ESOFIF` writer - Expected start of frame interrupt flag"]
        pub type EsofifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SOFIF` reader - start of frame interrupt flag"]
        pub type SofifR = crate::BitReader;
        #[doc = "Field `SOFIF` writer - start of frame interrupt flag"]
        pub type SofifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `RSTIF` reader - reset interrupt flag"]
        pub type RstifR = crate::BitReader;
        #[doc = "Field `RSTIF` writer - reset interrupt flag"]
        pub type RstifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `SPSIF` reader - Suspend mode interrupt flag"]
        pub type SpsifR = crate::BitReader;
        #[doc = "Field `SPSIF` writer - Suspend mode interrupt flag"]
        pub type SpsifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `WKUPIF` reader - Wakeup interrupt flag"]
        pub type WkupifR = crate::BitReader;
        #[doc = "Field `WKUPIF` writer - Wakeup interrupt flag"]
        pub type WkupifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `ERRIF` reader - Error interrupt flag"]
        pub type ErrifR = crate::BitReader;
        #[doc = "Field `ERRIF` writer - Error interrupt flag"]
        pub type ErrifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `PMOUIF` reader - Packet memory area over / underrun interrupt flag"]
        pub type PmouifR = crate::BitReader;
        #[doc = "Field `PMOUIF` writer - Packet memory area over / underrun interrupt flag"]
        pub type PmouifW<'a, REG> = crate::BitWriter<'a, REG>;
        #[doc = "Field `STIF` reader - Successful transfer interrupt flag"]
        pub type StifR = crate::BitReader;
        impl R {
            #[doc = "Bits 0:3 - Endpoint Identifier"]
            #[inline(always)]
            pub fn epnum(&self) -> EpnumR {
                EpnumR::new((self.bits & 0x0f) as u8)
            }
            #[doc = "Bit 4 - Direction of transaction"]
            #[inline(always)]
            pub fn dir(&self) -> DirR {
                DirR::new(((self.bits >> 4) & 1) != 0)
            }
            #[doc = "Bit 8 - Expected start of frame interrupt flag"]
            #[inline(always)]
            pub fn esofif(&self) -> EsofifR {
                EsofifR::new(((self.bits >> 8) & 1) != 0)
            }
            #[doc = "Bit 9 - start of frame interrupt flag"]
            #[inline(always)]
            pub fn sofif(&self) -> SofifR {
                SofifR::new(((self.bits >> 9) & 1) != 0)
            }
            #[doc = "Bit 10 - reset interrupt flag"]
            #[inline(always)]
            pub fn rstif(&self) -> RstifR {
                RstifR::new(((self.bits >> 10) & 1) != 0)
            }
            #[doc = "Bit 11 - Suspend mode interrupt flag"]
            #[inline(always)]
            pub fn spsif(&self) -> SpsifR {
                SpsifR::new(((self.bits >> 11) & 1) != 0)
            }
            #[doc = "Bit 12 - Wakeup interrupt flag"]
            #[inline(always)]
            pub fn wkupif(&self) -> WkupifR {
                WkupifR::new(((self.bits >> 12) & 1) != 0)
            }
            #[doc = "Bit 13 - Error interrupt flag"]
            #[inline(always)]
            pub fn errif(&self) -> ErrifR {
                ErrifR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Packet memory area over / underrun interrupt flag"]
            #[inline(always)]
            pub fn pmouif(&self) -> PmouifR {
                PmouifR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Successful transfer interrupt flag"]
            #[inline(always)]
            pub fn stif(&self) -> StifR {
                StifR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 8 - Expected start of frame interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn esofif(&mut self) -> EsofifW<IntfSpec> {
                EsofifW::new(self, 8)
            }
            #[doc = "Bit 9 - start of frame interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn sofif(&mut self) -> SofifW<IntfSpec> {
                SofifW::new(self, 9)
            }
            #[doc = "Bit 10 - reset interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn rstif(&mut self) -> RstifW<IntfSpec> {
                RstifW::new(self, 10)
            }
            #[doc = "Bit 11 - Suspend mode interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn spsif(&mut self) -> SpsifW<IntfSpec> {
                SpsifW::new(self, 11)
            }
            #[doc = "Bit 12 - Wakeup interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn wkupif(&mut self) -> WkupifW<IntfSpec> {
                WkupifW::new(self, 12)
            }
            #[doc = "Bit 13 - Error interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn errif(&mut self) -> ErrifW<IntfSpec> {
                ErrifW::new(self, 13)
            }
            #[doc = "Bit 14 - Packet memory area over / underrun interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn pmouif(&mut self) -> PmouifW<IntfSpec> {
                PmouifW::new(self, 14)
            }
        }
        #[doc = "interrupt flag register\n\nYou can [`read`](crate::Reg::read) this register and get [`intf::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`intf::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct IntfSpec;
        impl crate::RegisterSpec for IntfSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`intf::R`](R) reader structure"]
        impl crate::Readable for IntfSpec {}
        #[doc = "`write(|w| ..)` method takes [`intf::W`](W) writer structure"]
        impl crate::Writable for IntfSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets INTF to value 0"]
        impl crate::Resettable for IntfSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "STAT (r) register accessor: Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`]. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat`]
module"]
    #[doc(alias = "STAT")]
    pub type Stat = crate::Reg<stat::StatSpec>;
    #[doc = "Status register"]
    pub mod stat {
        #[doc = "Register `STAT` reader"]
        pub type R = crate::R<StatSpec>;
        #[doc = "Field `FCNT` reader - Frame number counter"]
        pub type FcntR = crate::FieldReader<u16>;
        #[doc = "Field `SOFLN` reader - Lost SOF number"]
        pub type SoflnR = crate::FieldReader;
        #[doc = "Field `LOCK` reader - Locked the USB"]
        pub type LockR = crate::BitReader;
        #[doc = "Field `RX_DM` reader - Receive data - line status"]
        pub type RxDmR = crate::BitReader;
        #[doc = "Field `RX_DP` reader - Receive data + line status"]
        pub type RxDpR = crate::BitReader;
        impl R {
            #[doc = "Bits 0:10 - Frame number counter"]
            #[inline(always)]
            pub fn fcnt(&self) -> FcntR {
                FcntR::new((self.bits & 0x07ff) as u16)
            }
            #[doc = "Bits 11:12 - Lost SOF number"]
            #[inline(always)]
            pub fn sofln(&self) -> SoflnR {
                SoflnR::new(((self.bits >> 11) & 3) as u8)
            }
            #[doc = "Bit 13 - Locked the USB"]
            #[inline(always)]
            pub fn lock(&self) -> LockR {
                LockR::new(((self.bits >> 13) & 1) != 0)
            }
            #[doc = "Bit 14 - Receive data - line status"]
            #[inline(always)]
            pub fn rx_dm(&self) -> RxDmR {
                RxDmR::new(((self.bits >> 14) & 1) != 0)
            }
            #[doc = "Bit 15 - Receive data + line status"]
            #[inline(always)]
            pub fn rx_dp(&self) -> RxDpR {
                RxDpR::new(((self.bits >> 15) & 1) != 0)
            }
        }
        #[doc = "Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`](R). See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct StatSpec;
        impl crate::RegisterSpec for StatSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat::R`](R) reader structure"]
        impl crate::Readable for StatSpec {}
        #[doc = "`reset()` method sets STAT to value 0"]
        impl crate::Resettable for StatSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "DADDR (rw) register accessor: device address register\n\nYou can [`read`](crate::Reg::read) this register and get [`daddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`daddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@daddr`]
module"]
    #[doc(alias = "DADDR")]
    pub type Daddr = crate::Reg<daddr::DaddrSpec>;
    #[doc = "device address register"]
    pub mod daddr {
        #[doc = "Register `DADDR` reader"]
        pub type R = crate::R<DaddrSpec>;
        #[doc = "Register `DADDR` writer"]
        pub type W = crate::W<DaddrSpec>;
        #[doc = "Field `USBDAR` reader - Device address"]
        pub type UsbdarR = crate::FieldReader;
        #[doc = "Field `USBDAR` writer - Device address"]
        pub type UsbdarW<'a, REG> = crate::FieldWriter<'a, REG, 7>;
        #[doc = "Field `USBEN` reader - USB device enable"]
        pub type UsbenR = crate::BitReader;
        #[doc = "Field `USBEN` writer - USB device enable"]
        pub type UsbenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:6 - Device address"]
            #[inline(always)]
            pub fn usbdar(&self) -> UsbdarR {
                UsbdarR::new((self.bits & 0x7f) as u8)
            }
            #[doc = "Bit 7 - USB device enable"]
            #[inline(always)]
            pub fn usben(&self) -> UsbenR {
                UsbenR::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - Device address"]
            #[inline(always)]
            #[must_use]
            pub fn usbdar(&mut self) -> UsbdarW<DaddrSpec> {
                UsbdarW::new(self, 0)
            }
            #[doc = "Bit 7 - USB device enable"]
            #[inline(always)]
            #[must_use]
            pub fn usben(&mut self) -> UsbenW<DaddrSpec> {
                UsbenW::new(self, 7)
            }
        }
        #[doc = "device address register\n\nYou can [`read`](crate::Reg::read) this register and get [`daddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`daddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct DaddrSpec;
        impl crate::RegisterSpec for DaddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`daddr::R`](R) reader structure"]
        impl crate::Readable for DaddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`daddr::W`](W) writer structure"]
        impl crate::Writable for DaddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets DADDR to value 0"]
        impl crate::Resettable for DaddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
    #[doc = "BADDR (rw) register accessor: Buffer address register\n\nYou can [`read`](crate::Reg::read) this register and get [`baddr::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`baddr::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@baddr`]
module"]
    #[doc(alias = "BADDR")]
    pub type Baddr = crate::Reg<baddr::BaddrSpec>;
    #[doc = "Buffer address register"]
    pub mod baddr {
        #[doc = "Register `BADDR` reader"]
        pub type R = crate::R<BaddrSpec>;
        #[doc = "Register `BADDR` writer"]
        pub type W = crate::W<BaddrSpec>;
        #[doc = "Field `BAR` reader - Buffer address"]
        pub type BarR = crate::FieldReader<u16>;
        #[doc = "Field `BAR` writer - Buffer address"]
        pub type BarW<'a, REG> = crate::FieldWriter<'a, REG, 13, u16>;
        impl R {
            #[doc = "Bits 3:15 - Buffer address"]
            #[inline(always)]
            pub fn bar(&self) -> BarR {
                BarR::new(((self.bits >> 3) & 0x1fff) as u16)
            }
        }
        impl W {
            #[doc = "Bits 3:15 - Buffer address"]
            #[inline(always)]
            #[must_use]
            pub fn bar(&mut self) -> BarW<BaddrSpec> {
                BarW::new(self, 3)
            }
        }
        #[doc = "Buffer address register\n\nYou can [`read`](crate::Reg::read) this register and get [`baddr::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`baddr::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct BaddrSpec;
        impl crate::RegisterSpec for BaddrSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`baddr::R`](R) reader structure"]
        impl crate::Readable for BaddrSpec {}
        #[doc = "`write(|w| ..)` method takes [`baddr::W`](W) writer structure"]
        impl crate::Writable for BaddrSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets BADDR to value 0"]
        impl crate::Resettable for BaddrSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[doc = "Window watchdog timer"]
pub struct Wwdgt {
    _marker: PhantomData<*const ()>,
}
unsafe impl Send for Wwdgt {}
impl Wwdgt {
    #[doc = r"Pointer to the register block"]
    pub const PTR: *const wwdgt::RegisterBlock = 0x4000_2c00 as *const _;
    #[doc = r"Return the pointer to the register block"]
    #[inline(always)]
    pub const fn ptr() -> *const wwdgt::RegisterBlock {
        Self::PTR
    }
    #[doc = r" Steal an instance of this peripheral"]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Ensure that the new instance of the peripheral cannot be used in a way"]
    #[doc = r" that may race with any existing instances, for example by only"]
    #[doc = r" accessing read-only or write-only registers, or by consuming the"]
    #[doc = r" original peripheral and using critical sections to coordinate"]
    #[doc = r" access between multiple new instances."]
    #[doc = r""]
    #[doc = r" Additionally, other software such as HALs may rely on only one"]
    #[doc = r" peripheral instance existing to ensure memory safety; ensure"]
    #[doc = r" no stolen instances are passed to such software."]
    pub unsafe fn steal() -> Self {
        Self {
            _marker: PhantomData,
        }
    }
}
impl Deref for Wwdgt {
    type Target = wwdgt::RegisterBlock;
    #[inline(always)]
    fn deref(&self) -> &Self::Target {
        unsafe { &*Self::PTR }
    }
}
impl core::fmt::Debug for Wwdgt {
    fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
        f.debug_struct("Wwdgt").finish()
    }
}
#[doc = "Window watchdog timer"]
pub mod wwdgt {
    #[repr(C)]
    #[doc = "Register block"]
    pub struct RegisterBlock {
        ctl: Ctl,
        cfg: Cfg,
        stat: Stat,
    }
    impl RegisterBlock {
        #[doc = "0x00 - Control register"]
        #[inline(always)]
        pub const fn ctl(&self) -> &Ctl {
            &self.ctl
        }
        #[doc = "0x04 - Configuration register"]
        #[inline(always)]
        pub const fn cfg(&self) -> &Cfg {
            &self.cfg
        }
        #[doc = "0x08 - Status register"]
        #[inline(always)]
        pub const fn stat(&self) -> &Stat {
            &self.stat
        }
    }
    #[doc = "CTL (rw) register accessor: Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@ctl`]
module"]
    #[doc(alias = "CTL")]
    pub type Ctl = crate::Reg<ctl::CtlSpec>;
    #[doc = "Control register"]
    pub mod ctl {
        #[doc = "Register `CTL` reader"]
        pub type R = crate::R<CtlSpec>;
        #[doc = "Register `CTL` writer"]
        pub type W = crate::W<CtlSpec>;
        #[doc = "Field `CNT` reader - 7-bit counter"]
        pub type CntR = crate::FieldReader;
        #[doc = "Field `CNT` writer - 7-bit counter"]
        pub type CntW<'a, REG> = crate::FieldWriter<'a, REG, 7>;
        #[doc = "Field `WDGTEN` reader - Activation bit"]
        pub type WdgtenR = crate::BitReader;
        #[doc = "Field `WDGTEN` writer - Activation bit"]
        pub type WdgtenW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:6 - 7-bit counter"]
            #[inline(always)]
            pub fn cnt(&self) -> CntR {
                CntR::new((self.bits & 0x7f) as u8)
            }
            #[doc = "Bit 7 - Activation bit"]
            #[inline(always)]
            pub fn wdgten(&self) -> WdgtenR {
                WdgtenR::new(((self.bits >> 7) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - 7-bit counter"]
            #[inline(always)]
            #[must_use]
            pub fn cnt(&mut self) -> CntW<CtlSpec> {
                CntW::new(self, 0)
            }
            #[doc = "Bit 7 - Activation bit"]
            #[inline(always)]
            #[must_use]
            pub fn wdgten(&mut self) -> WdgtenW<CtlSpec> {
                WdgtenW::new(self, 7)
            }
        }
        #[doc = "Control register\n\nYou can [`read`](crate::Reg::read) this register and get [`ctl::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`ctl::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CtlSpec;
        impl crate::RegisterSpec for CtlSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`ctl::R`](R) reader structure"]
        impl crate::Readable for CtlSpec {}
        #[doc = "`write(|w| ..)` method takes [`ctl::W`](W) writer structure"]
        impl crate::Writable for CtlSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CTL to value 0x7f"]
        impl crate::Resettable for CtlSpec {
            const RESET_VALUE: u32 = 0x7f;
        }
    }
    #[doc = "CFG (rw) register accessor: Configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`cfg::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfg::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@cfg`]
module"]
    #[doc(alias = "CFG")]
    pub type Cfg = crate::Reg<cfg::CfgSpec>;
    #[doc = "Configuration register"]
    pub mod cfg {
        #[doc = "Register `CFG` reader"]
        pub type R = crate::R<CfgSpec>;
        #[doc = "Register `CFG` writer"]
        pub type W = crate::W<CfgSpec>;
        #[doc = "Field `WIN` reader - 7-bit window value"]
        pub type WinR = crate::FieldReader;
        #[doc = "Field `WIN` writer - 7-bit window value"]
        pub type WinW<'a, REG> = crate::FieldWriter<'a, REG, 7>;
        #[doc = "Field `PSC` reader - Prescaler"]
        pub type PscR = crate::FieldReader;
        #[doc = "Field `PSC` writer - Prescaler"]
        pub type PscW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
        #[doc = "Field `EWIE` reader - Early wakeup interrupt"]
        pub type EwieR = crate::BitReader;
        #[doc = "Field `EWIE` writer - Early wakeup interrupt"]
        pub type EwieW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bits 0:6 - 7-bit window value"]
            #[inline(always)]
            pub fn win(&self) -> WinR {
                WinR::new((self.bits & 0x7f) as u8)
            }
            #[doc = "Bits 7:8 - Prescaler"]
            #[inline(always)]
            pub fn psc(&self) -> PscR {
                PscR::new(((self.bits >> 7) & 3) as u8)
            }
            #[doc = "Bit 9 - Early wakeup interrupt"]
            #[inline(always)]
            pub fn ewie(&self) -> EwieR {
                EwieR::new(((self.bits >> 9) & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bits 0:6 - 7-bit window value"]
            #[inline(always)]
            #[must_use]
            pub fn win(&mut self) -> WinW<CfgSpec> {
                WinW::new(self, 0)
            }
            #[doc = "Bits 7:8 - Prescaler"]
            #[inline(always)]
            #[must_use]
            pub fn psc(&mut self) -> PscW<CfgSpec> {
                PscW::new(self, 7)
            }
            #[doc = "Bit 9 - Early wakeup interrupt"]
            #[inline(always)]
            #[must_use]
            pub fn ewie(&mut self) -> EwieW<CfgSpec> {
                EwieW::new(self, 9)
            }
        }
        #[doc = "Configuration register\n\nYou can [`read`](crate::Reg::read) this register and get [`cfg::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`cfg::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct CfgSpec;
        impl crate::RegisterSpec for CfgSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`cfg::R`](R) reader structure"]
        impl crate::Readable for CfgSpec {}
        #[doc = "`write(|w| ..)` method takes [`cfg::W`](W) writer structure"]
        impl crate::Writable for CfgSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets CFG to value 0x7f"]
        impl crate::Resettable for CfgSpec {
            const RESET_VALUE: u32 = 0x7f;
        }
    }
    #[doc = "STAT (rw) register accessor: Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`]. You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`]. You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@stat`]
module"]
    #[doc(alias = "STAT")]
    pub type Stat = crate::Reg<stat::StatSpec>;
    #[doc = "Status register"]
    pub mod stat {
        #[doc = "Register `STAT` reader"]
        pub type R = crate::R<StatSpec>;
        #[doc = "Register `STAT` writer"]
        pub type W = crate::W<StatSpec>;
        #[doc = "Field `EWIF` reader - Early wakeup interrupt flag"]
        pub type EwifR = crate::BitReader;
        #[doc = "Field `EWIF` writer - Early wakeup interrupt flag"]
        pub type EwifW<'a, REG> = crate::BitWriter<'a, REG>;
        impl R {
            #[doc = "Bit 0 - Early wakeup interrupt flag"]
            #[inline(always)]
            pub fn ewif(&self) -> EwifR {
                EwifR::new((self.bits & 1) != 0)
            }
        }
        impl W {
            #[doc = "Bit 0 - Early wakeup interrupt flag"]
            #[inline(always)]
            #[must_use]
            pub fn ewif(&mut self) -> EwifW<StatSpec> {
                EwifW::new(self, 0)
            }
        }
        #[doc = "Status register\n\nYou can [`read`](crate::Reg::read) this register and get [`stat::R`](R). You can [`reset`](crate::Reg::reset), [`write`](crate::Reg::write), [`write_with_zero`](crate::Reg::write_with_zero) this register using [`stat::W`](W). You can also [`modify`](crate::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
        pub struct StatSpec;
        impl crate::RegisterSpec for StatSpec {
            type Ux = u32;
        }
        #[doc = "`read()` method returns [`stat::R`](R) reader structure"]
        impl crate::Readable for StatSpec {}
        #[doc = "`write(|w| ..)` method takes [`stat::W`](W) writer structure"]
        impl crate::Writable for StatSpec {
            type Safety = crate::Unsafe;
            const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
            const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
        }
        #[doc = "`reset()` method sets STAT to value 0"]
        impl crate::Resettable for StatSpec {
            const RESET_VALUE: u32 = 0;
        }
    }
}
#[no_mangle]
static mut DEVICE_PERIPHERALS: bool = false;
#[doc = r" All the peripherals."]
#[allow(non_snake_case)]
pub struct Peripherals {
    #[doc = "ADC0"]
    pub adc0: Adc0,
    #[doc = "ADC1"]
    pub adc1: Adc1,
    #[doc = "ADC2"]
    pub adc2: Adc2,
    #[doc = "AFIO"]
    pub afio: Afio,
    #[doc = "BKP"]
    pub bkp: Bkp,
    #[doc = "CAN"]
    pub can: Can,
    #[doc = "CRC"]
    pub crc: Crc,
    #[doc = "DAC"]
    pub dac: Dac,
    #[doc = "DBG"]
    pub dbg: Dbg,
    #[doc = "DMA0"]
    pub dma0: Dma0,
    #[doc = "DMA1"]
    pub dma1: Dma1,
    #[doc = "EXMC"]
    pub exmc: Exmc,
    #[doc = "EXTI"]
    pub exti: Exti,
    #[doc = "FMC"]
    pub fmc: Fmc,
    #[doc = "FWDGT"]
    pub fwdgt: Fwdgt,
    #[doc = "GPIOA"]
    pub gpioa: Gpioa,
    #[doc = "GPIOB"]
    pub gpiob: Gpiob,
    #[doc = "GPIOC"]
    pub gpioc: Gpioc,
    #[doc = "GPIOD"]
    pub gpiod: Gpiod,
    #[doc = "GPIOE"]
    pub gpioe: Gpioe,
    #[doc = "GPIOF"]
    pub gpiof: Gpiof,
    #[doc = "GPIOG"]
    pub gpiog: Gpiog,
    #[doc = "I2C0"]
    pub i2c0: I2c0,
    #[doc = "I2C1"]
    pub i2c1: I2c1,
    #[doc = "PMU"]
    pub pmu: Pmu,
    #[doc = "RCU"]
    pub rcu: Rcu,
    #[doc = "RTC"]
    pub rtc: Rtc,
    #[doc = "SDIO"]
    pub sdio: Sdio,
    #[doc = "SPI0"]
    pub spi0: Spi0,
    #[doc = "SPI1"]
    pub spi1: Spi1,
    #[doc = "SPI2"]
    pub spi2: Spi2,
    #[doc = "TIMER0"]
    pub timer0: Timer0,
    #[doc = "TIMER1"]
    pub timer1: Timer1,
    #[doc = "TIMER2"]
    pub timer2: Timer2,
    #[doc = "TIMER3"]
    pub timer3: Timer3,
    #[doc = "TIMER4"]
    pub timer4: Timer4,
    #[doc = "TIMER5"]
    pub timer5: Timer5,
    #[doc = "TIMER6"]
    pub timer6: Timer6,
    #[doc = "TIMER7"]
    pub timer7: Timer7,
    #[doc = "USART0"]
    pub usart0: Usart0,
    #[doc = "USART1"]
    pub usart1: Usart1,
    #[doc = "USART2"]
    pub usart2: Usart2,
    #[doc = "UART3"]
    pub uart3: Uart3,
    #[doc = "UART4"]
    pub uart4: Uart4,
    #[doc = "USBD"]
    pub usbd: Usbd,
    #[doc = "WWDGT"]
    pub wwdgt: Wwdgt,
}
impl Peripherals {
    #[doc = r" Returns all the peripherals *once*."]
    #[cfg(feature = "critical-section")]
    #[inline]
    pub fn take() -> Option<Self> {
        critical_section::with(|_| {
            if unsafe { DEVICE_PERIPHERALS } {
                return None;
            }
            Some(unsafe { Peripherals::steal() })
        })
    }
    #[doc = r" Unchecked version of `Peripherals::take`."]
    #[doc = r""]
    #[doc = r" # Safety"]
    #[doc = r""]
    #[doc = r" Each of the returned peripherals must be used at most once."]
    #[inline]
    pub unsafe fn steal() -> Self {
        DEVICE_PERIPHERALS = true;
        Peripherals {
            adc0: Adc0::steal(),
            adc1: Adc1::steal(),
            adc2: Adc2::steal(),
            afio: Afio::steal(),
            bkp: Bkp::steal(),
            can: Can::steal(),
            crc: Crc::steal(),
            dac: Dac::steal(),
            dbg: Dbg::steal(),
            dma0: Dma0::steal(),
            dma1: Dma1::steal(),
            exmc: Exmc::steal(),
            exti: Exti::steal(),
            fmc: Fmc::steal(),
            fwdgt: Fwdgt::steal(),
            gpioa: Gpioa::steal(),
            gpiob: Gpiob::steal(),
            gpioc: Gpioc::steal(),
            gpiod: Gpiod::steal(),
            gpioe: Gpioe::steal(),
            gpiof: Gpiof::steal(),
            gpiog: Gpiog::steal(),
            i2c0: I2c0::steal(),
            i2c1: I2c1::steal(),
            pmu: Pmu::steal(),
            rcu: Rcu::steal(),
            rtc: Rtc::steal(),
            sdio: Sdio::steal(),
            spi0: Spi0::steal(),
            spi1: Spi1::steal(),
            spi2: Spi2::steal(),
            timer0: Timer0::steal(),
            timer1: Timer1::steal(),
            timer2: Timer2::steal(),
            timer3: Timer3::steal(),
            timer4: Timer4::steal(),
            timer5: Timer5::steal(),
            timer6: Timer6::steal(),
            timer7: Timer7::steal(),
            usart0: Usart0::steal(),
            usart1: Usart1::steal(),
            usart2: Usart2::steal(),
            uart3: Uart3::steal(),
            uart4: Uart4::steal(),
            usbd: Usbd::steal(),
            wwdgt: Wwdgt::steal(),
        }
    }
}
